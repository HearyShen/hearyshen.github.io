<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CentOS yum Error: Failed to download metadata for repo &#39;appstream&#39;问题解决</title>
      <link href="/posts/CentOS-yum-Error-Failed-to-download-metadata-for-repo-appstream-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/posts/CentOS-yum-Error-Failed-to-download-metadata-for-repo-appstream-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>本文介绍CentOS 8在使用<code>yum update</code>更新时，遭遇报错：Error:Failed to download metadata for repo 'appstream': Cannot prepareinternal mirrorlist: No URLs in mirrorlist 的解决方法。</p><span id="more"></span><h1id="centos-yum-error-failed-to-download-metadata-for-repo-appstream问题解决">CentOSyum Error: Failed to download metadata for repo 'appstream'问题解决</h1><h2 id="问题描述">1 问题描述</h2><p>在CentOS8中，执行<code>yum update</code>更新时，遭遇报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Failed to download metadata for repo &#x27;appstream&#x27;: Cannot prepare internal mirrorlist: No URLs in mirrorlist</span><br></pre></td></tr></table></figure><p>根据提示，显示mirror list中找不到可用的URL，导致无法获取appstreamrepo的元信息。</p><h2 id="解决方法">2 解决方法</h2><h3 id="相关资料中的解决方法">2.1 相关资料中的解决方法</h3><p>我查到的资料中，已有的解决方案是通过sed工具批量查询和替换<code>/etc/yum.repos.d/</code>中的软件仓库配置信息。</p><blockquote><p>引用自：https://www.cnblogs.com/EthanWong/p/15932675.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入yum.repos.d 目录下</span></span><br><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line"><span class="comment"># 修改源链接</span></span><br><span class="line">sed -i <span class="string">&#x27;s/mirrorlist/#mirrorlist/g&#x27;</span> /etc/yum.repos.d/CentOS-*</span><br><span class="line"><span class="comment"># 要将之前的mirror.centos.org 改成 vault.centos.org</span></span><br><span class="line">sed -i <span class="string">&#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27;</span> /etc/yum.repos.d/CentOS-*</span><br></pre></td></tr></table></figure></blockquote><p>上述文章指出，因为CentOs Linux 8 从 2021.10.31号后已经停止维护，所以之后更新镜像需要通过<code>vault.centos.org</code>来获取更新。相应的，文中给出的方案就是将<code>/etc/yum.repos.d/</code>中，各个软件仓库配置文件中的<code>mirrorlist</code>字段都注释掉，不采用镜像列表，而是启用<code>baseurl</code>去连接源站，且原站修改为<code>http://vault.centos.org</code>。</p><h3 id="本文的解决方法">2.2 本文的解决方法</h3><p>我认为上述修改软件配置的方案也许可行，但问题的实质是因为：RHEL修改了CentOS的开源方案，将CentOS改为CentOSStream的形式进行后续迭代。过去的CentOS与RHEL共享核心代码，只是RHEL额外具备一些增值软件和服务。目前的CentOSStream将作为RHEL的“开发版”，即：开发的新代码先发布到CentOSStream上进行验证，再合入RHEL。通过Fedora Linux, CentOSStream这依次两道试验阶段，再合入RHEL，以保障RHEL的高可靠。</p><blockquote><p><strong>CentOS Stream</strong></p><p>Continuously delivered distro that tracks just ahead of Red HatEnterprise Linux (RHEL) development, positioned as a midstream betweenFedora Linux and RHEL. For anyone interested in participating andcollaborating in the RHEL ecosystem, CentOS Stream is your reliableplatform for innovation.</p></blockquote><p>CentOS Linux 8因为这项变更，EOL被改为2021年底，因此2022年开始，CentOSLinux 8的mirrorlist下架，代码停止维护。</p><p>因此，该问题解决方法的最佳实践应当是根据官方文档，将已经EOL的CentOSLinux 8迁移到CentOS Stream8的发行分支上。（或采用其他Linux，如：Debian）。</p><blockquote><p>https://www.centos.org/centos-stream/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dnf --disablerepo <span class="string">&#x27;*&#x27;</span> --enablerepo extras swap centos-linux-repos centos-stream-repos</span><br><span class="line">dnf distro-sync</span><br></pre></td></tr></table></figure></blockquote><p>dnf是CentOS8默认的包管理器。按照上述命令，通过dnf重新配置软件repo并同步数据，即可迁移到CentOSStream发行分支上。</p><blockquote><p>DNF stands for <strong>Dandified YUM</strong> is a software packagemanager for RPM-based Linux distributions. It is used to install, updateand remove packages in the CentOS operating system. It is the defaultpackage manager of CentOS8.</p></blockquote><p>迁移后的CentOS Stream 8的EOL为May 31st, 2024。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> yum </tag>
            
            <tag> dnf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>slice.go - 理解Go的切片容器</title>
      <link href="/posts/slice-go-%E7%90%86%E8%A7%A3Go%E7%9A%84%E5%88%87%E7%89%87%E5%AE%B9%E5%99%A8/"/>
      <url>/posts/slice-go-%E7%90%86%E8%A7%A3Go%E7%9A%84%E5%88%87%E7%89%87%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>阅读Go源码，理解内置切片（slice）容器的数据结构与算法原理。</p><span id="more"></span><h1 id="slice.go---理解go的切片容器">slice.go - 理解Go的切片容器</h1><p>Slice的实现位于go.go，总共仅318行。</p><p>本文以目前Go源码最新的1.17.2版本为例。</p><h2 id="数据结构">数据结构</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">array unsafe.Pointer</span><br><span class="line"><span class="built_in">len</span>   <span class="type">int</span></span><br><span class="line"><span class="built_in">cap</span>   <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>slice的数据结构并不复杂，本质上是对array的一层封装，类似Java中的ArrayList。</p><p>slice底层数据由array存储，由len标记当前实际存储的元素数量，cap标记当前array指针指向的内存对象的元素容量。</p><h2 id="算法">算法</h2><h3 id="构造makeslice">构造（makeslice）</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeslice</span><span class="params">(et *_type, <span class="built_in">len</span>, <span class="built_in">cap</span> <span class="type">int</span>)</span></span> unsafe.Pointer &#123;</span><br><span class="line">mem, overflow := math.MulUintptr(et.size, <span class="type">uintptr</span>(<span class="built_in">cap</span>))</span><br><span class="line"><span class="keyword">if</span> overflow || mem &gt; maxAlloc || <span class="built_in">len</span> &lt; <span class="number">0</span> || <span class="built_in">len</span> &gt; <span class="built_in">cap</span> &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> Produce a &#x27;len out of range&#x27; error instead of a</span></span><br><span class="line"><span class="comment">// &#x27;cap out of range&#x27; error when someone does make([]T, bignumber).</span></span><br><span class="line"><span class="comment">// &#x27;cap out of range&#x27; is true too, but since the cap is only being</span></span><br><span class="line"><span class="comment">// supplied implicitly, saying len is clearer.</span></span><br><span class="line"><span class="comment">// See golang.org/issue/4085.</span></span><br><span class="line">mem, overflow := math.MulUintptr(et.size, <span class="type">uintptr</span>(<span class="built_in">len</span>))</span><br><span class="line"><span class="keyword">if</span> overflow || mem &gt; maxAlloc || <span class="built_in">len</span> &lt; <span class="number">0</span> &#123;</span><br><span class="line">panicmakeslicelen()</span><br><span class="line">&#125;</span><br><span class="line">panicmakeslicecap()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mallocgc(mem, et, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造过程输入et，即ElementType的缩写，用于记录slice中存储的元素类型、</p><p>首先，通过<code>math.MulUintptr</code>函数实现带溢出检测的uintptr类型乘法。</p><blockquote><p>https://pkg.go.dev/runtime/internal/math#MulUintptr</p><p>https://cs.opensource.google/go/go/+/go1.17.2:src/runtime/internal/math/math.go;l=13</p><p>math.MulUintptr函数的实现挺巧妙的，此处暂不深究</p></blockquote><p>随后，根据计算出的内存长度，通过mallocgc函数（位于go.go中，基于TCMalloc机制实现）分配相应的内存对象。</p><h3 id="扩容growslice">扩容（growslice）</h3><p>slice能够在append时自动扩容。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// growslice handles slice growth during append.</span></span><br><span class="line"><span class="comment">// It is passed the slice element type, the old slice, and the desired new minimum capacity,</span></span><br><span class="line"><span class="comment">// and it returns a new slice with at least that capacity, with the old data</span></span><br><span class="line"><span class="comment">// copied into it.</span></span><br><span class="line"><span class="comment">// The new slice&#x27;s length is set to the old slice&#x27;s length,</span></span><br><span class="line"><span class="comment">// NOT to the new requested capacity.</span></span><br><span class="line"><span class="comment">// This is for codegen convenience. The old slice&#x27;s length is used immediately</span></span><br><span class="line"><span class="comment">// to calculate where to write new values during an append.</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> When the old backend is gone, reconsider this decision.</span></span><br><span class="line"><span class="comment">// The SSA backend might prefer the new length or to return only ptr/cap and save stack space.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">growslice</span><span class="params">(et *_type, old slice, <span class="built_in">cap</span> <span class="type">int</span>)</span></span> slice &#123;</span><br><span class="line"><span class="keyword">if</span> raceenabled &#123;</span><br><span class="line">callerpc := getcallerpc()</span><br><span class="line">racereadrangepc(old.array, <span class="type">uintptr</span>(old.<span class="built_in">len</span>*<span class="type">int</span>(et.size)), callerpc, funcPC(growslice))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> msanenabled &#123;</span><br><span class="line">msanread(old.array, <span class="type">uintptr</span>(old.<span class="built_in">len</span>*<span class="type">int</span>(et.size)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">cap</span> &lt; old.<span class="built_in">cap</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(errorString(<span class="string">&quot;growslice: cap out of range&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> et.size == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// append should not create a slice with nil pointer but non-zero len.</span></span><br><span class="line"><span class="comment">// We assume that append doesn&#x27;t need to preserve old.array in this case.</span></span><br><span class="line"><span class="keyword">return</span> slice&#123;unsafe.Pointer(&amp;zerobase), old.<span class="built_in">len</span>, <span class="built_in">cap</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">newcap := old.<span class="built_in">cap</span></span><br><span class="line">doublecap := newcap + newcap</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">cap</span> &gt; doublecap &#123;</span><br><span class="line">newcap = <span class="built_in">cap</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> old.<span class="built_in">cap</span> &lt; <span class="number">1024</span> &#123;</span><br><span class="line">newcap = doublecap</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Check 0 &lt; newcap to detect overflow</span></span><br><span class="line"><span class="comment">// and prevent an infinite loop.</span></span><br><span class="line"><span class="keyword">for</span> <span class="number">0</span> &lt; newcap &amp;&amp; newcap &lt; <span class="built_in">cap</span> &#123;</span><br><span class="line">newcap += newcap / <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Set newcap to the requested cap when</span></span><br><span class="line"><span class="comment">// the newcap calculation overflowed.</span></span><br><span class="line"><span class="keyword">if</span> newcap &lt;= <span class="number">0</span> &#123;</span><br><span class="line">newcap = <span class="built_in">cap</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> overflow <span class="type">bool</span></span><br><span class="line"><span class="keyword">var</span> lenmem, newlenmem, capmem <span class="type">uintptr</span></span><br><span class="line"><span class="comment">// Specialize for common values of et.size.</span></span><br><span class="line"><span class="comment">// For 1 we don&#x27;t need any division/multiplication.</span></span><br><span class="line"><span class="comment">// For sys.PtrSize, compiler will optimize division/multiplication into a shift by a constant.</span></span><br><span class="line"><span class="comment">// For powers of 2, use a variable shift.</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> et.size == <span class="number">1</span>:</span><br><span class="line">lenmem = <span class="type">uintptr</span>(old.<span class="built_in">len</span>)</span><br><span class="line">newlenmem = <span class="type">uintptr</span>(<span class="built_in">cap</span>)</span><br><span class="line">capmem = roundupsize(<span class="type">uintptr</span>(newcap))</span><br><span class="line">overflow = <span class="type">uintptr</span>(newcap) &gt; maxAlloc</span><br><span class="line">newcap = <span class="type">int</span>(capmem)</span><br><span class="line"><span class="keyword">case</span> et.size == sys.PtrSize:</span><br><span class="line">lenmem = <span class="type">uintptr</span>(old.<span class="built_in">len</span>) * sys.PtrSize</span><br><span class="line">newlenmem = <span class="type">uintptr</span>(<span class="built_in">cap</span>) * sys.PtrSize</span><br><span class="line">capmem = roundupsize(<span class="type">uintptr</span>(newcap) * sys.PtrSize)</span><br><span class="line">overflow = <span class="type">uintptr</span>(newcap) &gt; maxAlloc/sys.PtrSize</span><br><span class="line">newcap = <span class="type">int</span>(capmem / sys.PtrSize)</span><br><span class="line"><span class="keyword">case</span> isPowerOfTwo(et.size):</span><br><span class="line"><span class="keyword">var</span> shift <span class="type">uintptr</span></span><br><span class="line"><span class="keyword">if</span> sys.PtrSize == <span class="number">8</span> &#123;</span><br><span class="line"><span class="comment">// Mask shift for better code generation.</span></span><br><span class="line">shift = <span class="type">uintptr</span>(sys.Ctz64(<span class="type">uint64</span>(et.size))) &amp; <span class="number">63</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">shift = <span class="type">uintptr</span>(sys.Ctz32(<span class="type">uint32</span>(et.size))) &amp; <span class="number">31</span></span><br><span class="line">&#125;</span><br><span class="line">lenmem = <span class="type">uintptr</span>(old.<span class="built_in">len</span>) &lt;&lt; shift</span><br><span class="line">newlenmem = <span class="type">uintptr</span>(<span class="built_in">cap</span>) &lt;&lt; shift</span><br><span class="line">capmem = roundupsize(<span class="type">uintptr</span>(newcap) &lt;&lt; shift)</span><br><span class="line">overflow = <span class="type">uintptr</span>(newcap) &gt; (maxAlloc &gt;&gt; shift)</span><br><span class="line">newcap = <span class="type">int</span>(capmem &gt;&gt; shift)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">lenmem = <span class="type">uintptr</span>(old.<span class="built_in">len</span>) * et.size</span><br><span class="line">newlenmem = <span class="type">uintptr</span>(<span class="built_in">cap</span>) * et.size</span><br><span class="line">capmem, overflow = math.MulUintptr(et.size, <span class="type">uintptr</span>(newcap))</span><br><span class="line">capmem = roundupsize(capmem)</span><br><span class="line">newcap = <span class="type">int</span>(capmem / et.size)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The check of overflow in addition to capmem &gt; maxAlloc is needed</span></span><br><span class="line"><span class="comment">// to prevent an overflow which can be used to trigger a segfault</span></span><br><span class="line"><span class="comment">// on 32bit architectures with this example program:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// type T [1&lt;&lt;27 + 1]int64</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// var d T</span></span><br><span class="line"><span class="comment">// var s []T</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// func main() &#123;</span></span><br><span class="line"><span class="comment">//   s = append(s, d, d, d, d)</span></span><br><span class="line"><span class="comment">//   print(len(s), &quot;\n&quot;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">if</span> overflow || capmem &gt; maxAlloc &#123;</span><br><span class="line"><span class="built_in">panic</span>(errorString(<span class="string">&quot;growslice: cap out of range&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p unsafe.Pointer</span><br><span class="line"><span class="keyword">if</span> et.ptrdata == <span class="number">0</span> &#123;</span><br><span class="line">p = mallocgc(capmem, <span class="literal">nil</span>, <span class="literal">false</span>)</span><br><span class="line"><span class="comment">// The append() that calls growslice is going to overwrite from old.len to cap (which will be the new length).</span></span><br><span class="line"><span class="comment">// Only clear the part that will not be overwritten.</span></span><br><span class="line">memclrNoHeapPointers(add(p, newlenmem), capmem-newlenmem)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Note: can&#x27;t use rawmem (which avoids zeroing of memory), because then GC can scan uninitialized memory.</span></span><br><span class="line">p = mallocgc(capmem, et, <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">if</span> lenmem &gt; <span class="number">0</span> &amp;&amp; writeBarrier.enabled &#123;</span><br><span class="line"><span class="comment">// Only shade the pointers in old.array since we know the destination slice p</span></span><br><span class="line"><span class="comment">// only contains nil pointers because it has been cleared during alloc.</span></span><br><span class="line">bulkBarrierPreWriteSrcOnly(<span class="type">uintptr</span>(p), <span class="type">uintptr</span>(old.array), lenmem-et.size+et.ptrdata)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">memmove(p, old.array, lenmem)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> slice&#123;p, old.<span class="built_in">len</span>, newcap&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在扩容时，如果新容量已经超过现有容量的两倍，则以更大的新容量为准。</p><p>如果指定的新容量不足两倍，则分两种情况：</p><ol type="1"><li>如果现有容量较小（&lt;1024），那就直接容量翻倍2x（直接成倍增长的策略有助于避免频繁扩容，而容量较小时，即使有空间冗余浪费，也是比较少的）；</li><li>如果现有容量不小了（&gt;=1024），此时翻倍式扩容可能会浪费较多的内存，因此以1.25x渐进式增长至不低于目标容量，既满足目标容量，又避免浪费内存。</li></ol><blockquote><p><ahref="https://github.com/golang/go/commit/2dda92ff6f9f07eeb110ecbf0fc2d7a0ddd27f9d#diff-fc52a9434e8f6cb1b87de5e565399f0d3e5efb448408f2e2e0ea3ea12de60550">runtime:make slice growth formula a bit smoother</a></p><p>不过值得注意的是，这样的扩容算法未必是最优的，仍然存在改进的研究空间。从master分支上最新commit中可以看到，新的commit正在尝试更平滑的扩容函数（及参数）。高的增长倍率，一方面有助于避免频繁扩容（避免分配内存时潜在的系统调用代价），另一方面也更容易造成内存冗余。</p></blockquote><p>此后，计算新slice的array所需的内存容量capmen和相应的元素容量newcap。（该计算过程针对元素尺寸做了优化）</p><p>最后，通过mallocgc函数申请capmem尺寸的内存对象，并且用memmove函数将原slice数据拷贝到新slice的内存（指针p）中。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Slice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从源码理解Gin框架原理</title>
      <link href="/posts/%E4%BB%8E%E6%BA%90%E7%A0%81%E7%90%86%E8%A7%A3Gin%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/"/>
      <url>/posts/%E4%BB%8E%E6%BA%90%E7%A0%81%E7%90%86%E8%A7%A3Gin%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><ahref="https://github.com/gin-gonic/gin">Gin</a>是一款高性能的Go语言Web框架，本文以一个小型示例项目为例，从源码解读Gin的服务启动过程、请求与响应过程的技术原理。</p><span id="more"></span><h1 id="从源码理解gin框架原理">从源码理解Gin框架原理</h1><h2 id="概述">1 概述</h2><blockquote><p><strong><a href="https://github.com/gin-gonic/gin">Gin WebFramework</a></strong></p><p>Gin is a web framework written in Go (Golang). It features amartini-like API with performance that is up to 40 times faster thanksto <a href="https://github.com/julienschmidt/httprouter">httprouter</a>.If you need performance and good productivity, you will love Gin.</p></blockquote><p><ahref="https://github.com/gin-gonic/gin">Gin</a>是一款高性能的Go语言Web框架。</p><blockquote><p><ahref="https://github.com/HearyShen/LearnGin"><strong>LearnGin</strong></a></p></blockquote><p>LearnGin仓库存储本文的示例代码。</p><p>本文所使用的软件版本是：</p><ul><li>Gin的版本是：<strong>gin@v1.7.4</strong>；</li><li>Go的版本是：1.17。</li></ul><h2 id="技术原理">2 技术原理</h2><h3 id="gin的启动过程">2.1 Gin的启动过程</h3><h4 id="项目的main函数">2.1.1 项目的main函数</h4><p>主函数位于项目根目录下的main.go中，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/LearnGin/handler&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/LearnGin/middleware&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// init gin with default configs</span></span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line"><span class="comment">// append custom middle-wares</span></span><br><span class="line">middleware.RegisterMiddleware(r)</span><br><span class="line"><span class="comment">// register custom routers</span></span><br><span class="line">handler.RegisterHandler(r)</span><br><span class="line"></span><br><span class="line"><span class="comment">// run the engine</span></span><br><span class="line">r.Run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要步骤：</p><ol type="1"><li><strong>初始化Gin</strong>：<code>gin.Default()</code>执行Gin的初始化过程，默认的初始化包含两个中间件，<ol type="1"><li><strong>Logger</strong>：日志中间件，将Gin的启动与响应日志输出到控制台；</li><li><strong>Recovery</strong>：恢复中间件，将Gin遇到的无法处理的请求按HTTP500状态码返回。</li></ol></li><li><strong>注册中间件</strong>：本例的<code>middleware.RegisterMiddleware(r)</code>用于将项目中开发的中间件注册到GinEngine上；</li><li><strong>注册事件处理</strong>：本例的<code>handler.RegisterHandler(r)</code>用于将项目中开发的对应于指定URL的事件处理函数注册到GinEngine上；</li><li><strong>启动Gin</strong>：<code>r.Run()</code>负责启动GinEngine，开始监听请求并提供HTTP服务。</li></ol><h4 id="初始化gin">2.1.2 初始化Gin</h4><h5 id="gin的default函数">gin的Default函数</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Default returns an Engine instance with the Logger and Recovery middleware already attached.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Default</span><span class="params">()</span></span> *Engine &#123;</span><br><span class="line">debugPrintWARNINGDefault()</span><br><span class="line">engine := New()</span><br><span class="line">engine.Use(Logger(), Recovery())</span><br><span class="line"><span class="keyword">return</span> engine</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gin的默认初始化主要是创建Engine和注册默认的两款中间件。</p><h4 id="注册中间件">2.1.3 注册中间件</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> middleware</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/LearnGin/middleware/debug&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterMiddleware</span><span class="params">(r *gin.Engine)</span></span> &#123;</span><br><span class="line">r.Use(debug.DebugMiddleWare())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gin.Engine的<code>r.Use</code>函数负责将gin.HandleFunc类型函数注册为中间件。此处的<code>debug.DebugMiddleWare()</code>是本例开发的一个简易的自定义中间件，用于在实际的事件处理前，输出详细的请求信息；在实际的事件处理后，输出结果状态码。</p><h5 id="engine.use函数">Engine.Use函数</h5><p>Engine.Use函数用于将中间件添加到当前的路由上，位于gin.go中，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use attaches a global middleware to the router. ie. the middleware attached though Use() will be</span></span><br><span class="line"><span class="comment">// included in the handlers chain for every single request. Even 404, 405, static files...</span></span><br><span class="line"><span class="comment">// For example, this is the right place for a logger or error management middleware.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> Use(middleware ...HandlerFunc) IRoutes &#123;</span><br><span class="line">engine.RouterGroup.Use(middleware...)</span><br><span class="line">engine.rebuild404Handlers()</span><br><span class="line">engine.rebuild405Handlers()</span><br><span class="line"><span class="keyword">return</span> engine</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="routergroup.use函数">RouterGroup.Use函数</h5><p>实际上，还需要进一步调用<code>engine.RouterGroup.Use(middleware...)</code>完成实际的中间件注册工作，该函数位于gin.go中，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Use adds middleware to the group, see example code in GitHub.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(group *RouterGroup)</span></span> Use(middleware ...HandlerFunc) IRoutes &#123;</span><br><span class="line">group.Handlers = <span class="built_in">append</span>(group.Handlers, middleware...)</span><br><span class="line"><span class="keyword">return</span> group.returnObj()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数也很简短，实际上就是把中间件（本质是一个函数）添加到HandlersChain类型（实质上为数组<code>type HandlersChain []HandlerFunc</code>）的group.Handlers中。换句话说，实际上是以<strong>函数数组</strong>的形式收集了一个有序的函数序列。</p><p>此后会介绍中间件中每次都会出现的<code>c.Next()</code>函数如何基于该数组进行流程控制。</p><h4 id="注册事件处理">2.1.4 注册事件处理</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/LearnGin/handler/person&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterHandler</span><span class="params">(r *gin.Engine)</span></span> &#123;</span><br><span class="line">r.Handle(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/ping&quot;</span>, PingHandler())</span><br><span class="line">r.Handle(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/person/create&quot;</span>, person.CreatePersonHandler())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>gin.Engine的<code>r.Handle</code>函数用于将事件处理函数注册到指定的HTTP方法+相对路径上。</p><h5 id="routergroup.handle函数">RouterGroup.Handle函数</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Handle registers a new request handle and middleware with the given path and method.</span></span><br><span class="line"><span class="comment">// The last handler should be the real handler, the other ones should be middleware that can and should be shared among different routes.</span></span><br><span class="line"><span class="comment">// See the example code in GitHub.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For GET, POST, PUT, PATCH and DELETE requests the respective shortcut</span></span><br><span class="line"><span class="comment">// functions can be used.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This function is intended for bulk loading and to allow the usage of less</span></span><br><span class="line"><span class="comment">// frequently used, non-standardized or custom methods (e.g. for internal</span></span><br><span class="line"><span class="comment">// communication with a proxy).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(group *RouterGroup)</span></span> Handle(httpMethod, relativePath <span class="type">string</span>, handlers ...HandlerFunc) IRoutes &#123;</span><br><span class="line"><span class="keyword">if</span> matches, err := regexp.MatchString(<span class="string">&quot;^[A-Z]+$&quot;</span>, httpMethod); !matches || err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;http method &quot;</span> + httpMethod + <span class="string">&quot; is not valid&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> group.handle(httpMethod, relativePath, handlers)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GinEngine的Handle函数调用实际上调用的是内部匿名属性RouterGroup的Handle函数。该函数的逻辑由handle函数进一步处理，代码为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(group *RouterGroup)</span></span> handle(httpMethod, relativePath <span class="type">string</span>, handlers HandlersChain) IRoutes &#123;</span><br><span class="line">absolutePath := group.calculateAbsolutePath(relativePath)</span><br><span class="line">handlers = group.combineHandlers(handlers)</span><br><span class="line">group.engine.addRoute(httpMethod, absolutePath, handlers)</span><br><span class="line"><span class="keyword">return</span> group.returnObj()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，实际上handler是由<code>group.engine.addRoute(httpMethod, absolutePath, handlers)</code>注册路由的。</p><h5 id="engine.addroute函数">Engine.addRoute函数</h5><p>如果持续追查下去，会发现addRoute函数实际上是将该方法添加到当前HTTP方法对应的那颗路由树中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> addRoute(method, path <span class="type">string</span>, handlers HandlersChain) &#123;</span><br><span class="line">assert1(path[<span class="number">0</span>] == <span class="string">&#x27;/&#x27;</span>, <span class="string">&quot;path must begin with &#x27;/&#x27;&quot;</span>)</span><br><span class="line">assert1(method != <span class="string">&quot;&quot;</span>, <span class="string">&quot;HTTP method can not be empty&quot;</span>)</span><br><span class="line">assert1(<span class="built_in">len</span>(handlers) &gt; <span class="number">0</span>, <span class="string">&quot;there must be at least one handler&quot;</span>)</span><br><span class="line"></span><br><span class="line">debugPrintRoute(method, path, handlers)</span><br><span class="line"></span><br><span class="line">root := engine.trees.get(method)</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">root = <span class="built_in">new</span>(node)</span><br><span class="line">root.fullPath = <span class="string">&quot;/&quot;</span></span><br><span class="line">engine.trees = <span class="built_in">append</span>(engine.trees, methodTree&#123;method: method, root: root&#125;)</span><br><span class="line">&#125;</span><br><span class="line">root.addRoute(path, handlers)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update maxParams</span></span><br><span class="line"><span class="keyword">if</span> paramsCount := countParams(path); paramsCount &gt; engine.maxParams &#123;</span><br><span class="line">engine.maxParams = paramsCount</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个HTTP方法（如：GET，POST）的路由信息都各自由一个<strong>树结构</strong>来维护，该树结构的模型与函数实现位于gin/tree.go中，此处不再继续展开。</p><h4 id="启动gin">2.1.5 启动Gin</h4><h5 id="engine.run函数">Engine.Run函数</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Run attaches the router to a http.Server and starts listening and serving HTTP requests.</span></span><br><span class="line"><span class="comment">// It is a shortcut for http.ListenAndServe(addr, router)</span></span><br><span class="line"><span class="comment">// Note: this method will block the calling goroutine indefinitely unless an error happens.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> Run(addr ...<span class="type">string</span>) (err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; debugPrintError(err) &#125;()</span><br><span class="line"></span><br><span class="line">trustedCIDRs, err := engine.prepareTrustedCIDRs()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">engine.trustedCIDRs = trustedCIDRs</span><br><span class="line">address := resolveAddress(addr)</span><br><span class="line">debugPrint(<span class="string">&quot;Listening and serving HTTP on %s\n&quot;</span>, address)</span><br><span class="line">err = http.ListenAndServe(address, engine)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，Engine.Run函数主要是：</p><ol type="1"><li>解析监听地址传参；</li><li>启动监听与服务。</li></ol><p>其中，最核心的监听与服务实质上是调用Go语言内置库net/http的<code>http.ListenAndServe</code>函数实现的。</p><h5 id="nethttp的listenandserve函数">net/http的ListenAndServe函数</h5><p>Gin框架网络编程的底层实际上是基于Go语言的内置net/http网络库实现的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ListenAndServe listens on the TCP network address addr and then calls</span></span><br><span class="line"><span class="comment">// Serve with handler to handle requests on incoming connections.</span></span><br><span class="line"><span class="comment">// Accepted connections are configured to enable TCP keep-alives.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The handler is typically nil, in which case the DefaultServeMux is used.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ListenAndServe always returns a non-nil error.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListenAndServe</span><span class="params">(addr <span class="type">string</span>, handler Handler)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">server := &amp;Server&#123;Addr: addr, Handler: handler&#125;</span><br><span class="line"><span class="keyword">return</span> server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数实例化Sever，并调用其<code>ListenAndServe</code>函数实现监听与服务功能。</p><p><strong>注意</strong>：此时，输入的GinEngine对象以<strong>Handler接口</strong>的对象的形式被传入给了net/http库的Server对象，作为后续Serve对象处理网络请求时调用的函数。</p><h5 id="nethttp的handler接口">net/http的Handler接口</h5><p>net/http的Server结构体类型中有一个Handler接口类型的Handler。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A Server defines parameters for running an HTTP server.</span></span><br><span class="line"><span class="comment">// The zero value for Server is a valid configuration.</span></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Addr optionally specifies the TCP address for the server to listen on,</span></span><br><span class="line"><span class="comment">// in the form &quot;host:port&quot;. If empty, &quot;:http&quot; (port 80) is used.</span></span><br><span class="line"><span class="comment">// The service names are defined in RFC 6335 and assigned by IANA.</span></span><br><span class="line"><span class="comment">// See net.Dial for details of the address format.</span></span><br><span class="line">Addr <span class="type">string</span></span><br><span class="line"></span><br><span class="line">Handler Handler <span class="comment">// handler to invoke, http.DefaultServeMux if nil</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而该Handler接口的唯一特点就是有且仅有一个ServeHTTP函数声明，该接口定义代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A Handler responds to an HTTP request.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ServeHTTP should write reply headers and data to the ResponseWriter</span></span><br><span class="line"><span class="comment">// and then return. Returning signals that the request is finished; it</span></span><br><span class="line"><span class="comment">// is not valid to use the ResponseWriter or read from the</span></span><br><span class="line"><span class="comment">// Request.Body after or concurrently with the completion of the</span></span><br><span class="line"><span class="comment">// ServeHTTP call.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Depending on the HTTP client software, HTTP protocol version, and</span></span><br><span class="line"><span class="comment">// any intermediaries between the client and the Go server, it may not</span></span><br><span class="line"><span class="comment">// be possible to read from the Request.Body after writing to the</span></span><br><span class="line"><span class="comment">// ResponseWriter. Cautious handlers should read the Request.Body</span></span><br><span class="line"><span class="comment">// first, and then reply.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Except for reading the body, handlers should not modify the</span></span><br><span class="line"><span class="comment">// provided Request.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If ServeHTTP panics, the server (the caller of ServeHTTP) assumes</span></span><br><span class="line"><span class="comment">// that the effect of the panic was isolated to the active request.</span></span><br><span class="line"><span class="comment">// It recovers the panic, logs a stack trace to the server error log,</span></span><br><span class="line"><span class="comment">// and either closes the network connection or sends an HTTP/2</span></span><br><span class="line"><span class="comment">// RST_STREAM, depending on the HTTP protocol. To abort a handler so</span></span><br><span class="line"><span class="comment">// the client sees an interrupted response but the server doesn&#x27;t log</span></span><br><span class="line"><span class="comment">// an error, panic with the value ErrAbortHandler.</span></span><br><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Handler接口的意义就在于，任何类型，只需要实现了该ServeHTTP函数，就实现了Handler接口，就可以用作Server的Handler，供HTTP处理时调用。</p><p>显然，gin.Engine实现了net/http的Handler接口的ServeHTTP函数（gin/gin.go）。具体的实现原理在接下来介绍。</p><h3 id="请求与响应过程">2.2 请求与响应过程</h3><h4 id="监听与接受请求">2.2.1 监听与接受请求</h4><h5id="nethttp的server.listenandserve函数">net/http的Server.ListenAndServe函数</h5><p>上文介绍到，gin实际上调用了net/http的<code>ListenAndServe</code>函数实现网络监听与处理，具体由<code>Server.ListenAndServe</code>实现，位于net/http/server.go中，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ListenAndServe listens on the TCP network address srv.Addr and then</span></span><br><span class="line"><span class="comment">// calls Serve to handle requests on incoming connections.</span></span><br><span class="line"><span class="comment">// Accepted connections are configured to enable TCP keep-alives.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If srv.Addr is blank, &quot;:http&quot; is used.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ListenAndServe always returns a non-nil error. After Shutdown or Close,</span></span><br><span class="line"><span class="comment">// the returned error is ErrServerClosed.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(srv *Server)</span></span> ListenAndServe() <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> srv.shuttingDown() &#123;</span><br><span class="line"><span class="keyword">return</span> ErrServerClosed</span><br><span class="line">&#125;</span><br><span class="line">addr := srv.Addr</span><br><span class="line"><span class="keyword">if</span> addr == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">addr = <span class="string">&quot;:http&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">ln, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, addr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> srv.Serve(ln)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，net/http的<code>Server.ListenAndServe</code>函数实际上主要完成两项工作：</p><ol type="1"><li><strong>设置监听</strong>：<code>net.Listen("tcp", addr)</code>负责设置监听地址；</li><li><strong>接受并处理网络请求</strong>：<code>srv.Serve(ln)</code>负责在监听位置上接受网络请求，建立连接并做出响应。</li></ol><h5 id="nethttp的server.serve函数">net/http的Server.Serve函数</h5><p><code>Server.Serve</code>函数用于监听、接受和处理网络请求，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Serve accepts incoming connections on the Listener l, creating a</span></span><br><span class="line"><span class="comment">// new service goroutine for each. The service goroutines read requests and</span></span><br><span class="line"><span class="comment">// then call srv.Handler to reply to them.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// HTTP/2 support is only enabled if the Listener returns *tls.Conn</span></span><br><span class="line"><span class="comment">// connections and they were configured with &quot;h2&quot; in the TLS</span></span><br><span class="line"><span class="comment">// Config.NextProtos.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Serve always returns a non-nil error and closes l.</span></span><br><span class="line"><span class="comment">// After Shutdown or Close, the returned error is ErrServerClosed.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(srv *Server)</span></span> Serve(l net.Listener) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> fn := testHookServerServe; fn != <span class="literal">nil</span> &#123;</span><br><span class="line">fn(srv, l) <span class="comment">// call hook with unwrapped listener</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">origListener := l</span><br><span class="line">l = &amp;onceCloseListener&#123;Listener: l&#125;</span><br><span class="line"><span class="keyword">defer</span> l.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := srv.setupHTTP2_Serve(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !srv.trackListener(&amp;l, <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> ErrServerClosed</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> srv.trackListener(&amp;l, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">baseCtx := context.Background()</span><br><span class="line"><span class="keyword">if</span> srv.BaseContext != <span class="literal">nil</span> &#123;</span><br><span class="line">baseCtx = srv.BaseContext(origListener)</span><br><span class="line"><span class="keyword">if</span> baseCtx == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;BaseContext returned a nil context&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tempDelay time.Duration <span class="comment">// how long to sleep on accept failure</span></span><br><span class="line"></span><br><span class="line">ctx := context.WithValue(baseCtx, ServerContextKey, srv)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">rw, err := l.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-srv.getDoneChan():</span><br><span class="line"><span class="keyword">return</span> ErrServerClosed</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ne, ok := err.(net.Error); ok &amp;&amp; ne.Temporary() &#123;</span><br><span class="line"><span class="keyword">if</span> tempDelay == <span class="number">0</span> &#123;</span><br><span class="line">tempDelay = <span class="number">5</span> * time.Millisecond</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tempDelay *= <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> max := <span class="number">1</span> * time.Second; tempDelay &gt; max &#123;</span><br><span class="line">tempDelay = max</span><br><span class="line">&#125;</span><br><span class="line">srv.logf(<span class="string">&quot;http: Accept error: %v; retrying in %v&quot;</span>, err, tempDelay)</span><br><span class="line">time.Sleep(tempDelay)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">connCtx := ctx</span><br><span class="line"><span class="keyword">if</span> cc := srv.ConnContext; cc != <span class="literal">nil</span> &#123;</span><br><span class="line">connCtx = cc(connCtx, rw)</span><br><span class="line"><span class="keyword">if</span> connCtx == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;ConnContext returned nil&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">tempDelay = <span class="number">0</span></span><br><span class="line">c := srv.newConn(rw)</span><br><span class="line">c.setState(c.rwc, StateNew, runHooks) <span class="comment">// before Serve can return</span></span><br><span class="line"><span class="keyword">go</span> c.serve(connCtx)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Server.Serve</code>函数的实现中，启动了一个无条件的for循环以便持续监听、接受和处理网络请求，主要流程为：</p><ol type="1"><li><strong>接受请求</strong>：<code>l.Accept()</code>调用在无请求时保持阻塞，直到接收到请求时，接受请求并返回建立的连接；</li><li><strong>处理请求</strong>：启动一个goroutine，使用conn的serve函数进行处理（<code>go c.serve(connCtx)</code>）；</li></ol><h5 id="nethttp的conn.serve函数">net/http的conn.serve函数</h5><p>已接受的请求会建立连接，对连接的后续处理由conn.serve函数实现，该函数实现较长，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Serve a new connection.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *conn)</span></span> serve(ctx context.Context) &#123;</span><br><span class="line">c.remoteAddr = c.rwc.RemoteAddr().String()</span><br><span class="line">ctx = context.WithValue(ctx, LocalAddrContextKey, c.rwc.LocalAddr())</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &amp;&amp; err != ErrAbortHandler &#123;</span><br><span class="line"><span class="keyword">const</span> size = <span class="number">64</span> &lt;&lt; <span class="number">10</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="type">byte</span>, size)</span><br><span class="line">buf = buf[:runtime.Stack(buf, <span class="literal">false</span>)]</span><br><span class="line">c.server.logf(<span class="string">&quot;http: panic serving %v: %v\n%s&quot;</span>, c.remoteAddr, err, buf)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !c.hijacked() &#123;</span><br><span class="line">c.<span class="built_in">close</span>()</span><br><span class="line">c.setState(c.rwc, StateClosed, runHooks)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> tlsConn, ok := c.rwc.(*tls.Conn); ok &#123;</span><br><span class="line"><span class="keyword">if</span> d := c.server.ReadTimeout; d &gt; <span class="number">0</span> &#123;</span><br><span class="line">c.rwc.SetReadDeadline(time.Now().Add(d))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> d := c.server.WriteTimeout; d &gt; <span class="number">0</span> &#123;</span><br><span class="line">c.rwc.SetWriteDeadline(time.Now().Add(d))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := tlsConn.HandshakeContext(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// If the handshake failed due to the client not speaking</span></span><br><span class="line"><span class="comment">// TLS, assume they&#x27;re speaking plaintext HTTP and write a</span></span><br><span class="line"><span class="comment">// 400 response on the TLS conn&#x27;s underlying net.Conn.</span></span><br><span class="line"><span class="keyword">if</span> re, ok := err.(tls.RecordHeaderError); ok &amp;&amp; re.Conn != <span class="literal">nil</span> &amp;&amp; tlsRecordHeaderLooksLikeHTTP(re.RecordHeader) &#123;</span><br><span class="line">io.WriteString(re.Conn, <span class="string">&quot;HTTP/1.0 400 Bad Request\r\n\r\nClient sent an HTTP request to an HTTPS server.\n&quot;</span>)</span><br><span class="line">re.Conn.Close()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.server.logf(<span class="string">&quot;http: TLS handshake error from %s: %v&quot;</span>, c.rwc.RemoteAddr(), err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.tlsState = <span class="built_in">new</span>(tls.ConnectionState)</span><br><span class="line">*c.tlsState = tlsConn.ConnectionState()</span><br><span class="line"><span class="keyword">if</span> proto := c.tlsState.NegotiatedProtocol; validNextProto(proto) &#123;</span><br><span class="line"><span class="keyword">if</span> fn := c.server.TLSNextProto[proto]; fn != <span class="literal">nil</span> &#123;</span><br><span class="line">h := initALPNRequest&#123;ctx, tlsConn, serverHandler&#123;c.server&#125;&#125;</span><br><span class="line"><span class="comment">// Mark freshly created HTTP/2 as active and prevent any server state hooks</span></span><br><span class="line"><span class="comment">// from being run on these connections. This prevents closeIdleConns from</span></span><br><span class="line"><span class="comment">// closing such connections. See issue https://golang.org/issue/39776.</span></span><br><span class="line">c.setState(c.rwc, StateActive, skipHooks)</span><br><span class="line">fn(c.server, tlsConn, h)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTP/1.x from here on.</span></span><br><span class="line"></span><br><span class="line">ctx, cancelCtx := context.WithCancel(ctx)</span><br><span class="line">c.cancelCtx = cancelCtx</span><br><span class="line"><span class="keyword">defer</span> cancelCtx()</span><br><span class="line"></span><br><span class="line">c.r = &amp;connReader&#123;conn: c&#125;</span><br><span class="line">c.bufr = newBufioReader(c.r)</span><br><span class="line">c.bufw = newBufioWriterSize(checkConnErrorWriter&#123;c&#125;, <span class="number">4</span>&lt;&lt;<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">w, err := c.readRequest(ctx)</span><br><span class="line"><span class="keyword">if</span> c.r.remain != c.server.initialReadLimitSize() &#123;</span><br><span class="line"><span class="comment">// If we read any bytes off the wire, we&#x27;re active.</span></span><br><span class="line">c.setState(c.rwc, StateActive, runHooks)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">const</span> errorHeaders = <span class="string">&quot;\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> err == errTooLarge:</span><br><span class="line"><span class="comment">// Their HTTP client may or may not be</span></span><br><span class="line"><span class="comment">// able to read this if we&#x27;re</span></span><br><span class="line"><span class="comment">// responding to them and hanging up</span></span><br><span class="line"><span class="comment">// while they&#x27;re still writing their</span></span><br><span class="line"><span class="comment">// request. Undefined behavior.</span></span><br><span class="line"><span class="keyword">const</span> publicErr = <span class="string">&quot;431 Request Header Fields Too Large&quot;</span></span><br><span class="line">fmt.Fprintf(c.rwc, <span class="string">&quot;HTTP/1.1 &quot;</span>+publicErr+errorHeaders+publicErr)</span><br><span class="line">c.closeWriteAndWait()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> isUnsupportedTEError(err):</span><br><span class="line"><span class="comment">// Respond as per RFC 7230 Section 3.3.1 which says,</span></span><br><span class="line"><span class="comment">//      A server that receives a request message with a</span></span><br><span class="line"><span class="comment">//      transfer coding it does not understand SHOULD</span></span><br><span class="line"><span class="comment">//      respond with 501 (Unimplemented).</span></span><br><span class="line">code := StatusNotImplemented</span><br><span class="line"></span><br><span class="line"><span class="comment">// We purposefully aren&#x27;t echoing back the transfer-encoding&#x27;s value,</span></span><br><span class="line"><span class="comment">// so as to mitigate the risk of cross side scripting by an attacker.</span></span><br><span class="line">fmt.Fprintf(c.rwc, <span class="string">&quot;HTTP/1.1 %d %s%sUnsupported transfer encoding&quot;</span>, code, StatusText(code), errorHeaders)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> isCommonNetReadError(err):</span><br><span class="line"><span class="keyword">return</span> <span class="comment">// don&#x27;t reply</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">if</span> v, ok := err.(statusError); ok &#123;</span><br><span class="line">fmt.Fprintf(c.rwc, <span class="string">&quot;HTTP/1.1 %d %s: %s%s%d %s: %s&quot;</span>, v.code, StatusText(v.code), v.text, errorHeaders, v.code, StatusText(v.code), v.text)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">publicErr := <span class="string">&quot;400 Bad Request&quot;</span></span><br><span class="line">fmt.Fprintf(c.rwc, <span class="string">&quot;HTTP/1.1 &quot;</span>+publicErr+errorHeaders+publicErr)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Expect 100 Continue support</span></span><br><span class="line">req := w.req</span><br><span class="line"><span class="keyword">if</span> req.expectsContinue() &#123;</span><br><span class="line"><span class="keyword">if</span> req.ProtoAtLeast(<span class="number">1</span>, <span class="number">1</span>) &amp;&amp; req.ContentLength != <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// Wrap the Body reader with one that replies on the connection</span></span><br><span class="line">req.Body = &amp;expectContinueReader&#123;readCloser: req.Body, resp: w&#125;</span><br><span class="line">w.canWriteContinue.setTrue()</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> req.Header.get(<span class="string">&quot;Expect&quot;</span>) != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">w.sendExpectationFailed()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.curReq.Store(w)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> requestBodyRemains(req.Body) &#123;</span><br><span class="line">registerOnHitEOF(req.Body, w.conn.r.startBackgroundRead)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">w.conn.r.startBackgroundRead()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTP cannot have multiple simultaneous active requests.[*]</span></span><br><span class="line"><span class="comment">// Until the server replies to this request, it can&#x27;t read another,</span></span><br><span class="line"><span class="comment">// so we might as well run the handler in this goroutine.</span></span><br><span class="line"><span class="comment">// [*] Not strictly true: HTTP pipelining. We could let them all process</span></span><br><span class="line"><span class="comment">// in parallel even if their responses need to be serialized.</span></span><br><span class="line"><span class="comment">// But we&#x27;re not going to implement HTTP pipelining because it</span></span><br><span class="line"><span class="comment">// was never deployed in the wild and the answer is HTTP/2.</span></span><br><span class="line">serverHandler&#123;c.server&#125;.ServeHTTP(w, w.req)</span><br><span class="line">w.cancelCtx()</span><br><span class="line"><span class="keyword">if</span> c.hijacked() &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">w.finishRequest()</span><br><span class="line"><span class="keyword">if</span> !w.shouldReuseConnection() &#123;</span><br><span class="line"><span class="keyword">if</span> w.requestBodyLimitHit || w.closedRequestBodyEarly() &#123;</span><br><span class="line">c.closeWriteAndWait()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.setState(c.rwc, StateIdle, runHooks)</span><br><span class="line">c.curReq.Store((*response)(<span class="literal">nil</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !w.conn.server.doKeepAlives() &#123;</span><br><span class="line"><span class="comment">// We&#x27;re in shutdown mode. We might&#x27;ve replied</span></span><br><span class="line"><span class="comment">// to the user without &quot;Connection: close&quot; and</span></span><br><span class="line"><span class="comment">// they might think they can send another</span></span><br><span class="line"><span class="comment">// request, but such is life with HTTP/1.1.</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> d := c.server.idleTimeout(); d != <span class="number">0</span> &#123;</span><br><span class="line">c.rwc.SetReadDeadline(time.Now().Add(d))</span><br><span class="line"><span class="keyword">if</span> _, err := c.bufr.Peek(<span class="number">4</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">c.rwc.SetReadDeadline(time.Time&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难发现，<code>conn.serve</code>函数的代码实现较长，其中，对连接的主要处理由<code>serverHandler&#123;c.server&#125;.ServeHTTP(w, w.req)</code>函数调用实现。</p><p>这一步调用实质上时首先实例化了一个Server实例，然后调用实例的<code>ServeHTTP</code>函数对连接的请求与响应进行具体的处理。上文讲到，实现了<code>ServeHTTP</code>函数就实现了Handler接口。Gin就是通过实现接口的方式，利用系统的net/http库执行自身的功能。</p><h5 id="gin的engine.servehttp函数">gin的Engine.ServeHTTP函数</h5><p>gin在gin.go中实现了<code>ServeHTTP</code>函数，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ServeHTTP conforms to the http.Handler interface.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">c := engine.pool.Get().(*Context)</span><br><span class="line">c.writermem.reset(w)</span><br><span class="line">c.Request = req</span><br><span class="line">c.reset()</span><br><span class="line"></span><br><span class="line">engine.handleHTTPRequest(c)</span><br><span class="line"></span><br><span class="line">engine.pool.Put(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要步骤为：</p><ol type="1"><li><strong>建立连接上下文</strong>：从缓存池中提取上下文对象，填入当前连接的<code>http.ResponseWriter</code>实例与<code>http.Request</code>实例；</li><li><strong>处理连接</strong>：以上下文对象的形式将连接交给函数处理，由<code>engine.handleHTTPRequest(c)</code>封装实现了；</li><li><strong>回收连接上下文</strong>：处理完毕后，将上下文对象回收进缓存池中。</li></ol><p>值得注意的是，Gin中对每个连接都需要的上下文对象进行缓存化存取，通过缓存池节省连接高并发时上下文对象频繁生灭造成内存频繁分配与释放的代价。</p><h5id="gin的engine.handlehttprequest函数">gin的Engine.handleHTTPRequest函数</h5><p><code>handleHTTPRequest</code>函数封装了对请求进行处理的具体过程，位于gin/gin.go中，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(engine *Engine)</span></span> handleHTTPRequest(c *Context) &#123;</span><br><span class="line">httpMethod := c.Request.Method</span><br><span class="line">rPath := c.Request.URL.Path</span><br><span class="line">unescape := <span class="literal">false</span></span><br><span class="line"><span class="keyword">if</span> engine.UseRawPath &amp;&amp; <span class="built_in">len</span>(c.Request.URL.RawPath) &gt; <span class="number">0</span> &#123;</span><br><span class="line">rPath = c.Request.URL.RawPath</span><br><span class="line">unescape = engine.UnescapePathValues</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> engine.RemoveExtraSlash &#123;</span><br><span class="line">rPath = cleanPath(rPath)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Find root of the tree for the given HTTP method</span></span><br><span class="line">t := engine.trees</span><br><span class="line"><span class="keyword">for</span> i, tl := <span class="number">0</span>, <span class="built_in">len</span>(t); i &lt; tl; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> t[i].method != httpMethod &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">root := t[i].root</span><br><span class="line"><span class="comment">// Find route in tree</span></span><br><span class="line">value := root.getValue(rPath, c.params, unescape)</span><br><span class="line"><span class="keyword">if</span> value.params != <span class="literal">nil</span> &#123;</span><br><span class="line">c.Params = *value.params</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> value.handlers != <span class="literal">nil</span> &#123;</span><br><span class="line">c.handlers = value.handlers</span><br><span class="line">c.fullPath = value.fullPath</span><br><span class="line">c.Next()</span><br><span class="line">c.writermem.WriteHeaderNow()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> httpMethod != <span class="string">&quot;CONNECT&quot;</span> &amp;&amp; rPath != <span class="string">&quot;/&quot;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> value.tsr &amp;&amp; engine.RedirectTrailingSlash &#123;</span><br><span class="line">redirectTrailingSlash(c)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> engine.RedirectFixedPath &amp;&amp; redirectFixedPath(c, root, engine.RedirectFixedPath) &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> engine.HandleMethodNotAllowed &#123;</span><br><span class="line"><span class="keyword">for</span> _, tree := <span class="keyword">range</span> engine.trees &#123;</span><br><span class="line"><span class="keyword">if</span> tree.method == httpMethod &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> value := tree.root.getValue(rPath, <span class="literal">nil</span>, unescape); value.handlers != <span class="literal">nil</span> &#123;</span><br><span class="line">c.handlers = engine.allNoMethod</span><br><span class="line">serveError(c, http.StatusMethodNotAllowed, default405Body)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">c.handlers = engine.allNoRoute</span><br><span class="line">serveError(c, http.StatusNotFound, default404Body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Engine.handleHTTPRequest</code>函数的主要处理位于中间的for循环中，主要为：</p><ol type="1"><li>遍历查找<code>engine.trees</code>以找出当前请求的HTTPMethod对应的处理树；</li><li>从该处理树中，根据当前请求的路径与参数查询出对应的处理函数<code>value</code>；</li><li>将查询出的处理函数链（<code>gin.HandlerChain</code>）写入当前连接上下文的<code>c.handlers</code>中；</li><li>执行<code>c.Next()</code>，调用handlers链上的下一个函数（中间件/业务处理函数），开始形成LIFO的函数调用栈；</li><li>待函数调用栈全部返回后，<code>c.writermem.WriteHeaderNow()</code>根据上下文信息，将HTTP状态码写入响应头。</li></ol><h4 id="中间件与handler">2.2.2 中间件与handler</h4><p>请求发来时，被中间件与业务逻辑的handler处理，Gin的中间件与业务逻辑函数实质上都是gin.HandlerFunc函数。</p><p>例如，为gin.Engine添加了两款中间件（MiddeWareA与MiddleWareB）并为GET方法的/hello路径注册了一个Hello函数作为路由处理函数，那么执行过程为：</p><ol type="1"><li>上述<code>handleHTTPRequest</code>函数执行到<code>c.Next()</code>，调用MiddleWareA；</li><li>MiddleWareA执行到<code>c.Next()</code>，调用MiddleWareB；</li><li>MiddleWareB执行到<code>c.Next()</code>，调用Hello；</li><li>Hello函数返回，MiddleWareB继续执行至函数返回；</li><li>MiddleWareA函数继续执行至函数返回。</li></ol><h5 id="gin的context.next函数">gin的Context.Next函数</h5><p>中间件中屡屡调用的<code>c.Next()</code>函数时gin提供的中间件流程控制函数之一，位于gin/context.go中，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/************************************/</span></span><br><span class="line"><span class="comment">/*********** FLOW CONTROL ***********/</span></span><br><span class="line"><span class="comment">/************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Next should be used only inside middleware.</span></span><br><span class="line"><span class="comment">// It executes the pending handlers in the chain inside the calling handler.</span></span><br><span class="line"><span class="comment">// See example in GitHub.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Context)</span></span> Next() &#123;</span><br><span class="line">c.index++</span><br><span class="line"><span class="keyword">for</span> c.index &lt; <span class="type">int8</span>(<span class="built_in">len</span>(c.handlers)) &#123;</span><br><span class="line">c.handlers[c.index](c)</span><br><span class="line">c.index++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难理解，<code>Next</code>函数起到的作用是，在当前中间件函数中，调用下一个HandlerFunc。依序调用HandlerChain中的HandlerFunc的过程中，形成了一个函数调用栈，调用时函数依序入栈，至最后一个函数调用返回，此后按LIFO的顺序出栈，自然就形成了上述中间件的LIFO的执行顺序。</p><h4 id="请求处理与响应">2.2.3 请求处理与响应</h4><p>在本例中，我写了一个简易的创建Person的API，其涉及到模型定义与业务逻辑。</p><h5 id="模型定义">模型定义</h5><p>模型定义位于/model/person.go中，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Phone <span class="type">string</span> <span class="string">`json:&quot;phone&quot;`</span></span><br><span class="line">Age   <span class="type">uint64</span> <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreatePersonRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Person Person <span class="string">`json:&quot;person&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreatePersonResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Person   Person        <span class="string">`json:&quot;person&quot;`</span></span><br><span class="line">Elapse   time.Duration <span class="string">`json:&quot;elapse&quot;`</span> <span class="comment">// nano seconds</span></span><br><span class="line">BaseResp BaseResp      <span class="string">`json:&quot;baseresp&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，BaseResp位于/model/base.go中，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> BaseResp <span class="keyword">struct</span> &#123;</span><br><span class="line">Code    <span class="type">int64</span>  <span class="string">`json:&quot;code&quot;`</span></span><br><span class="line">Message <span class="type">string</span> <span class="string">`json:&quot;message&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="业务逻辑">业务逻辑</h5><p>业务逻辑函数位于handler/person/create_person.go中，代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> person</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/LearnGin/model&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin/binding&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreatePersonHandler</span><span class="params">()</span></span> gin.HandlerFunc &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// parse request</span></span><br><span class="line">tic := time.Now()</span><br><span class="line">req := <span class="built_in">new</span>(model.CreatePersonRequest)</span><br><span class="line">err := c.ShouldBindWith(req, binding.JSON)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Errorf(<span class="string">&quot;Can not bind with model.Person, err: %+v\n&quot;</span>, err)</span><br><span class="line">resp := <span class="built_in">new</span>(model.CreatePersonResponse)</span><br><span class="line">resp.Elapse = time.Since(tic)</span><br><span class="line">resp.BaseResp = model.BaseResp&#123;</span><br><span class="line">Code:    <span class="number">1</span>,</span><br><span class="line">Message: fmt.Sprintf(<span class="string">&quot;create person failed in binding json, err: %s&quot;</span>, err.Error()),</span><br><span class="line">&#125;</span><br><span class="line">c.JSON(<span class="number">200</span>, resp)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// process request</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;Creating Person: %+v\n&quot;</span>, req.Person)</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsonify response</span></span><br><span class="line">resp := <span class="built_in">new</span>(model.CreatePersonResponse)</span><br><span class="line">resp.Person = req.Person</span><br><span class="line">resp.Elapse = time.Since(tic)</span><br><span class="line">resp.BaseResp = model.BaseResp&#123;</span><br><span class="line">Code:    <span class="number">0</span>,</span><br><span class="line">Message: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">c.JSON(<span class="number">200</span>, resp)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>处理上主要分三步：</p><ol type="1"><li><strong>解析请求</strong>：<code>c.ShouldBindWith(req, binding.JSON)</code>负责解析请求中发来的JSON数据，并将解析结果绑定到指定的结构体对象上；</li><li><strong>业务处理</strong>：此处只做print显示；</li><li><strong>发送响应</strong>：实例化响应结构体，并将其序列化为JSON作为响应。</li></ol><p>值得注意的是：此处的序列化与反序列化会参照结构体的类型tag（如有）。</p><h2 id="总结">3 总结</h2><p>结合对Gin框架主干代码以及其调用的部分Go源码的阅读，可以体会到：</p><ol type="1"><li>Gin框架实质上实现的网络通信层以上的框架搭建，而网络通信功能完全采用Go语言的net/http库实现；</li><li>Gin通过实现Go语言提供的接口快捷地接入Go的内置库功能，使得上层应用与底层实现之间互不依赖，充分体现了SOLID中的依赖倒置原则；</li><li>Gin在性能上针对HTTPWeb框架常见的高并发问题进行了优化，例如：通过上下文对象的缓存池节省连接高并发时内存频繁申请与释放的代价；</li><li>Gin在设计上将中间件与业务逻辑都抽象为gin.HandleFunc函数，中间件与业务逻辑的执行过程实际上就是函数序列依序调用形成的函数调用栈的执行过程。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> Network </tag>
            
            <tag> Golang </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCMalloc - Go的内存分配原理</title>
      <link href="/posts/TCMalloc-Go%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%8E%9F%E7%90%86/"/>
      <url>/posts/TCMalloc-Go%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>Golang的内存分配机制主要基于TCMalloc机制，本文根据<ahref="http://goog-perftools.sourceforge.net/doc/tcmalloc.html">TCMalloc: Thread-Caching Malloc</a>一文了解原理并总结笔记。</p><span id="more"></span><h1 id="tcmalloc---go的内存分配原理">TCMalloc - Go的内存分配原理</h1><p>本文参考自：</p><blockquote><p><strong><ahref="http://goog-perftools.sourceforge.net/doc/tcmalloc.html">TCMalloc: Thread-Caching Malloc</a></strong></p><p><em>Sanjay Ghemawat, Paul Menage <ahref="mailto:opensource@google.com"class="email">opensource@google.com</a></em></p></blockquote><h2 id="简介">1 简介</h2><p>TCMalloc（Thread-CachingMalloc）是Google发布的一款线程缓存型内存分配机制。TCMalloc为每一个线程都缓存一些可分配内存，因此，在多线程场景下，TCMalloc能够尽可能规避多个线程同时分配/释放内存时的锁争用问题，这使得TCMalloc相较于其它内存分配机制，内存分配和回收速度更快。另外，TCMalloc还有内存分配利用率高的优势。</p><h2 id="原理">2 原理</h2><p>TCMalloc通过Thread Cache和Central Heap组成的双层结构分配内存。</p><figure><img src="http://goog-perftools.sourceforge.net/doc/overview.gif"alt="Thread Cache and Central Heap" /><figcaption aria-hidden="true">Thread Cache and CentralHeap</figcaption></figure><p>线程分配内存时，TCMalloc从该线程的线程缓存（ThreadCache）中取出恰当尺寸的内存块。而线程释放回线程缓存的内存，也会由垃圾回收机制收纳回中央堆区（CentralHeap）。具体地，TCMalloc的内存分配分两种情况：</p><ol type="1"><li>小对象分配（小于等于32KB）</li><li>大对象分配（大于32KB）</li></ol><h3 id="小对象分配">2.1 小对象分配</h3><p>当线程请求分配不超过32KB的小对象时，线程缓存为其分配恰当尺寸的内存块。</p><figure><img src="http://goog-perftools.sourceforge.net/doc/threadheap.gif"alt="Free Objects Linked List of Thread Cache" /><figcaption aria-hidden="true">Free Objects Linked List of ThreadCache</figcaption></figure><p>线程缓存（ThreadCache）维护着一个数组到单向链表的数据结构，数组中的每一个节点都从小到大依次代表一个可分配尺寸（共约170种尺寸），每个尺寸以单链表的形式维护该尺寸的可分配内存。</p><p>当一个线程请求分配内存时：</p><ol type="1"><li>首先根据内存需求，找到合适的尺寸（例如：申请961~1024字节，均分配1024字节的内存对象）；</li><li>在该尺寸的链表上，检查是否有可分配内存块：<ol type="1"><li>如果有该尺寸的内存对象，那么取出链表中第一个可分配内存块供线程使用即可；</li><li>如果没有该尺寸的内存对象，那就得从中央堆区去拿一些内存来用：<ol type="1"><li>如果中央堆区有该尺寸的内存，那么就取过来用就可以了。将取来的一些内存对象补充到该尺寸的链表里，并从补充后的链表中拿一个内存对象出来供线程使用；</li><li>如果连中央堆区也没有该尺寸的内存了，那就需要为其补充更多的内存：<ol type="1"><li>通过中央页分配器（central pageallocator）来分配内存页（page）；</li><li>将分配到的内存页分解为该尺寸的一系列对象；</li><li>把分解出的这些对象补充到中央堆区该尺寸的链表上；</li><li>既然中央堆区补充好该尺寸的内存了，那就照常拿一些补充到请求线程的线程缓存中，供其分配使用。</li></ol></li></ol></li></ol></li></ol><h3 id="大对象分配">2.2 大对象分配</h3><p>超过32K的大对象以4K的内存页为单位进行分配。直接由中央堆区负责维护空页，通过链表分别归纳维护长度为1~255页的空内存块，长度超过255页的内存块则由rest链表统一管理。</p><figure><img src="http://goog-perftools.sourceforge.net/doc/pageheap.gif"alt="List of Various Page Sizes" /><figcaption aria-hidden="true">List of Various Page Sizes</figcaption></figure><p>当请求内存时，根据需求的页面数量找到对应页面数的链表；</p><ol type="1"><li>如果链表内有内存，则分配；</li><li>如果链表内没有内存，则找下一个更大尺寸的链表，<ol type="1"><li>如果找到了，则分配内存，并将剩余页面插入对应尺寸的链表中；</li><li>如果整个中央堆区都找不到合适尺寸的内存，则向操作系统申请内存以补充到中央堆区中。</li></ol></li></ol><h3 id="spans">2.3 Spans</h3><p>TCMalloc通过span对象来组织内存页。一个span代表一些连续的内存页。</p><p>通过一个数据结构来维护从页号到span地址的映射：</p><figure><img src="http://goog-perftools.sourceforge.net/doc/spanmap.gif"alt="Central Array of Pages&#39; Span Addresses" /><figcaption aria-hidden="true">Central Array of Pages' SpanAddresses</figcaption></figure><p>在32位环境下，32位的地址能够寻址2<sup>32B的内存空间，如果按每个内存页4KB的尺寸进行分页，总共2</sup>20，即1M个页号。每个span地址为32位，即4B，那么通过4MB的数组就能够实现从页号到span地址的寻址。</p><p>在64位环境下，考虑到地址空间很大，因此通过一个3层的基数树（radixtree）来建立页号到span地址的映射。</p><h3 id="释放">2.4 释放</h3><p>当内存对象释放时，首先根据内存页号查出对应的span对象。通过span对象进行判断：</p><ol type="1"><li>如果是小对象，则将其插入其线程缓存中对应尺寸的空闲链表（freelist）中。<ol type="1"><li>如果线程缓存超出了预设尺寸（默认2MB），则需要运行垃圾回收，将线程缓存中不用的对象还给中央堆的空闲链表。</li></ol></li><li>如果是大对象，则将span管理的内存页与相邻内存页合并后，还给中央堆区的空闲链表。</li></ol><h3 id="线程缓存的垃圾回收">2.5 线程缓存的垃圾回收</h3><p>当线程缓存中的空余内存超过阈值（默认2MB）时，会触发垃圾回收，把线程缓存中的内存还给中央堆区的空闲链表。</p><p>当线程数量增加时，垃圾回收阈值会减小，以免线程数量很多时浪费内存空间。</p><p>垃圾回收机制会记录线程缓存中每一个空闲链表的低水位L。L指的是自上一次垃圾回收以来该链表的最短长度。TCMalloc每次将空闲链表中L/2个内存对象回收到中央堆区。每次回收L/2，这样的回收速度能够很快地将长期不用的空闲链表回收到中央堆区的空闲链表中，以便其他有需要的线程快速获取。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> TCMalloc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Web开发笔记</title>
      <link href="/posts/Go-Web%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/Go-Web%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>整理Go Web开发的相关知识点。</p><span id="more"></span><h1 id="go-web开发笔记">Go Web开发笔记</h1><h2 id="gowikigo-web应用案例">1 GoWiki：Go Web应用案例</h2><p>GoWiki是一个极简的GoWeb应用，使用Go语言内置的<code>html/template</code>和<code>net/http</code>等库实现，实现基本的百科网站功能，包含词条创建、编辑、保存和浏览功能。</p><p>本节内容总结自官方教程<ahref="https://golang.org/doc/articles/wiki/">Writing WebApplications</a>。</p><h3 id="项目结构">1.1 项目结构</h3><p><code>gowiki</code></p><ul><li><code>wiki.go</code></li><li><code>edit.html</code></li><li><code>view.html</code></li></ul><h3 id="代码实现">1.2 代码实现</h3><h4 id="wiki.go">1.3.1 wiki.go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Writing Web Applications</span></span><br><span class="line"><span class="comment">// Official Example from https://golang.org/doc/articles/wiki/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;html/template&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;regexp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Page <span class="keyword">struct</span> &#123;</span><br><span class="line">Title <span class="type">string</span></span><br><span class="line">Body  []<span class="type">byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> templates = template.Must(template.ParseFiles(<span class="string">&quot;edit.html&quot;</span>, <span class="string">&quot;view.html&quot;</span>))</span><br><span class="line"><span class="keyword">var</span> validPath = regexp.MustCompile(<span class="string">&quot;^/(edit|save|view)/([a-zA-Z0-9]+)$&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Page)</span></span> save() <span class="type">error</span> &#123;</span><br><span class="line">filename := p.Title + <span class="string">&quot;.txt&quot;</span></span><br><span class="line"><span class="keyword">return</span> ioutil.WriteFile(filename, p.Body, <span class="number">0600</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadPage</span><span class="params">(title <span class="type">string</span>)</span></span> (*Page, <span class="type">error</span>) &#123;</span><br><span class="line">filename := title + <span class="string">&quot;.txt&quot;</span></span><br><span class="line">body, err := ioutil.ReadFile(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;Page&#123;Title: title, Body: body&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getTitle</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">m := validPath.FindStringSubmatch(r.URL.Path)</span><br><span class="line"><span class="keyword">if</span> m == <span class="literal">nil</span> &#123;</span><br><span class="line">http.NotFound(w, r)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, errors.New(<span class="string">&quot;invalid Page Title&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m[<span class="number">2</span>], <span class="literal">nil</span> <span class="comment">// The title is the second subexpression.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">renderTemplate</span><span class="params">(w http.ResponseWriter, tmpl <span class="type">string</span>, p *Page)</span></span> &#123;</span><br><span class="line">err := templates.ExecuteTemplate(w, tmpl+<span class="string">&quot;.html&quot;</span>, p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewHandler</span><span class="params">(w http.ResponseWriter, r *http.Request, title <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">p, err := loadPage(title)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Redirect(w, r, <span class="string">&quot;/edit/&quot;</span>+title, http.StatusFound)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">renderTemplate(w, <span class="string">&quot;view&quot;</span>, p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">editHandler</span><span class="params">(w http.ResponseWriter, r *http.Request, title <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">p, err := loadPage(title)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">p = &amp;Page&#123;Title: title&#125;</span><br><span class="line">&#125;</span><br><span class="line">renderTemplate(w, <span class="string">&quot;edit&quot;</span>, p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveHandler</span><span class="params">(w http.ResponseWriter, r *http.Request, title <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">body := r.FormValue(<span class="string">&quot;body&quot;</span>)</span><br><span class="line">p := &amp;Page&#123;Title: title, Body: []<span class="type">byte</span>(body)&#125;</span><br><span class="line">err := p.save()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">http.Redirect(w, r, <span class="string">&quot;/view/&quot;</span>+title, http.StatusFound)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeHandler</span><span class="params">(fn <span class="keyword">func</span>(http.ResponseWriter, *http.Request, <span class="type">string</span>)</span></span>) http.HandlerFunc &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">m := validPath.FindStringSubmatch(r.URL.Path)</span><br><span class="line"><span class="keyword">if</span> m == <span class="literal">nil</span> &#123;</span><br><span class="line">http.NotFound(w, r)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fn(w, r, m[<span class="number">2</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/view/&quot;</span>, makeHandler(viewHandler))</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/edit/&quot;</span>, makeHandler(editHandler))</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/save/&quot;</span>, makeHandler(saveHandler))</span><br><span class="line">host := <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">port := <span class="number">8080</span></span><br><span class="line">addr := fmt.Sprintf(<span class="string">&quot;%s:%v&quot;</span>, host, port)</span><br><span class="line">fmt.Printf(<span class="string">&quot;goWiki start listening at http://%s\n&quot;</span>, addr)</span><br><span class="line">log.Fatal(http.ListenAndServe(addr, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="edit.html">1.3.2 edit.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Editing &#123;&#123;.Title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/save/&#123;&#123;.Title&#125;&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;body&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;20&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;80&quot;</span>&gt;</span>&#123;&#123;printf &quot;%s&quot; .Body&#125;&#125;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Save&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="view.html">1.3.3 view.html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;.Title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>[<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/edit/&#123;&#123;.Title&#125;&#125;&quot;</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">a</span>&gt;</span>]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;printf &quot;%s&quot; .Body&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运行说明">1.3 运行说明</h3><p>单文件go程序，通过以下命令即可运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run wiki.go</span><br></pre></td></tr></table></figure><p>或编译后再运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go build wiki.go</span><br><span class="line">./wiki.go</span><br></pre></td></tr></table></figure><h2 id="gingo-web框架">2 Gin：Go Web框架</h2><p>从上节可以看到，Go语言的<code>net/http</code>和<code>html/template</code>已经足够实现基本的Web应用，但Go自带的路由<code>http.ServerMux</code>机制简单，只能实现从请求路径（string）到处理函数（handler）的映射，无法根据HTTP的方法（Method），请求头（header）进行路由。GoWeb框架实现了比内置库更丰富的功能，例如<ahref="https://github.com/gin-gonic/gin">Gin</a>。</p><blockquote><p><strong><a href="https://github.com/gin-gonic/gin">Gin WebFramework</a></strong></p><p>Gin is a web framework written in Go (Golang). It features amartini-like API with performance that is up to 40 times faster thanksto <a href="https://github.com/julienschmidt/httprouter">httprouter</a>.If you need performance and good productivity, you will love Gin.</p></blockquote><p>此外，还有其他Go Web框架，如：<ahref="https://github.com/gorilla/mux">gorilla/mux</a>、<ahref="https://github.com/labstack/echo">echo</a>。</p><h2 id="数据库存储">3 数据库存储</h2><h3 id="sql">3.1 SQL</h3><p>Go语言没有内置数据库驱动。</p><p>Go语言定义了<code>database/sql</code>接口，分离出接口实现与接口调用，使得调用方改换数据库时无需修改代码。</p><blockquote><p>参阅：<ahref="https://github.com/longjoy/micro-go-book/blob/master/ch5-web/mysql/mysql.go">longjoy/micro-go-book/ch5-web/mysql/mysql.go</a></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">db, err = sql.Open(<span class="string">&quot;mysql&quot;</span>,</span><br><span class="line"><span class="string">&quot;root:a123456@tcp(47.96.140.41:3366)/user?charset=utf8&quot;</span>)</span><br><span class="line">checkErr(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryByName</span><span class="params">(name <span class="type">string</span>)</span></span> User &#123;</span><br><span class="line">user := User&#123;&#125;</span><br><span class="line">stmt, err := db.Prepare(<span class="string">&quot;select * from user where name=?&quot;</span>)</span><br><span class="line">checkErr(err)</span><br><span class="line"></span><br><span class="line">rows, _ := stmt.Query(name)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;\nafter deleting records: &quot;</span>)</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> id <span class="type">int</span></span><br><span class="line"><span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> habits <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> createdTime <span class="type">string</span></span><br><span class="line">err = rows.Scan(&amp;id, &amp;name, &amp;habits, &amp;createdTime)</span><br><span class="line">checkErr(err)</span><br><span class="line">fmt.Printf(<span class="string">&quot;[%d, %s, %s, %s]\n&quot;</span>, id, name, habits, createdTime)</span><br><span class="line">user = User&#123;id, name, habits, createdTime&#125;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">store</span><span class="params">(user User)</span></span> &#123;</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">stmt, err := db.Prepare(<span class="string">&quot;INSERT INTO user SET name=?,habits=?,created_time=?&quot;</span>)</span><br><span class="line">t := time.Now().UTC().Format(<span class="string">&quot;2006-01-02&quot;</span>)</span><br><span class="line">res, err := stmt.Exec(user.Name, user.Habits, t)</span><br><span class="line">checkErr(err)</span><br><span class="line"></span><br><span class="line">id, err := res.LastInsertId()</span><br><span class="line">checkErr(err)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;last insert id is: %d\n&quot;</span>, id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nosql">3.2 NoSQL</h3><p>Go语言的结构体和NoSQL的JSON可以很好地直接对应起来，因此，Go语言中一般可以直接操作NoSQL，不依赖ORM。</p><blockquote><p>参阅：<ahref="https://github.com/longjoy/micro-go-book/blob/master/ch5-web/mongo/mongo.go">longjoy/micro-go-book/ch5-web/mongo/mongo.go</a></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">connect</span><span class="params">(cName <span class="type">string</span>)</span></span> (*mgo.Session, *mgo.Collection) &#123;</span><br><span class="line">session, err := mgo.Dial(<span class="string">&quot;mongodb://47.96.140.41:27017/&quot;</span>) <span class="comment">//Mongodb&#x27;s connection</span></span><br><span class="line">checkErr(err)</span><br><span class="line">session.SetMode(mgo.Monotonic, <span class="literal">true</span>)</span><br><span class="line"><span class="comment">//return a instantiated collect</span></span><br><span class="line"><span class="keyword">return</span> session, session.DB(<span class="string">&quot;test&quot;</span>).C(cName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryByName</span><span class="params">(name <span class="type">string</span>)</span></span> []User &#123;</span><br><span class="line"><span class="keyword">var</span> user []User</span><br><span class="line">s, c := connect(<span class="string">&quot;user&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> s.Close()</span><br><span class="line">err := c.Find(bson.M&#123;<span class="string">&quot;name&quot;</span>: name&#125;).All(&amp;user)</span><br><span class="line">checkErr(err)</span><br><span class="line"><span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">store</span><span class="params">(user User)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">s, c := connect(<span class="string">&quot;user&quot;</span>)</span><br><span class="line"><span class="keyword">defer</span> s.Close()</span><br><span class="line">user.Id = bson.NewObjectId().Hex()</span><br><span class="line"><span class="keyword">return</span> c.Insert(&amp;user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="beegoormgo-orm框架">3.3 beego/orm：Go ORM框架</h3><blockquote><p><a href="https://github.com/beego/beego">Beego</a></p><p>Beego is used for rapid development of enterprise application in Go,including RESTful APIs, web apps and backend services.</p><p>It is inspired by Tornado, Sinatra and Flask. beego has someGo-specific features such as interfaces and struct embedding.</p></blockquote><p>Beego是一个简单易用的企业级Go应用开发框架，其中包含了ORM框架。</p><p>Beego的ORM的具体使用方法可以参阅其文档：</p><blockquote><p><a href="https://beego.me/docs/mvc/model/orm.md">ORM 使用方法</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> Web </tag>
            
            <tag> Golang </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib绘制图像注意力</title>
      <link href="/posts/matplotlib%E7%BB%98%E5%88%B6%E5%9B%BE%E5%83%8F%E6%B3%A8%E6%84%8F%E5%8A%9B/"/>
      <url>/posts/matplotlib%E7%BB%98%E5%88%B6%E5%9B%BE%E5%83%8F%E6%B3%A8%E6%84%8F%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<p>通过matplotlib可以在图像表层对图像注意力机制进行可视化绘制，即将图像注意力叠加在图像表层。</p><span id="more"></span><h1 id="matplotlib绘制图像注意力">matplotlib绘制图像注意力</h1><h2 id="效果展示">1 效果展示</h2><img src="/posts/matplotlib%E7%BB%98%E5%88%B6%E5%9B%BE%E5%83%8F%E6%B3%A8%E6%84%8F%E5%8A%9B/demo_img_att.png" class="" title="Demo image with attention masked on it"><h2 id="实现原理">2 实现原理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># read target image</span></span><br><span class="line">demo_img_path = <span class="string">r&quot;res\img\36979.jpg&quot;</span></span><br><span class="line">demo_img = plt.imread(demo_img_path)</span><br><span class="line">demo_img_h, demo_img_w, demo_img_c = demo_img.shape</span><br><span class="line"></span><br><span class="line">demo_img_att = np.array([</span><br><span class="line">    [<span class="number">0.1</span>, <span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">0.4</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0.4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>, <span class="number">0.4</span>],</span><br><span class="line">    [<span class="number">0.2</span>, <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.4</span>],</span><br><span class="line">    [<span class="number">0.3</span>, <span class="number">0.4</span>, <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">])</span><br><span class="line"><span class="comment"># resize the image attention to the target image size with interpolation</span></span><br><span class="line">demo_img_att = cv2.resize(demo_img_att,</span><br><span class="line">                          dsize=(demo_img_w, demo_img_h),</span><br><span class="line">                          interpolation=cv2.INTER_CUBIC)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot with matplotlib</span></span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot target image</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.imshow(demo_img)</span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;image&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># plot image with attention masked on it</span></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.imshow(demo_img)</span><br><span class="line">plt.imshow(demo_img_att, alpha=<span class="number">0.8</span>, cmap=<span class="string">&quot;gray&quot;</span>)</span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;image with attention&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># shrink padding etc. to a tight layout</span></span><br><span class="line">plt.tight_layout()</span><br><span class="line"></span><br><span class="line"><span class="comment"># save figure and show on display</span></span><br><span class="line">plt.savefig(<span class="string">&quot;demo_img_att.png&quot;</span>)     <span class="comment"># to disk</span></span><br><span class="line">plt.show()                          <span class="comment"># on display</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要的绘制要点在于：</p><ol type="1"><li>绘制前，需要对注意力层进行插值，调整到与原图相同的尺寸；</li><li>绘制时，先绘制原图，再绘制插值后的注意力层，且绘制时设置好colormap(<code>cmap</code>)。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OpenCV </tag>
            
            <tag> matplotlib </tag>
            
            <tag> Attention </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>投资学笔记</title>
      <link href="/posts/%E6%8A%95%E8%B5%84%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/%E6%8A%95%E8%B5%84%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>通过中央财经大学的投资学课程，系统性地学习基本的投资学原理。</p><span id="more"></span><h1 id="投资学笔记">投资学笔记</h1><p><em>对投资做的好的大师，首先必须是控制风险的大师。</em></p><h2 id="投资的内涵及其与宏观经济的关系">1投资的内涵及其与宏观经济的关系</h2><h3 id="投资与投资主体">1.1 投资与投资主体</h3><h4 id="投资的定义">投资的定义</h4><p>为了（可能不确定的）将来的消费（价值）而牺牲现在一定的消费（价值）。</p><h4 id="投资主体">投资主体</h4><h5 id="家庭">家庭</h5><p>家庭收入</p><ul><li>投资<ul><li>直接投资：资金的使用者和所有者一致；</li><li>间接投资：资金的使用者和所有者不一致。</li></ul></li><li>消费<ul><li>购买商品或服务</li></ul></li></ul><h5 id="企业">企业</h5><p>企业收入用于</p><ul><li>投资<ul><li>研发投资、员工培训</li><li>建造厂房、购买设备</li><li>存货投资</li><li>金融投资</li></ul></li><li>消费<ul><li>工资福利</li><li>原材料</li></ul></li></ul><h5 id="企业与家庭">企业与家庭</h5><p>企业的工资福利流入家庭，家庭的投资和消费流入企业。</p><h5 id="政府">政府</h5><p>资金来源</p><ul><li>税收</li><li>政府融资</li></ul><p>政府收入用于</p><ul><li>政府投资<ul><li>直接投资</li><li>间接投资</li></ul></li><li>政府支出<ul><li>医疗等社会保障</li><li>公务员支出</li></ul></li></ul><h4 id="投资活动">投资活动</h4><h5 id="直接投资">直接投资</h5><ul><li>居民或企业建造房屋等不动产</li><li>企业研发费用、存货投资</li><li>政府投资基础建设</li></ul><h5 id="间接投资">间接投资</h5><ul><li>居民投资购买商品房或金融资产</li><li>企业购买金融资产</li><li>政府购买国内外金融资产</li></ul><h5 id="实物资产投资">实物资产投资</h5><ul><li>居民建造房屋、投资购买商品房</li><li>企业建设厂房、购买设备、存货投资</li><li>政府投资基础设施</li></ul><h5 id="金融资产投资">金融资产投资</h5><ul><li>居民投资股票、债券、基金或存款</li><li>企业购买股票、债券、衍生品等金融资产</li><li>政府购买国内外金融资产</li></ul><h3 id="投资与宏观经济运行的内部逻辑">1.2投资与宏观经济运行的内部逻辑</h3><h4 id="资产负债表">资产负债表</h4><p>企业部门的金融负债和居民部门的金融资产接近。</p><p>宏观经济上，企业部门的负债主要来源于居民部门的金融资产。</p><h4 id="金融泡沫">金融泡沫</h4><p>当股票等金融资产价格呈现上涨趋势时，</p><ul><li>家庭投入更多收入到金融资产</li><li>企业融资或变卖实物资产到金融资产</li><li>银行的货币创造进一步推高金融资产价格</li></ul><p>形成金融泡沫。</p><h4 id="虚拟经济">虚拟经济</h4><h5 id="虚拟经济与实体经济">虚拟经济与实体经济</h5><p>虚拟经济与实体经济是此消彼长，又相辅相成的。</p><h5 id="托宾q系数">托宾Q系数</h5><p>Q = 公司的市场价值/公司的重置成本</p><ul><li>Q&gt;1，投资者理性选择出售股票，然后重新建立同样的公司获得更多收益；</li><li>Q&lt;1，投资者倾向并购公司扩张，而非重建。</li></ul><p>实际情况Q一般大于1，因为存在专利、壁垒等……</p><h3 id="投资与短期经济增长">1.3 投资与短期经济增长</h3><h4 id="投资-储蓄恒等式">投资-储蓄恒等式</h4><p><strong>C+S=C+I</strong></p><p>居民消费C+居民储蓄S=企业所生产产品C+企业投资I</p><p>加入政府和国际经济体时：</p><p><strong>C+S+T+Kr=C+I</strong></p><h3 id="政府投资与短期经济增长案例">1.4 政府投资与短期经济增长案例</h3><p>维持经济稳定，应对金融危机的4万亿投资计划</p><ul><li>29.50%，11800亿，来自中央预算内投资、重要政府性基金、中央财政其他公共投资以及中央财政灾后恢复重建基金；</li><li>70.50%，28200亿，来自地方财政预算、中央财政代发地方政府债券、政策性贷款、企业债券和中期票据、银行贷款以及民间投资。</li></ul><p>影响：</p><ol type="1"><li>央行资产负债表扩表，货币规模增幅超两倍；</li><li>社会融资规模高速增长，增幅超过200%；</li><li>地方政府债务规模扩大，违约可能性大大提高。</li></ol><p>负面效应：</p><ol type="1"><li>各部门债务高企、违约概率大大提高；</li><li>产能过剩（投资挤压消费）、结构失衡、亟待供给侧改革；</li><li>民营企业倒闭潮、工人失业；</li><li>房价飙升（M2增速很快），催生一系列民生问题。</li></ol><h3 id="投资与长期经济增长和经济波动">1.5投资与长期经济增长和经济波动</h3><h4 id="投资与长期经济增长">投资与长期经济增长</h4><h5 id="索洛模型">索洛模型</h5><p>只有生产和消费。</p><p>储蓄总是等于投资。</p><p>生产三大要素：资本K、劳动L、知识A。</p><p>资本投入存在边际效应。</p><p>索洛模型表明：在具有相同生产函数、储蓄和折旧率情况下，经济体最终所达到的均衡状态与初始状态无关。</p><p>提高储蓄率，可以增加资本投入，继而提高人均产出。</p><p>但是，储蓄率过分提高，会牺牲一代人的消费。</p><h5 id="内生增长模型">内生增长模型</h5><p>将技术进步纳入内生变量。</p><p>纳入技术进步后，资本的边际报酬不再递减。</p><p>案例：供给侧改革</p><h4 id="投资与经济波动">投资与经济波动</h4><h5 id="萨穆尔森-凯恩斯经济周期理论">萨穆尔森-凯恩斯经济周期理论</h5><p>由于投资存在乘数效应且产出存在加速效应，因此到达一定峰值后，经济就会衰退，到达低谷后，一些投资需求被刺激，又进入上升通道。</p><p>认为投资和消费本身的特性产生了经济周期。</p><h5 id="实际经济周期理论">实际经济周期理论</h5><p>认为经济周期是外部因素引起的。</p><p>熊彼特的创新周期论。</p><p>卡莱斯基的政治周期论。</p><h3 id="投资规模与投资效率">1.6 投资规模与投资效率</h3><h4 id="投资规模">投资规模</h4><p>年度投资规模（短期、流量）</p><p>在建投资规模（长期、存量）</p><h4 id="投资结构">投资结构</h4><p>投资主体结构：</p><ul><li>企业<ul><li>利润最大化</li><li>自主投资、市场化运作</li><li>促进经济发展</li></ul></li><li>政府<ul><li>社会福利最大化</li><li>国企投资、政策影响</li><li>调整经济结构</li></ul></li></ul><h4 id="投资效率的衡量">投资效率的衡量</h4><h5 id="资本产出比">资本产出比</h5><p>Capital-Output Ratio, COR</p><h5 id="投资产出比">投资产出比</h5><p>Incremental Capital-Output Ratio, ICOR</p><h5 id="资本边际收益均一化原则">资本边际收益均一化原则</h5><p>当市场有效且达到均衡时，各个部门的资本边际收益率呈现均一化的特征。</p><p>（否则资本会从低收益部门流向高收益部门）</p><h5 id="衡量方式">衡量方式</h5><ul><li><p>调整推算法：对统计数据要求很高；</p></li><li><p>函数估计法：需要假定生产函数。</p></li></ul><h2 id="行业投资分析">2 行业投资分析</h2><h3 id="行业的涵义与分类">2.1 行业的涵义与分类</h3><h4 id="行业的涵义">2.1.1 行业的涵义</h4><p>一个企业群，群内各成员所生产的商品对消费者时可互相替代的。</p><h4 id="行业的分类">2.1.2 行业的分类</h4><p>道琼斯分类法</p><p>联合国国际标准行业分类法</p><p>我国国民经济行业分类法</p><p>我国上市公司行业分类法</p><ul><li>证监会标准</li><li>申银万国分类标准</li><li>Wind分类标准</li></ul><h3 id="行业的生命周期">2.2 行业的生命周期</h3><h4 id="行业生命周期的阶段">2.2.1 行业生命周期的阶段</h4><p>四个阶段：</p><ol type="1"><li>创业阶段：开始增长<ol type="1"><li>大众尚未认知该产品/服务，市场需求较小</li><li>投资规模小，风险很大</li></ol></li><li>成长阶段：快速增长<ol type="1"><li>大众认识到该产品/服务，市场需求迅速扩大</li><li>销售收入迅速扩大，开始盈利</li><li>产品需要完善，投资需求强烈，风险较大（新生事物政策风险大）</li></ol></li><li>成熟阶段：缓慢增长<ol type="1"><li>市场趋于饱和，市场竞争（相对）垄断，少数企业分享高额利润</li><li>产品成熟稳定，投资需求不大，风险较低，投资可获得稳定回报</li></ol></li><li>衰退阶段：缓慢下滑<ol type="1"><li>本产品更新跟不上大量出现的替代品</li><li>市场需求减少，销售利润下降，风险增大，不宜大量投资</li></ol></li></ol><h4 id="行业发展阶段分析">2.2.2 行业发展阶段分析</h4><table><thead><tr class="header"><th>特征</th><th>创业阶段</th><th>成长阶段</th><th>成熟阶段</th><th>衰退阶段</th></tr></thead><tbody><tr class="odd"><td>行业规模</td><td>较小</td><td>扩大</td><td>饱和</td><td>缩小</td></tr><tr class="even"><td>产出增长</td><td>较快</td><td>很快</td><td>较慢</td><td>很慢，甚至为负</td></tr><tr class="odd"><td>利润水平</td><td>低</td><td>高</td><td>低</td><td>亏损</td></tr><tr class="even"><td>技术创新</td><td>较快</td><td>逐渐稳定</td><td>稳定</td><td>淘汰或被替代</td></tr><tr class="odd"><td>竞争者数量</td><td>很多</td><td>增多</td><td>下降</td><td>降至不足</td></tr><tr class="even"><td>开工率</td><td>提高</td><td>满负荷</td><td>下降</td><td>降至不足</td></tr><tr class="odd"><td>资本进退</td><td>进大于出</td><td>进大于出</td><td>进出平衡</td><td>进小于出</td></tr></tbody></table><h4 id="影响行业兴衰的因素">2.2.3 影响行业兴衰的因素</h4><ol type="1"><li>技术进步</li><li>社会习惯</li><li>产业政策</li><li>经济全球化</li></ol><p>其他高壁垒行业、政府介入行业等，难以用行业生命周期解释。</p><h3 id="行业与经济周期">2.3 行业与经济周期</h3><h4 id="不同行业对经济周期的敏感度">2.3.1不同行业对经济周期的敏感度</h4><table><colgroup><col style="width: 13%" /><col style="width: 27%" /><col style="width: 28%" /><col style="width: 30%" /></colgroup><thead><tr class="header"><th></th><th>增长型</th><th>周期型</th><th>防御型</th></tr></thead><tbody><tr class="odd"><td>与经济周期的关系</td><td>受经济周期影响不大</td><td>与经济周期直接相关</td><td>产品需求相对稳定，受经济周期影响较小</td></tr><tr class="even"><td>增长的核心来源</td><td>技术进步等不受经济周期影响的因素</td><td>居民收入等受经济周期直接影响的因素</td><td>居民刚性需求</td></tr><tr class="odd"><td>案例</td><td>计算机相关行业</td><td>汽车等行业</td><td>医药、生活必需品等行业</td></tr><tr class="even"><td>经济繁荣时</td><td>增长</td><td>增长</td><td>相对稳定</td></tr><tr class="odd"><td>经济衰退时</td><td>增长</td><td>衰落</td><td>相对稳定</td></tr></tbody></table><h4 id="经济周期敏感度的决定因素">2.3.2 经济周期敏感度的决定因素</h4><ol type="1"><li>销售额对经济周期的敏感度</li><li>经营杠杆</li><li>财务杠杆</li></ol><h4 id="行业轮动美林的投资时钟理论">2.3.3行业轮动——美林的投资时钟理论</h4><p>行业轮动是根据商业周期状态预测业绩卓越的行业或部门，并将投资组合转向这些行业或部门。</p><p>宏观经济周期分为四个阶段：</p><ol type="1"><li>衰退<ol type="1"><li>低增长、低通胀</li><li>债券投资</li></ol></li><li>复苏<ol type="1"><li>高增长、低通胀</li><li>股票投资</li></ol></li><li>过热<ol type="1"><li>高增长、高通胀</li><li>大宗商品</li></ol></li><li>滞胀<ol type="1"><li>低增长、高通胀</li><li>现金</li></ol></li></ol><p>投资策略：</p><ol type="1"><li>周期性<ol type="1"><li>经济增长加快时，投资股票和大宗商品，选择周期型行业（如汽车、钢铁）；</li><li>经济增长减慢时，投资债券或现金，选择防御型行业（如医药、公共事业）；</li></ol></li><li>久期<ol type="1"><li>通胀率下降时，投资债券或股票，选择久期较长的债券或成长型股票；</li><li>通胀率上升时，折现率上升，投资大宗商品和现金，或估值波动小且久期短的价值型股票。</li></ol></li></ol><p>适用情况：</p><ol type="1"><li>在美国有效，1973.4-2004.7超过30年，美国经济周期可较明确分为四个阶段，每阶段平均20个月左右，一个经济周期约6年。</li><li>在中国不完全适用，因为：<ol type="1"><li>央行货币政策逆周期调整对金融市场影响巨大（2011-2015经济稳步下降，2013年收紧货币使流动性趋紧、股市大跌，2015年降准降息等改革政策推动短期大牛市），</li><li>经济转型的结构性调整也有很大影响（复苏阶段供给侧改革淘汰落后产能）。</li></ol></li></ol><h3 id="行业的结构及其分析">2.4 行业的结构及其分析</h3><h4 id="行业的结构分析">2.4.1 行业的结构分析</h4><table style="width:100%;"><colgroup><col style="width: 8%" /><col style="width: 17%" /><col style="width: 12%" /><col style="width: 26%" /><col style="width: 35%" /></colgroup><thead><tr class="header"><th>特征</th><th>完全竞争</th><th>垄断竞争</th><th>寡头垄断</th><th>完全垄断</th></tr></thead><tbody><tr class="odd"><td>企业数目</td><td>众多</td><td>很多</td><td>较少</td><td>单个企业</td></tr><tr class="even"><td>生产要素流动性</td><td>完全自由流动</td><td>自由流动</td><td>较难流动</td><td>不流动</td></tr><tr class="odd"><td>产品差异性</td><td>同质无差别</td><td>存在差别</td><td>同质或存在差别</td><td>无</td></tr><tr class="even"><td>企业定价能力</td><td>企业仅接受价格，无法制定价格</td><td>企业对价格有控制能力</td><td>企业对价格具有垄断能力</td><td>企业垄断定价，但受到法律管制</td></tr><tr class="odd"><td>典型行业</td><td>初级产品（例如：农产品）</td><td>家电、洗发水等消费品</td><td>资本、技术密集型行业，少数储量集中的矿产品</td><td>公共事业，资本、技术高度密集型行业，稀有金属矿藏开采行业</td></tr></tbody></table><h4 id="波特的五力模型">2.4.2 波特的五力模型</h4><ol type="1"><li>供应商：供应商议价能力<br /></li><li>购买者：买方议价能力</li><li>竞争对手：现有公司之间的竞争</li><li>潜在进入者：新进入者的威胁</li><li>替代品：替代品的威胁</li></ol><h4 id="其他行业分析工具">2.4.3 其他行业分析工具</h4><h5 id="pestle模型">PESTLE模型</h5><ol type="1"><li>政治P</li><li>经济因素E</li><li>社会文化因素S</li><li>科技T</li><li>法律L</li><li>环保E</li></ol><h5 id="行业集中度分析模型">行业集中度分析模型</h5><p>集中度体现在行业前K名的累计市场份额。</p><p>集中度曲线：</p><ul><li>上升，则行业竞争激烈，优势企业纷纷渠道扩张、降价等方式扩大市场。<ul><li>迅速上升蕴含发展机会，加大市场投入、加快渠道建设往往成效。</li></ul></li><li>稳定，则市场竞争结构稳定，领导企业优势地位业已建立。<ul><li>稳定中的行业机会不大，企业扩张会受到领导企业的集体抵制，需细分化、差异化发展。</li></ul></li></ul><p>散点市场-&gt;块状同质化市场-&gt;团状异质化市场</p><h5 id="行业关键成功要素模型">行业关键成功要素模型</h5><p>列表格，对要素打分。</p><h3 id="行业定量分析">2.5 行业定量分析</h3><h4 id="市盈率">2.5.1 市盈率</h4><p><strong>行业市盈率=行业（价格）指数 / 行业利润率</strong></p><ul><li><p>行业指数代表投资者对行业的估值；</p></li><li><p>行业利润率代表行业的盈利能力。</p></li></ul><p>投资策略：同等条件下，尽量选择行业指数和行业利润率较高，而市盈率较低的行业。</p><p>注意：行业之间的市盈率不具备可比性。</p><h4 id="回归分析法估计行业收益率">2.5.2 回归分析法估计行业收益率</h4><p>利用行业的历史数据回归估计行业收益率。</p><p>注意：有效市场中，未来股价不受过去股价影响，用现在收益率难以预测未来收益率。因此一般很少用定量分析预测行业未来，常用定性分析和经验。</p><h2 id="项目投资评估方法">3 项目投资评估方法</h2><p>略</p><h2 id="融资与创新">4 融资与创新</h2><p>金融工具一般按期限来分类：</p><ul><li>一年期以上，称为资本市场，高风险高收益；</li><li>一年期以下，称为货币市场，大多流动性好、信用安全。</li></ul><h3 id="债券市场">4.1 债券市场</h3><h4 id="债券市场概况">4.1.1 债券市场概况</h4><p>债券市场可追溯到1792年纽约股票交易所。</p><h5 id="美国债券市场">美国债券市场</h5><ol type="1"><li>美国政府债券：<ol type="1"><li>短期国库券（Treasury Bills）：90天~1年不等；</li><li>中期国库票据（Treasury Notes）：2~10年不等；</li><li>长期国债（Treasury Bonds）：10~30年不等。</li><li>以政府信用担保，还可免交州及地方税。</li></ol></li><li>市政债券：州和地方政府发行，类似我国的地方债<ol type="1"><li>一般责任债券：由发行者的信用（财政能力、收税能力）支撑；</li><li>收入债券：由地方基建、公共服务的收益支撑；</li><li>安全性：一般责任债券&gt;收入债券</li><li>也可免税</li></ol></li><li>政府机构债券<ol type="1"><li>通常是联邦政府级机构发行，用于资助和公共政策相关项目，如：农业、小企业、首次购房者贷款。</li></ol></li><li>公司债券<ol type="1"><li>即使大公司也有风险，会受到经济、管理及竞争等的影响</li><li>发行需经过评级认定，有：标准普尔、穆迪、惠誉</li></ol></li></ol><h4 id="债券分类及简介">4.1.2 债券分类及简介</h4><h5 id="国债">国债</h5><p>形式：</p><ol type="1"><li>凭证式国债：记名、可挂失、仅银行网点、财政部门国债服务部发行，不上市流通；</li><li>记账式国债：1994年开始发行，电脑系统账户，记名、可挂失、效率高、简便；</li><li>不记名（实物）国债：不记名、不挂失、可流通。</li></ol><p>风险：安全性非常好，近乎于现金等价物。</p><p>期限：</p><ol type="1"><li>短期国债</li><li>中长期国债</li></ol><p>目的：</p><ol type="1"><li>央行利用短期国债做公开市场运作</li><li>作为市场无风险利率基准</li><li>第二准备金</li><li>筹集财政资金</li></ol><p>发行：</p><ol type="1"><li>固定收益出售法</li><li>公募拍卖：竞价投标；<ol type="1"><li>美式拍卖：“加价拍卖”，以加权平均中标价格为当期国债发行价格<ol type="1"><li>竞争性报价中标者按各自高低不同的投标价购买国债，通常是大型机构投资者；</li><li>非竞争性报价中标者按加权平均中标价格购买，通常是中小型投资者。</li></ol></li><li>荷兰式拍卖：“减价拍卖”，按竞价递减直到第一个竞价人应价（或到达底价）时击槌成交，以最低成功出价金额作为成交价，作为当期国债发行价，中标者统一按发行价购买国债；<ol type="1"><li>价高者优先，相同价格先出价先得；</li></ol></li><li>混合式拍卖：两种混合，以加权平均中标价格作为债券发行价格；<ol type="1"><li>高于或等于发行价的中标，按发行价购买国债（荷兰式）；</li><li>低于发行价一定范围的中标，按各中标价格购买（美国式）；</li><li>低于发行价超出一定范围的中标，全部落标。</li></ol></li></ol></li><li>连续经销：柜台出卖；</li><li>承受发行：直接推销；</li></ol><h5 id="地方政府债券">地方政府债券</h5><p>地方政府募资发行。</p><p>目的：</p><ol type="1"><li>帮助国家实施财政或货币政策；</li><li>公共设施建设；</li><li>弥补财政赤字。</li></ol><p>规模：远远大于国债发行数量。</p><p>还本付息受财政、地方发展水平影响，信用比国债低些。</p><h5 id="央行票据">央行票据</h5><p>中央银行票据，调节商业银行超额准备金而发行的短期债务凭证，实质时中央银行债券。</p><p>目的：不是为了筹集资金，而是央行调节基础货币的货币政策工具，为了减少商业银行可贷资金量。</p><h5 id="大额可转让存单cds">大额可转让存单CDs</h5><p>因资金流向债券，商业银行需要吸引储蓄稳定存款。</p><p>存单注明存款期限和利率，可到期取本息，也可到期前转让，可在二级市场流通。</p><h5 id="同业存单">同业存单</h5><p>银行和基金公司间流通，同业拆借。</p><h5 id="债券回购">债券回购</h5><p>回购协议：先卖出债券，再回购。相当于以债券作为抵押品。</p><h5 id="金融债">金融债</h5><p>金融机构发行的债券。</p><h5 id="公司债">公司债</h5><p>企业发行的债券，受证监会管理。</p><p>风险和收益都高于国债。</p><h5 id="企业债">企业债</h5><p>在西方，企业债即公司债。</p><p>在我国，企业债券是中央政府部门所属机构、国有独资企业或国有控股企业发行的债券。</p><p>企业债的发行与政府部门的审批项目直接相关，发行由发改委审批。</p><h5 id="商业票据">商业票据</h5><p>金融公司或高信用企业开出的无担保短期票据。</p><p>期限在1个月~1年，通常滚动发行，为旧票据还本付息。</p><h5 id="短期融资券">短期融资券</h5><p>企业在银行间市场发行，由金融机构购买，不向社会发行，一年期内还本付息的有价证券，是短期贷款的替代品。</p><p>无担保、短期、需评级。</p><h5 id="中期票据">中期票据</h5><p>企业在银行间市场发行，是中期贷款的替代品。</p><h5 id="可转债">可转债</h5><p>可选是否将债券一定比例转为股权，赋予了债券一定程度的期权能力。</p><h5 id="国际债券">国际债券</h5><p>可以在海外发行的债券。</p><h5 id="私募债">私募债</h5><p>中小型企业的募资需求。</p><h3 id="资产证券化">4.2 资产证券化</h3><h4 id="基本理论">4.2.1 基本理论</h4><p>资产证券化（AssetSecuritization）是指以特定资产组合或特定现金流为支持，发行可交易债券的一种融资形式。</p><p>起源于1970年美国发行的以抵押贷款组合为基础资产（如：住房抵押贷款）的抵押支持债券（MBS,Mortgage-BackedSecurity），此后从抵押贷款发展到其他资产上（如：汽车贷款、消费贷款等），出现资产支持债券（ABS,‎Asset-Backed Security）。</p><p>本质特征：</p><ul><li>资产证券化以<strong>可预见的现金流为支持</strong>而发行证券在资本市场融资的一个过程。</li><li>可预见的现金流的资产可以是实物（如：高速公路的收费），也可以是非实物（如：住房抵押贷款、汽车消费带宽、信用卡等的偿还现金流）。</li><li>本质与精髓：表面上看起来是以资产为支持，实际上是<strong>以资产所产生的现金流</strong>为支持。</li></ul><p>影响：</p><ul><li>模糊了直接融资与间接融资之间的清晰界限，也显示出直接融资的发展前景。</li><li>资产证券化利用资本市场对资产的收益与风险进行分离与重组。</li><li>资产证券化是债券市场深化的助推器。</li></ul><h4 id="基本结构">4.2.2 基本结构</h4><img src="/posts/%E6%8A%95%E8%B5%84%E5%AD%A6%E7%AC%94%E8%AE%B0/ch4-structure_of_AS.jpg" class="" title="资产证券化的结构"><h5 id="原始债务人obligors">原始债务人（Obligors）</h5><p>承担债务，需还本付息。例如，抵押贷款中的借款方。</p><h5 id="原始债权人originators">原始债权人（Originators）</h5><p>享有债权。例如：抵押贷款中的放款银行。</p><p>作为资产证券化的发起人，原始债权人把需要证券化的资产出售给特别目的机构，实现资产风险与收益的充足。</p><h5 id="特别目的机构special-purpose-vehicle-spv">特别目的机构（SpecialPurpose Vehicle, SPV）</h5><p>从发起人处购买可证券化资产，并发行以此为支持的证券的特殊实体。</p><p>一般是不会破产的高信用等级实体。</p><p>因为原始债权人将资产真实销售（truesale）给SPV，所以证券化资产的风险与原始债权人的风险可以隔离开来，实现破产隔离（bankruptremote），即使原始债权人破产，也不会影响到投资人对证券化资产的权益，提高了证券化资产的资信评级，降低了融资成本。</p><h5 id="投资者investors">投资者（Investors）</h5><p>购买证券的机构或个人。</p><p>因为这类证券通常高收益低风险，因此一般是机构投资者购买，如保险公司、投资基金和银行机构。</p><h5 id="专门服务人servicer">专门服务人（Servicer）</h5><p>一般由发起人兼任。</p><p>负责按期收取证券化资产所产生的现金流，并转移给SPV或SPV指定的信托实体。</p><h5 id="信托机构trustee">信托机构（Trustee）</h5><p>由SPV指定的负责对专门服务人收取的现金流进行管理，并向证券投资者按时支付的机构。</p><h5 id="信用评级机构rating-agency">信用评级机构（Rating Agency）</h5><p>通过对资产证券化各个环节进行评估而给出信用等级的机构。</p><p>对证券进行信用增级，降低发行成本。</p><h5 id="担保机构guarantors">担保机构（Guarantors）</h5><p>为SPV发行证券提供担保的机构，为证券进行信用增级。可以是政府担保机构或私人担保公司。</p><h5 id="证券承销商underwriters">证券承销商（Underwriters）</h5><p>为SPV所发行证券进行承销的实体，确保证券销售成功。一般是投资银行，或组建的承销团。</p><h4 id="基本过程">4.2.3 基本过程</h4><ol type="1"><li>组建SPV</li><li>SPV筛选可证券化的资产组成资产池（asset pool）</li><li>SPV与资产相结合阶段（原始权益人真实销售资产给SPV）</li><li>SPV发行资产支持证券阶段</li><li>SPV清偿债券阶段</li></ol><h4 id="中美资产证券化产品">4.2.4 中美资产证券化产品</h4><h5 id="美国">美国</h5><ol type="1"><li>住房抵押贷款证券（MBS）；</li><li>资产支持证券（ABS）：汽车贷款证券、信用贷款证券、学生贷款等；</li><li>以MBS+ABS现金流为抵押品再证券化的抵押债券凭证（CDO）；</li></ol><h5 id="中国">中国</h5><ol type="1"><li>信贷资产证券化：央行和银监会主管，以信贷资产为基础资产。</li><li>券商专项资产证券化：证监会主管，以企业应收款、信贷资产、信托收益权、基础设施收益权等财产权利、商业票据、债券等衍生品、股票及衍生品、商业物业等不动产为基础资产。</li><li>资产支持票据：交易商协会主管，以公用事业未来收益权、政府回购应收款、企业其他应收款为基础资产。</li></ol><h3 id="股权市场">4.3 股权市场</h3><h4 id="优先股与普通股">4.3.1 优先股与普通股</h4><h5 id="优先股">优先股</h5><p>优先股（preferredstocks）具有权益和债务的双重特征，是再剩余索取权方面较普通股优先的股票。</p><p>股息：通常归结为固定收益工具，它与债券一样，都承诺支付定量的股息（事先固定）。</p><p>优先性：再分得公司利润时和破产清偿时顺序优于普通股，但都低于债权。</p><p>股东权利：优先股在剩余控制方面劣于普通股，不能参与公司的经营管理，没有选举董事会和监事会的权利。</p><h5 id="普通股">普通股</h5><p>普通股（commonstocks）是在优先股要求权得到满足之后才参与公司利润和资产分配的股票合同，股息收益上不封顶、下不保底，每一阶段的红利数额也不确定。</p><p>股东权利：有出席股东大会的会议权、表决权和选举权、被选举权等，通过投票（通常一股一票和简单多数）来行使剩余控制权。</p><p>案例：阿里巴巴的双层结构的普通股，分为：</p><ul><li>A股：无投票权-&gt;一股一票；</li><li>B股：一股一票-&gt;数倍于A股的投票权（10~150倍）；</li></ul><h4 id="股票种类">4.3.2 股票种类</h4><h5 id="a股">A股</h5><p>人民币普通股</p><h5 id="b股">B股</h5><p>人民币特种股票。以人民币标明面值，以港币或美元交易。</p><h5 id="h股">H股</h5><p>国企股，注册地在内地，上市地在香港的股票。</p><h5 id="n股">N股</h5><p>注册地在中国大陆，上市地在纽约证券交易所。</p><h5 id="l股">L股</h5><p>注册地在中国大陆，上市地在伦敦。</p><h5 id="蓝筹股">蓝筹股</h5><p>稳定盈利的大公司发行，定期分派股利，投资价值较高的股票。</p><p>起源于赌场中蓝色筹码最值钱。</p><h5 id="红筹股">红筹股</h5><p>在境外注册、香港上市的中国大陆概念的股票。</p><h5 id="st股">ST股</h5><p>SpecialTreatment，特别处理股，连续两个会计年度净利润为负，每股净资产低于股票面值（1元）。</p><h4 id="股票指数">4.3.3 股票指数</h4><h5 id="功能">功能</h5><ol type="1"><li>投资指南；</li><li>衍生工具的标的：股指期货、股指期权的标的；</li><li>宏观经济景气度的指示器。</li></ol><h5 id="种类">种类</h5><ol type="1"><li>综合指数：全样本指数（上证综合指数、纽交所综合指数）；</li><li>成分指数：部分样本指数（标普500、伦敦金融时报100、沪深300），一般市值大、交易量大、业绩良好、业务稳定；</li><li>分类指数：具有相同特征（相同行业）的股票指数（上证行业指数，分为：材料、公用、能源、金融、电信、工业、可选、信息、消费和医药行业）。</li></ol><h5 id="编制方法">编制方法</h5><ol type="1"><li>简单算术平均法</li><li>算术平均修正法（道氏修正法）：道琼斯公司1928年创始，修正股票拆细、增资等因素造成平均数变化，保持连续性和可比性。</li><li>市值加权平均法：目前主流，权重是公司的规模而非股票价格，可比性强。</li></ol><h5 id="中国大陆股指">中国大陆股指</h5><ol type="1"><li>中证股票指数体系：上证+深证共同成立<ol type="1"><li>中证流通指数</li><li>沪深300指数：沪市+深市按日均成交金额排序选取300只A股</li><li>中证规模指数</li><li>中证500指数：由全部A股中剔除沪深300指数成份股及总市值排名前300名的股票后，总市值排名靠前的500只股票组成，综合反映中国A股市场中一批中小市值公司的股票价格表现。</li></ol></li><li>上证指数体系<ol type="1"><li>上证综指：全样本</li><li>上证50：规模最大、流动性最好的50只</li><li>上证180：总市值和成交金额靠前的180只</li><li>上证380：成长性好、盈利能力强的新兴蓝筹股</li></ol></li><li>深证指数体系<ol type="1"><li>深圳成分指数：深圳成指</li><li>中小板综指：100家主要中小板股票</li><li>创业板指数；创业板中100只</li></ol></li><li>新华富时中国A50指数：新华财经与英国富时合资，包含A股市值最大的50家，满足国内/外（QFII）投资者实时可交易。</li></ol><h5 id="全球主要股指">全球主要股指</h5><ol type="1"><li>美国<ol type="1"><li>道琼斯指数</li><li>纳斯达克指数</li><li>标准普尔指数</li></ol></li><li>英国<ol type="1"><li>富时100</li></ol></li><li>法国<ol type="1"><li>法国CAC40</li></ol></li><li>德国<ol type="1"><li>德国DAX</li></ol></li><li>日本<ol type="1"><li>日经225指数</li></ol></li><li>中国香港<ol type="1"><li>恒生指数</li></ol></li><li>韩国<ol type="1"><li>韩国综合指数</li></ol></li><li>澳大利亚<ol type="1"><li>澳洲标普200</li></ol></li><li>印度<ol type="1"><li>孟买SENSE</li></ol></li><li>俄罗斯<ol type="1"><li>俄罗斯RTS</li></ol></li><li>巴西<ol type="1"><li>圣保罗IBOV</li></ol></li></ol><h3 id="项目融资">4.4 项目融资</h3><h4 id="概念">4.4.1 概念</h4><p>项目融资（ProjectFinance）：是贷款人向<strong>特定的工程项目</strong>提供贷款协议融资，对于该<strong>项目所产生的现金流</strong>享有偿债请求权，并以该<strong>项目资产作为附属担保</strong>的融资类型。</p><h4 id="种类-1">4.4.2 种类</h4><h5 id="无追索权的项目融资">无追索权的项目融资</h5><p>贷款的还本付息完全依靠经营效益。</p><h5 id="有限追索权的项目融资">有限追索权的项目融资</h5><p>要求与项目有利害关系的第三方当事人提供各种担保。</p><p>贷款银行有权向担保方追索，以担保金额为限。</p><h4 id="融资方式">4.4.3 融资方式</h4><h5 id="政府主导方式">政府主导方式</h5><p>传统方式，本质是依靠政府负债。</p><p>利：运作简单，速度快，政府信用好。</p><p>弊：财政压力大、建设运营责任不清、资金利用效率低下。</p><h5 id="bot方式">BOT方式</h5><p>Build Operate Transfer</p><p>政府特许授权投资公司去<strong>建设</strong>、<strong>运营</strong>，在一定期限（如：三十年）后，最终<strong>转让</strong>给政府。</p><p>以特许经营权为主。</p><p>利：市场竞争机制、减轻政府财政负担、提高项目运营效率、引入管理与技术；</p><p>弊：风险大，因为投资大、期限长、条件差异大、缺乏先例可循。</p><h5 id="bt方式">BT方式</h5><p>Build Transfer</p><p>政府通过招投标，交给投资者去融资和建设，最后移交给政府。政府按协议分期支付项目投资与回报。</p><p>以项目外包为主。</p><p>弊：建设费用大、监管难、分包严重、质量得不到保证。</p><h5 id="其他方式">其他方式</h5><ol type="1"><li><p>BOOT: Build Own Operate Transfer</p></li><li><p>BOO: Build Own Operate</p></li><li><p>BTO: Build Transfer Operate</p></li><li><p>TOT: Transfer Operate Transfer</p></li></ol><h4 id="ppp项目融资模式">4.4.4 PPP项目融资模式</h4><h5 id="概念-1">概念</h5><p>Public-Private Partnership</p><p>政府与私人部门组成特许经营公司，引入社会资本。</p><p>政府补贴PPP项目，社会投资者投资PPP项目。</p><p>政府与私人部门风险共担，利益共享。</p><h5 id="适用">适用</h5><p>投资规模达、需求长期稳定、价格调整机制灵活、市场化程度较高的基础设施及公共服务类项目。例如：地铁。</p><h5 id="本质">本质</h5><ol type="1"><li>债权上，将政府债务转化为企业债务；</li><li>运营上，引入市场竞争与激励机制，发挥各方优势，提高公共产品与服务的供应质量和效率。</li></ol><h5 id="ppp项目的资产证券化">PPP项目的资产证券化</h5><p>运营管理权与收费收益权分离，将收益权作为基础资产。</p><p>按规定，PPP项目资产证券化的基础资产必须追到项目本身，不能以地方政府为基础资产，不能随意承诺保底、安排回购、明股实债等方式担保融资，但可以以财政补贴作为PPP项目收入的来源。</p><p>PPP项目期限一般为10~30年，比资产证券化产品期限（多数在7年以内）要长得多。</p><p>利：</p><ol type="1"><li>盘活存量PPP项目资产：增强资金流动性与安全性；</li><li>吸引社会资本投入公共服务；</li><li>提升项目稳定运营能力：风险隔离。</li></ol><p>类型：</p><ol type="1"><li>使用者付费：经营性项目；</li><li>可行性缺口补助：准经营性项目，使用者付费不足以满足成本回收与合理回报时，政府提供缺口补助使项目可行；</li><li>政府付费：非经营性项目，如，垃圾处理、污水处理、市政道路。</li></ol><h2 id="证券的发行与交易">5 证券的发行与交易</h2><p>证券的发行市场成为一级市场，证券的交易市场称为二级市场。</p><h3 id="证券的发行">5.1 证券的发行</h3><h4 id="证券发行市场">5.1.1 证券发行市场</h4><h5 id="概念-2">概念</h5><p>又称“初级市场”、“一级市场”，是证券发行主体发行和推销新证券所形成的市场。</p><p>证券发行者-&gt;（中介机构）-&gt;投资者，期间受监管者（证监会）监管。</p><h5 id="公募和私募">公募和私募</h5><p>公募公开发行，经过严格审查，因此信用高；可公开交易，因此流动性好；但成本高；</p><p>私募不公开发行，不经严格审查，发行程序简单，因此成本低；不公开上市，因此流动性差。</p><h5 id="直接发行和间接发行">直接发行和间接发行</h5><p>直接发行：自营发行，发行者直接发售证券给投资者；</p><p>间接发行：承销发行，发行者委托承销商代为发售证券，承销商收取代理费，并承担发行责任与风险。</p><h5 id="担保发行和无担保发行">担保发行和无担保发行</h5><p>主要用于债券发行。</p><p>担保发行：发行人以信用或实物担保，承诺证券收益；</p><p>无担保发行：不提供任何担保，例如：国债、部分金融债因违约可能性极低，一般无担保。</p><h4 id="证券发行制度">5.1.2 证券发行制度</h4><h5 id="注册制">注册制</h5><p>以美国联邦证券法为代表，遵循公开原则，实质上是发行公司的财务公开制度。如果信息误导，投资者有权起诉。</p><p>证券主管机关对证券发行信息资料做审查，不禁止质量差、风险高的证券上市，由市场判断公司价值。</p><p>利：政府干预少；流程快；上市成本低。</p><p>弊：门槛高，只适用于发达成熟的市场（需要投资者理性，且发行者、承销商等机构恪守法律与职业道德）。</p><h5 id="核准制">核准制</h5><p>以欧洲各国公司法为代表，实行实质管理原则，发行者必须符合公司法规定的实质条件（经营性质、管理人员资格、资本结构、偿债能力等）。</p><p>适用于证券市场历史短、投资者素质不高的地区和国家（欧洲大陆、发展中国家）。</p><h5 id="中国的证券发行制度历程">中国的证券发行制度历程</h5><ol type="1"><li>2001年前：发行审批制：地方与中央双重审批，获取配额，证监会复审；</li><li>2001年后：发行核准制；<ol type="1"><li>2001~2004：通道制，承销商（证券公司）推荐公司发行股票；</li><li>2004年后：保荐制，承销商推荐并一定程度担保公司质量，保荐责任必须落实到个人。</li></ol></li><li>2013年后：注册制提出；</li></ol><h5 id="发行制度对比">发行制度对比</h5><table><colgroup><col style="width: 15%" /><col style="width: 40%" /><col style="width: 27%" /><col style="width: 17%" /></colgroup><thead><tr class="header"><th></th><th>中国大陆</th><th>中国香港</th><th>美国</th></tr></thead><tbody><tr class="odd"><td>发行上市制度</td><td>发审制转向核准制</td><td>高度市场化的核准制</td><td>注册制</td></tr><tr class="even"><td>审核时间</td><td>6个月</td><td>4个月</td><td>3-4个月</td></tr><tr class="odd"><td>审核内容</td><td>实质审核</td><td>实质审核</td><td>形式审核</td></tr><tr class="even"><td>审核标准</td><td>监管部门严格审核资本结构、性质等</td><td>按《上市规则》规定指标</td><td>信息披露真实性</td></tr></tbody></table><h4 id="证券承销制度">5.1.3 证券承销制度</h4><p>承销商收承销费帮发行人销售股票和债券。</p><h5 id="包销">包销</h5><ul><li><p>全额包销：证券承销商全部购入，然后再转售给投资人；</p></li><li><p>余额包销：证券承销商按发行额，在发行期限内向投资人发售证券，到期未售出的证券由承销商负责认购。</p></li></ul><h5 id="代销">代销</h5><p>承销期结束时，将未售出的证券全部退还给发行人。</p><h4 id="股票的发行">5.1.4 股票的发行</h4><h5 id="初次发行">初次发行</h5><h6 id="三种情况">三种情况</h6><ol type="1"><li>新建股份公司时发行股票；（设立发行）</li><li>原非股份制公司改制为股份制时发行股票；（设立发行）</li><li>原私人持股公司转为公众持股公司时发行股票；（首次公开发行，IPO）</li></ol><h6 id="ipo">IPO</h6><p>Initial Public Offerings</p><p>IPO包含几个阶段，各阶段可按需并行：</p><ol type="1"><li>计划筹备阶段<ol type="1"><li>寻求政府支持</li><li>引入战略投资</li><li>公司内部治理结构调整</li><li>承销机构和其他中介早日入场</li></ol></li><li>申报材料阶段<ol type="1"><li>审计报告和核准时间</li><li>相关政府批文</li><li>法律问题</li><li>招股说明</li></ol></li><li>发行审核阶段<ol type="1"><li>申报材料</li><li>综合处收材料并分送预审员</li><li>预审员审核并向企业提问</li><li>形成反馈意见</li><li>回复反馈意见</li><li>通过预审会</li><li>上发审会</li><li>准备材料或退回材料</li></ol></li><li>路演与询价阶段<ol type="1"><li>路演准备工作</li><li>预路演：确定价格区间</li><li>网下路演：面向网下机构投资者（调整价格）</li><li>信息披露</li><li>网上路演：面向散户投资者</li></ol></li><li>上市阶段<ol type="1"><li>向交易所递交上市申请</li><li>通过上市委员会审核</li><li>刊登上市公告书</li><li>上市仪式</li><li>上市后市场维护</li><li>持续督导</li></ol></li></ol><h5 id="增资发行">增资发行</h5><p>SEO, Seasoned Equity Offerings</p><h6 id="有偿增资发行">有偿增资发行</h6><ol type="1"><li>向原股东配股：准许老股东按一定的配股价格优先认购新股票；</li><li>向第三者配股：向股东以外的第三者（公司职工、公司往来客户、社会大众等）以新股认购权的方式配发新股。</li></ol><h6 id="无偿增资发行">无偿增资发行</h6><p>原股东无需缴付股款即可获得新股。</p><p>通常目的是调整资本结构或将积累资本化。</p><p>形式有：</p><ol type="1"><li>无偿交付：盈余公积转为股份；</li><li>红利增资：将分红改为股份；</li><li>股份分割：一股拆多股；</li><li>债券股票化：债券转为股票。</li></ol><h6 id="有偿无偿混合增资发行">有偿无偿混合增资发行</h6><p>按比例同时进行有偿和无偿增资。</p><h5 id="股票发行的价格">股票发行的价格</h5><p>影响因素：</p><ol type="1"><li>企业自身状况<ol type="1"><li>经营业绩和发展前景</li><li>净资产</li><li>发行数量</li></ol></li><li>宏观环境因素<ol type="1"><li>宏观政策</li><li>所处行业</li><li>股票流通市场</li></ol></li></ol><h4 id="债券的发行">5.1.5 债券的发行</h4><h5 id="债券的评级">债券的评级</h5><p>债券的发行需要评级</p><h5 id="发行类型">发行类型</h5><ol type="1"><li>定向发行：私募、面向特定投资者；</li><li>承购包销：商行、券商组成承销团；</li><li>招标发行：招标竞价确定发行价格；</li><li>直接发售：券商或银行柜台直接销售。</li></ol><h3 id="证券的交易">5.2 证券的交易</h3><h4 id="证券交易市场">5.2.1 证券交易市场</h4><h5 id="概况">概况</h5><p>也称“二级市场”，是已发行的证券在证券市场上买卖的活动。</p><p>证券交易包含：</p><ol type="1"><li>股票交易</li><li>债券交易</li><li>基金交易</li><li>金融衍生工具交易</li></ol><h5 id="交易所市场">交易所市场</h5><p>证券交易所，会员资格才可交易，信息及时披露。二级市场中的第一市场。</p><h6 id="会员制交易所">会员制交易所</h6><p>券商自愿组织的社会团体，会费共担，不以营利为目的。</p><p>会员既有交易权，也有交易所的所有权。</p><p>案例：上海证券交易所、深圳证券交易所</p><p>利：</p><ol type="1"><li>不以营利为目的，费用低；</li><li>会员制避免违法行为；</li><li>损失由买卖双方自负，规范双方行为；</li><li>有政府支持，无破产可能；</li></ol><p>弊：</p><ol type="1"><li>缺乏第三方担保；</li><li>管理者同时也是交易者，有悖公平原则；</li><li>非会员不能进，容易垄断。</li></ol><h6 id="公司制交易所">公司制交易所</h6><p>商行、券商、信托等企业共同出资建立，以盈利为目的的公司法人。</p><p>案例：西方发达国家、中国香港都是公司制，20世纪90年代，为全球主要交易所采用。</p><p>交易权与所有权分离，会员无需拥有交易所所有权，也可拥有交易权。只有经过注册的券商才能进入交易大厅直接参加买卖。</p><p>利：</p><ol type="1"><li>第三方担保，若会员违约造成损失，交易所负责赔偿；</li><li>管理权与所有权分离，交易者、管理者、所有者三方分离，交易所不偏袒任何一方；</li><li>服务优质：为盈利，不得不提供良好服务。</li></ol><p>弊：</p><ol type="1"><li>利益驱使，利润取决于交易额，滋长过度投机；</li><li>交易所是有限公司，不排除倒闭可能。</li></ol><h5 id="场外交易市场">场外交易市场</h5><h6 id="定义">定义</h6><p>OTC, Over the Counter</p><p>在证券交易所以外，由证券买卖双方直接议价成交的市场。</p><h6 id="特点">特点</h6><ol type="1"><li>非集中：无交易场所、交易时间、交易规则限制；</li><li>开放式：无会员制；</li><li>种类多：上市或未上市证券都可交易；</li><li>议价方式不同：做市商和买卖价差的报价。</li></ol><h6 id="第二市场柜台交易市场">第二市场（柜台交易市场）</h6><p>最早形成，公开但未上市发行的证券，如：地方债、市政债、公司债。</p><h6 id="第三市场大宗交易市场">第三市场（大宗交易市场）</h6><p>已上市证券在交易所以外进行交易的市场，因75年后允许交易所会员自行决定佣金，第三市场发展放缓。</p><p>节约交易所内大宗交易的高昂佣金。</p><h6 id="第四市场场外网络市场">第四市场（场外网络市场）</h6><p>买卖双方不经过经纪人，而是通过网络直接大宗交易。</p><p>利：成本低；速度快；保密；不冲击证券市场。</p><p>弊：给金融监管带来挑战。</p><h5 id="全球主要交易市场">全球主要交易市场</h5><h6 id="美国证券市场">美国证券市场</h6><p>起源于政府债券。</p><ol type="1"><li>纽约证券交易所</li></ol><h6 id="英国证券市场">英国证券市场</h6><p>随股份公司涌现和信用活动开展而发展。</p><ol type="1"><li>伦敦证券交易所（前身自1773年）</li><li>利物浦证券交易所（1827年成立）</li><li>曼彻斯特证券交易所（1830年成立）</li></ol><p>特点：</p><ol type="1"><li>发行业务专业化，由各种证券金融业分担；</li><li>中小企业比重较大；</li><li>外国证券比重较大；</li><li>政府证券比重较大（伦敦证交所是最大的“金边债券”市场（早期英国政府公债带有黄边，且可靠性高，因此称为金边债券））。</li></ol><h6 id="中国证券市场">中国证券市场</h6><p>我国资本市场结构：</p><ol type="1"><li>主板：也称一板市场，上市要求最高；</li><li>创业板：也称二板市场，深交所，上市要求适合中小企业；</li><li>新三板：全国中小企业股份转让系统；</li><li>区域性股权交易市场：省市级，仅用于地区内；</li><li>柜台市场：2012年证监会“限定私募、先行起步”，开展柜台试点。</li></ol><h4 id="证券交易机制">5.2.2 证券交易机制</h4><p>报价制度，做市商制度，主要用于柜台市场；</p><p>指令驱动制度，竞价方式，主要用于交易所。</p><h5 id="做市商制度">做市商制度</h5><p>做市商（market maker）制定买价（bid price）/卖价（askprice），在买卖双方中间赚取差价。</p><h6 id="垄断型做市商">垄断型做市商</h6><p>案例：纽约证券交易所</p><p>信息综合能力强，价格竞争性差，高额利润，易于监管</p><h6 id="竞争型做市商">竞争型做市商</h6><p>多元做市商制度，案例：纳斯达克交易所</p><p>竞争使市场活跃，交易量增加。做市商信息分散，无垄断地位，交易利润少。</p><h5 id="指令驱动制度">指令驱动制度</h5><p>竞价市场，买方订单和卖方订单通过经纪商进入市场，交易中心以买卖双向价格为基准进行撮合。</p><h6 id="集合竞价">集合竞价</h6><p>在一定时段内累积订单，到一定时刻再撮合定价。（通常是开市前10分钟）</p><h6 id="连续竞价">连续竞价</h6><p>在交易日各个时刻连续进行，只要存在匹配订单，交易即发生。</p><h6 id="指令驱动交易过程">指令驱动交易过程</h6><ol type="1"><li>开户：投资者在经纪商处开户<ol type="1"><li>证券账户</li><li>资金账户</li></ol></li><li>委托：投资者委托经纪商下达买入卖出指令<ol type="1"><li>市价委托：按实施申报价格买卖证券；</li><li>限价委托：设定买进价格上限或卖出价格下限；</li><li>止损委托：市价低于卖方止损价即转为市价指令（卖方止损），市价高于买方止损价即转为市价指令（买方止损，通常期货市场买方避免过高价格）；</li><li>止损限价委托：止损+限价。</li></ol></li><li>竞价与成交：交易制度的核心，确定价格<ol type="1"><li>集合竞价：买单按价格降序排序，卖单按价格升序排序。撮合取得基准价。</li><li>连续竞价：报一笔撮合一笔，不能成交则按“价格优先、同价则时间优先”原则排队。</li></ol></li><li>结算：证券成交后，核定结算买卖双方应收应付的证券和价款<ol type="1"><li>逐笔交收：逐笔结算交易成本高，适合成交数少的大宗交易；</li><li>净额交收：在买卖双方约定的交收期限内，以交易净额进行交收，如：上交所、深交所。<ol type="1"><li>清算：<ol type="1"><li>一级清算：券商之间以中央登记清算公司为中介做清算；</li><li>二级清算：券商与投资者之间的清算。</li></ol></li><li>交割：买房付出现金取得证券，卖方交出证券获得价款。<ol type="1"><li>T+0：当日交割；</li><li>T+1：次日交割（我国主要为T+1）；</li><li>T+n：n日交割等。</li></ol></li></ol></li></ol></li><li>过户：对股票和记名债券，还需要过户<ol type="1"><li>我国实现无纸化交易，无需再到发行公司办理过户手续。</li></ol></li></ol><h5 id="混合交易制度">混合交易制度</h5><ol type="1"><li><p>在做市商制度中引入竞价交易制度，如：1997年后的纳斯达克；</p></li><li><p>在竞价交易制度中引入做市商制度，如：1986年后的伦敦交易所。</p></li></ol><h5 id="交易机制对比">交易机制对比</h5><table><colgroup><col style="width: 6%" /><col style="width: 46%" /><col style="width: 46%" /></colgroup><thead><tr class="header"><th>交易机制</th><th>做市商市场</th><th>竞价市场</th></tr></thead><tbody><tr class="odd"><td>竞争方式</td><td>报价驱动</td><td>指令驱动</td></tr><tr class="even"><td>价格发现</td><td>无正式程序</td><td>正式的市场开盘</td></tr><tr class="odd"><td>监管</td><td>直接监管少，靠竞争改进缺陷</td><td>直接监管</td></tr><tr class="even"><td>竞争</td><td>做市商之间</td><td>客户之间</td></tr><tr class="odd"><td>优点</td><td>成交及时；价格稳定；存货机制纠正买卖不均衡；做市商持仓抑制股价操纵</td><td>透明度高；信息传递快；运行费用低</td></tr><tr class="even"><td>缺点</td><td>因买卖集中在做市商手中而缺乏透明度；交易成本高；监管成本增加，难度大；</td><td>难以处理大宗交易；冷门股票成交持续萎缩；价格波动剧烈；价格难以维护，容易被操纵</td></tr></tbody></table><h3 id="量化投资">5.3 量化投资</h3><p>量化投资是利用计算机技术，采用数学模型实现投资理念、投资策略的过程。</p><h4 id="算法交易">5.3.1 算法交易</h4><p>数学建模+计算机自动化（半自动化）交易。</p><h5 id="目的">目的</h5><ol type="1"><li>将大额交易分割为许多小额交易来应对市场风险和冲击。（避免大额交易被发现，使行情向不利于自己的方向发展）</li><li>因为大型交易者不会一次性暴露自己的所有交易指令，因此实际的交易机会很多，可以通过算法发现交易机会。</li></ol><h5 id="分类">分类</h5><ol type="1"><li>被动型算法交易：结构型、时间表型，利用历史数据估计交易模型参数，按既定方针交易，不主动选择交易时机与交易数量，核心在减少滑价。<ol type="1"><li>成交量加权平均价格（VWAP）：让自己的交易量提交比例与市场成交量比例匹配；</li><li>时间加权平均价格（TWAP）</li></ol></li><li>主动型算法交易：根据市场情况，判断是否交易、交易数量、交易价格，核心在价格趋势预测。</li><li>综合型算法交易</li></ol><h5 id="发展">发展</h5><p>2006年，欧美有三分之一的股票交易量由算法交易完成。</p><h5 id="常用算法交易策略">常用算法交易策略</h5><p>算法交易核心问题：平衡冲击成本与等待风险。</p><ul><li>交易太快，可以快速完成交易目标，减小等待风险，但会冲击市场，影响价格走势；</li><li>交易太慢，可以避免冲击市场，但无法快速完成交易，存在等待风险。</li></ul><p>代表性的被动型算法交易策略：</p><h6 id="vwap">VWAP</h6><p>预测当天交易时间内各时间片的交易比例分布，最小化冲击成本。</p><p>标准VWAP：静态预测当天交易分布；</p><p>改进VWAP：根据市场价格走势调整交易量。</p><h6 id="twap">TWAP</h6><p>不预测交易期内成交量的分布，按交易时段的长度加权。</p><h6 id="peg">PEG</h6><p>盯住盘口策略，买入按当前最高买价，卖出按当前最低卖价发出限价交易。若交易未完成且成交价远离限价指令，则撤销，并重新循环。</p><h6 id="is策略">IS策略</h6><p>减小实际成交价与目标价的价差，分激进、中性和保守策略。</p><h6 id="sor策略">SOR策略</h6><p>下单路径选优策略，从做市商、交易所、暗池等路径择优交易。</p><h4 id="高频交易">5.3.2 高频交易</h4><p>利用高速计算机，在极短时间内判断有价值信息，先于其他投资者进行交易。例如：利用交易所之间的微小价差，大量地不停地买卖。</p><h3 id="暗池交易">5.4 暗池交易</h3><h4 id="概念-3">5.4.1 概念</h4><p>买卖双方匿名配对进行大宗股票交易，主要为机构投资者，运作不透明。</p><p>机构投资者不希望公开寻找交易对手，而是希望避免市场冲击并保持信息保密（例如：防止被高频交易套利）。不借助公开交易市场，又存在搜寻成本高的问题。</p><h4 id="分类-1">5.4.2 分类</h4><h5 id="独立暗池">独立暗池</h5><p>经纪公司组织，收取手续费，为机构投资者提供交易平台。</p><h5 id="内部撮合池">内部撮合池</h5><p>证券经纪商组织，在内部对自营业务的订单与客户订单之间进行撮合，避免交易所交易的费用。</p><h5 id="监听目标池">监听目标池</h5><p>对冲基金和电子做市商组织，只接受/取消订单，根据发来的订单，决定是否交易。</p><h5 id="联合暗池">联合暗池</h5><p>多家金融机构共同组织，作为二级暗池，处理各家机构内部撮合池未能完成的订单余额的撮合。</p><h4 id="特点-1">5.4.3 特点</h4><ol type="1"><li>保密</li><li>撮合方式类似订单驱动的电子竞价市场</li></ol><h4 id="利弊">5.4.4 利弊</h4><ol type="1"><li>为客户保密，一方面保护知情交易者和大宗交易者的利益，另一方面妨碍外部投资者知情和市场定价效率。</li><li>流动性分离，一方面在暗池中为客户提供更多流动性，另一方面造成市场分割，与交易所争夺流动性。</li></ol><h2 id="投资公司">6 投资公司</h2><h3 id="投资公司的类型">6.1 投资公司的类型</h3><p>金融中介，本质特征是资产集合，汇集资金并投资证券。</p><h4 id="单位投资信托">6.1.1 单位投资信托</h4><p>成立后，资产组合固定不变，是无需管理的基金；</p><p>主要投资固定收益资产组合。不需要主动管理，因此费率低。</p><h4 id="投资管理公司">6.1.2 投资管理公司</h4><h5 id="两类投资管理公司">两类投资管理公司</h5><ol type="1"><li>开放型基金，即共同基金（mutualfund），随时可以赎回或发行股份；我国正式名称为“证券投资信托基金”。</li><li>封闭型基金，不能赎回或发行股份。</li></ol><h5 id="共同基金的运作">共同基金的运作</h5><p>汇集大量投资者形成<strong>集合投资</strong>，基金的资金存于<strong>基金托管人</strong>，由<strong>基金管理人</strong>指令管理被托管资金，<strong>组合投资</strong>于一系列的证券。</p><h3 id="基金的分类">6.2 基金的分类</h3><h4 id="按申赎方式开放式封闭式基金">6.2.1按申赎方式：开放式/封闭式基金</h4><table><colgroup><col style="width: 10%" /><col style="width: 35%" /><col style="width: 53%" /></colgroup><thead><tr class="header"><th></th><th>封闭式基金</th><th>开放式基金</th></tr></thead><tbody><tr class="odd"><td>期限</td><td>5年以上，多数15年</td><td>无固定存续期</td></tr><tr class="even"><td>规模</td><td>不变</td><td>可变</td></tr><tr class="odd"><td>价格</td><td>供求关系</td><td>净值</td></tr><tr class="even"><td>策略</td><td>无赎回、无准备金、可长期投资</td><td>有赎回、有准备金、无法全额用于长期投资</td></tr><tr class="odd"><td>激励机制</td><td>缺乏</td><td>按总额收取管理费，若业绩差，则资金赎回流失</td></tr></tbody></table><h4 id="按组织形式契约型公司型基金">6.2.2按组织形式：契约型/公司型基金</h4><table><colgroup><col style="width: 17%" /><col style="width: 22%" /><col style="width: 60%" /></colgroup><thead><tr class="header"><th></th><th>契约型基金</th><th>公司型基金</th></tr></thead><tbody><tr class="odd"><td>投资者地位</td><td>受益人，无发言权</td><td>既是受益人，也是股东（有发言权等股东权利）</td></tr><tr class="even"><td>资产运用依据</td><td>按契约</td><td>按公司章程</td></tr><tr class="odd"><td>融资渠道</td><td>不能向银行借款</td><td>公司有法人资格，可以向银行借款</td></tr><tr class="even"><td>运营方式</td><td>按契约期运作</td><td>按公司法运作，除非破产清算，否则有永久性</td></tr><tr class="odd"><td>资金性质</td><td>收益凭证</td><td>股票</td></tr></tbody></table><p>中国基金以契约型为主，美国则以公司型居多。</p><h4 id="按投资对象货币股权固定收益混合指数">6.2.3按投资对象：货币/股权/固定收益/混合/指数</h4><h4 id="按投资目标成长型平衡型收入型">6.2.4按投资目标：成长型/平衡型/收入型</h4><h4 id="按募集方式公募私募">6.2.5 按募集方式：公募/私募</h4><p>私募基金：无需披露信息，监管不严，隐蔽。如美国的对冲基金，采取合伙制度。</p><h3 id="基金的募集和交易">6.3 基金的募集和交易</h3><h4 id="渠道">6.3.1 渠道</h4><p>银行</p><p>基金公司官网</p><p>第三方理财平台</p><p>证券公司代销</p><h4 id="交易原则">6.3.2 交易原则</h4><ol type="1"><li>未知价：申赎时不知道资产成交价格；</li><li>按金额申购，按份额赎回</li></ol><h4 id="基金申赎">6.3.3 基金申赎</h4><h5 id="申购价格">申购价格</h5><p>申购价格=基金单位净值+前端费用</p><ul><li>基金单位净值（net assetvalue）：（基金资产-基金负债）/已售出的基金单位</li><li>前端费用（front-end load）：申购费率</li></ul><h5 id="赎回金额">赎回金额</h5><p>赎回金额=赎回总额-赎回费用</p><ul><li>赎回数量×赎回日基金单位净值</li><li>后端费用（back-end value）=赎回总额×赎回费率</li></ul><h5 id="估值与费用">估值与费用</h5><h6 id="估值对象">估值对象</h6><p>资产：股票、债券、存款、应收利息；</p><p>负债：应收管理费、应付税收。</p><h6 id="运作费用">运作费用</h6><ol type="1"><li><p>管理费</p></li><li><p>托管费</p></li><li><p>交易费</p></li><li><p>其他：审计费、律师费、信息披露费</p></li></ol><h6 id="收益率">收益率</h6><p>收益率=(净值增长+收入+资本利得)/初净值</p><h4 id="基金的评级">6.3.4 基金的评级</h4><p>晨星于1984年成立于美国芝加哥。晨星中国2003年在深圳成立。</p><p>分为定性与定量评价。</p><p>五个关键因素：投研团队、投资方法、基金公司、业绩、费用。</p><p>对基金只做同类比较。</p><p>每个月进行一次评级，只对三年及以上的基金进行星级评价。</p><h3 id="代表性基金分类">6.4 代表性基金分类</h3><h4 id="指数型基金">6.4.1 指数型基金</h4><p>按当期指数的成分股比例购买的基金，追踪指数的变化幅度。</p><p>1971年，世界上第一个指数基金出现在美国。</p><p>1994~1996年，市场上91%的股票基金收益增长率低于标普500指数，指数基金优势开始显现。</p><p><em>当市场越有效时，被动化管理越有优势。</em></p><p>特点：</p><ol type="1"><li>费用低廉：被动管理，投研少、调仓少，因此成本低。</li><li>分散风险：单一股票涨跌不会冲击指数基金整体表现。</li><li>延迟纳税：在发达国家，资本利得税很少。</li><li>监控较少：管理人不需要监控基金表现。</li></ol><h4 id="etf基金">6.4.2 ETF基金</h4><p>交易型开放式指数证券投资基金（Exchange Traded Fund）</p><p>跟踪标的指数的变化，且在证交所上市交易的基金。</p><h5 id="实物申赎">实物申赎</h5><p>ETF对应的是一揽子股票，采用实物申赎，而不是一般开放基金的份额申赎。</p><p>实物申赎ETF必须以一篮子股票换取基金份额，或者以基金份额换取一篮子股票。</p><p>最小申赎单位都是100万基金份额，通常门槛高，由机构投资者直接申赎。</p><p>因为实物申赎可以当天换取为股票，而股票可以当天买卖，因此，ETF基金实物申赎可以做到<strong>T+0</strong>交割。</p><h4 id="lof基金">6.4.3 LOF基金</h4><p>我国本土创新，上市型开放式基金（Listed Open-ended Fund）。</p><p>LOF基金是开放式与封闭式基金功能的结合体：</p><ol type="1"><li>因为是上市的，所以可以在二级市场进行交易（类似封闭式基金）；</li><li>因为是开放的，所以可以按份额申赎（类似开放式基金）。</li></ol><h4 id="qdii基金">6.4.4 QDII基金</h4><p>合格境内机构投资者（Qualified Domestic Institutional Investor）。</p><p>在国境内设立，经国内有关部门批准从事境外证券市场的股票、债券等有价证券业务的投资基金。</p><h4 id="保本基金避险策略基金">6.4.5 保本基金（避险策略基金）</h4><p>在基金的保本周期内，投资者可以拿回认购时原始本金。</p><p>不表示周期内可以保本，也不保证周期内申购可以保本。保本周期在中国一般为3年，在国外可达7~12年。</p><p>一般使用利息或是极小比例的资产从事高风险投资，大多数资金投资于固定资产。</p><h4 id="专户理财">6.4.6 专户理财</h4><p>类似私募基金，由基金公司对多个客户提供投资管理服务。</p><h4 id="私募投资基金">6.4.7 私募投资基金</h4><p>Private placement fund</p><p>向特定的对象募集基金份额。</p><p>私募基金无需披露信息，监管要求不严，比较隐蔽。</p><p>我国规定所有基金必须公募，因此信托成为私募基金的合法化主要渠道。国内的阳光私募基金一般是私募信托证券基金，主要投资二级证券市场，与重点投资一级股权市场的私募股权基金（PE,Private Equity）在投资对象上有所区别。</p><p>私募基金一般为“2+20”收费模型，收取2%管理费和20%盈利部分提成。</p><h4 id="对冲基金">6.4.8 对冲基金</h4><p>Hedge Fund</p><p>借助复杂资产组合与风险管理手段，投资多种资产，广泛运用杠杆、卖空以及衍生品等交易策略。</p><p>美国的对冲基金即一般意义上的私募基金。</p><p>对冲基金以合伙人制度为主，仅提供给有限的合格投资者。</p><h4 id="互联网宝类基金">6.4.9 互联网宝类基金</h4><p>本质上是货币基金。</p><p>现逐步向各类非标的资产投资发展，包括：土地质押、ABS债券、P2P小额信贷等。</p><h2 id="投资收益与风险">7 投资收益与风险</h2><h3 id="利率水平的决定因素">7.1 利率水平的决定因素</h3><p><strong>名义利率</strong> <spanclass="math inline">\(R\)</span>，是资金量增长率；</p><p><strong>真实利率</strong> <spanclass="math inline">\(r\)</span>，是购买力增长率。</p><p>记<strong>通货膨胀率</strong>为 <spanclass="math inline">\(i\)</span>，则有以下关系公式： <spanclass="math display">\[1+r = \frac{1+R}{1+i}\]</span> <strong>真实利率均衡（The Equilibrium Real Rate ofInterest）</strong>是指货币流通中，货币供给（居民储蓄）与货币需求（实体经济与投资）一致时的利率。影响货币供给和需求的因素（财政政策：财政盈余和财政赤字；货币政策：中央银行操作）就影响利率均衡。</p><p><strong>名义利率均衡（The Equilibrium Nominal Rate ofInterest）</strong>是指当通货膨胀率增加时，投资者会对其投资提出更高的名义利率要求。</p><p><strong>费雪公式</strong>代表预期通货膨胀率为 <spanclass="math inline">\(E(i)\)</span> 时，投资者的名义利率要求： <spanclass="math display">\[R = r + E(i)\]</span> 税收对真实利率的影响：税赋是基于名义收入的支出。假设税率为<span class="math inline">\(t\)</span>，则税后真实利率为： <spanclass="math display">\[R(1-t)-i\]</span></p><h3 id="收益率的衡量">7.2 收益率的衡量</h3><h4 id="持有期收益率">7.2.1 持有期收益率</h4><p>持有期收益由两部分组成：</p><ol type="1"><li><p>资本利得：投资买卖差价；</p></li><li><p>股息或红利：如，股票的股息、分红。</p></li></ol><p><strong>持有期收益率（Holding-periodReturn）</strong>是给定期限内的收益率。 <span class="math display">\[r = HPR = \frac{p_t - p_0 + d}{p_0}\]</span> 其中，<spanclass="math inline">\(p_0\)</span>表示持有期起始时的价格，<spanclass="math inline">\(p_t\)</span>表示持有期结束时的价格，<spanclass="math inline">\(d\)</span>表示股息收入。</p><h4 id="有效年利率">7.2.2 有效年利率</h4><p><strong>有效年利率（Effective AnnualRate）</strong>是一年期投资价值增长的百分比。</p><p>一年期总收入（<spanclass="math inline">\(1+EAR\)</span>）是每一元投资的最终价值： <spanclass="math display">\[1 + EAR = [1 + r_f(T)]^{1/T}\]</span> 有效年利率<span class="math inline">\(EAR\)</span>： <spanclass="math display">\[EAR = (1 + r(T))^{\frac{1}{T}} - 1\]</span> T年的总收益率<span class="math inline">\(r(T)\)</span>： <spanclass="math display">\[r(T) = (EAR + 1)^T - 1\]</span> 投资期内总收益率<spanclass="math inline">\(r(T)\)</span>与有效年利率<spanclass="math inline">\(EAR\)</span>之间的关系： <spanclass="math display">\[(EAR + 1)^T = r(T) + 1\]</span></p><h4 id="年化百分比利率">7.2.3 年化百分比利率</h4><p><strong>年化百分比利率（Annual PercentageRate）</strong>是对期限小于一年的投资项目，将该投资的总收益率按照单利的形式转化为年收益率形式的利率。</p><p>年化百分比利率是年度化的简单利率： <span class="math display">\[r(T) = T \times APR\]</span> 例如：半年期国债总收益率<span class="math inline">\(r(T) =1.63 \%\)</span>，其中<span class="math inline">\(T =0.5\)</span>，则转化为年化百分比利率为<span class="math inline">\(APR =1.63\% \times 2\)</span>。</p><p>总收益率、有效年利率、年化百分比利率之间的关系： <spanclass="math display">\[EAR + 1 = [1+r(T)]^{\frac{1}{T}}=(1+T*APR)^{\frac{1}{T}}\]</span> 有效年利率可以被年化百分比利率表达： <spanclass="math display">\[EAR = (1 + T*APR)^{\frac{1}{T}} - 1\]</span></p><h4 id="连续复利">7.2.4 连续复利</h4><p><strong>连续复利（Continuously CompoundingInterest）</strong>是指在期数趋于无限大的极限情况下对应的利率，此时不同期之间的间隔很短，可以看作是无穷小量。</p><p><strong>连续复利收益率</strong>可以简单理解为当投资期限为无穷小时的<strong>年化百分比收益率的值</strong>。</p><p>连续复利收益率又称为对数收益率（Log Return）。</p><h3 id="风险与风险的衡量">7.3 风险与风险的衡量</h3><h4 id="风险的一般分类">7.3.1 风险的一般分类</h4><p>风险一般可分为：</p><ol type="1"><li>自然风险、政治风险、运输风险……</li><li>商界：财产权、生产、交易……</li><li>金融：<ol type="1"><li>投资风险<ol type="1"><li>市场风险（Market risk）：Interest rate, currency, equity,commodity</li><li>信用风险（Credit risk）：sovereign, corporate, personal</li><li>流动性风险（Liquidity risk）：market, funding</li><li>运营风险（Operational risk）：system &amp; control, managementfailure, human error</li><li>事件风险（Event risk）</li></ol></li><li>货币购买力风险：inflation, currency, liquidity</li></ol></li></ol><h4 id="风险的衡量">7.3.2 风险的衡量</h4><p>期望收益是对收益的数学期望： <span class="math display">\[E(r) = \sum_s p(s) r(s)\]</span> 其中，<spanclass="math inline">\(p(s)\)</span>是情境概率，<spanclass="math inline">\(r(s)\)</span>是情境下的持有期收益率，<spanclass="math inline">\(s\)</span>是情境。情境，例如：经济形势，好、差的经济形势，对应不同的收益率。</p><p><strong>超额收益（ExcessReturn）</strong>是在任意一个特定的阶段，风险资产的实际收益率与实际无风险收益率的差值。</p><blockquote><p>美国政府短期国库券（T-Bill）的收益率可被作为无风险收益率。相比之下，更长期的国债，尽管几乎不存在信用风险，但仍然存在货币购买力风险，如：通货膨胀风险。</p></blockquote><p><strong>风险溢价（RiskPremium）</strong>是风险资产预期持有期收益与无风险收益的差值。</p><p><strong>收益波动性比率（The Reward-to-VolatilityRatio）</strong>有如<strong>夏普比率（Sharpe Ratio）</strong>： <spanclass="math display">\[S = \frac{Risk Premium}{SD of Excess Return}\]</span> 夏普比率计算的是风险溢价与超额收益标准差的比例。</p><h2 id="收益率的时间序列分析">7.4 收益率的时间序列分析</h2><h3 id="收益率-1">7.4.1 收益率</h3><p>算术平均值收益率： <span class="math display">\[E(r) = \sum_{s-1}^{n}p(s)r(s) = \frac{1}{n}\sum_{s-1}^{n}r(s)\]</span></p><p>几何平均值收益率： <span class="math display">\[TV_n = (1+r_1)(1+r_2)...(1+r_n)\]</span></p><p><span class="math display">\[g = TV^{1/n} - 1\]</span></p><p>可以作为预期收益的估计工具。</p><p>实际上历史越久远对现有的预测影响越小，当以过去的时间序列估时计，需要考虑系统发生的变化。</p><p>理想情况下，拟合正态分布进行估计，只需依据过往的时间序列求解收益率的均值与方差。</p><p>现实中，小概率事件带来风险，收益可能偏离正态分布，此时标准差不再是衡量风险的完美度量工具，夏普比率也不再是评价证券表现的完美度量工具。对正态分布进行修正，需要考虑偏度（skewness）和峰度（kurtosis）。</p><blockquote><p>Yahoo Finance可获取国内外的股票时序数据。</p></blockquote><h3 id="在险价值">7.4.2 在险价值</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Investment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spaCy无法下载预训练模型问题解决</title>
      <link href="/posts/spaCy%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/posts/spaCy%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E9%A2%84%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p><ahref="https://spacy.io/">spaCy</a>是一款非常好用的自然语言处理工具，不过也许是因为一些原因，无法正常下载spaCy官方的预训练模型了，网络连接被重置，报错<code>ProtocolError: ('Connection aborted.', ConnectionResetError(104, 'Connection reset by peer'))</code>。为了解决该问题，可以尝试手动选择链接下载模型资源。</p><span id="more"></span><h1id="spacy无法下载预训练模型问题解决">spaCy无法下载预训练模型问题解决</h1><h2 id="问题描述">1 问题描述</h2><p>在开展涉及自然语言处理的研究中，需要对自然语言数据进行一系列处理，因此需要使用spaCy。</p><p>不过近期发现，在使用命令下载spaCy的预训练模型时，会遭遇网络连接重置的问题，导致无法正常使用该工具。</p><p>具体报错如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">(pytorch) shenjiayun@server3 ~/Dev/VisualEntailment $ python -m spacy download en_core_web_sm</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/urllib3/connectionpool.py&quot;</span>, line 706, <span class="keyword">in</span> urlopen</span><br><span class="line">    chunked=chunked,</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/urllib3/connectionpool.py&quot;</span>, line 382, <span class="keyword">in</span> _make_request</span><br><span class="line">    self._validate_conn(conn)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/urllib3/connectionpool.py&quot;</span>, line 1010, <span class="keyword">in</span> _validate_conn</span><br><span class="line">    conn.connect()</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/urllib3/connection.py&quot;</span>, line 421, <span class="keyword">in</span> connect</span><br><span class="line">    tls_in_tls=tls_in_tls,</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/urllib3/util/ssl_.py&quot;</span>, line 429, <span class="keyword">in</span> ssl_wrap_socket</span><br><span class="line">    sock, context, tls_in_tls, server_hostname=server_hostname</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/urllib3/util/ssl_.py&quot;</span>, line 472, <span class="keyword">in</span> _ssl_wrap_socket_impl</span><br><span class="line">    <span class="built_in">return</span> ssl_context.wrap_socket(sock, server_hostname=server_hostname)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/ssl.py&quot;</span>, line 423, <span class="keyword">in</span> wrap_socket</span><br><span class="line">    session=session</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/ssl.py&quot;</span>, line 870, <span class="keyword">in</span> _create</span><br><span class="line">    self.do_handshake()</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/ssl.py&quot;</span>, line 1139, <span class="keyword">in</span> do_handshake</span><br><span class="line">    self._sslobj.do_handshake()</span><br><span class="line">ConnectionResetError: [Errno 104] Connection reset by peer</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/requests/adapters.py&quot;</span>, line 449, <span class="keyword">in</span> send</span><br><span class="line">    <span class="built_in">timeout</span>=<span class="built_in">timeout</span></span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/urllib3/connectionpool.py&quot;</span>, line 756, <span class="keyword">in</span> urlopen</span><br><span class="line">    method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/urllib3/util/retry.py&quot;</span>, line 531, <span class="keyword">in</span> increment</span><br><span class="line">    raise six.reraise(<span class="built_in">type</span>(error), error, _stacktrace)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/urllib3/packages/six.py&quot;</span>, line 734, <span class="keyword">in</span> reraise</span><br><span class="line">    raise value.with_traceback(tb)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/urllib3/connectionpool.py&quot;</span>, line 706, <span class="keyword">in</span> urlopen</span><br><span class="line">    chunked=chunked,</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/urllib3/connectionpool.py&quot;</span>, line 382, <span class="keyword">in</span> _make_request</span><br><span class="line">    self._validate_conn(conn)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/urllib3/connectionpool.py&quot;</span>, line 1010, <span class="keyword">in</span> _validate_conn</span><br><span class="line">    conn.connect()</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/urllib3/connection.py&quot;</span>, line 421, <span class="keyword">in</span> connect</span><br><span class="line">    tls_in_tls=tls_in_tls,</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/urllib3/util/ssl_.py&quot;</span>, line 429, <span class="keyword">in</span> ssl_wrap_socket</span><br><span class="line">    sock, context, tls_in_tls, server_hostname=server_hostname</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/urllib3/util/ssl_.py&quot;</span>, line 472, <span class="keyword">in</span> _ssl_wrap_socket_impl</span><br><span class="line">    <span class="built_in">return</span> ssl_context.wrap_socket(sock, server_hostname=server_hostname)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/ssl.py&quot;</span>, line 423, <span class="keyword">in</span> wrap_socket</span><br><span class="line">    session=session</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/ssl.py&quot;</span>, line 870, <span class="keyword">in</span> _create</span><br><span class="line">    self.do_handshake()</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/ssl.py&quot;</span>, line 1139, <span class="keyword">in</span> do_handshake</span><br><span class="line">    self._sslobj.do_handshake()</span><br><span class="line">urllib3.exceptions.ProtocolError: (<span class="string">&#x27;Connection aborted.&#x27;</span>, ConnectionResetError(104, <span class="string">&#x27;Connection reset by peer&#x27;</span>))</span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/runpy.py&quot;</span>, line 193, <span class="keyword">in</span> _run_module_as_main</span><br><span class="line">    <span class="string">&quot;__main__&quot;</span>, mod_spec)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/runpy.py&quot;</span>, line 85, <span class="keyword">in</span> _run_code</span><br><span class="line">    <span class="built_in">exec</span>(code, run_globals)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/spacy/__main__.py&quot;</span>, line 33, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    plac.call(commands[<span class="built_in">command</span>], sys.argv[1:])</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/plac_core.py&quot;</span>, line 348, <span class="keyword">in</span> call</span><br><span class="line">    cmd, result = parser.consume(arglist)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/plac_core.py&quot;</span>, line 217, <span class="keyword">in</span> consume</span><br><span class="line">    <span class="built_in">return</span> cmd, self.func(*(args + varargs + extraopts), **kwargs)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/spacy/cli/download.py&quot;</span>, line 44, <span class="keyword">in</span> download</span><br><span class="line">    shortcuts = get_json(about.__shortcuts__, <span class="string">&quot;available shortcuts&quot;</span>)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/spacy/cli/download.py&quot;</span>, line 95, <span class="keyword">in</span> get_json</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/requests/api.py&quot;</span>, line 76, <span class="keyword">in</span> get</span><br><span class="line">    <span class="built_in">return</span> request(<span class="string">&#x27;get&#x27;</span>, url, params=params, **kwargs)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/requests/api.py&quot;</span>, line 61, <span class="keyword">in</span> request</span><br><span class="line">    <span class="built_in">return</span> session.request(method=method, url=url, **kwargs)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/requests/sessions.py&quot;</span>, line 542, <span class="keyword">in</span> request</span><br><span class="line">    resp = self.send(prep, **send_kwargs)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/requests/sessions.py&quot;</span>, line 655, <span class="keyword">in</span> send</span><br><span class="line">    r = adapter.send(request, **kwargs)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/requests/adapters.py&quot;</span>, line 498, <span class="keyword">in</span> send</span><br><span class="line">    raise ConnectionError(err, request=request)</span><br><span class="line">requests.exceptions.ConnectionError: (<span class="string">&#x27;Connection aborted.&#x27;</span>, ConnectionResetError(104, <span class="string">&#x27;Connection reset by peer&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="问题分析">2 问题分析</h2><p>不便分析。</p><p>相关issue:</p><blockquote><p><a href="https://github.com/explosion/spaCy/issues/1510">ConnectionError while installing nlp models #1510</a></p></blockquote><h2 id="问题解决">3 问题解决</h2><p>正常情况下，应该使用官方的命令来安装spaCy工具和最匹配的预训练模型。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install spacy</span><br><span class="line">python -m spacy download en_core_web_sm</span><br></pre></td></tr></table></figure><p>但现在网络连接被重置，因此只能通过手动处理了。</p><p>spaCy在GitHub上同步存放了可下载的模型。</p><blockquote><p><strong><a href="https://github.com/explosion/spacy-models">spaCymodels</a></strong></p><p>This repository contains <ahref="https://github.com/explosion/spacy-models/releases">releases</a>of models for the <a href="https://github.com/explosion/spaCy">spaCy</a>NLP library. For more info on how to download, install and use themodels, see the <a href="https://spacy.io/usage/models">modelsdocumentation</a>.</p></blockquote><p>在无法自动安装的情况下，可以手动选择安装指定的<code>.tar.gz</code>包，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install .tar.gz archive from path or URL</span></span><br><span class="line">pip install /Users/you/en_core_web_sm-2.1.0.tar.gz</span><br><span class="line">pip install https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-2.1.0/en_core_web_sm-2.1.0.tar.gz</span><br></pre></td></tr></table></figure><p>采用此方法，意味着需要手动翻阅<code>release</code>中的资源，找出合适的预训练模型。例如，当前最新的<code>en_core_web_sm</code>模型是<ahref="https://github.com/explosion/spacy-models/releases/tag/en_core_web_sm-2.3.1">en_core_web_sm-2.3.1</a>。</p><p>也可通过spaCy官方的链接确定合适的预训练模型版本，以<code>en_core_web_sm</code>为例：</p><blockquote><p><a href="https://spacy.io/models/en#en_core_web_sm">English</a></p><p>Available pretrained statistical models for English</p></blockquote><p>执行后可以成功下载和安装预训练模型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">(pytorch) shenjiayun@server3 ~/Dev/VisualEntailment $ pip install https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-2.3.1/en_core_web_sm-2.3.1.tar.gz</span><br><span class="line">Collecting https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-2.3.1/en_core_web_sm-2.3.1.tar.gz</span><br><span class="line">  Downloading https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-2.3.1/en_core_web_sm-2.3.1.tar.gz (12.0 MB)</span><br><span class="line">     |████████████████████████████████| 12.0 MB 427 kB/s </span><br><span class="line">Requirement already satisfied: spacy&lt;2.4.0,&gt;=2.3.0 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from en-core-web-sm==2.3.1) (2.3.5)</span><br><span class="line">Requirement already satisfied: thinc&lt;7.5.0,&gt;=7.4.1 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (7.4.5)</span><br><span class="line">Requirement already satisfied: tqdm&lt;5.0.0,&gt;=4.38.0 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (4.55.0)</span><br><span class="line">Requirement already satisfied: requests&lt;3.0.0,&gt;=2.13.0 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (2.25.1)</span><br><span class="line">Requirement already satisfied: setuptools <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (51.0.0.post20201207)</span><br><span class="line">Requirement already satisfied: cymem&lt;2.1.0,&gt;=2.0.2 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (2.0.4)</span><br><span class="line">Requirement already satisfied: preshed&lt;3.1.0,&gt;=3.0.2 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (3.0.2)</span><br><span class="line">Requirement already satisfied: srsly&lt;1.1.0,&gt;=1.0.2 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (1.0.5)</span><br><span class="line">Requirement already satisfied: plac&lt;1.2.0,&gt;=0.9.6 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (1.1.0)</span><br><span class="line">Requirement already satisfied: numpy&gt;=1.15.0 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (1.19.2)</span><br><span class="line">Requirement already satisfied: catalogue&lt;1.1.0,&gt;=0.0.7 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (1.0.0)</span><br><span class="line">Requirement already satisfied: blis&lt;0.8.0,&gt;=0.4.0 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (0.4.1)</span><br><span class="line">Requirement already satisfied: wasabi&lt;1.1.0,&gt;=0.4.0 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (0.8.0)</span><br><span class="line">Requirement already satisfied: murmurhash&lt;1.1.0,&gt;=0.28.0 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (1.0.5)</span><br><span class="line">Requirement already satisfied: importlib-metadata&gt;=0.20 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from catalogue&lt;1.1.0,&gt;=0.0.7-&gt;spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (2.0.0)</span><br><span class="line">Requirement already satisfied: zipp&gt;=0.5 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from importlib-metadata&gt;=0.20-&gt;catalogue&lt;1.1.0,&gt;=0.0.7-&gt;spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (3.4.0)</span><br><span class="line">Requirement already satisfied: urllib3&lt;1.27,&gt;=1.21.1 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from requests&lt;3.0.0,&gt;=2.13.0-&gt;spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (1.26.2)</span><br><span class="line">Requirement already satisfied: chardet&lt;5,&gt;=3.0.2 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from requests&lt;3.0.0,&gt;=2.13.0-&gt;spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (4.0.0)</span><br><span class="line">Requirement already satisfied: certifi&gt;=2017.4.17 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from requests&lt;3.0.0,&gt;=2.13.0-&gt;spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (2020.12.5)</span><br><span class="line">Requirement already satisfied: idna&lt;3,&gt;=2.5 <span class="keyword">in</span> /home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages (from requests&lt;3.0.0,&gt;=2.13.0-&gt;spacy&lt;2.4.0,&gt;=2.3.0-&gt;en-core-web-sm==2.3.1) (2.10)</span><br><span class="line">Building wheels <span class="keyword">for</span> collected packages: en-core-web-sm</span><br><span class="line">  Building wheel <span class="keyword">for</span> en-core-web-sm (setup.py) ... <span class="keyword">done</span></span><br><span class="line">  Created wheel <span class="keyword">for</span> en-core-web-sm: filename=en_core_web_sm-2.3.1-py3-none-any.whl size=12047106 sha256=dd9f847a5f35d1760f70b07ab8e8a663ae2a10364a8d43ee93d2b0eab246de3d</span><br><span class="line">  Stored <span class="keyword">in</span> directory: /home/shenjiayun/.cache/pip/wheels/b7/0d/f0/7ecae8427c515065d75410989e15e5785dd3975fe06e795cd9</span><br><span class="line">Successfully built en-core-web-sm</span><br><span class="line">Installing collected packages: en-core-web-sm</span><br><span class="line">Successfully installed en-core-web-sm-2.3.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> Python </tag>
            
            <tag> Network </tag>
            
            <tag> NLP </tag>
            
            <tag> spaCy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPython无法自动补全且因jedi报TypeError而退出问题解决</title>
      <link href="/posts/IPython%E6%97%A0%E6%B3%95%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E4%B8%94%E5%9B%A0jedi%E6%8A%A5TypeError%E8%80%8C%E9%80%80%E5%87%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/posts/IPython%E6%97%A0%E6%B3%95%E8%87%AA%E5%8A%A8%E8%A1%A5%E5%85%A8%E4%B8%94%E5%9B%A0jedi%E6%8A%A5TypeError%E8%80%8C%E9%80%80%E5%87%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>ipython7.19.0的自动补全失效，且回车后出现大段报错，提示jedi中<code>TypeError: __init__() got an unexpected keyword argument 'column'</code>。本文对问题进行排查并给出解决方案。</p><span id="more"></span><h1id="ipython无法自动补全且因jedi报typeerror而退出问题解决">IPython无法自动补全且因jedi报TypeError而退出问题解决</h1><h2 id="问题描述">1 问题描述</h2><p>使用最新版的IPython7.19.0时，发现无法Tab自动补全，且回车后会出现报错，具体情境例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">(pytorch) shenjiayun@server3 ~/Dev/VisualEntailment $ ipython</span><br><span class="line">Python <span class="number">3.7</span><span class="number">.9</span> (default, Aug <span class="number">31</span> <span class="number">2020</span>, <span class="number">12</span>:<span class="number">42</span>:<span class="number">55</span>) </span><br><span class="line"><span class="type">Type</span> <span class="string">&#x27;copyright&#x27;</span>, <span class="string">&#x27;credits&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;license&#x27;</span> <span class="keyword">for</span> more information</span><br><span class="line">IPython <span class="number">7.19</span><span class="number">.0</span> -- An enhanced Interactive Python. <span class="type">Type</span> <span class="string">&#x27;?&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: x = torch.rand([<span class="number">4</span>, <span class="number">36</span>, <span class="number">2048</span>])</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/IPython/terminal/ptutils.py&quot;</span>, line <span class="number">113</span>, <span class="keyword">in</span> get_completions</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> self._get_completions(body, offset, cursor_position, self.ipy_completer)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/IPython/terminal/ptutils.py&quot;</span>, line <span class="number">129</span>, <span class="keyword">in</span> _get_completions</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> completions:</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/IPython/core/completer.py&quot;</span>, line <span class="number">438</span>, <span class="keyword">in</span> _deduplicate_completions</span><br><span class="line">    completions = <span class="built_in">list</span>(completions)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/IPython/core/completer.py&quot;</span>, line <span class="number">1818</span>, <span class="keyword">in</span> completions</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> self._completions(text, offset, _timeout=self.jedi_compute_type_timeout/<span class="number">1000</span>):</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/IPython/core/completer.py&quot;</span>, line <span class="number">1862</span>, <span class="keyword">in</span> _completions</span><br><span class="line">    full_text=full_text, cursor_line=cursor_line, cursor_pos=cursor_column)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/IPython/core/completer.py&quot;</span>, line <span class="number">2030</span>, <span class="keyword">in</span> _complete</span><br><span class="line">    cursor_pos, cursor_line, full_text)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/IPython/core/completer.py&quot;</span>, line <span class="number">1374</span>, <span class="keyword">in</span> _jedi_matches</span><br><span class="line">    text[:offset], namespaces, column=cursor_column, line=cursor_line + <span class="number">1</span>)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/jedi/api/__init__.py&quot;</span>, line <span class="number">726</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    project=Project(Path.cwd()), **kwds)</span><br><span class="line">TypeError: __init__() got an unexpected keyword argument <span class="string">&#x27;column&#x27;</span></span><br><span class="line"></span><br><span class="line">During handling of the above exception, another exception occurred:</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/bin/ipython&quot;</span>, line <span class="number">11</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    sys.exit(start_ipython())</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/IPython/__init__.py&quot;</span>, line <span class="number">126</span>, <span class="keyword">in</span> start_ipython</span><br><span class="line">    <span class="keyword">return</span> launch_new_instance(argv=argv, **kwargs)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/traitlets/config/application.py&quot;</span>, line <span class="number">845</span>, <span class="keyword">in</span> launch_instance</span><br><span class="line">    app.start()</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/IPython/terminal/ipapp.py&quot;</span>, line <span class="number">356</span>, <span class="keyword">in</span> start</span><br><span class="line">    self.shell.mainloop()</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/IPython/terminal/interactiveshell.py&quot;</span>, line <span class="number">564</span>, <span class="keyword">in</span> mainloop</span><br><span class="line">    self.interact()</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/IPython/terminal/interactiveshell.py&quot;</span>, line <span class="number">547</span>, <span class="keyword">in</span> interact</span><br><span class="line">    code = self.prompt_for_code()</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/IPython/terminal/interactiveshell.py&quot;</span>, line <span class="number">475</span>, <span class="keyword">in</span> prompt_for_code</span><br><span class="line">    **self._extra_prompt_options())</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/prompt_toolkit/shortcuts/prompt.py&quot;</span>, line <span class="number">1013</span>, <span class="keyword">in</span> prompt</span><br><span class="line">    <span class="keyword">return</span> self.app.run(set_exception_handler=set_exception_handler)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/prompt_toolkit/application/application.py&quot;</span>, line <span class="number">817</span>, <span class="keyword">in</span> run</span><br><span class="line">    self.run_async(pre_run=pre_run, set_exception_handler=set_exception_handler)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/asyncio/base_events.py&quot;</span>, line <span class="number">587</span>, <span class="keyword">in</span> run_until_complete</span><br><span class="line">    <span class="keyword">return</span> future.result()</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/prompt_toolkit/application/application.py&quot;</span>, line <span class="number">783</span>, <span class="keyword">in</span> run_async</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> _run_async2()</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/prompt_toolkit/application/application.py&quot;</span>, line <span class="number">771</span>, <span class="keyword">in</span> _run_async2</span><br><span class="line">    <span class="keyword">await</span> self.cancel_and_wait_for_background_tasks()</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/prompt_toolkit/application/application.py&quot;</span>, line <span class="number">872</span>, <span class="keyword">in</span> cancel_and_wait_for_background_tasks</span><br><span class="line">    <span class="keyword">await</span> task</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/prompt_toolkit/buffer.py&quot;</span>, line <span class="number">1854</span>, <span class="keyword">in</span> new_coroutine</span><br><span class="line">    <span class="keyword">await</span> coroutine(*a, **kw)</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/prompt_toolkit/buffer.py&quot;</span>, line <span class="number">1684</span>, <span class="keyword">in</span> async_completer</span><br><span class="line">    document, complete_event</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/prompt_toolkit/completion/base.py&quot;</span>, line <span class="number">270</span>, <span class="keyword">in</span> get_completions_async</span><br><span class="line">    document, complete_event</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/prompt_toolkit/completion/base.py&quot;</span>, line <span class="number">196</span>, <span class="keyword">in</span> get_completions_async</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> self.get_completions(document, complete_event):</span><br><span class="line">  File <span class="string">&quot;/home/shenjiayun/miniconda3/envs/pytorch/lib/python3.7/site-packages/IPython/terminal/ptutils.py&quot;</span>, line <span class="number">116</span>, <span class="keyword">in</span> get_completions</span><br><span class="line">    exc_type, exc_value, exc_tb = sys.exc_info()</span><br><span class="line">NameError: name <span class="string">&#x27;sys&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"></span><br><span class="line">If you suspect this <span class="keyword">is</span> an IPython <span class="number">7.19</span><span class="number">.0</span> bug, please report it at:</span><br><span class="line">    https://github.com/ipython/ipython/issues</span><br><span class="line"><span class="keyword">or</span> send an email to the mailing <span class="built_in">list</span> at ipython-dev@python.org</span><br><span class="line"></span><br><span class="line">You can <span class="built_in">print</span> a more detailed traceback right now <span class="keyword">with</span> <span class="string">&quot;%tb&quot;</span>, <span class="keyword">or</span> use <span class="string">&quot;%debug&quot;</span></span><br><span class="line">to interactively debug it.</span><br><span class="line"></span><br><span class="line">Extra-detailed tracebacks <span class="keyword">for</span> bug-reporting purposes can be enabled via:</span><br><span class="line">    %config Application.verbose_crash=<span class="literal">True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="问题排查">2 问题排查</h2><p>根据常识推断，ipython使用的是jedi作为languagesever实现代码自动补全。当自动补全失灵的时候，那应该和jedi有关。</p><p>从长段的报错中，能看到错误定位于<code>jedi/api/__init__.py", line 726, in __init__</code>，提示<code>TypeError: __init__() got an unexpected keyword argument 'column'</code>。确实是调用jedi时出现了错误。</p><p>由此查jedi的开源项目，发现issue：</p><blockquote><p><a href="https://github.com/davidhalter/jedi/issues/1714">IPython(&lt;=7.19) incompatible with jedi 0.18.0 #1714</a></p><p>Relevant traceback reads as follows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  File &quot;../venv/lib/python3.8/site-packages/IPython/core/completer.py&quot;, line 2029, in _complete</span><br><span class="line">    completions = self._jedi_matches(</span><br><span class="line">  File &quot;../venv/lib/python3.8/site-packages/IPython/core/completer.py&quot;, line 1373, in _jedi_matches</span><br><span class="line">    interpreter = jedi.Interpreter(</span><br><span class="line">  File &quot;../venv/lib/python3.8/site-packages/jedi/api/__init__.py&quot;, line 725, in __init__</span><br><span class="line">    super().__init__(code, environment=environment,</span><br><span class="line">TypeError: __init__() got an unexpected keyword argument &#x27;column&#x27;</span><br></pre></td></tr></table></figure></blockquote><p>经过确认，jedi所有者表示该问题系ipython作为下游应用的调用问题，待下游应用更新解决。</p><blockquote><p><strong><ahref="https://github.com/davidhalter">davidhalter</a></strong> commented<ahref="https://github.com/davidhalter/jedi/issues/1714#issuecomment-751273878">6days ago</a></p><p>I think we should continue the discussion in <ahref="https://github.com/ipython/ipython/issues/12740">ipython/ipython#12740</a>.IMOthis is an downstream issue and they should just do a new release.</p></blockquote><h2 id="解决方案">3 解决方案</h2><p>既然ipython目前最新的7.19.0版本无法正确调用最新的jedi0.18.0版本，那就把jedi版本降级到0.17即可。</p><p>通过conda检索可用的jedi版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda search jedi</span><br></pre></td></tr></table></figure><p>可见：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">(pytorch) C:\Users\jyshen&gt;conda search jedi</span><br><span class="line">Loading channels: <span class="keyword">done</span></span><br><span class="line"><span class="comment"># Name                       Version           Build  Channel</span></span><br><span class="line">jedi                           0.8.1          py26_0  pkgs/free</span><br><span class="line">jedi                           0.8.1          py27_0  pkgs/free</span><br><span class="line">jedi                           0.8.1          py33_0  pkgs/free</span><br><span class="line">jedi                           0.8.1          py34_0  pkgs/free</span><br><span class="line">jedi                           0.9.0          py26_0  pkgs/free</span><br><span class="line">jedi                           0.9.0          py27_0  pkgs/free</span><br><span class="line">jedi                           0.9.0          py27_1  pkgs/free</span><br><span class="line">jedi                           0.9.0          py33_0  pkgs/free</span><br><span class="line">jedi                           0.9.0          py34_0  pkgs/free</span><br><span class="line">jedi                           0.9.0          py34_1  pkgs/free</span><br><span class="line">jedi                           0.9.0          py35_0  pkgs/free</span><br><span class="line">jedi                           0.9.0          py35_1  pkgs/free</span><br><span class="line">jedi                           0.9.0          py36_1  pkgs/free</span><br><span class="line">jedi                          0.10.2          py27_0  pkgs/free</span><br><span class="line">jedi                          0.10.2          py27_2  pkgs/free</span><br><span class="line">jedi                          0.10.2  py27h4f12af3_0  pkgs/main</span><br><span class="line">jedi                          0.10.2          py35_0  pkgs/free</span><br><span class="line">jedi                          0.10.2          py35_2  pkgs/free</span><br><span class="line">jedi                          0.10.2  py35h3350e2d_0  pkgs/main</span><br><span class="line">jedi                          0.10.2          py36_0  pkgs/free</span><br><span class="line">jedi                          0.10.2          py36_2  pkgs/free</span><br><span class="line">jedi                          0.10.2  py36hed927a0_0  pkgs/main</span><br><span class="line">jedi                          0.11.0          py27_1  pkgs/main</span><br><span class="line">jedi                          0.11.0          py27_2  pkgs/main</span><br><span class="line">jedi                          0.11.0  py27h53c0d9b_0  pkgs/main</span><br><span class="line">jedi                          0.11.0          py35_1  pkgs/main</span><br><span class="line">jedi                          0.11.0          py35_2  pkgs/main</span><br><span class="line">jedi                          0.11.0  py35hc856aec_0  pkgs/main</span><br><span class="line">jedi                          0.11.0          py36_1  pkgs/main</span><br><span class="line">jedi                          0.11.0          py36_2  pkgs/main</span><br><span class="line">jedi                          0.11.0  py36hc338079_0  pkgs/main</span><br><span class="line">jedi                          0.11.1          py27_0  pkgs/main</span><br><span class="line">jedi                          0.11.1          py27_1  pkgs/main</span><br><span class="line">jedi                          0.11.1          py35_0  pkgs/main</span><br><span class="line">jedi                          0.11.1          py35_1  pkgs/main</span><br><span class="line">jedi                          0.11.1          py36_0  pkgs/main</span><br><span class="line">jedi                          0.11.1          py36_1  pkgs/main</span><br><span class="line">jedi                          0.12.0          py27_0  pkgs/main</span><br><span class="line">jedi                          0.12.0          py27_1  pkgs/main</span><br><span class="line">jedi                          0.12.0          py35_0  pkgs/main</span><br><span class="line">jedi                          0.12.0          py35_1  pkgs/main</span><br><span class="line">jedi                          0.12.0          py36_0  pkgs/main</span><br><span class="line">jedi                          0.12.0          py36_1  pkgs/main</span><br><span class="line">jedi                          0.12.0          py37_1  pkgs/main</span><br><span class="line">jedi                          0.12.1          py27_0  pkgs/main</span><br><span class="line">jedi                          0.12.1          py35_0  pkgs/main</span><br><span class="line">jedi                          0.12.1          py36_0  pkgs/main</span><br><span class="line">jedi                          0.12.1          py37_0  pkgs/main</span><br><span class="line">jedi                          0.13.1          py27_0  pkgs/main</span><br><span class="line">jedi                          0.13.1          py36_0  pkgs/main</span><br><span class="line">jedi                          0.13.1          py37_0  pkgs/main</span><br><span class="line">jedi                          0.13.2          py27_0  pkgs/main</span><br><span class="line">jedi                          0.13.2          py36_0  pkgs/main</span><br><span class="line">jedi                          0.13.2          py37_0  pkgs/main</span><br><span class="line">jedi                          0.13.3          py27_0  pkgs/main</span><br><span class="line">jedi                          0.13.3          py36_0  pkgs/main</span><br><span class="line">jedi                          0.13.3          py37_0  pkgs/main</span><br><span class="line">jedi                          0.14.1          py27_0  pkgs/main</span><br><span class="line">jedi                          0.14.1          py36_0  pkgs/main</span><br><span class="line">jedi                          0.14.1          py37_0  pkgs/main</span><br><span class="line">jedi                          0.14.1          py38_0  pkgs/main</span><br><span class="line">jedi                          0.15.1          py27_0  pkgs/main</span><br><span class="line">jedi                          0.15.1          py36_0  pkgs/main</span><br><span class="line">jedi                          0.15.1          py37_0  pkgs/main</span><br><span class="line">jedi                          0.15.1          py38_0  pkgs/main</span><br><span class="line">jedi                          0.15.2          py27_0  pkgs/main</span><br><span class="line">jedi                          0.15.2          py36_0  pkgs/main</span><br><span class="line">jedi                          0.15.2          py37_0  pkgs/main</span><br><span class="line">jedi                          0.15.2          py38_0  pkgs/main</span><br><span class="line">jedi                          0.16.0          py36_0  pkgs/main</span><br><span class="line">jedi                          0.16.0          py36_1  pkgs/main</span><br><span class="line">jedi                          0.16.0          py37_0  pkgs/main</span><br><span class="line">jedi                          0.16.0          py37_1  pkgs/main</span><br><span class="line">jedi                          0.16.0          py38_0  pkgs/main</span><br><span class="line">jedi                          0.16.0          py38_1  pkgs/main</span><br><span class="line">jedi                          0.17.0          py36_0  pkgs/main</span><br><span class="line">jedi                          0.17.0          py37_0  pkgs/main</span><br><span class="line">jedi                          0.17.0          py38_0  pkgs/main</span><br><span class="line">jedi                          0.17.1          py36_0  pkgs/main</span><br><span class="line">jedi                          0.17.1          py37_0  pkgs/main</span><br><span class="line">jedi                          0.17.1          py38_0  pkgs/main</span><br><span class="line">jedi                          0.17.2          py36_0  pkgs/main</span><br><span class="line">jedi                          0.17.2  py36haa95532_1  pkgs/main</span><br><span class="line">jedi                          0.17.2          py37_0  pkgs/main</span><br><span class="line">jedi                          0.17.2  py37haa95532_1  pkgs/main</span><br><span class="line">jedi                          0.17.2          py38_0  pkgs/main</span><br><span class="line">jedi                          0.17.2  py38haa95532_1  pkgs/main</span><br><span class="line">jedi                          0.17.2  py39haa95532_1  pkgs/main</span><br><span class="line">jedi                          0.18.0  py36haa95532_0  pkgs/main</span><br><span class="line">jedi                          0.18.0  py37haa95532_0  pkgs/main</span><br><span class="line">jedi                          0.18.0  py38haa95532_0  pkgs/main</span><br><span class="line">jedi                          0.18.0  py39haa95532_0  pkgs/main</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过conda安装指定版本的jedi：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install jedi=0.17</span><br></pre></td></tr></table></figure><p>再次测试ipython，不再出现该问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> Python </tag>
            
            <tag> Ipython </tag>
            
            <tag> jedi </tag>
            
            <tag> conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云原生与微服务概念笔记</title>
      <link href="/posts/%E4%BA%91%E5%8E%9F%E7%94%9F%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/%E4%BA%91%E5%8E%9F%E7%94%9F%E4%B8%8E%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A6%82%E5%BF%B5%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>云原生与微服务概念入门。</p><span id="more"></span><h1 id="云原生与微服务概念笔记">云原生与微服务概念笔记</h1><p>参考书籍：</p><blockquote><p>朱荣鑫，黄迪璇，张天. Go语言高并发与微服务实战[M].北京：中国铁道出版社有限公司，2020.</p></blockquote><h2 id="云原生架构">1 云原生架构</h2><h3 id="云计算的历史">1.1 云计算的历史</h3><h4 id="云计算的基础虚拟化技术">1.1.1 云计算的基础：虚拟化技术</h4><p>虚拟化是云计算的基石。</p><ul><li>1955年，MIT的JohnMcCarthy提出<strong>time-sharing</strong>技术。</li><li>1959年6月，Christopher Strachey在国际信息处理大会发表《Time Sharingin Large Fast Computer》论文，提出<strong>虚拟化</strong>概念。</li><li>1965年8月，IBM推出TSS(Time Sharing System)和VMM(Virtual MachineMonitor)，是最原始的虚拟机技术。</li><li>20世纪60年代中期，美科学家HCR Licklider提出计算机互联系统，BobTaylor和Larry Robert开发<strong>ARPANET</strong>。</li><li>1978年，IBM获得<strong>RAID</strong>专利，融物理设备为LUN(LogicalUnit Number)，首次将虚拟化引入存储。</li><li>1990，Unity Computing概念复苏，亦称GridComputing，旨在实现公共计算服务给全世界用户使用。</li><li>1998年，VMware成立并首次引入x86虚拟化技术。</li><li>2000年，IEEE颁布<strong>VPN(Virtual PrivateNetwork)</strong>标准草案。</li><li>2002年，Amazon上线<strong>AWS(Amazon.com WebService)</strong>，旨在商品目录以SOAP接口开放。</li><li>2005年，开源虚拟机Xen 3.0发布，支持Intel VT和IA64。</li><li>2006年10月，以色列创业公司Qumranet宣布<strong>KVM</strong>诞生，且KVM模块的源码成为Linux内核源码的一部分。</li><li>2009年4月，VMware推出首款云操作系统VMware vSphere。</li></ul><h4 id="基于虚拟机的云计算">1.1.2 基于虚拟机的云计算</h4><p>虚拟化技术成熟，云计算市场出现。</p><ul><li>2006年，AWS推出S3(Simple Storage Service)和EC2(Elastic ComputeCloud)。</li><li>2007年，IBM发布云计算商业解决方案，推出Blue Cloud计划。</li><li>2008年，Google App Engine发布，用于Web开发和托管。</li><li>2009年，Heroku推出首款公有云PaaS(Platform as a Service)。</li><li>2010年，微软推出Azure。</li><li>2010年，Rackspace Hosting和NASA推出OpenStack开源云软件计划。</li><li>2011年，Pivotal推出开源PaaS——Cloud Foundry。</li><li>2013年，Docker发布，其使用LXC并封装一些新功能。</li><li>2014年，AWS推出Lambda，在AWS中直接运行代码而无需考虑服务器配置和管理，即FaaS(Functionas a Service)、Serverless。</li></ul><p>云计算模式：</p><ol type="1"><li>IaaS：Infrastructure as a Service，提供基础资源。</li><li>SaaS：Software as aService，提供搭建、实施、维护等一系列的软件服务。拿来即用。</li><li>PaaS：Platform as aService，是SaaS的延申，抽象硬件和操作系统，对外提供运行时环境作为部署平台，便于扩展。</li></ol><table><thead><tr class="header"><th>类型</th><th>传统IT</th><th>IaaS</th><th>PaaS</th><th>SaaS</th></tr></thead><tbody><tr class="odd"><td>应用程序</td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr class="even"><td>数据</td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr class="odd"><td>运行时</td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr class="even"><td>中间件</td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr class="odd"><td>操作系统</td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr class="even"><td>虚拟化</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr class="odd"><td>服务器</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr class="even"><td>存储</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr class="odd"><td>网络</td><td>×</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><ul><li>×表示云计算厂商不负责，√表示云计算厂商负责。</li></ul><h4 id="容器化和容器编排">1.1.3 容器化和容器编排</h4><p>容器化本质上是虚拟化的改进。</p><p>虚拟化通过Hypervisor分离操作系统，容器化共享操作系统。</p><p>LXC(LinuxContainer)侧重容器运行环境的资源隔离和限制，类似进程沙箱，而没有容器镜像打包技术，所以没有普及。</p><p>Docker在LXC的基础之上，建立了一套镜像打包和运行机制，将应用程序和依赖项打包成镜像文件，换别的Docker中也能运行，实现Build,Ship and Run。</p><p>容器编排技术经过Mesos、Swarm和Kubernetes三家竞争，最后随着Kubernetes的成熟及其与Docker的融合，PaaS技术的主流路线过渡到了KubernetesDocker。2018年，Kubernetes占据统治地位。</p><h4 id="云计算演进总结">1.1.4 云计算演进总结</h4><p>企业降低对IT基础设施的直接投入，而是通过上云来获取计算和存储能力，按时按需计费。</p><p>云计算降低了IT支出，降低了行业技术壁垒。</p><h3 id="云原生是什么">1.2 云原生是什么</h3><h4 id="云原生出现的背景">1.2.1 云原生出现的背景</h4><p>移动互联网，业务高速发展，快速迭代。</p><h4 id="云原生的定义">1.2.2 云原生的定义</h4><p>Pivotal（云原生应用提出者）：</p><ol type="1"><li>DevOps</li><li>持续集成</li><li>微服务架构</li><li>容器化</li></ol><p>CNCF(Cloud Native Computing Foundation)：</p><ol type="1"><li>应用容器化</li><li>面向微服务架构</li><li>应用支持容器的编排调度</li></ol><blockquote><p><ahref="https://github.com/cncf/foundation/blob/master/charter.md#1-mission-of-the-cloud-native-computing-foundation">Missionof the Cloud Native Computing Foundation</a></p><p>The Foundation’s mission is to make cloud native computingubiquitous. The CNCF Cloud Native Definition v1.0 says:</p><p><strong>Cloud native technologies empower organizations to build andrun scalable applications in modern, dynamic environments such aspublic, private, and hybrid clouds. Containers, service meshes,microservices, immutable infrastructure, and declarative APIs exemplifythis approach.</strong></p><p>These techniques enable loosely coupled systems that are resilient,manageable, and observable. Combined with robust automation, they allowengineers to make high-impact changes frequently and predictably withminimal toil.</p><p>The Cloud Native Computing Foundation seeks to drive adoption of thisparadigm by fostering and sustaining an ecosystem of open source,vendor-neutral projects. We democratize state-of-the-art patterns tomake these innovations accessible for everyone.</p></blockquote><h4 id="云原生与12因素">1.2.3 云原生与12因素</h4><p>2012年，Heroku提出12-Factors云应用设计理念。</p><ol type="1"><li>Codebase：基准代码。用一个代码库做版本控制和多次部署。</li><li>Dependencies：依赖。显式声明依赖关系，通过工具（Maven, Bundler,NPM等）隔离依赖，目的是不依赖于部署环境。</li><li>Config：配置。通过操作系统级的环境变量将配置信息应用到各个部署环境。</li><li>Backing services：后端服务。视后端服务为附加资源。</li><li>Build, release, run：严格分离构建和运行。</li><li>Process：进程。应用程序作为一个或多个无状态进程执行。任何持久化数据都存储于后端服务。</li><li>Portbinding：端口绑定。完全自我加载，不依赖网络服务器即可提供网络服务。通过监听端口来服务发来的请求。</li><li>Concurrency：并发。通过进程模型进行扩展。水平向外扩展应用进程。</li><li>Disposability：易处理。快速启动、优雅终止可最大化健壮性。包括，快速而有弹性的扩展、对变更的部署和宕机恢复能力。</li><li>Dev/prodparity：开发环境与线上环境等价。尽可能保持开发、预发布和线上环境的相似，实现持续交付与部署。</li><li>Logs：日志。视日志为事件流，通过集中式服务收集、聚合、检索和分析日志。</li><li>Adminprocesses：管理进程。后台管理任务当作一次性进程执行，如：数据库迁移任务。</li></ol><p>核心思想：</p><ol type="1"><li>使用声明式格式来搭建自动化。（学习成本低）</li><li>和底层操作系统保持简洁的契约。（可移植性强）</li><li>适合在现代的云平台上部署。（避免额外的管理需求）</li><li>最小化开发与生产的分歧。（持续部署、灵活性强）</li><li>在工具、架构和开发实践不产生重大变化的前提下实现扩展。</li></ol><h3 id="云原生的基础架构">1.3 云原生的基础架构</h3><p>云原生应用利用微服务、服务网络、容器、DevOps和声明式API等代表性技术，来构建容错性好、易于管理和便于观察的松耦合系统。</p><h4 id="微服务">1.3.1 微服务</h4><p>将明确定义的功能分成更小的服务，服务之间是松耦合的，每个服务可以独立迭代。</p><p>优点：降低系统复杂度、独立部署、独立扩展、跨语言编程。</p><p>缺点：需要构建、测试、部署、运行数十个独立的服务，支持多种语言和环境，还引入了分布式系统的复杂性，如：网络延迟、容错性、消息序列化、不可靠网络、异步机制、版本化和差异化。</p><h4 id="容器">1.3.2 容器</h4><p>将微服务和所需的所有配置、依赖关系和环境变量打包成容器镜像，轻松移植到新的服务器节点。</p><p>人力运维部署成本太大，在Docker基础之上，引入Kubernetes可以实现容器集群的自动化部署、自动扩缩容和维护等功能。</p><p>Kubernetes不仅支持Docker，还支持Rocket等其他容器技术。</p><h4 id="服务网络">1.3.3 服务网络</h4><p>微服务技术架构有：</p><ol type="1"><li>侵入式架构：服务框架嵌入程序代码，开发者组合各种组件（如：RPC、负载均衡、熔断等）。</li><li>非侵入式架构：以代理的形式，与应用程序部署在一起，接管应用程序网络并对其透明，开发者只关心自身业务。</li></ol><p>服务网络（Service Mesh）对运行于其上的云原生应用是透明的。</p><p>服务网格是处理服务间通信的基础设施层。它负责构成现代云原生应用程序的复杂服务拓扑来可靠地交付请求。在实践中，ServiceMesh通常以轻量级网络代理阵列的形式实现，这些代理与应用程序代码部署在一起，对应用程序来说无需感知代理的存在。</p><p>开源的服务网络软件：Istio、Linkerd、Envoy、Dubbo Mesh等。ServiceMesh可以运行在Kubernetes上。</p><h4 id="devops">1.3.4 DevOps</h4><p>DevOps包含三个部分：</p><ol type="1"><li>开发</li><li>测试</li><li>运维</li></ol><p>DevOps</p><ol type="1"><li>Dev<ol type="1"><li>Plan</li><li>Create</li><li>Verify</li><li>Package</li></ol></li><li>Ops<ol type="1"><li>Release</li><li>Configure</li><li>Monitor</li></ol></li></ol><h3 id="小结">1.4 小结</h3><p>云原生将云目标从节约IT成本转向推动业务增长。</p><h2 id="微服务概述">2 微服务概述</h2><h3 id="系统架构的演进">2.1 系统架构的演进</h3><h4 id="单体架构">2.1.1 单体架构</h4><p>巨石（Monolith）应用，易于测试、部署，但编译慢、局部改动就要重新部署、技术难扩展。</p><h4 id="垂直分层架构">2.1.2 垂直分层架构</h4><p>对单体架构垂直拆封，例如：用户界面层、业务逻辑层、数据访问层。</p><h4 id="面向服务架构soaservice-oriented-architecture">2.1.3面向服务架构SOA(Service-Oriented Architecture)</h4><p>每个服务登记到服务登记中心上。</p><p>服务消费者从服务登记中心寻找，通过发送消息由企业服务总线（EnterpriseService Bus）转换后发送给相应的服务来调用服务。</p><p>SOA是中心化架构，关注系统集成。</p><h4 id="微服务架构">2.1.4 微服务架构</h4><p>大型复杂软件有一个或多个微服务组成。微服务可独立部署、松耦合、仅关注完成单一职责。每个职责代表一个高内聚的业务能力。</p><p>微服务是去中心化架构，关注分散管理、代码重用、快速扩展。</p><p>微服务架构的特点：</p><ol type="1"><li>系统服务曾分离为一个个的微服务。</li><li>微服务遵循单一原则。</li><li>微服务之间采用RESTful等轻量级协议通信。</li><li>微服务采用容器技术部署，运行在自己的独立进程中。</li><li>每个微服务都有独立的业务开发活动和周期。</li></ol><p>如果拆分的服务过多，服务治理成本会极大升高，开发调试成本高。服务之间相互依赖，还可能形成复杂依赖链，异常时出现雪崩效应。</p><h4 id="云原生架构-1">2.1.5 云原生架构</h4><p>代表技术：</p><ol type="1"><li>容器</li><li>服务网络</li><li>微服务</li><li>不可变基础设施</li><li>声明式API</li></ol><p>四要素：</p><ol type="1"><li>微服务</li><li>容器化</li><li>DevOps</li><li>持续交付</li></ol><p>云原生架构依托PaaS产品：</p><ol type="1"><li>Codeless：服务开发。</li><li>Applicationless：服务发布。</li><li>Serverless：服务运维。</li></ol><h3 id="常见的微服务框架">2.2 常见的微服务框架</h3><h4 id="java中的spring-cloud与dubbo框架">2.2.1 Java中的SpringCloud与Dubbo框架</h4><p>Spring Cloud将各家公司开发的比较成熟的服务框架组合起来，通过SprIngBoot风格再封装，屏蔽复杂配置和实现原理，对外提供简单易懂的工具包。</p><p>Dubbo框架是分布式服务框架，提供RPC方案和SOA服务治理方案，特点主要在：远程通信、集群容错、自动发现。</p><h4 id="go语言中的go-kit与go-micro框架">2.2.2 Go语言中的Go Kit与GoMicro框架</h4><p>Go-kit（gokit.io）是Go语言工具包的集合。</p><p>Go-kit不仅是微服务工具包，也非常适合构建优雅的架构设计。</p><p>Go-kit应用程序架构：</p><ol type="1"><li>传输层：网络通信，HTTP、gRPC等，或NATS发布订阅系统。</li><li>接口层：服务对外提供的接口方法定义为端点（Endpoint），端点使用传输层的通信对外提供服务。</li><li>服务层：业务逻辑，不考虑传输、编解码。</li></ol><p>Go Micro是Go语言实现的插件化RPC微服务框架，包含组件：</p><ol type="1"><li>Registry：服务发现，解析服务名字到服务地址。</li><li>Selector：基于Registry的负载均衡组件。</li><li>Broker：发布和订阅组件。服务之间基于消息中间件的异步通信。</li><li>Transport：服务之间的同步通信。</li><li>Codec：服务之间的消息编解码组件。</li><li>Server：服务主体。</li><li>Client：提供访问微服务的客户端。</li></ol><h3 id="微服务设计的六大原则">2.3 微服务设计的六大原则</h3><ol type="1"><li>高内聚低耦合</li><li>高度自治</li><li>以业务为中心</li><li>弹性设计</li><li>日志与监控</li><li>自动化</li></ol><h3 id="领域驱动设计">2.4 领域驱动设计</h3><p>Domain Driven Design</p><p>分为4层：</p><ol type="1"><li>Interface</li><li>Application</li><li>Domain</li><li>Infrastructure</li></ol><p>业务系统</p><ul><li>核心域（Core Domain）：如，秒杀操作。</li><li>子域<ul><li>支撑子域（GenericSubdomain）：如，活动管理领域（创建秒杀、查询秒杀）。</li><li>通用子域（Common Subdomain）：如，用户鉴权领域。</li></ul></li></ul><p>限界上下文和子域一一对应，一个限界上下文只使用一套通用语言，并保证其清晰简洁。</p><p>实际情况中，根据业务，有时将多个界限上下文合并。</p><p>随着微服务架构流行，组织内部产生许多小规模团队。组织架构从层级职能组织变成扁平的小团队集群。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Cloud </tag>
            
            <tag> Cloud Native </tag>
            
            <tag> Microservices </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《远见》读书笔记</title>
      <link href="/posts/%E3%80%8A%E8%BF%9C%E8%A7%81%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/%E3%80%8A%E8%BF%9C%E8%A7%81%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>从图书馆借阅了[加]布莱恩·费瑟斯通豪（<em>BrainFetherstonhaugh</em>）所著的《远见》（<em>The LongView</em>）一书，记录下核心思想。</p><span id="more"></span><h1 id="远见读书笔记">《远见》读书笔记</h1><h2 id="分阶段规划">分阶段规划</h2><p>职业生涯不是短跑比赛，职业生涯的持续时间长的惊人，可分三个阶段：</p><ol type="1"><li>第一阶段：<ol type="1"><li>职业生涯的前15年</li><li>目标：为接下来的两个阶段打好基础</li><li>策略：加添燃料，强势开局</li></ol></li><li>第二阶段：<ol type="1"><li>职业生涯中段的15年</li><li>目标：在长板、爱好与这个世界的需求之间寻找交集，想方设法脱颖而出。</li><li>策略：锚定甜蜜去，聚焦长板</li></ol></li><li>第三阶段：<ol type="1"><li>职业生涯的最后几年</li><li>目标：确定接班人，完成继任计划，完成角色转变，成为顾问、辅助者等。</li><li>策略：优化长尾，发挥持续影响力</li></ol></li></ol><h2 id="储备职场燃料">储备职场燃料</h2><p>成功的可持续职业生涯是靠职场燃料推动的。</p><p>积累、不断更新并精明地消费职场燃料。</p><p>基本地职场燃料：</p><ol type="1"><li>可迁移的技能<ol type="1"><li>解决问题的能力</li><li>说服式沟通技巧</li><li>完成任务的能力</li><li>”人才引力“</li><li>帮助和求助的能力</li><li>情商</li></ol></li><li>有意义的经验<ol type="1"><li>多样性经验，建立新的职业技能；</li><li>在不同的环境中尝试不同的事情、试验不同的做事方法，能创造出更强的决策技能。</li></ol></li><li>持久的关系，即职业生态系统<ol type="1"><li>上司</li><li>客户</li><li>商业伙伴</li><li>身边的人才</li><li>你的同类</li></ol></li></ol><h2 id="职场思维">职场思维</h2><ol type="1"><li>职业生涯的长度：到退休的年数。</li><li>精通一项技能所需的时间：至少需要10000小时的密集训练和联系。</li><li>40岁之后能赚到的个人财富百分比：85%~90%，大多数人的财富积累要蓄力到40岁、50岁甚至60岁才爆发出来。</li><li>社交网络好友：并不是越多越好。</li><li>职场支持者人数：找到3~5个真正能称为导师的人。</li></ol><h2 id="步入职场策略">步入职场策略</h2><ol type="1"><li>利用在读的时间储备早期形式的职场燃料。</li><li>制订求职作战计划。</li><li>积极参与校园招聘。</li><li>高效地进行在线申请。</li><li>用好你的关系。</li><li>与联系人见面之前，做些功课。</li><li>做好心理准备，找到第一份工作难于上青天。</li><li>不断探索。</li></ol><h2 id="初任管理者的建议">初任管理者的建议</h2><ol type="1"><li>时刻注意你的易容、态度和举止。</li><li>简洁地表达你的愿景，并且不停地重复。</li><li>尽快选好团队成员。</li><li>每一个有意义地商业问题最好能在较小的团队中解决。</li><li>表现得像个被人信赖的解答者。</li><li>你并不需要无所不知，而是应该多多找人咨询。</li></ol><h2 id="首席执行官的特质">首席执行官的特质</h2><ol type="1"><li>诚实，与公司的文化契合度。</li><li>智力上的好奇和敏捷。</li><li>有提升业务业绩的经验。</li><li>真实、自我意识以及平衡。</li><li>活力和热情。</li></ol><h2 id="合理规划第三阶段的建议">合理规划第三阶段的建议</h2><ol type="1"><li>试验，自愿接受挑战。</li><li>创业，开辟全新疆域。</li><li>管理学习曲线，保持关联性。</li></ol><h2 id="职业生涯与为人父母共存之道">职业生涯与为人父母共存之道</h2><ol type="1"><li>不要让职业生涯和为人父母成为非此即彼的选项。</li><li>找到一个热爱家庭的雇主。</li><li>找到后方的恰当支持。</li><li>设立现实的期望和严格的界限。</li><li>管理你的时间和精力。</li></ol><h2 id="回归正轨之法">回归正轨之法</h2><ol type="1"><li>重新组织你的经验。</li><li>重新包装你的技能。</li><li>重新连接职业生态系统。</li><li>重新建立自信。</li></ol><h2 id="其他">其他</h2><h3 id="面对机制的竞争">面对机制的竞争</h3><p>明智之举是培养情商、创造力、协作能力和建立信任关系的技能。</p><h3 id="在哪里找工作">在哪里找工作</h3><p>像领英这样的在线平台将成为公司寻找人才、个人寻找工作的主要场所。</p><h3 id="将时间投资在哪里">将时间投资在哪里</h3><p>创业和自由职业将在不久的将来蓬勃发展，工作目标也将更多样化。</p><h3 id="怎样保持收入稳定">怎样保持收入稳定</h3><p>退休并不代表就能安享晚年，继续工作才能获得稳定的收入。</p><h3 id="享受工作的快乐">享受工作的快乐</h3><p>想在工作中更快乐，就需要提高幸福感。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DistributedDataParallel(DDP) - PyTorch多进程并行计算</title>
      <link href="/posts/DistributedDataParallel-DDP-PyTorch%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/"/>
      <url>/posts/DistributedDataParallel-DDP-PyTorch%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>PyTorch的DistributedDataParallel(DDP)可以实现多进程的并行计算，相较于传统的单进程多线程的DataParallel，DDP支持多节点的分布式计算。即使在单机多卡的场景下，DDP通常性能也更好，因为它不仅规避了Python多线程的全局解释器锁争用（GILcontention）造成的性能开销，而且还不需要在多GPU训练中频繁复制同步模型、分发输入数据和收集模型输出。</p><span id="more"></span><h1id="distributeddataparallelddp---pytorch多进程并行计算">DistributedDataParallel(DDP)- PyTorch多进程并行计算</h1><h2 id="背景">背景</h2><h3 id="python-gil">Python GIL</h3><p>GIL（Global InterpreterLock）指的是全局解释器锁，由CPython解释器引入。因为CPython解释器的内存管理是线程不安全的，所以为了避免多线程同时执行Python字节码造成线程安全问题，就加了这么一个全局的互斥锁。可也正是因为这个全局互斥锁，导致Python的多线程实际上同时只有一个线程在运行，显然无法充分利用多处理器的性能。</p><p>参考官方解释：</p><blockquote><p><a href="https://python.land/python-concurrency/the-python-gil">ThePython GIL</a></p><p>Python has one peculiarity that makes concurrent programming harder.It’s called the <strong>GIL</strong>, short for Global Interpreter Lock.The GIL makes sure there is, at any time, only one thread running.Because only one thread can run at a time, it’s impossible to usemultiple processors with threads. But don’t worry, there’s a way aroundthis.</p><p>The GIL was invented because CPython’s memory management is notthread-safe. With only one thread running at a time, CPython can restassured there will never be race conditions.</p></blockquote><h3id="distributeddataparallel较dataparallel的优势">DistributedDataParallel较DataParallel的优势</h3><p>DistributedDataParallel(DDP)相较于DataParallel(DP)有诸多优势，包括功能上的优势和性能上的优势：</p><p>功能上：</p><ol type="1"><li>DDP的原理是多进程，因此DDP支持多机多卡的分布式计算，而DP是但经常多线程，因此最高只支持单机多卡；</li><li>DDP支持模型并行（modelparallel），可以把一个模型拆成几个阶段来跑，而DP还不支持。</li></ol><p>性能上：</p><ol type="1"><li>正是因为DDP基于多进程（通常推荐1个GPU匹配一个工作进程），所以不像DP那样基于单进程多线程的并行性能受到GIL争用开销的阻碍。</li><li>在单机多卡的情况下，DP需要在训练中频繁在多卡之间复制模型以完成同步，需要分发（scatter）输入和收集（gather）输出，而DDP采用的All-Reduce算法采取聚合通信（collectivecommunication）的方式收集梯度，其性能更好。</li></ol><p>总的来讲，功能上的优势其实也是为了更好利用设备性能。</p><h2 id="原理">原理</h2><p>原理可参阅：</p><blockquote><p><a href="https://pytorch.org/docs/master/notes/ddp.html">DistributedData Parallel - PyTorch master Documentation</a></p></blockquote><p>另有一篇2020年的论文：</p><blockquote><p>Li S, Zhao Y, Varma R, et al. PyTorch distributed: experiences onaccelerating data parallel training[J]. Proceedings of the VLDBEndowment, 2020, 13(12): 3005-3018.</p><p><a href="http://www.vldb.org/pvldb/vol13/p3005-li.pdf">PDF onvldb.org</a></p></blockquote><p>总的架构可以参考：</p><ul><li>Distributed System<ul><li>Node 0<ul><li>Process0 [Global Rank=0, Local Rank=0] -&gt; GPU 0-0</li><li>Process1 [Global Rank=1, Local Rank=1] -&gt; GPU 0-1</li><li>Process2 [Global Rank=2, Local Rank=2] -&gt; GPU 0-2</li><li>Process3 [Global Rank=3, Local Rank=3] -&gt; GPU 0-3</li></ul></li><li>Node 1<ul><li>Process4 [Global Rank=4, Local Rank=0] -&gt; GPU 1-0</li><li>Process5 [Global Rank=5, Local Rank=1] -&gt; GPU 1-1</li><li>Process6 [Global Rank=6, Local Rank=2] -&gt; GPU 1-2</li><li>Process7 [Global Rank=7, Local Rank=3] -&gt; GPU 1-3</li></ul></li></ul></li></ul><p>在这样的架构中，有如下术语和数值：</p><ul><li>N=2 <strong>Nodes</strong></li><li>G=4 <strong>GPUs per node</strong></li><li>W=8 Application processes across all nodes (aka. <strong>WorldSize</strong>)</li><li>L=4 Application processes on each nodes (aka. <strong>LocalSize</strong>)</li></ul><h2 id="使用">使用</h2><p>相较于DataParallel只需要简单地套到原模型上，DistributedDataParallel因为其原理是基于多进程的，因此写起来会稍微显得复杂一点点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Distributed Data Parallel (DDP) example</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Author: HearyShen</span></span><br><span class="line"><span class="string">Date:   2020.12.17</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> argparse <span class="keyword">import</span> ArgumentParser</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.utils.data <span class="keyword">as</span> data</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.cuda <span class="keyword">as</span> cuda</span><br><span class="line"><span class="keyword">import</span> torch.distributed <span class="keyword">as</span> dist</span><br><span class="line"><span class="keyword">import</span> torch.multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision.models <span class="keyword">as</span> models</span><br><span class="line"></span><br><span class="line">DIST_DEFAULT_BACKEND = <span class="string">&#x27;nccl&#x27;</span></span><br><span class="line">DIST_DEFAULT_ADDR = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">DIST_DEFAULT_PORT = <span class="string">&#x27;12344&#x27;</span></span><br><span class="line">DIST_DEFAULT_INIT_METHOD = <span class="string">f&#x27;tcp://<span class="subst">&#123;DIST_DEFAULT_ADDR&#125;</span>:<span class="subst">&#123;DIST_DEFAULT_PORT&#125;</span>&#x27;</span></span><br><span class="line">DIST_DEFAULT_WORLD_SIZE = cuda.device_count()</span><br><span class="line"></span><br><span class="line">DEFAULT_BATCH_SIZE = <span class="number">64</span></span><br><span class="line">DEFAULT_NUM_WORKERS_PER_GPU = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TinyNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.mlp = nn.Linear(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        out = self.mlp(x)</span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TinyDataset</span>(data.dataset.Dataset):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        x = torch.rand([<span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>])</span><br><span class="line">        y = random.randint(<span class="number">0</span>, <span class="number">999</span>)</span><br><span class="line">        <span class="keyword">return</span> x, y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker</span>(<span class="params">rank, args</span>):</span><br><span class="line">    model = models.resnet50(pretrained=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> args.distributed:</span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">f&quot;[<span class="subst">&#123;os.getpid()&#125;</span>] Initializing <span class="subst">&#123;rank&#125;</span>/<span class="subst">&#123;DIST_DEFAULT_WORLD_SIZE&#125;</span> at <span class="subst">&#123;DIST_DEFAULT_INIT_METHOD&#125;</span>&quot;</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialize with TCP in this example</span></span><br><span class="line">        dist.init_process_group(backend=DIST_DEFAULT_BACKEND,</span><br><span class="line">                                init_method=DIST_DEFAULT_INIT_METHOD,</span><br><span class="line">                                world_size=DIST_DEFAULT_WORLD_SIZE,</span><br><span class="line">                                rank=rank)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># # Another way to initialize with environment variables</span></span><br><span class="line">        <span class="comment"># os.environ[&quot;MASTER_PORT&quot;] = DIST_DEFAULT_PORT</span></span><br><span class="line">        <span class="comment"># os.environ[&quot;MASTER_ADDR&quot;] = DIST_DEFAULT_ADDR</span></span><br><span class="line">        <span class="comment"># os.environ[&quot;WORLD_SIZE&quot;] = str(DIST_DEFAULT_WORLD_SIZE)</span></span><br><span class="line">        <span class="comment"># os.environ[&quot;RANK&quot;] = str(rank)</span></span><br><span class="line">        <span class="comment"># dist.init_process_group(backend=DIST_DEFAULT_BACKEND)</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">f&quot;[<span class="subst">&#123;os.getpid()&#125;</span>] Computing <span class="subst">&#123;rank&#125;</span>/<span class="subst">&#123;DIST_DEFAULT_WORLD_SIZE&#125;</span> at <span class="subst">&#123;DIST_DEFAULT_INIT_METHOD&#125;</span>&quot;</span></span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># ensuring that each process exclusively works on a single GPU</span></span><br><span class="line">        torch.cuda.set_device(rank)</span><br><span class="line">        model.cuda(rank)</span><br><span class="line">        <span class="comment"># When using a single GPU per process and per</span></span><br><span class="line">        <span class="comment"># DistributedDataParallel, we need to divide the batch size</span></span><br><span class="line">        <span class="comment"># ourselves based on the total number of GPUs we have</span></span><br><span class="line">        model = nn.parallel.DistributedDataParallel(model, device_ids=[rank])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        model = nn.DataParallel(model).cuda()</span><br><span class="line"></span><br><span class="line">    loss_func = nn.CrossEntropyLoss()</span><br><span class="line">    optimizer = optim.SGD(model.parameters(), lr=<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># dataset</span></span><br><span class="line">    dataset = TinyDataset()</span><br><span class="line">    dist_sampler = data.distributed.DistributedSampler(</span><br><span class="line">        dataset) <span class="keyword">if</span> args.distributed <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    dataloader = data.dataloader.DataLoader(</span><br><span class="line">        dataset,</span><br><span class="line">        batch_size=DEFAULT_BATCH_SIZE // DIST_DEFAULT_WORLD_SIZE <span class="keyword">if</span> args.distributed <span class="keyword">else</span> DEFAULT_BATCH_SIZE,</span><br><span class="line">        shuffle=(dist_sampler <span class="keyword">is</span> <span class="literal">None</span>),</span><br><span class="line">        num_workers=DEFAULT_NUM_WORKERS_PER_GPU <span class="keyword">if</span> args.distributed <span class="keyword">else</span> DEFAULT_NUM_WORKERS_PER_GPU * DIST_DEFAULT_WORLD_SIZE,</span><br><span class="line">        sampler=dist_sampler)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># train</span></span><br><span class="line">    model = model.train()</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> args.distributed:</span><br><span class="line">            dist_sampler.set_epoch(epoch)</span><br><span class="line">        <span class="keyword">for</span> i, (x, label) <span class="keyword">in</span> <span class="built_in">enumerate</span>(dataloader):</span><br><span class="line">            y = model(x)</span><br><span class="line">            loss = loss_func(y, label.to(y.device))</span><br><span class="line"></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> args.distributed:</span><br><span class="line">            <span class="built_in">print</span>(</span><br><span class="line">                <span class="string">f&quot;[<span class="subst">&#123;os.getpid()&#125;</span>] Epoch-<span class="subst">&#123;epoch&#125;</span> ended <span class="subst">&#123;rank&#125;</span>/<span class="subst">&#123;DIST_DEFAULT_WORLD_SIZE&#125;</span> at <span class="subst">&#123;DIST_DEFAULT_INIT_METHOD&#125;</span> on <span class="subst">&#123;y.device&#125;</span>&quot;</span></span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[<span class="subst">&#123;os.getpid()&#125;</span>] Epoch-<span class="subst">&#123;epoch&#125;</span> ended on <span class="subst">&#123;y.device&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.distributed:</span><br><span class="line">        <span class="built_in">print</span>(</span><br><span class="line">            <span class="string">f&quot;[<span class="subst">&#123;os.getpid()&#125;</span>] Finishing <span class="subst">&#123;rank&#125;</span>/<span class="subst">&#123;DIST_DEFAULT_WORLD_SIZE&#125;</span> at <span class="subst">&#123;DIST_DEFAULT_INIT_METHOD&#125;</span> on <span class="subst">&#123;y.device&#125;</span>&quot;</span></span><br><span class="line">        )</span><br><span class="line">        dist.destroy_process_group()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">launch</span>(<span class="params">args</span>):</span><br><span class="line">    tic = time.time()</span><br><span class="line">    <span class="keyword">if</span> args.distributed:</span><br><span class="line">        mp.spawn(worker,</span><br><span class="line">                 args=(args, ),</span><br><span class="line">                 nprocs=DIST_DEFAULT_WORLD_SIZE,</span><br><span class="line">                 join=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        worker(<span class="literal">None</span>, args)</span><br><span class="line">    toc = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Finished in <span class="subst">&#123;toc-tic:<span class="number">.2</span>f&#125;</span>s&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    parser = ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&quot;-d&quot;</span>, <span class="string">&quot;--distributed&quot;</span>, action=<span class="string">&quot;store_true&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    launch(args)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="spawn创建多进程">spawn创建多进程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">launch</span>(<span class="params">args</span>):</span><br><span class="line">    tic = time.time()</span><br><span class="line">    <span class="keyword">if</span> args.distributed:</span><br><span class="line">        mp.spawn(worker,</span><br><span class="line">                 args=(args, ),</span><br><span class="line">                 nprocs=DIST_DEFAULT_WORLD_SIZE,</span><br><span class="line">                 join=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        worker(<span class="literal">None</span>, args)</span><br><span class="line">    toc = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Finished in <span class="subst">&#123;toc-tic:<span class="number">.2</span>f&#125;</span>s&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>launch</code>使用<code>multiprocessing.spawn</code>来快速创建<code>nprocs</code>个新进程，每个进程都执行<code>worker</code>函数，并传入<code>args</code>作为函数参数。</p><p>需要注意的是，<code>spawn</code>默认会为函数传入一个<code>i</code>，且<code>i</code>在<code>[0, nprocs)</code>之间。即，<code>worker</code>函数收到的参数列表是<code>(i, args, )</code>。</p><h3 id="worker多进程并行">worker多进程并行</h3><p>每一个worker进程做的工作分以下几个阶段：</p><ol type="1"><li>初始化进程组：并行启动的多进程相互之间得形成一个进程组，即，要知道在哪会合（rendezvous）。DDP的机制会把以rank=0进程上的模型为准，自动保证其他进程上的模型与之保持一致性。</li><li>DDP包装模型：创建模型，用DistributedDataParallel包装，移动到该进程对应的GPU设备上。</li><li>准备数据：为DDP建立<code>DistributedSampler</code>，以便DataLoader将数据加载给每个GPU上训练的模型。</li><li>进行训练：每个进程根据DataLoader分担的batch_size来并行处理训练数据。</li><li>销毁进程组：进程执行完成后，销毁启动的进程组。</li></ol><h4 id="init_process_group">init_process_group</h4><blockquote><p>参阅torch.distributed的官方文档：</p><p><ahref="https://pytorch.org/docs/stable/distributed.html#torch.distributed.init_process_group">Distributedcommunication package - torch.distributed</a></p></blockquote><p>初始化函数原型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">torch.distributed.init_process_group(backend, init_method=<span class="literal">None</span>, timeout=datetime.timedelta(<span class="number">0</span>, <span class="number">1800</span>), world_size=-<span class="number">1</span>, rank=-<span class="number">1</span>, store=<span class="literal">None</span>, group_name=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>其中，进程组后端是负责提供进程组聚合通信（collectivecommunication）的库。PyTorch支持Gloo, MPI和NCCL三种，推荐的做法是，</p><ul><li>在分布式GPU训练时使用NCCL；</li><li>在分布式CPU训练时使用Gloo。</li></ul><p>参考资料：</p><blockquote><p><a href="https://github.com/facebookincubator/gloo">Gloo</a></p><p>Gloo is a collective communications library. It comes with a numberof collective algorithms useful for machine learning applications. Theseinclude a barrier, broadcast, and allreduce.</p></blockquote><blockquote><p><a href="https://developer.nvidia.com/nccl">NVIDIA NCCL</a></p><p>The NVIDIA Collective Communication Library (NCCL) implementsmulti-GPU and multi-node communication primitives optimized for NVIDIAGPUs and Networking. NCCL provides routines such as all-gather,all-reduce, broadcast, reduce, reduce-scatter as well as point-to-pointsend and receive that are optimized to achieve high bandwidth and lowlatency over PCIe and NVLink high-speed interconnects within a node andover NVIDIA Mellanox Network across nodes.</p></blockquote><p>初始化可以选择通过<code>init_method</code>填写通信地址和端口，也可以通过<code>store</code>来传入一个进程间共同访问的键值对容器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># initialize with TCP in this example</span></span><br><span class="line">dist.init_process_group(backend=DIST_DEFAULT_BACKEND,</span><br><span class="line">                        init_method=DIST_DEFAULT_INIT_METHOD,</span><br><span class="line">                        world_size=DIST_DEFAULT_WORLD_SIZE,</span><br><span class="line">                        rank=rank)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # Another way to initialize with environment variables</span></span><br><span class="line"><span class="comment"># os.environ[&quot;MASTER_PORT&quot;] = DIST_DEFAULT_PORT</span></span><br><span class="line"><span class="comment"># os.environ[&quot;MASTER_ADDR&quot;] = DIST_DEFAULT_ADDR</span></span><br><span class="line"><span class="comment"># os.environ[&quot;WORLD_SIZE&quot;] = str(DIST_DEFAULT_WORLD_SIZE)</span></span><br><span class="line"><span class="comment"># os.environ[&quot;RANK&quot;] = str(rank)</span></span><br><span class="line"><span class="comment"># dist.init_process_group(backend=DIST_DEFAULT_BACKEND)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例子中演示了基于<code>init_method</code>的通信方式，具体采用TCP连接的方式来初始化，也可通过环境变量的方式（见注释掉的代码）。另外，还可以使用共享的文件系统来实现初始化，可参阅<code>torch.distributed</code>的官方文档。我觉得TCP连接足够简单且兼容性好，这里就以TCP的方式为主了。</p><h4 id="distributeddataparallel">DistributedDataParallel</h4><blockquote><p>参阅torch.nn.parallel.DistributedDataParallel的官方文档：</p><p><ahref="https://pytorch.org/docs/stable/generated/torch.nn.parallel.DistributedDataParallel.html">torch.nn.parallel.DistributedDataParallel</a></p></blockquote><p>首先，需要注意的是，在建立DDP之前，在N个GPU的机器上，spawn出N个进程的时候，需要确保每个进程负责其对应的那一个GPU，不要互相打架。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ensuring that each process exclusively works on a single GPU</span></span><br><span class="line">torch.cuda.set_device(rank)</span><br><span class="line">model.cuda(rank)</span><br><span class="line"><span class="comment"># When using a single GPU per process and per</span></span><br><span class="line"><span class="comment"># DistributedDataParallel, we need to divide the batch size</span></span><br><span class="line"><span class="comment"># ourselves based on the total number of GPUs we have</span></span><br><span class="line">model = nn.parallel.DistributedDataParallel(model, device_ids=[rank])</span><br></pre></td></tr></table></figure><p>用<code>torch.nn.parallel.DistributedDataParallel</code>类包装原模型，并将该进程的模型映射到对应的GPU设备上。</p><h4 id="distributedsampler">DistributedSampler</h4><blockquote><p>参阅torch.utils.data.distributed.DistributedSampler的官方文档：</p><p><ahref="https://pytorch.org/docs/stable/data.html#torch.utils.data.distributed.DistributedSampler">torch.utils.data.distributed.DistributedSampler</a></p></blockquote><p>其实就是在多进程的情况下，每个进程训练数据集的一个子集，不应互相重复，通过DistributedSampler来实现分布式的采样原数据集中的一个子集：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dataset</span></span><br><span class="line">dataset = TinyDataset()</span><br><span class="line">dist_sampler = data.distributed.DistributedSampler(</span><br><span class="line">    dataset) <span class="keyword">if</span> args.distributed <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">dataloader = data.dataloader.DataLoader(</span><br><span class="line">    dataset,</span><br><span class="line">    batch_size=DEFAULT_BATCH_SIZE // DIST_DEFAULT_WORLD_SIZE <span class="keyword">if</span> args.distributed <span class="keyword">else</span> DEFAULT_BATCH_SIZE,</span><br><span class="line">    shuffle=(dist_sampler <span class="keyword">is</span> <span class="literal">None</span>),</span><br><span class="line">    num_workers=DEFAULT_NUM_WORKERS_PER_GPU <span class="keyword">if</span> args.distributed <span class="keyword">else</span> DEFAULT_NUM_WORKERS_PER_GPU * DIST_DEFAULT_WORLD_SIZE,</span><br><span class="line">    sampler=dist_sampler)</span><br></pre></td></tr></table></figure><p>需要注意的是，多epoch场景下，需要在每个epoch开始前用<code>sampler.set_epoch(epoch)</code>设置当前的epoch，以免每次epoch训练的数据顺序都是相同的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
            <tag> Parallel Computing </tag>
            
            <tag> Multiprocessing </tag>
            
            <tag> CUDA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fasterrcnn_resnet50_fpn - 从torchvision源码理解Faster R-CNN原理</title>
      <link href="/posts/fasterrcnn-resnet50-fpn-%E4%BB%8Etorchvision%E6%BA%90%E7%A0%81%E7%90%86%E8%A7%A3Faster-R-CNN%E5%8E%9F%E7%90%86/"/>
      <url>/posts/fasterrcnn-resnet50-fpn-%E4%BB%8Etorchvision%E6%BA%90%E7%A0%81%E7%90%86%E8%A7%A3Faster-R-CNN%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>PyTorch的torchvision包中实现了FasterR-CNN。本文结合对torchvision源码的阅读，深入理解FasterR-CNN的内部原理，以便进行开发利用。</p><span id="more"></span><h1id="fasterrcnn_resnet50_fpn---从torchvision源码理解faster-r-cnn原理">fasterrcnn_resnet50_fpn- 从torchvision源码理解Faster R-CNN原理</h1><h2 id="接口层">1 接口层</h2><h3 id="外部调用">外部调用</h3><p>根据PyTorch的torchvision库的文档，FasterR-CNN模型对象可以直接通过<code>fasterrcnn_resnet50_fpn</code>函数来构造。</p><p>具体地，官方文档给出了训练时和预测时的调用样例：</p><p><ahref="https://pytorch.org/docs/stable/torchvision/models.html?highlight=faster%20rcnn#torchvision.models.detection.fasterrcnn_resnet50_fpn">torchvision.models.detection.fasterrcnn_resnet50_fpn</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># For training</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>images, boxes = torch.rand(<span class="number">4</span>, <span class="number">3</span>, <span class="number">600</span>, <span class="number">1200</span>), torch.rand(<span class="number">4</span>, <span class="number">11</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>labels = torch.randint(<span class="number">1</span>, <span class="number">91</span>, (<span class="number">4</span>, <span class="number">11</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>images = <span class="built_in">list</span>(image <span class="keyword">for</span> image <span class="keyword">in</span> images)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>targets = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(images)):</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>    d = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>    d[<span class="string">&#x27;boxes&#x27;</span>] = boxes[i]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>    d[<span class="string">&#x27;labels&#x27;</span>] = labels[i]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>    targets.append(d)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>output = model(images, targets)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># For inference</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>model.<span class="built_in">eval</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [torch.rand(<span class="number">3</span>, <span class="number">300</span>, <span class="number">400</span>), torch.rand(<span class="number">3</span>, <span class="number">500</span>, <span class="number">400</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>predictions = model(x)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># optionally, if you want to export the model to ONNX:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.onnx.export(model, x, <span class="string">&quot;faster_rcnn.onnx&quot;</span>, opset_version = <span class="number">11</span>)</span><br></pre></td></tr></table></figure><ul><li>其中，不论是训练，还是预测，模型的输入都是list容器，表示的是若干个图片（与目标框和类别）。</li></ul><h3 id="fasterrcnn_resnet50_fpn">fasterrcnn_resnet50_fpn</h3><p><code>fasterrcnn_resnet50_fpn</code>函数在<code>torchvision.models.detection.faster_rcnn</code>包中实现，文档见<ahref="https://pytorch.org/docs/stable/torchvision/models.html#torchvision.models.detection.fasterrcnn_resnet50_fpn">torchvision.models.detection.fasterrcnn_resnet50_fpn</a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fasterrcnn_resnet50_fpn</span>(<span class="params">pretrained=<span class="literal">False</span>, progress=<span class="literal">True</span>,</span></span><br><span class="line"><span class="params">                            num_classes=<span class="number">91</span>, pretrained_backbone=<span class="literal">True</span>, trainable_backbone_layers=<span class="number">3</span>, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Constructs a Faster R-CNN model with a ResNet-50-FPN backbone.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The input to the model is expected to be a list of tensors, each of shape ``[C, H, W]``, one for each</span></span><br><span class="line"><span class="string">    image, and should be in ``0-1`` range. Different images can have different sizes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The behavior of the model changes depending if it is in training or evaluation mode.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    During training, the model expects both the input tensors, as well as a targets (list of dictionary),</span></span><br><span class="line"><span class="string">    containing:</span></span><br><span class="line"><span class="string">        - boxes (``FloatTensor[N, 4]``): the ground-truth boxes in ``[x1, y1, x2, y2]`` format, with values of ``x``</span></span><br><span class="line"><span class="string">          between ``0`` and ``W`` and values of ``y`` between ``0`` and ``H``</span></span><br><span class="line"><span class="string">        - labels (``Int64Tensor[N]``): the class label for each ground-truth box</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The model returns a ``Dict[Tensor]`` during training, containing the classification and regression</span></span><br><span class="line"><span class="string">    losses for both the RPN and the R-CNN.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    During inference, the model requires only the input tensors, and returns the post-processed</span></span><br><span class="line"><span class="string">    predictions as a ``List[Dict[Tensor]]``, one for each input image. The fields of the ``Dict`` are as</span></span><br><span class="line"><span class="string">    follows:</span></span><br><span class="line"><span class="string">        - boxes (``FloatTensor[N, 4]``): the predicted boxes in ``[x1, y1, x2, y2]`` format, with values of ``x``</span></span><br><span class="line"><span class="string">          between ``0`` and ``W`` and values of ``y`` between ``0`` and ``H``</span></span><br><span class="line"><span class="string">        - labels (``Int64Tensor[N]``): the predicted labels for each image</span></span><br><span class="line"><span class="string">        - scores (``Tensor[N]``): the scores or each prediction</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Faster R-CNN is exportable to ONNX for a fixed batch size with inputs images of fixed size.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Example::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # For training</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; images, boxes = torch.rand(4, 3, 600, 1200), torch.rand(4, 11, 4)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; labels = torch.randint(1, 91, (4, 11))</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; images = list(image for image in images)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; targets = []</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; for i in range(len(images)):</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;     d = &#123;&#125;</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;     d[&#x27;boxes&#x27;] = boxes[i]</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;     d[&#x27;labels&#x27;] = labels[i]</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;     targets.append(d)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; output = model(images, targets)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # For inference</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; model.eval()</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; x = [torch.rand(3, 300, 400), torch.rand(3, 500, 400)]</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; predictions = model(x)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # optionally, if you want to export the model to ONNX:</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; torch.onnx.export(model, x, &quot;faster_rcnn.onnx&quot;, opset_version = 11)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model pre-trained on COCO train2017</span></span><br><span class="line"><span class="string">        progress (bool): If True, displays a progress bar of the download to stderr</span></span><br><span class="line"><span class="string">        pretrained_backbone (bool): If True, returns a model with backbone pre-trained on Imagenet</span></span><br><span class="line"><span class="string">        num_classes (int): number of output classes of the model (including the background)</span></span><br><span class="line"><span class="string">        trainable_backbone_layers (int): number of trainable (not frozen) resnet layers starting from final block.</span></span><br><span class="line"><span class="string">            Valid values are between 0 and 5, with 5 meaning all backbone layers are trainable.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> trainable_backbone_layers &lt;= <span class="number">5</span> <span class="keyword">and</span> trainable_backbone_layers &gt;= <span class="number">0</span></span><br><span class="line">    <span class="comment"># dont freeze any layers if pretrained model or backbone is not used</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (pretrained <span class="keyword">or</span> pretrained_backbone):</span><br><span class="line">        trainable_backbone_layers = <span class="number">5</span></span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        <span class="comment"># no need to download the backbone if pretrained is set</span></span><br><span class="line">        pretrained_backbone = <span class="literal">False</span></span><br><span class="line">    backbone = resnet_fpn_backbone(<span class="string">&#x27;resnet50&#x27;</span>, pretrained_backbone, trainable_layers=trainable_backbone_layers)</span><br><span class="line">    model = FasterRCNN(backbone, num_classes, **kwargs)</span><br><span class="line">    <span class="keyword">if</span> pretrained:</span><br><span class="line">        state_dict = load_state_dict_from_url(model_urls[<span class="string">&#x27;fasterrcnn_resnet50_fpn_coco&#x27;</span>],</span><br><span class="line">                                              progress=progress)</span><br><span class="line">        model.load_state_dict(state_dict)</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><p>该函数的实现中，首先进行参数检查：</p><ol type="1"><li>检查<code>trainable_backbone_layers</code>参数，必须在0~5之间，表示从最后一层开始计数，有几层在训练中是可优化的；</li><li>检查<code>pretrained</code>和<code>pretrained_backbone</code>参数，如果整个模型都设为预训练的，那就当然没必要再单独下载预训练的<code>backbone</code>了，把整个FasterR-CNN模型都载入预训练参数即可。</li></ol><p>FasterR-CNN模型是<code>FasterRCNN</code>类的实例。实例化时，传入指定的<code>backbone</code>作为<code>FasterRCNN</code>的backbone。</p><h3 id="resnet_fpn_backbone">resnet_fpn_backbone</h3><p>backbone通过对外开放的<code>resnet_fpn_backbone</code>函数来构造。</p><p><code>resnet_fpn_backbone</code>函数在<code>torchvision.models.detection.backbone_utils</code>包中实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">resnet_fpn_backbone</span>(<span class="params"></span></span><br><span class="line"><span class="params">    backbone_name,</span></span><br><span class="line"><span class="params">    pretrained,</span></span><br><span class="line"><span class="params">    norm_layer=misc_nn_ops.FrozenBatchNorm2d,</span></span><br><span class="line"><span class="params">    trainable_layers=<span class="number">3</span>,</span></span><br><span class="line"><span class="params">    returned_layers=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    extra_blocks=<span class="literal">None</span></span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Constructs a specified ResNet backbone with FPN on top. Freezes the specified number of layers in the backbone.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Examples::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; from torchvision.models.detection.backbone_utils import resnet_fpn_backbone</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; backbone = resnet_fpn_backbone(&#x27;resnet50&#x27;, pretrained=True, trainable_layers=3)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # get some dummy image</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; x = torch.rand(1,3,64,64)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # compute the output</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; output = backbone(x)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; print([(k, v.shape) for k, v in output.items()])</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # returns</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;   [(&#x27;0&#x27;, torch.Size([1, 256, 16, 16])),</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;    (&#x27;1&#x27;, torch.Size([1, 256, 8, 8])),</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;    (&#x27;2&#x27;, torch.Size([1, 256, 4, 4])),</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;    (&#x27;3&#x27;, torch.Size([1, 256, 2, 2])),</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;    (&#x27;pool&#x27;, torch.Size([1, 256, 1, 1]))]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        backbone_name (string): resnet architecture. Possible values are &#x27;ResNet&#x27;, &#x27;resnet18&#x27;, &#x27;resnet34&#x27;, &#x27;resnet50&#x27;,</span></span><br><span class="line"><span class="string">             &#x27;resnet101&#x27;, &#x27;resnet152&#x27;, &#x27;resnext50_32x4d&#x27;, &#x27;resnext101_32x8d&#x27;, &#x27;wide_resnet50_2&#x27;, &#x27;wide_resnet101_2&#x27;</span></span><br><span class="line"><span class="string">        norm_layer (torchvision.ops): it is recommended to use the default value. For details visit:</span></span><br><span class="line"><span class="string">            (https://github.com/facebookresearch/maskrcnn-benchmark/issues/267)</span></span><br><span class="line"><span class="string">        pretrained (bool): If True, returns a model with backbone pre-trained on Imagenet</span></span><br><span class="line"><span class="string">        trainable_layers (int): number of trainable (not frozen) resnet layers starting from final block.</span></span><br><span class="line"><span class="string">            Valid values are between 0 and 5, with 5 meaning all backbone layers are trainable.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    backbone = resnet.__dict__[backbone_name](</span><br><span class="line">        pretrained=pretrained,</span><br><span class="line">        norm_layer=norm_layer)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># select layers that wont be frozen</span></span><br><span class="line">    <span class="keyword">assert</span> trainable_layers &lt;= <span class="number">5</span> <span class="keyword">and</span> trainable_layers &gt;= <span class="number">0</span></span><br><span class="line">    layers_to_train = [<span class="string">&#x27;layer4&#x27;</span>, <span class="string">&#x27;layer3&#x27;</span>, <span class="string">&#x27;layer2&#x27;</span>, <span class="string">&#x27;layer1&#x27;</span>, <span class="string">&#x27;conv1&#x27;</span>][:trainable_layers]</span><br><span class="line">    <span class="comment"># freeze layers only if pretrained backbone is used</span></span><br><span class="line">    <span class="keyword">for</span> name, parameter <span class="keyword">in</span> backbone.named_parameters():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">all</span>([<span class="keyword">not</span> name.startswith(layer) <span class="keyword">for</span> layer <span class="keyword">in</span> layers_to_train]):</span><br><span class="line">            parameter.requires_grad_(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> extra_blocks <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        extra_blocks = LastLevelMaxPool()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> returned_layers <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        returned_layers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">min</span>(returned_layers) &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">max</span>(returned_layers) &lt; <span class="number">5</span></span><br><span class="line">    return_layers = &#123;<span class="string">f&#x27;layer<span class="subst">&#123;k&#125;</span>&#x27;</span>: <span class="built_in">str</span>(v) <span class="keyword">for</span> v, k <span class="keyword">in</span> <span class="built_in">enumerate</span>(returned_layers)&#125;</span><br><span class="line"></span><br><span class="line">    in_channels_stage2 = backbone.inplanes // <span class="number">8</span></span><br><span class="line">    in_channels_list = [in_channels_stage2 * <span class="number">2</span> ** (i - <span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> returned_layers]</span><br><span class="line">    out_channels = <span class="number">256</span></span><br><span class="line">    <span class="keyword">return</span> BackboneWithFPN(backbone, return_layers, in_channels_list, out_channels, extra_blocks=extra_blocks)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先，根据传入参数选出对应的resnet模型进行实例化。</p><p>随后，检查<code>trainable_layers</code>参数的合法值范围，并通过<code>parameter.requires_grad_(False)</code>来freeze除此以外的其他层。</p><p>默认未定义<code>extra_blocks</code>的时候，会在featuremap结尾添加一个maxpool2d层，该<code>LastLevelMaxPool</code>类实现并不复杂：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># defined in torchvision.ops.feature_pyramid_network</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LastLevelMaxPool</span>(<span class="title class_ inherited__">ExtraFPNBlock</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Applies a max_pool2d on top of the last feature map</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        x: <span class="type">List</span>[Tensor],</span></span><br><span class="line"><span class="params">        y: <span class="type">List</span>[Tensor],</span></span><br><span class="line"><span class="params">        names: <span class="type">List</span>[<span class="built_in">str</span>],</span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="type">Tuple</span>[<span class="type">List</span>[Tensor], <span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">        names.append(<span class="string">&quot;pool&quot;</span>)</span><br><span class="line">        x.append(F.max_pool2d(x[-<span class="number">1</span>], <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> x, names</span><br></pre></td></tr></table></figure><p>根据官方文档<ahref="https://pytorch.org/docs/stable/nn.functional.html?highlight=max_pool2d#torch.nn.functional.max_pool2d">torch.nn.functional.max_pool2d</a>可进一步查阅<ahref="https://pytorch.org/docs/stable/generated/torch.nn.MaxPool2d.html#torch.nn.MaxPool2d">torch.nn.MaxPool2d</a>，实际上<code>F.max_pool2d(x[-1], 1, 2, 0)</code>表示：</p><ol type="1"><li>输入input为<code>x[-1]</code>；</li><li>池化窗口大小kernel_size为1；</li><li>步长stride为2；</li><li>边界填充padding为0。</li></ol><p>关于卷积类的操作可以结合可视化理解：</p><blockquote><p><ahref="https://github.com/vdumoulin/conv_arithmetic/blob/master/README.md">Convolutionarithmetic</a></p></blockquote><p>然后，处理其他传参：</p><ol type="1"><li><code>return_layers</code>，这是一个dict，与传入的backbone相配合，key是backbone的modulename，value是用户定义的返回名；</li><li><code>in_channels_list</code>，这是一个list，与传入的backbone和<code>return_layers</code>相配合，是backbone返回的每一层featuremap的通道数；</li><li><code>out_channels</code>，一个整数，FPN中的通道数。</li></ol><h2 id="实现层">2 实现层</h2><p>我们以一个例子贯穿始终：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line">model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=<span class="literal">True</span>)</span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line">x = [torch.rand(<span class="number">3</span>, <span class="number">300</span>, <span class="number">400</span>), torch.rand(<span class="number">3</span>, <span class="number">500</span>, <span class="number">400</span>)]<span class="comment"># 模拟输入两张尺寸不同的图片</span></span><br><span class="line">predictions = model(x)</span><br></pre></td></tr></table></figure><p>我们使用预训练模型，并模拟输入两张图片。均为3通道，一张<spanclass="math inline">\(300 \times 400\)</span>的<spanclass="math inline">\(H \times W\)</span>分辨率，一张<spanclass="math inline">\(500 \times 400\)</span>。</p><h3 id="fasterrcnn">FasterRCNN</h3><p><code>FasterRCNN</code>类在<code>torchvision.models.detection.faster_rcnn.py</code>中实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FasterRCNN</span>(<span class="title class_ inherited__">GeneralizedRCNN</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Implements Faster R-CNN.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The input to the model is expected to be a list of tensors, each of shape [C, H, W], one for each</span></span><br><span class="line"><span class="string">    image, and should be in 0-1 range. Different images can have different sizes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The behavior of the model changes depending if it is in training or evaluation mode.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    During training, the model expects both the input tensors, as well as a targets (list of dictionary),</span></span><br><span class="line"><span class="string">    containing:</span></span><br><span class="line"><span class="string">        - boxes (FloatTensor[N, 4]): the ground-truth boxes in [x1, y1, x2, y2] format, with values of x</span></span><br><span class="line"><span class="string">          between 0 and W and values of y between 0 and H</span></span><br><span class="line"><span class="string">        - labels (Int64Tensor[N]): the class label for each ground-truth box</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The model returns a Dict[Tensor] during training, containing the classification and regression</span></span><br><span class="line"><span class="string">    losses for both the RPN and the R-CNN.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    During inference, the model requires only the input tensors, and returns the post-processed</span></span><br><span class="line"><span class="string">    predictions as a List[Dict[Tensor]], one for each input image. The fields of the Dict are as</span></span><br><span class="line"><span class="string">    follows:</span></span><br><span class="line"><span class="string">        - boxes (FloatTensor[N, 4]): the predicted boxes in [x1, y1, x2, y2] format, with values of x</span></span><br><span class="line"><span class="string">          between 0 and W and values of y between 0 and H</span></span><br><span class="line"><span class="string">        - labels (Int64Tensor[N]): the predicted labels for each image</span></span><br><span class="line"><span class="string">        - scores (Tensor[N]): the scores or each prediction</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        backbone (nn.Module): the network used to compute the features for the model.</span></span><br><span class="line"><span class="string">            It should contain a out_channels attribute, which indicates the number of output</span></span><br><span class="line"><span class="string">            channels that each feature map has (and it should be the same for all feature maps).</span></span><br><span class="line"><span class="string">            The backbone should return a single Tensor or and OrderedDict[Tensor].</span></span><br><span class="line"><span class="string">        num_classes (int): number of output classes of the model (including the background).</span></span><br><span class="line"><span class="string">            If box_predictor is specified, num_classes should be None.</span></span><br><span class="line"><span class="string">        min_size (int): minimum size of the image to be rescaled before feeding it to the backbone</span></span><br><span class="line"><span class="string">        max_size (int): maximum size of the image to be rescaled before feeding it to the backbone</span></span><br><span class="line"><span class="string">        image_mean (Tuple[float, float, float]): mean values used for input normalization.</span></span><br><span class="line"><span class="string">            They are generally the mean values of the dataset on which the backbone has been trained</span></span><br><span class="line"><span class="string">            on</span></span><br><span class="line"><span class="string">        image_std (Tuple[float, float, float]): std values used for input normalization.</span></span><br><span class="line"><span class="string">            They are generally the std values of the dataset on which the backbone has been trained on</span></span><br><span class="line"><span class="string">        rpn_anchor_generator (AnchorGenerator): module that generates the anchors for a set of feature</span></span><br><span class="line"><span class="string">            maps.</span></span><br><span class="line"><span class="string">        rpn_head (nn.Module): module that computes the objectness and regression deltas from the RPN</span></span><br><span class="line"><span class="string">        rpn_pre_nms_top_n_train (int): number of proposals to keep before applying NMS during training</span></span><br><span class="line"><span class="string">        rpn_pre_nms_top_n_test (int): number of proposals to keep before applying NMS during testing</span></span><br><span class="line"><span class="string">        rpn_post_nms_top_n_train (int): number of proposals to keep after applying NMS during training</span></span><br><span class="line"><span class="string">        rpn_post_nms_top_n_test (int): number of proposals to keep after applying NMS during testing</span></span><br><span class="line"><span class="string">        rpn_nms_thresh (float): NMS threshold used for postprocessing the RPN proposals</span></span><br><span class="line"><span class="string">        rpn_fg_iou_thresh (float): minimum IoU between the anchor and the GT box so that they can be</span></span><br><span class="line"><span class="string">            considered as positive during training of the RPN.</span></span><br><span class="line"><span class="string">        rpn_bg_iou_thresh (float): maximum IoU between the anchor and the GT box so that they can be</span></span><br><span class="line"><span class="string">            considered as negative during training of the RPN.</span></span><br><span class="line"><span class="string">        rpn_batch_size_per_image (int): number of anchors that are sampled during training of the RPN</span></span><br><span class="line"><span class="string">            for computing the loss</span></span><br><span class="line"><span class="string">        rpn_positive_fraction (float): proportion of positive anchors in a mini-batch during training</span></span><br><span class="line"><span class="string">            of the RPN</span></span><br><span class="line"><span class="string">        box_roi_pool (MultiScaleRoIAlign): the module which crops and resizes the feature maps in</span></span><br><span class="line"><span class="string">            the locations indicated by the bounding boxes</span></span><br><span class="line"><span class="string">        box_head (nn.Module): module that takes the cropped feature maps as input</span></span><br><span class="line"><span class="string">        box_predictor (nn.Module): module that takes the output of box_head and returns the</span></span><br><span class="line"><span class="string">            classification logits and box regression deltas.</span></span><br><span class="line"><span class="string">        box_score_thresh (float): during inference, only return proposals with a classification score</span></span><br><span class="line"><span class="string">            greater than box_score_thresh</span></span><br><span class="line"><span class="string">        box_nms_thresh (float): NMS threshold for the prediction head. Used during inference</span></span><br><span class="line"><span class="string">        box_detections_per_img (int): maximum number of detections per image, for all classes.</span></span><br><span class="line"><span class="string">        box_fg_iou_thresh (float): minimum IoU between the proposals and the GT box so that they can be</span></span><br><span class="line"><span class="string">            considered as positive during training of the classification head</span></span><br><span class="line"><span class="string">        box_bg_iou_thresh (float): maximum IoU between the proposals and the GT box so that they can be</span></span><br><span class="line"><span class="string">            considered as negative during training of the classification head</span></span><br><span class="line"><span class="string">        box_batch_size_per_image (int): number of proposals that are sampled during training of the</span></span><br><span class="line"><span class="string">            classification head</span></span><br><span class="line"><span class="string">        box_positive_fraction (float): proportion of positive proposals in a mini-batch during training</span></span><br><span class="line"><span class="string">            of the classification head</span></span><br><span class="line"><span class="string">        bbox_reg_weights (Tuple[float, float, float, float]): weights for the encoding/decoding of the</span></span><br><span class="line"><span class="string">            bounding boxes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Example::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; import torch</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; import torchvision</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; from torchvision.models.detection import FasterRCNN</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; from torchvision.models.detection.rpn import AnchorGenerator</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # load a pre-trained model for classification and return</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # only the features</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; backbone = torchvision.models.mobilenet_v2(pretrained=True).features</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # FasterRCNN needs to know the number of</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # output channels in a backbone. For mobilenet_v2, it&#x27;s 1280</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # so we need to add it here</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; backbone.out_channels = 1280</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # let&#x27;s make the RPN generate 5 x 3 anchors per spatial</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # location, with 5 different sizes and 3 different aspect</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # ratios. We have a Tuple[Tuple[int]] because each feature</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # map could potentially have different sizes and</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # aspect ratios</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; anchor_generator = AnchorGenerator(sizes=((32, 64, 128, 256, 512),),</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;                                    aspect_ratios=((0.5, 1.0, 2.0),))</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # let&#x27;s define what are the feature maps that we will</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # use to perform the region of interest cropping, as well as</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # the size of the crop after rescaling.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # if your backbone returns a Tensor, featmap_names is expected to</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # be [&#x27;0&#x27;]. More generally, the backbone should return an</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # OrderedDict[Tensor], and in featmap_names you can choose which</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # feature maps to use.</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; roi_pooler = torchvision.ops.MultiScaleRoIAlign(featmap_names=[&#x27;0&#x27;],</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;                                                 output_size=7,</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;                                                 sampling_ratio=2)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # put the pieces together inside a FasterRCNN model</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; model = FasterRCNN(backbone,</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;                    num_classes=2,</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;                    rpn_anchor_generator=anchor_generator,</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;                    box_roi_pool=roi_pooler)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; model.eval()</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; x = [torch.rand(3, 300, 400), torch.rand(3, 500, 400)]</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; predictions = model(x)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, backbone, num_classes=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 <span class="comment"># transform parameters</span></span></span><br><span class="line"><span class="params">                 min_size=<span class="number">800</span>, max_size=<span class="number">1333</span>,</span></span><br><span class="line"><span class="params">                 image_mean=<span class="literal">None</span>, image_std=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 <span class="comment"># RPN parameters</span></span></span><br><span class="line"><span class="params">                 rpn_anchor_generator=<span class="literal">None</span>, rpn_head=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 rpn_pre_nms_top_n_train=<span class="number">2000</span>, rpn_pre_nms_top_n_test=<span class="number">1000</span>,</span></span><br><span class="line"><span class="params">                 rpn_post_nms_top_n_train=<span class="number">2000</span>, rpn_post_nms_top_n_test=<span class="number">1000</span>,</span></span><br><span class="line"><span class="params">                 rpn_nms_thresh=<span class="number">0.7</span>,</span></span><br><span class="line"><span class="params">                 rpn_fg_iou_thresh=<span class="number">0.7</span>, rpn_bg_iou_thresh=<span class="number">0.3</span>,</span></span><br><span class="line"><span class="params">                 rpn_batch_size_per_image=<span class="number">256</span>, rpn_positive_fraction=<span class="number">0.5</span>,</span></span><br><span class="line"><span class="params">                 <span class="comment"># Box parameters</span></span></span><br><span class="line"><span class="params">                 box_roi_pool=<span class="literal">None</span>, box_head=<span class="literal">None</span>, box_predictor=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 box_score_thresh=<span class="number">0.05</span>, box_nms_thresh=<span class="number">0.5</span>, box_detections_per_img=<span class="number">100</span>,</span></span><br><span class="line"><span class="params">                 box_fg_iou_thresh=<span class="number">0.5</span>, box_bg_iou_thresh=<span class="number">0.5</span>,</span></span><br><span class="line"><span class="params">                 box_batch_size_per_image=<span class="number">512</span>, box_positive_fraction=<span class="number">0.25</span>,</span></span><br><span class="line"><span class="params">                 bbox_reg_weights=<span class="literal">None</span></span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(backbone, <span class="string">&quot;out_channels&quot;</span>):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(</span><br><span class="line">                <span class="string">&quot;backbone should contain an attribute out_channels &quot;</span></span><br><span class="line">                <span class="string">&quot;specifying the number of output channels (assumed to be the &quot;</span></span><br><span class="line">                <span class="string">&quot;same for all the levels)&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">isinstance</span>(rpn_anchor_generator, (AnchorGenerator, <span class="built_in">type</span>(<span class="literal">None</span>)))</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">isinstance</span>(box_roi_pool, (MultiScaleRoIAlign, <span class="built_in">type</span>(<span class="literal">None</span>)))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> num_classes <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> box_predictor <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;num_classes should be None when box_predictor is specified&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> box_predictor <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;num_classes should not be None when box_predictor &quot;</span></span><br><span class="line">                                 <span class="string">&quot;is not specified&quot;</span>)</span><br><span class="line"></span><br><span class="line">        out_channels = backbone.out_channels</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> rpn_anchor_generator <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            anchor_sizes = ((<span class="number">32</span>,), (<span class="number">64</span>,), (<span class="number">128</span>,), (<span class="number">256</span>,), (<span class="number">512</span>,))</span><br><span class="line">            aspect_ratios = ((<span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">2.0</span>),) * <span class="built_in">len</span>(anchor_sizes)</span><br><span class="line">            rpn_anchor_generator = AnchorGenerator(</span><br><span class="line">                anchor_sizes, aspect_ratios</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">if</span> rpn_head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            rpn_head = RPNHead(</span><br><span class="line">                out_channels, rpn_anchor_generator.num_anchors_per_location()[<span class="number">0</span>]</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        rpn_pre_nms_top_n = <span class="built_in">dict</span>(training=rpn_pre_nms_top_n_train, testing=rpn_pre_nms_top_n_test)</span><br><span class="line">        rpn_post_nms_top_n = <span class="built_in">dict</span>(training=rpn_post_nms_top_n_train, testing=rpn_post_nms_top_n_test)</span><br><span class="line"></span><br><span class="line">        rpn = RegionProposalNetwork(</span><br><span class="line">            rpn_anchor_generator, rpn_head,</span><br><span class="line">            rpn_fg_iou_thresh, rpn_bg_iou_thresh,</span><br><span class="line">            rpn_batch_size_per_image, rpn_positive_fraction,</span><br><span class="line">            rpn_pre_nms_top_n, rpn_post_nms_top_n, rpn_nms_thresh)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> box_roi_pool <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            box_roi_pool = MultiScaleRoIAlign(</span><br><span class="line">                featmap_names=[<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>],</span><br><span class="line">                output_size=<span class="number">7</span>,</span><br><span class="line">                sampling_ratio=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> box_head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            resolution = box_roi_pool.output_size[<span class="number">0</span>]</span><br><span class="line">            representation_size = <span class="number">1024</span></span><br><span class="line">            box_head = TwoMLPHead(</span><br><span class="line">                out_channels * resolution ** <span class="number">2</span>,</span><br><span class="line">                representation_size)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> box_predictor <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            representation_size = <span class="number">1024</span></span><br><span class="line">            box_predictor = FastRCNNPredictor(</span><br><span class="line">                representation_size,</span><br><span class="line">                num_classes)</span><br><span class="line"></span><br><span class="line">        roi_heads = RoIHeads(</span><br><span class="line">            <span class="comment"># Box</span></span><br><span class="line">            box_roi_pool, box_head, box_predictor,</span><br><span class="line">            box_fg_iou_thresh, box_bg_iou_thresh,</span><br><span class="line">            box_batch_size_per_image, box_positive_fraction,</span><br><span class="line">            bbox_reg_weights,</span><br><span class="line">            box_score_thresh, box_nms_thresh, box_detections_per_img)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> image_mean <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            image_mean = [<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>]</span><br><span class="line">        <span class="keyword">if</span> image_std <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            image_std = [<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]</span><br><span class="line">        transform = GeneralizedRCNNTransform(min_size, max_size, image_mean, image_std)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>(FasterRCNN, self).__init__(backbone, rpn, roi_heads, transform)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>FasterRCNN</code>的代码看起来很长，实际上主要是文档注释。</p><p><code>FasterRCNN</code>的实现只有<code>__init__</code>函数，因为<code>FasterRCNN</code>继承自<code>GeneralizedRCNN</code>，主要结构和计算流的实现都在父类中实现了，该子类的实现实际上只需要做一些参数检查和子类的具体子结构的实例化。</p><p>FasterRCNN的<code>__init__</code>函数的主要就是在做参数检查和一些实例化准备工作，其结果就是将准备好的backbone、rpn、roi_heads和transform对象传递给父类（GeneralizedRCNN）的初始化函数，由此构建一个FasterRCNN实例对象。</p><h3 id="generalizedrcnn">GeneralizedRCNN</h3><p><code>GeneralizedRCNN</code>在<code>torchvision.models.detection.generalized_rcnn.py</code>中实现，负责以父类的形式定义RCNN架构的整体计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GeneralizedRCNN</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Main class for Generalized R-CNN.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        backbone (nn.Module):</span></span><br><span class="line"><span class="string">        rpn (nn.Module):</span></span><br><span class="line"><span class="string">        roi_heads (nn.Module): takes the features + the proposals from the RPN and computes</span></span><br><span class="line"><span class="string">            detections / masks from it.</span></span><br><span class="line"><span class="string">        transform (nn.Module): performs the data transformation from the inputs to feed into</span></span><br><span class="line"><span class="string">            the model</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, backbone, rpn, roi_heads, transform</span>):</span><br><span class="line">        <span class="built_in">super</span>(GeneralizedRCNN, self).__init__()</span><br><span class="line">        self.transform = transform</span><br><span class="line">        self.backbone = backbone</span><br><span class="line">        self.rpn = rpn</span><br><span class="line">        self.roi_heads = roi_heads</span><br><span class="line">        <span class="comment"># used only on torchscript mode</span></span><br><span class="line">        self._has_warned = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @torch.jit.unused</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eager_outputs</span>(<span class="params">self, losses, detections</span>):</span><br><span class="line">        <span class="comment"># type: (<span class="type">Dict</span>[<span class="built_in">str</span>, Tensor], <span class="type">List</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]]) -&gt; <span class="type">Union</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, Tensor], <span class="type">List</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]]]</span></span><br><span class="line">        <span class="keyword">if</span> self.training:</span><br><span class="line">            <span class="keyword">return</span> losses</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> detections</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, images, targets=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="comment"># type: (<span class="type">List</span>[Tensor], <span class="type">Optional</span>[<span class="type">List</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]]]) -&gt; <span class="type">Tuple</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, Tensor], <span class="type">List</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]]]</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Arguments:</span></span><br><span class="line"><span class="string">            images (list[Tensor]): images to be processed</span></span><br><span class="line"><span class="string">            targets (list[Dict[Tensor]]): ground-truth boxes present in the image (optional)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            result (list[BoxList] or dict[Tensor]): the output from the model.</span></span><br><span class="line"><span class="string">                During training, it returns a dict[Tensor] which contains the losses.</span></span><br><span class="line"><span class="string">                During testing, it returns list[BoxList] contains additional fields</span></span><br><span class="line"><span class="string">                like `scores`, `labels` and `mask` (for Mask R-CNN models).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.training <span class="keyword">and</span> targets <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;In training mode, targets should be passed&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> self.training:</span><br><span class="line">            <span class="keyword">assert</span> targets <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">for</span> target <span class="keyword">in</span> targets:</span><br><span class="line">                boxes = target[<span class="string">&quot;boxes&quot;</span>]</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(boxes, torch.Tensor):</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(boxes.shape) != <span class="number">2</span> <span class="keyword">or</span> boxes.shape[-<span class="number">1</span>] != <span class="number">4</span>:</span><br><span class="line">                        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Expected target boxes to be a tensor&quot;</span></span><br><span class="line">                                         <span class="string">&quot;of shape [N, 4], got &#123;:&#125;.&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">                                             boxes.shape))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">&quot;Expected target boxes to be of type &quot;</span></span><br><span class="line">                                     <span class="string">&quot;Tensor, got &#123;:&#125;.&quot;</span>.<span class="built_in">format</span>(<span class="built_in">type</span>(boxes)))</span><br><span class="line"></span><br><span class="line">        original_image_sizes = torch.jit.annotate(<span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]], [])</span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> images:</span><br><span class="line">            val = img.shape[-<span class="number">2</span>:]</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">len</span>(val) == <span class="number">2</span></span><br><span class="line">            original_image_sizes.append((val[<span class="number">0</span>], val[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        images, targets = self.transform(images, targets)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Check for degenerate boxes</span></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> Move this to a function</span></span><br><span class="line">        <span class="keyword">if</span> targets <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">for</span> target_idx, target <span class="keyword">in</span> <span class="built_in">enumerate</span>(targets):</span><br><span class="line">                boxes = target[<span class="string">&quot;boxes&quot;</span>]</span><br><span class="line">                degenerate_boxes = boxes[:, <span class="number">2</span>:] &lt;= boxes[:, :<span class="number">2</span>]</span><br><span class="line">                <span class="keyword">if</span> degenerate_boxes.<span class="built_in">any</span>():</span><br><span class="line">                    <span class="comment"># print the first degenerate box</span></span><br><span class="line">                    bb_idx = torch.where(degenerate_boxes.<span class="built_in">any</span>(dim=<span class="number">1</span>))[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">                    degen_bb: <span class="type">List</span>[<span class="built_in">float</span>] = boxes[bb_idx].tolist()</span><br><span class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">&quot;All bounding boxes should have positive height and width.&quot;</span></span><br><span class="line">                                     <span class="string">&quot; Found invalid box &#123;&#125; for target at index &#123;&#125;.&quot;</span></span><br><span class="line">                                     .<span class="built_in">format</span>(degen_bb, target_idx))</span><br><span class="line"></span><br><span class="line">        features = self.backbone(images.tensors)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(features, torch.Tensor):</span><br><span class="line">            features = OrderedDict([(<span class="string">&#x27;0&#x27;</span>, features)])</span><br><span class="line">        proposals, proposal_losses = self.rpn(images, features, targets)</span><br><span class="line">        detections, detector_losses = self.roi_heads(features, proposals, images.image_sizes, targets)</span><br><span class="line">        detections = self.transform.postprocess(detections, images.image_sizes, original_image_sizes)</span><br><span class="line"></span><br><span class="line">        losses = &#123;&#125;</span><br><span class="line">        losses.update(detector_losses)</span><br><span class="line">        losses.update(proposal_losses)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> torch.jit.is_scripting():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self._has_warned:</span><br><span class="line">                warnings.warn(<span class="string">&quot;RCNN always returns a (Losses, Detections) tuple in scripting&quot;</span>)</span><br><span class="line">                self._has_warned = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">return</span> (losses, detections)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.eager_outputs(losses, detections)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>__init__</code>中，GenerailizedRCNN把R-CNN架构定义为4个组成部分：</p><ol type="1"><li><code>transform</code>：一个变换模型，用于对图像和其他输入进行变换；</li><li><code>backbone</code>：一个特征提取模型，输入的是进过变换处理的图像张量，输出的是取得的图像特征features；</li><li><code>rpn</code>：一个RPN模型，输入包含——图像images、backbone提取出的图像特征features以及训练时输入的包含bboxground truth的targets，输出包含——预测的区域proposals和相应的损失；</li><li><code>roi_heads</code>：一个RoIHeads模型，输入包含——backbone输出的features，RPN输出的proposals，以及图像尺寸和训练时的targets。</li></ol><p>该类的<code>__forward__</code>计算流差不多就是这四部分依次执行的过程，除了一些参数检查，训练时和预测时对输入的区分以外，主要代码逻辑可以概括为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, images, targets=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="comment"># 1. transform</span></span><br><span class="line">    images, targets = self.transform(images, targets)</span><br><span class="line">    <span class="comment"># 2. backbone</span></span><br><span class="line">    features = self.backbone(images.tensors)</span><br><span class="line">    <span class="comment"># 3. rpn</span></span><br><span class="line">    proposals, proposal_losses = self.rpn(images, features, targets)</span><br><span class="line">    <span class="comment"># 4. roi_heads</span></span><br><span class="line">    detections, detector_losses = self.roi_heads(features, proposals, images.image_sizes, targets)</span><br><span class="line">    <span class="comment"># 5. postprocess</span></span><br><span class="line">    detections = self.transform.postprocess(detections, images.image_sizes, original_image_sizes)</span><br></pre></td></tr></table></figure><h4 id="generalizedrcnntransform">GeneralizedRCNNTransform</h4><p>FasterR-CNN模型对输入图像的预处理由<code>torchvision.models.detection.transform</code>包的<code>GeneralizedRCNNTransform</code>类实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GeneralizedRCNNTransform</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Performs input / target transformation before feeding the data to a GeneralizedRCNN</span></span><br><span class="line"><span class="string">    model.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The transformations it perform are:</span></span><br><span class="line"><span class="string">        - input normalization (mean subtraction and std division)</span></span><br><span class="line"><span class="string">        - input / target resizing to match min_size / max_size</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    It returns a ImageList for the inputs, and a List[Dict[Tensor]] for the targets</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, min_size, max_size, image_mean, image_std</span>):</span><br><span class="line">        <span class="built_in">super</span>(GeneralizedRCNNTransform, self).__init__()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(min_size, (<span class="built_in">list</span>, <span class="built_in">tuple</span>)):</span><br><span class="line">            min_size = (min_size,)</span><br><span class="line">        self.min_size = min_size</span><br><span class="line">        self.max_size = max_size</span><br><span class="line">        self.image_mean = image_mean</span><br><span class="line">        self.image_std = image_std</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                images,       <span class="comment"># type: List[Tensor]</span></span></span><br><span class="line"><span class="params">                targets=<span class="literal">None</span>  <span class="comment"># type: Optional[List[Dict[str, Tensor]]]</span></span></span><br><span class="line"><span class="params">                </span>):</span><br><span class="line">        <span class="comment"># type: (...) -&gt; <span class="type">Tuple</span>[ImageList, <span class="type">Optional</span>[<span class="type">List</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]]]]</span></span><br><span class="line">        images = [img <span class="keyword">for</span> img <span class="keyword">in</span> images]</span><br><span class="line">        <span class="keyword">if</span> targets <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># make a copy of targets to avoid modifying it in-place</span></span><br><span class="line">            <span class="comment"># once torchscript supports dict comprehension</span></span><br><span class="line">            <span class="comment"># this can be simplified as as follows</span></span><br><span class="line">            <span class="comment"># targets = [&#123;k: v for k,v in t.items()&#125; for t in targets]</span></span><br><span class="line">            targets_copy: <span class="type">List</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]] = []</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> targets:</span><br><span class="line">                data: <span class="type">Dict</span>[<span class="built_in">str</span>, Tensor] = &#123;&#125;</span><br><span class="line">                <span class="keyword">for</span> k, v <span class="keyword">in</span> t.items():</span><br><span class="line">                    data[k] = v</span><br><span class="line">                targets_copy.append(data)</span><br><span class="line">            targets = targets_copy</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(images)):</span><br><span class="line">            image = images[i]</span><br><span class="line">            target_index = targets[i] <span class="keyword">if</span> targets <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> image.dim() != <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;images is expected to be a list of 3d tensors &quot;</span></span><br><span class="line">                                 <span class="string">&quot;of shape [C, H, W], got &#123;&#125;&quot;</span>.<span class="built_in">format</span>(image.shape))</span><br><span class="line">            image = self.normalize(image)</span><br><span class="line">            image, target_index = self.resize(image, target_index)</span><br><span class="line">            images[i] = image</span><br><span class="line">            <span class="keyword">if</span> targets <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> target_index <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                targets[i] = target_index</span><br><span class="line"></span><br><span class="line">        image_sizes = [img.shape[-<span class="number">2</span>:] <span class="keyword">for</span> img <span class="keyword">in</span> images]</span><br><span class="line">        images = self.batch_images(images)</span><br><span class="line">        image_sizes_list = torch.jit.annotate(<span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]], [])</span><br><span class="line">        <span class="keyword">for</span> image_size <span class="keyword">in</span> image_sizes:</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">len</span>(image_size) == <span class="number">2</span></span><br><span class="line">            image_sizes_list.append((image_size[<span class="number">0</span>], image_size[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        image_list = ImageList(images, image_sizes_list)</span><br><span class="line">        <span class="keyword">return</span> image_list, targets</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">normalize</span>(<span class="params">self, image</span>):</span><br><span class="line">        dtype, device = image.dtype, image.device</span><br><span class="line">        mean = torch.as_tensor(self.image_mean, dtype=dtype, device=device)</span><br><span class="line">        std = torch.as_tensor(self.image_std, dtype=dtype, device=device)</span><br><span class="line">        <span class="keyword">return</span> (image - mean[:, <span class="literal">None</span>, <span class="literal">None</span>]) / std[:, <span class="literal">None</span>, <span class="literal">None</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">torch_choice</span>(<span class="params">self, k</span>):</span><br><span class="line">        <span class="comment"># type: (<span class="type">List</span>[<span class="built_in">int</span>]) -&gt; <span class="built_in">int</span></span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Implements `random.choice` via torch ops so it can be compiled with</span></span><br><span class="line"><span class="string">        TorchScript. Remove if https://github.com/pytorch/pytorch/issues/25803</span></span><br><span class="line"><span class="string">        is fixed.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        index = <span class="built_in">int</span>(torch.empty(<span class="number">1</span>).uniform_(<span class="number">0.</span>, <span class="built_in">float</span>(<span class="built_in">len</span>(k))).item())</span><br><span class="line">        <span class="keyword">return</span> k[index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">resize</span>(<span class="params">self, image, target</span>):</span><br><span class="line">        <span class="comment"># type: (Tensor, <span class="type">Optional</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]]) -&gt; <span class="type">Tuple</span>[Tensor, <span class="type">Optional</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]]]</span></span><br><span class="line">        h, w = image.shape[-<span class="number">2</span>:]</span><br><span class="line">        <span class="keyword">if</span> self.training:</span><br><span class="line">            size = <span class="built_in">float</span>(self.torch_choice(self.min_size))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># FIXME assume for now that testing uses the largest scale</span></span><br><span class="line">            size = <span class="built_in">float</span>(self.min_size[-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">if</span> torchvision._is_tracing():</span><br><span class="line">            image, target = _resize_image_and_masks_onnx(image, size, <span class="built_in">float</span>(self.max_size), target)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            image, target = _resize_image_and_masks(image, size, <span class="built_in">float</span>(self.max_size), target)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> target <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> image, target</span><br><span class="line"></span><br><span class="line">        bbox = target[<span class="string">&quot;boxes&quot;</span>]</span><br><span class="line">        bbox = resize_boxes(bbox, (h, w), image.shape[-<span class="number">2</span>:])</span><br><span class="line">        target[<span class="string">&quot;boxes&quot;</span>] = bbox</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;keypoints&quot;</span> <span class="keyword">in</span> target:</span><br><span class="line">            keypoints = target[<span class="string">&quot;keypoints&quot;</span>]</span><br><span class="line">            keypoints = resize_keypoints(keypoints, (h, w), image.shape[-<span class="number">2</span>:])</span><br><span class="line">            target[<span class="string">&quot;keypoints&quot;</span>] = keypoints</span><br><span class="line">        <span class="keyword">return</span> image, target</span><br><span class="line"></span><br><span class="line">    <span class="comment"># _onnx_batch_images() is an implementation of</span></span><br><span class="line">    <span class="comment"># batch_images() that is supported by ONNX tracing.</span></span><br><span class="line"><span class="meta">    @torch.jit.unused</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_onnx_batch_images</span>(<span class="params">self, images, size_divisible=<span class="number">32</span></span>):</span><br><span class="line">        <span class="comment"># type: (<span class="type">List</span>[Tensor], <span class="built_in">int</span>) -&gt; Tensor</span></span><br><span class="line">        max_size = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(images[<span class="number">0</span>].dim()):</span><br><span class="line">            max_size_i = torch.<span class="built_in">max</span>(torch.stack([img.shape[i] <span class="keyword">for</span> img <span class="keyword">in</span> images]).to(torch.float32)).to(torch.int64)</span><br><span class="line">            max_size.append(max_size_i)</span><br><span class="line">        stride = size_divisible</span><br><span class="line">        max_size[<span class="number">1</span>] = (torch.ceil((max_size[<span class="number">1</span>].to(torch.float32)) / stride) * stride).to(torch.int64)</span><br><span class="line">        max_size[<span class="number">2</span>] = (torch.ceil((max_size[<span class="number">2</span>].to(torch.float32)) / stride) * stride).to(torch.int64)</span><br><span class="line">        max_size = <span class="built_in">tuple</span>(max_size)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># work around for</span></span><br><span class="line">        <span class="comment"># pad_img[: img.shape[0], : img.shape[1], : img.shape[2]].copy_(img)</span></span><br><span class="line">        <span class="comment"># which is not yet supported in onnx</span></span><br><span class="line">        padded_imgs = []</span><br><span class="line">        <span class="keyword">for</span> img <span class="keyword">in</span> images:</span><br><span class="line">            padding = [(s1 - s2) <span class="keyword">for</span> s1, s2 <span class="keyword">in</span> <span class="built_in">zip</span>(max_size, <span class="built_in">tuple</span>(img.shape))]</span><br><span class="line">            padded_img = torch.nn.functional.pad(img, (<span class="number">0</span>, padding[<span class="number">2</span>], <span class="number">0</span>, padding[<span class="number">1</span>], <span class="number">0</span>, padding[<span class="number">0</span>]))</span><br><span class="line">            padded_imgs.append(padded_img)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> torch.stack(padded_imgs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">max_by_axis</span>(<span class="params">self, the_list</span>):</span><br><span class="line">        <span class="comment"># type: (<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]</span></span><br><span class="line">        maxes = the_list[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> sublist <span class="keyword">in</span> the_list[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(sublist):</span><br><span class="line">                maxes[index] = <span class="built_in">max</span>(maxes[index], item)</span><br><span class="line">        <span class="keyword">return</span> maxes</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">batch_images</span>(<span class="params">self, images, size_divisible=<span class="number">32</span></span>):</span><br><span class="line">        <span class="comment"># type: (<span class="type">List</span>[Tensor], <span class="built_in">int</span>) -&gt; Tensor</span></span><br><span class="line">        <span class="keyword">if</span> torchvision._is_tracing():</span><br><span class="line">            <span class="comment"># batch_images() does not export well to ONNX</span></span><br><span class="line">            <span class="comment"># call _onnx_batch_images() instead</span></span><br><span class="line">            <span class="keyword">return</span> self._onnx_batch_images(images, size_divisible)</span><br><span class="line"></span><br><span class="line">        max_size = self.max_by_axis([<span class="built_in">list</span>(img.shape) <span class="keyword">for</span> img <span class="keyword">in</span> images])</span><br><span class="line">        stride = <span class="built_in">float</span>(size_divisible)</span><br><span class="line">        max_size = <span class="built_in">list</span>(max_size)</span><br><span class="line">        max_size[<span class="number">1</span>] = <span class="built_in">int</span>(math.ceil(<span class="built_in">float</span>(max_size[<span class="number">1</span>]) / stride) * stride)</span><br><span class="line">        max_size[<span class="number">2</span>] = <span class="built_in">int</span>(math.ceil(<span class="built_in">float</span>(max_size[<span class="number">2</span>]) / stride) * stride)</span><br><span class="line"></span><br><span class="line">        batch_shape = [<span class="built_in">len</span>(images)] + max_size</span><br><span class="line">        batched_imgs = images[<span class="number">0</span>].new_full(batch_shape, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> img, pad_img <span class="keyword">in</span> <span class="built_in">zip</span>(images, batched_imgs):</span><br><span class="line">            pad_img[: img.shape[<span class="number">0</span>], : img.shape[<span class="number">1</span>], : img.shape[<span class="number">2</span>]].copy_(img)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> batched_imgs</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">postprocess</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                    result,               <span class="comment"># type: List[Dict[str, Tensor]]</span></span></span><br><span class="line"><span class="params">                    image_shapes,         <span class="comment"># type: List[Tuple[int, int]]</span></span></span><br><span class="line"><span class="params">                    original_image_sizes  <span class="comment"># type: List[Tuple[int, int]]</span></span></span><br><span class="line"><span class="params">                    </span>):</span><br><span class="line">        <span class="comment"># type: (...) -&gt; <span class="type">List</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]]</span></span><br><span class="line">        <span class="keyword">if</span> self.training:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">for</span> i, (pred, im_s, o_im_s) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(result, image_shapes, original_image_sizes)):</span><br><span class="line">            boxes = pred[<span class="string">&quot;boxes&quot;</span>]</span><br><span class="line">            boxes = resize_boxes(boxes, im_s, o_im_s)</span><br><span class="line">            result[i][<span class="string">&quot;boxes&quot;</span>] = boxes</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;masks&quot;</span> <span class="keyword">in</span> pred:</span><br><span class="line">                masks = pred[<span class="string">&quot;masks&quot;</span>]</span><br><span class="line">                masks = paste_masks_in_image(masks, boxes, o_im_s)</span><br><span class="line">                result[i][<span class="string">&quot;masks&quot;</span>] = masks</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;keypoints&quot;</span> <span class="keyword">in</span> pred:</span><br><span class="line">                keypoints = pred[<span class="string">&quot;keypoints&quot;</span>]</span><br><span class="line">                keypoints = resize_keypoints(keypoints, im_s, o_im_s)</span><br><span class="line">                result[i][<span class="string">&quot;keypoints&quot;</span>] = keypoints</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        format_string = self.__class__.__name__ + <span class="string">&#x27;(&#x27;</span></span><br><span class="line">        _indent = <span class="string">&#x27;\n    &#x27;</span></span><br><span class="line">        format_string += <span class="string">&quot;&#123;0&#125;Normalize(mean=&#123;1&#125;, std=&#123;2&#125;)&quot;</span>.<span class="built_in">format</span>(_indent, self.image_mean, self.image_std)</span><br><span class="line">        format_string += <span class="string">&quot;&#123;0&#125;Resize(min_size=&#123;1&#125;, max_size=&#123;2&#125;, mode=&#x27;bilinear&#x27;)&quot;</span>.<span class="built_in">format</span>(_indent, self.min_size,</span><br><span class="line">                                                                                         self.max_size)</span><br><span class="line">        format_string += <span class="string">&#x27;\n)&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> format_string</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对输入图像的初步转换处理在<code>forward</code>前向传播函数中实现，主要实现normalize和resize操作：</p><ol type="1"><li><code>self.normalize</code>：初始参数在FasterRCNN的初始化中被设为<code>image_mean = [0.485, 0.456, 0.406]</code>和<code>image_std = [0.229, 0.224, 0.225]</code>；</li><li><code>self.resize</code>：初始参数在FasterRCNN的初始化中被设为<code>min_size=800, max_size=1333</code>；</li><li><code>self.batch_images</code>，对一个batch的图像做了Padding，使其输出的张量尺寸一致。</li></ol><p>根据该转换模块的默认值，结合本节开头的例子：</p><ol type="1"><li>经过resize处理后，因为最小尺寸必须为800，因此<spanclass="math inline">\(300 \times 400\)</span>的图片1转换为了<spanclass="math inline">\(800 \times 1066\)</span>，<spanclass="math inline">\(400 \times 500\)</span>的图片2转换为了<spanclass="math inline">\(1000 \times 800\)</span>；</li><li>因为batch处理转tensors时加padding的缘故，两个图片的张量尺寸被统一为<spanclass="math inline">\(1024 \times 1088\)</span>。</li></ol><h4 id="backbonewithfpn">BackboneWithFPN</h4><p><code>BackboneWithFPN</code>在<code>torchvision.models.detection.backbone_utils</code>中实现，其作用就是以ResNet模型中提取出的一些中间层作为backbone，在backbone后面继续接上一个FPN。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BackboneWithFPN</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Adds a FPN on top of a model.</span></span><br><span class="line"><span class="string">    Internally, it uses torchvision.models._utils.IntermediateLayerGetter to</span></span><br><span class="line"><span class="string">    extract a submodel that returns the feature maps specified in return_layers.</span></span><br><span class="line"><span class="string">    The same limitations of IntermediatLayerGetter apply here.</span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        backbone (nn.Module)</span></span><br><span class="line"><span class="string">        return_layers (Dict[name, new_name]): a dict containing the names</span></span><br><span class="line"><span class="string">            of the modules for which the activations will be returned as</span></span><br><span class="line"><span class="string">            the key of the dict, and the value of the dict is the name</span></span><br><span class="line"><span class="string">            of the returned activation (which the user can specify).</span></span><br><span class="line"><span class="string">        in_channels_list (List[int]): number of channels for each feature map</span></span><br><span class="line"><span class="string">            that is returned, in the order they are present in the OrderedDict</span></span><br><span class="line"><span class="string">        out_channels (int): number of channels in the FPN.</span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        out_channels (int): the number of channels in the FPN</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, backbone, return_layers, in_channels_list, out_channels, extra_blocks=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(BackboneWithFPN, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> extra_blocks <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            extra_blocks = LastLevelMaxPool()</span><br><span class="line"></span><br><span class="line">        self.body = IntermediateLayerGetter(backbone, return_layers=return_layers)</span><br><span class="line">        self.fpn = FeaturePyramidNetwork(</span><br><span class="line">            in_channels_list=in_channels_list,</span><br><span class="line">            out_channels=out_channels,</span><br><span class="line">            extra_blocks=extra_blocks,</span><br><span class="line">        )</span><br><span class="line">        self.out_channels = out_channels</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.body(x)</span><br><span class="line">        x = self.fpn(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该类的实现很简单，就像是一个组合，把backbone和FPN装起来：</p><ol type="1"><li>把从backbone中取出的（用于提供featuremaps）中间层作为模型的body；</li><li>构造出FPN（FeaturePyramidNetworkj）作为模型的fpn；</li></ol><p>然后数据流定义很简洁，就是输入数据x先经过body，再经过fpn，就完成了。</p><p>有了backbone+FPN的模型，就可以进一步构造Faster R-CNN模型了。</p><p><code>torchvision</code>的FasterR-CNN的backbone负责提取图像特征，具体实现由ResNet中间层衔接FPN组成。</p><h5 id="resnet">ResNet</h5><p><code>class ResNet(nn.Module)</code></p><p>ResNet在<code>torchvision.models.resnet</code>包中实现，属于卷积神经网络实现的范畴，本文不再赘述。</p><p>有了resnet作为backbone，就可以通过<code>resnet_fpn_backbone</code>构造一个在resnet后面接上FPN的模型，具体地，是构造<code>BackboneWithFPN</code>类的对象。</p><p><code>torchvision</code>实现中：</p><ol type="1"><li>默认后三层，即ResNet的layer4, layer3,layer2为可训练层，其余freeze；</li><li>默认返回后四层的feature map，即layer1, layer2, layer3,layer4，命名index依次为0, 1, 2, 3，每层输出feature map的通道数依次为256,512, 1024, 2048。</li></ol><p>本节的例子经过ResNet部分的计算后，从输入的<spanclass="math inline">\(2 \times 3 \times 1024 \times1088\)</span>的tensor，转换为了一个有序字典OrderedDict：</p><ol type="1"><li><code>'0': shape[2, 256, 256, 272]</code>，源自ResNet的layer1；</li><li><code>'1': shape[2, 512, 128, 136]</code>，源自ResNet的layer2；</li><li><code>'2': shape[2, 1024, 64, 68]</code>，源自ResNet的layer3；</li><li><code>'3': shape[2, 2048, 32, 34]</code>，源自ResNet的layer4；</li></ol><h5 id="fpnfeaturepyramidnetwork">FPN(FeaturePyramidNetwork)</h5><p><code>FeaturePyramidNetwork</code>在<code>torchvision.ops.feature_pyramid_network</code>包中实现。FPN实现了金字塔结构的特征提取，低层的卷积感受野小，其特征代表小目标的特征，而高层的卷积感受野大，因此其特征适合表示大目标特征。在目标检测中运用FPN，在低层配合小尺寸anchor，在高层配合大尺寸anchors，有利于同时有效检测小目标和大目标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FeaturePyramidNetwork</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Module that adds a FPN from on top of a set of feature maps. This is based on</span></span><br><span class="line"><span class="string">    `&quot;Feature Pyramid Network for Object Detection&quot; &lt;https://arxiv.org/abs/1612.03144&gt;`_.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The feature maps are currently supposed to be in increasing depth</span></span><br><span class="line"><span class="string">    order.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The input to the model is expected to be an OrderedDict[Tensor], containing</span></span><br><span class="line"><span class="string">    the feature maps on top of which the FPN will be added.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        in_channels_list (list[int]): number of channels for each feature map that</span></span><br><span class="line"><span class="string">            is passed to the module</span></span><br><span class="line"><span class="string">        out_channels (int): number of channels of the FPN representation</span></span><br><span class="line"><span class="string">        extra_blocks (ExtraFPNBlock or None): if provided, extra operations will</span></span><br><span class="line"><span class="string">            be performed. It is expected to take the fpn features, the original</span></span><br><span class="line"><span class="string">            features and the names of the original features as input, and returns</span></span><br><span class="line"><span class="string">            a new list of feature maps and their corresponding names</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Examples::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; m = torchvision.ops.FeaturePyramidNetwork([10, 20, 30], 5)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # get some dummy data</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; x = OrderedDict()</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; x[&#x27;feat0&#x27;] = torch.rand(1, 10, 64, 64)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; x[&#x27;feat2&#x27;] = torch.rand(1, 20, 16, 16)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; x[&#x27;feat3&#x27;] = torch.rand(1, 30, 8, 8)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # compute the FPN on top of x</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; output = m(x)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; print([(k, v.shape) for k, v in output.items()])</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # returns</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;   [(&#x27;feat0&#x27;, torch.Size([1, 5, 64, 64])),</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;    (&#x27;feat2&#x27;, torch.Size([1, 5, 16, 16])),</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt;    (&#x27;feat3&#x27;, torch.Size([1, 5, 8, 8]))]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        in_channels_list: <span class="type">List</span>[<span class="built_in">int</span>],</span></span><br><span class="line"><span class="params">        out_channels: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">        extra_blocks: <span class="type">Optional</span>[ExtraFPNBlock] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    </span>):</span><br><span class="line">        <span class="built_in">super</span>(FeaturePyramidNetwork, self).__init__()</span><br><span class="line">        self.inner_blocks = nn.ModuleList()</span><br><span class="line">        self.layer_blocks = nn.ModuleList()</span><br><span class="line">        <span class="keyword">for</span> in_channels <span class="keyword">in</span> in_channels_list:</span><br><span class="line">            <span class="keyword">if</span> in_channels == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;in_channels=0 is currently not supported&quot;</span>)</span><br><span class="line">            inner_block_module = nn.Conv2d(in_channels, out_channels, <span class="number">1</span>)</span><br><span class="line">            layer_block_module = nn.Conv2d(out_channels, out_channels, <span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line">            self.inner_blocks.append(inner_block_module)</span><br><span class="line">            self.layer_blocks.append(layer_block_module)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># initialize parameters now to avoid modifying the initialization of top_blocks</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.children():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">                nn.init.kaiming_uniform_(m.weight, a=<span class="number">1</span>)</span><br><span class="line">                nn.init.constant_(m.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> extra_blocks <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">isinstance</span>(extra_blocks, ExtraFPNBlock)</span><br><span class="line">        self.extra_blocks = extra_blocks</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_result_from_inner_blocks</span>(<span class="params">self, x: Tensor, idx: <span class="built_in">int</span></span>) -&gt; Tensor:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        This is equivalent to self.inner_blocks[idx](x),</span></span><br><span class="line"><span class="string">        but torchscript doesn&#x27;t support this yet</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        num_blocks = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.inner_blocks:</span><br><span class="line">            num_blocks += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> idx &lt; <span class="number">0</span>:</span><br><span class="line">            idx += num_blocks</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        out = x</span><br><span class="line">        <span class="keyword">for</span> module <span class="keyword">in</span> self.inner_blocks:</span><br><span class="line">            <span class="keyword">if</span> i == idx:</span><br><span class="line">                out = module(x)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_result_from_layer_blocks</span>(<span class="params">self, x: Tensor, idx: <span class="built_in">int</span></span>) -&gt; Tensor:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        This is equivalent to self.layer_blocks[idx](x),</span></span><br><span class="line"><span class="string">        but torchscript doesn&#x27;t support this yet</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        num_blocks = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> self.layer_blocks:</span><br><span class="line">            num_blocks += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> idx &lt; <span class="number">0</span>:</span><br><span class="line">            idx += num_blocks</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        out = x</span><br><span class="line">        <span class="keyword">for</span> module <span class="keyword">in</span> self.layer_blocks:</span><br><span class="line">            <span class="keyword">if</span> i == idx:</span><br><span class="line">                out = module(x)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x: <span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]</span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Computes the FPN for a set of feature maps.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Arguments:</span></span><br><span class="line"><span class="string">            x (OrderedDict[Tensor]): feature maps for each feature level.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            results (OrderedDict[Tensor]): feature maps after FPN layers.</span></span><br><span class="line"><span class="string">                They are ordered from highest resolution first.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># unpack OrderedDict into two lists for easier handling</span></span><br><span class="line">        names = <span class="built_in">list</span>(x.keys())</span><br><span class="line">        x = <span class="built_in">list</span>(x.values())</span><br><span class="line"></span><br><span class="line">        last_inner = self.get_result_from_inner_blocks(x[-<span class="number">1</span>], -<span class="number">1</span>)</span><br><span class="line">        results = []</span><br><span class="line">        results.append(self.get_result_from_layer_blocks(last_inner, -<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x) - <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            inner_lateral = self.get_result_from_inner_blocks(x[idx], idx)</span><br><span class="line">            feat_shape = inner_lateral.shape[-<span class="number">2</span>:]</span><br><span class="line">            inner_top_down = F.interpolate(last_inner, size=feat_shape, mode=<span class="string">&quot;nearest&quot;</span>)</span><br><span class="line">            last_inner = inner_lateral + inner_top_down</span><br><span class="line">            results.insert(<span class="number">0</span>, self.get_result_from_layer_blocks(last_inner, idx))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.extra_blocks <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            results, names = self.extra_blocks(results, x, names)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># make it back an OrderedDict</span></span><br><span class="line">        out = OrderedDict([(k, v) <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">zip</span>(names, results)])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><p>按原论文的思路，FPN第n层输出feature map <spanclass="math inline">\(P_n\)</span>的是把两者进行合并：</p><ol type="1"><li>lateral：CNN的第n层feature map <spanclass="math inline">\(C_n\)</span>，做1×1卷积；</li><li>top-down upsampling：FPN的n+1层feature map <spanclass="math inline">\(P_{n+1}\)</span>做2×上采样（长宽各2倍）变成第n层的尺寸；</li></ol><p>此后，采用3×3卷积对合并后的featuremap进行卷积处理，以便消除上采样操作造成的失真效应（aliasingeffect）。</p><p>此时，形成的每层的最终的feature map就是最终的feature map <spanclass="math inline">\(P_n\)</span>，例如：从ResNet的2~5层feature map<span class="math inline">\(\{C_2, C_3, C_4,C_5\}\)</span>经过FPN取得<span class="math inline">\(\{P_2, P_3, P_4,P_5\}\)</span>，对应的两者的空域尺寸（spatial size）是相同的。</p><p>在<code>torchvision</code>的具体实现中：</p><ol type="1"><li><code>self.inner_blocks</code>就是FPN的所有1×1卷积；</li><li><code>self.layer_blocks</code>就是FPN合并后需要用到的3×3卷积；</li></ol><p>这两者都是<code>nn.ModuleList()</code>，在<code>__init__</code>初始化时，在一个n次（n个featuremap）的for循环中进行初始化，都填入<code>nn.Conv2d</code>对象，设置为统一的<code>out_channels</code>。</p><p>在<code>__forward__</code>定义的计算流中，核心代码逻辑可以概括为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x: <span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]</span>):</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x) - <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        inner_lateral = self.get_result_from_inner_blocks(x[idx], idx)</span><br><span class="line">        feat_shape = inner_lateral.shape[-<span class="number">2</span>:]</span><br><span class="line">        inner_top_down = F.interpolate(last_inner, size=feat_shape, mode=<span class="string">&quot;nearest&quot;</span>)</span><br><span class="line">        last_inner = inner_lateral + inner_top_down</span><br><span class="line">        results.insert(<span class="number">0</span>, self.get_result_from_layer_blocks(last_inner, idx))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.extra_blocks <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        results, names = self.extra_blocks(results, x, names)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><p>具体步骤是从后往前计算每一层的result，即论文中的<spanclass="math inline">\(P_n\)</span>：</p><ol type="1"><li><code>inner_lateral</code>就是CNN的featuremap经过1×1卷积计算的结果，该卷积通过<code>self.get_result_from_inner_blocks(x[idx], idx)</code>实现；</li><li><code>inner_top_down</code>就是从后一层<spanclass="math inline">\(P_{n+1}\)</span>上采样出来的结果，该上采样通过插值实现<code>F.interpolate(last_inner, size=feat_shape, mode="nearest")</code>；</li><li><code>last_inner</code>就是两者合并的结果，通过element-wiseaddition实现；</li><li>在加入<code>results</code>前，还需要用3×3卷积计算一下，即<code>self.get_result_from_layer_blocks(last_inner, idx)</code>。</li></ol><p>最后，如果还有额外计算块的话，就再算一遍，取得这层的结果也加入。</p><p>在具体实现中，在FPN尾部增加了<code>LastLevelMaxPool</code>，并将其计算结果命名为<code>pool</code>加入了<code>names</code>。</p><p>本节的例子经过FPN部分的计算后，从ResNet输出的4个通道数不同的featuremaps，转换为了各层通道数一致的一个有序字典OrderedDict：</p><ol type="1"><li><code>'0': shape[2, 256, 256, 272]</code>，源自ResNet的layer1；</li><li><code>'1': shape[2, 256, 128, 136]</code>，源自ResNet的layer2；</li><li><code>'2': shape[2, 256, 64, 68]</code>，源自ResNet的layer3；</li><li><code>'3': shape[2, 256, 32, 34]</code>，源自ResNet的layer4；</li><li><code>'pool': shape[2, 256, 16, 17]</code>，源自FPN作为<code>extra_blocks</code>的<code>LastLevelMaxPool</code>。</li></ol><h4 id="regionproposalnetwork">RegionProposalNetwork</h4><p><code>RegionProposalNetwork</code>在<code>torchvision.models.detection.rpn</code>包中实现。</p><p><code>RegionProposalNetwork</code>的实现比较长，主要看<code>__init__</code>和<code>__forward__</code>就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RegionProposalNetwork</span>(torch.nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Implements Region Proposal Network (RPN).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        anchor_generator (AnchorGenerator): module that generates the anchors for a set of feature</span></span><br><span class="line"><span class="string">            maps.</span></span><br><span class="line"><span class="string">        head (nn.Module): module that computes the objectness and regression deltas</span></span><br><span class="line"><span class="string">        fg_iou_thresh (float): minimum IoU between the anchor and the GT box so that they can be</span></span><br><span class="line"><span class="string">            considered as positive during training of the RPN.</span></span><br><span class="line"><span class="string">        bg_iou_thresh (float): maximum IoU between the anchor and the GT box so that they can be</span></span><br><span class="line"><span class="string">            considered as negative during training of the RPN.</span></span><br><span class="line"><span class="string">        batch_size_per_image (int): number of anchors that are sampled during training of the RPN</span></span><br><span class="line"><span class="string">            for computing the loss</span></span><br><span class="line"><span class="string">        positive_fraction (float): proportion of positive anchors in a mini-batch during training</span></span><br><span class="line"><span class="string">            of the RPN</span></span><br><span class="line"><span class="string">        pre_nms_top_n (Dict[int]): number of proposals to keep before applying NMS. It should</span></span><br><span class="line"><span class="string">            contain two fields: training and testing, to allow for different values depending</span></span><br><span class="line"><span class="string">            on training or evaluation</span></span><br><span class="line"><span class="string">        post_nms_top_n (Dict[int]): number of proposals to keep after applying NMS. It should</span></span><br><span class="line"><span class="string">            contain two fields: training and testing, to allow for different values depending</span></span><br><span class="line"><span class="string">            on training or evaluation</span></span><br><span class="line"><span class="string">        nms_thresh (float): NMS threshold used for postprocessing the RPN proposals</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    __annotations__ = &#123;</span><br><span class="line">        <span class="string">&#x27;box_coder&#x27;</span>: det_utils.BoxCoder,</span><br><span class="line">        <span class="string">&#x27;proposal_matcher&#x27;</span>: det_utils.Matcher,</span><br><span class="line">        <span class="string">&#x27;fg_bg_sampler&#x27;</span>: det_utils.BalancedPositiveNegativeSampler,</span><br><span class="line">        <span class="string">&#x27;pre_nms_top_n&#x27;</span>: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>],</span><br><span class="line">        <span class="string">&#x27;post_nms_top_n&#x27;</span>: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>],</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                 anchor_generator,</span></span><br><span class="line"><span class="params">                 head,</span></span><br><span class="line"><span class="params">                 <span class="comment">#</span></span></span><br><span class="line"><span class="params">                 fg_iou_thresh, bg_iou_thresh,</span></span><br><span class="line"><span class="params">                 batch_size_per_image, positive_fraction,</span></span><br><span class="line"><span class="params">                 <span class="comment">#</span></span></span><br><span class="line"><span class="params">                 pre_nms_top_n, post_nms_top_n, nms_thresh</span>):</span><br><span class="line">        <span class="built_in">super</span>(RegionProposalNetwork, self).__init__()</span><br><span class="line">        self.anchor_generator = anchor_generator</span><br><span class="line">        self.head = head</span><br><span class="line">        self.box_coder = det_utils.BoxCoder(weights=(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># used during training</span></span><br><span class="line">        self.box_similarity = box_ops.box_iou</span><br><span class="line"></span><br><span class="line">        self.proposal_matcher = det_utils.Matcher(</span><br><span class="line">            fg_iou_thresh,</span><br><span class="line">            bg_iou_thresh,</span><br><span class="line">            allow_low_quality_matches=<span class="literal">True</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.fg_bg_sampler = det_utils.BalancedPositiveNegativeSampler(</span><br><span class="line">            batch_size_per_image, positive_fraction</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># used during testing</span></span><br><span class="line">        self._pre_nms_top_n = pre_nms_top_n</span><br><span class="line">        self._post_nms_top_n = post_nms_top_n</span><br><span class="line">        self.nms_thresh = nms_thresh</span><br><span class="line">        self.min_size = <span class="number">1e-3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pre_nms_top_n</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.training:</span><br><span class="line">            <span class="keyword">return</span> self._pre_nms_top_n[<span class="string">&#x27;training&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> self._pre_nms_top_n[<span class="string">&#x27;testing&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post_nms_top_n</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.training:</span><br><span class="line">            <span class="keyword">return</span> self._post_nms_top_n[<span class="string">&#x27;training&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> self._post_nms_top_n[<span class="string">&#x27;testing&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">assign_targets_to_anchors</span>(<span class="params">self, anchors, targets</span>):</span><br><span class="line">        <span class="comment"># type: (<span class="type">List</span>[Tensor], <span class="type">List</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]]) -&gt; <span class="type">Tuple</span>[<span class="type">List</span>[Tensor], <span class="type">List</span>[Tensor]]</span></span><br><span class="line">        labels = []</span><br><span class="line">        matched_gt_boxes = []</span><br><span class="line">        <span class="keyword">for</span> anchors_per_image, targets_per_image <span class="keyword">in</span> <span class="built_in">zip</span>(anchors, targets):</span><br><span class="line">            gt_boxes = targets_per_image[<span class="string">&quot;boxes&quot;</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> gt_boxes.numel() == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># Background image (negative example)</span></span><br><span class="line">                device = anchors_per_image.device</span><br><span class="line">                matched_gt_boxes_per_image = torch.zeros(anchors_per_image.shape, dtype=torch.float32, device=device)</span><br><span class="line">                labels_per_image = torch.zeros((anchors_per_image.shape[<span class="number">0</span>],), dtype=torch.float32, device=device)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                match_quality_matrix = self.box_similarity(gt_boxes, anchors_per_image)</span><br><span class="line">                matched_idxs = self.proposal_matcher(match_quality_matrix)</span><br><span class="line">                <span class="comment"># get the targets corresponding GT for each proposal</span></span><br><span class="line">                <span class="comment"># NB: need to clamp the indices because we can have a single</span></span><br><span class="line">                <span class="comment"># GT in the image, and matched_idxs can be -2, which goes</span></span><br><span class="line">                <span class="comment"># out of bounds</span></span><br><span class="line">                matched_gt_boxes_per_image = gt_boxes[matched_idxs.clamp(<span class="built_in">min</span>=<span class="number">0</span>)]</span><br><span class="line"></span><br><span class="line">                labels_per_image = matched_idxs &gt;= <span class="number">0</span></span><br><span class="line">                labels_per_image = labels_per_image.to(dtype=torch.float32)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Background (negative examples)</span></span><br><span class="line">                bg_indices = matched_idxs == self.proposal_matcher.BELOW_LOW_THRESHOLD</span><br><span class="line">                labels_per_image[bg_indices] = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># discard indices that are between thresholds</span></span><br><span class="line">                inds_to_discard = matched_idxs == self.proposal_matcher.BETWEEN_THRESHOLDS</span><br><span class="line">                labels_per_image[inds_to_discard] = -<span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">            labels.append(labels_per_image)</span><br><span class="line">            matched_gt_boxes.append(matched_gt_boxes_per_image)</span><br><span class="line">        <span class="keyword">return</span> labels, matched_gt_boxes</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_top_n_idx</span>(<span class="params">self, objectness, num_anchors_per_level</span>):</span><br><span class="line">        <span class="comment"># type: (Tensor, <span class="type">List</span>[<span class="built_in">int</span>]) -&gt; Tensor</span></span><br><span class="line">        r = []</span><br><span class="line">        offset = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ob <span class="keyword">in</span> objectness.split(num_anchors_per_level, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> torchvision._is_tracing():</span><br><span class="line">                num_anchors, pre_nms_top_n = _onnx_get_num_anchors_and_pre_nms_top_n(ob, self.pre_nms_top_n())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num_anchors = ob.shape[<span class="number">1</span>]</span><br><span class="line">                pre_nms_top_n = <span class="built_in">min</span>(self.pre_nms_top_n(), num_anchors)</span><br><span class="line">            _, top_n_idx = ob.topk(pre_nms_top_n, dim=<span class="number">1</span>)</span><br><span class="line">            r.append(top_n_idx + offset)</span><br><span class="line">            offset += num_anchors</span><br><span class="line">        <span class="keyword">return</span> torch.cat(r, dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">filter_proposals</span>(<span class="params">self, proposals, objectness, image_shapes, num_anchors_per_level</span>):</span><br><span class="line">        <span class="comment"># type: (Tensor, Tensor, <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]], <span class="type">List</span>[<span class="built_in">int</span>]) -&gt; <span class="type">Tuple</span>[<span class="type">List</span>[Tensor], <span class="type">List</span>[Tensor]]</span></span><br><span class="line">        num_images = proposals.shape[<span class="number">0</span>]</span><br><span class="line">        device = proposals.device</span><br><span class="line">        <span class="comment"># do not backprop throught objectness</span></span><br><span class="line">        objectness = objectness.detach()</span><br><span class="line">        objectness = objectness.reshape(num_images, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        levels = [</span><br><span class="line">            torch.full((n,), idx, dtype=torch.int64, device=device)</span><br><span class="line">            <span class="keyword">for</span> idx, n <span class="keyword">in</span> <span class="built_in">enumerate</span>(num_anchors_per_level)</span><br><span class="line">        ]</span><br><span class="line">        levels = torch.cat(levels, <span class="number">0</span>)</span><br><span class="line">        levels = levels.reshape(<span class="number">1</span>, -<span class="number">1</span>).expand_as(objectness)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># select top_n boxes independently per level before applying nms</span></span><br><span class="line">        top_n_idx = self._get_top_n_idx(objectness, num_anchors_per_level)</span><br><span class="line"></span><br><span class="line">        image_range = torch.arange(num_images, device=device)</span><br><span class="line">        batch_idx = image_range[:, <span class="literal">None</span>]</span><br><span class="line"></span><br><span class="line">        objectness = objectness[batch_idx, top_n_idx]</span><br><span class="line">        levels = levels[batch_idx, top_n_idx]</span><br><span class="line">        proposals = proposals[batch_idx, top_n_idx]</span><br><span class="line"></span><br><span class="line">        final_boxes = []</span><br><span class="line">        final_scores = []</span><br><span class="line">        <span class="keyword">for</span> boxes, scores, lvl, img_shape <span class="keyword">in</span> <span class="built_in">zip</span>(proposals, objectness, levels, image_shapes):</span><br><span class="line">            boxes = box_ops.clip_boxes_to_image(boxes, img_shape)</span><br><span class="line">            keep = box_ops.remove_small_boxes(boxes, self.min_size)</span><br><span class="line">            boxes, scores, lvl = boxes[keep], scores[keep], lvl[keep]</span><br><span class="line">            <span class="comment"># non-maximum suppression, independently done per level</span></span><br><span class="line">            keep = box_ops.batched_nms(boxes, scores, lvl, self.nms_thresh)</span><br><span class="line">            <span class="comment"># keep only topk scoring predictions</span></span><br><span class="line">            keep = keep[:self.post_nms_top_n()]</span><br><span class="line">            boxes, scores = boxes[keep], scores[keep]</span><br><span class="line">            final_boxes.append(boxes)</span><br><span class="line">            final_scores.append(scores)</span><br><span class="line">        <span class="keyword">return</span> final_boxes, final_scores</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute_loss</span>(<span class="params">self, objectness, pred_bbox_deltas, labels, regression_targets</span>):</span><br><span class="line">        <span class="comment"># type: (Tensor, Tensor, <span class="type">List</span>[Tensor], <span class="type">List</span>[Tensor]) -&gt; <span class="type">Tuple</span>[Tensor, Tensor]</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Arguments:</span></span><br><span class="line"><span class="string">            objectness (Tensor)</span></span><br><span class="line"><span class="string">            pred_bbox_deltas (Tensor)</span></span><br><span class="line"><span class="string">            labels (List[Tensor])</span></span><br><span class="line"><span class="string">            regression_targets (List[Tensor])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            objectness_loss (Tensor)</span></span><br><span class="line"><span class="string">            box_loss (Tensor)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        sampled_pos_inds, sampled_neg_inds = self.fg_bg_sampler(labels)</span><br><span class="line">        sampled_pos_inds = torch.where(torch.cat(sampled_pos_inds, dim=<span class="number">0</span>))[<span class="number">0</span>]</span><br><span class="line">        sampled_neg_inds = torch.where(torch.cat(sampled_neg_inds, dim=<span class="number">0</span>))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        sampled_inds = torch.cat([sampled_pos_inds, sampled_neg_inds], dim=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        objectness = objectness.flatten()</span><br><span class="line"></span><br><span class="line">        labels = torch.cat(labels, dim=<span class="number">0</span>)</span><br><span class="line">        regression_targets = torch.cat(regression_targets, dim=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        box_loss = det_utils.smooth_l1_loss(</span><br><span class="line">            pred_bbox_deltas[sampled_pos_inds],</span><br><span class="line">            regression_targets[sampled_pos_inds],</span><br><span class="line">            beta=<span class="number">1</span> / <span class="number">9</span>,</span><br><span class="line">            size_average=<span class="literal">False</span>,</span><br><span class="line">        ) / (sampled_inds.numel())</span><br><span class="line"></span><br><span class="line">        objectness_loss = F.binary_cross_entropy_with_logits(</span><br><span class="line">            objectness[sampled_inds], labels[sampled_inds]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> objectness_loss, box_loss</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                images,       <span class="comment"># type: ImageList</span></span></span><br><span class="line"><span class="params">                features,     <span class="comment"># type: Dict[str, Tensor]</span></span></span><br><span class="line"><span class="params">                targets=<span class="literal">None</span>  <span class="comment"># type: Optional[List[Dict[str, Tensor]]]</span></span></span><br><span class="line"><span class="params">                </span>):</span><br><span class="line">        <span class="comment"># type: (...) -&gt; <span class="type">Tuple</span>[<span class="type">List</span>[Tensor], <span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]]</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Arguments:</span></span><br><span class="line"><span class="string">            images (ImageList): images for which we want to compute the predictions</span></span><br><span class="line"><span class="string">            features (OrderedDict[Tensor]): features computed from the images that are</span></span><br><span class="line"><span class="string">                used for computing the predictions. Each tensor in the list</span></span><br><span class="line"><span class="string">                correspond to different feature levels</span></span><br><span class="line"><span class="string">            targets (List[Dict[Tensor]]): ground-truth boxes present in the image (optional).</span></span><br><span class="line"><span class="string">                If provided, each element in the dict should contain a field `boxes`,</span></span><br><span class="line"><span class="string">                with the locations of the ground-truth boxes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            boxes (List[Tensor]): the predicted boxes from the RPN, one Tensor per</span></span><br><span class="line"><span class="string">                image.</span></span><br><span class="line"><span class="string">            losses (Dict[Tensor]): the losses for the model during training. During</span></span><br><span class="line"><span class="string">                testing, it is an empty dict.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># RPN uses all feature maps that are available</span></span><br><span class="line">        features = <span class="built_in">list</span>(features.values())</span><br><span class="line">        objectness, pred_bbox_deltas = self.head(features)</span><br><span class="line">        anchors = self.anchor_generator(images, features)</span><br><span class="line"></span><br><span class="line">        num_images = <span class="built_in">len</span>(anchors)</span><br><span class="line">        num_anchors_per_level_shape_tensors = [o[<span class="number">0</span>].shape <span class="keyword">for</span> o <span class="keyword">in</span> objectness]</span><br><span class="line">        num_anchors_per_level = [s[<span class="number">0</span>] * s[<span class="number">1</span>] * s[<span class="number">2</span>] <span class="keyword">for</span> s <span class="keyword">in</span> num_anchors_per_level_shape_tensors]</span><br><span class="line">        objectness, pred_bbox_deltas = \</span><br><span class="line">            concat_box_prediction_layers(objectness, pred_bbox_deltas)</span><br><span class="line">        <span class="comment"># apply pred_bbox_deltas to anchors to obtain the decoded proposals</span></span><br><span class="line">        <span class="comment"># note that we detach the deltas because Faster R-CNN do not backprop through</span></span><br><span class="line">        <span class="comment"># the proposals</span></span><br><span class="line">        proposals = self.box_coder.decode(pred_bbox_deltas.detach(), anchors)</span><br><span class="line">        proposals = proposals.view(num_images, -<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">        boxes, scores = self.filter_proposals(proposals, objectness, images.image_sizes, num_anchors_per_level)</span><br><span class="line"></span><br><span class="line">        losses = &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> self.training:</span><br><span class="line">            <span class="keyword">assert</span> targets <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">            labels, matched_gt_boxes = self.assign_targets_to_anchors(anchors, targets)</span><br><span class="line">            regression_targets = self.box_coder.encode(matched_gt_boxes, anchors)</span><br><span class="line">            loss_objectness, loss_rpn_box_reg = self.compute_loss(</span><br><span class="line">                objectness, pred_bbox_deltas, labels, regression_targets)</span><br><span class="line">            losses = &#123;</span><br><span class="line">                <span class="string">&quot;loss_objectness&quot;</span>: loss_objectness,</span><br><span class="line">                <span class="string">&quot;loss_rpn_box_reg&quot;</span>: loss_rpn_box_reg,</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> boxes, losses</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要看<code>__forward__</code>中的计算流，RPN的完整过程</p><ol type="1"><li>把输入的特征features输入到RPNHead（<code>self.head</code>）中，输出object/non-object分类分值（<code>objectness</code>）和bbox回归数值（<code>pred_bbox_deltas</code>）；</li><li><code>self.anchor_generator</code>为当前输入的图像和featuremap生成<code>anchors</code>；</li><li><code>self.box_coder.decode</code>把bbox回归数值<code>pred_bbox_deltas</code>算到锚框<code>anchors</code>上，得到预测出的候选框<code>proposals</code>；</li><li>计算出的<code>proposals</code>可能很多且相互密集重叠，那么就通过<code>self.filter_proposals</code>做一遍过滤，输出候选框<code>proposals</code>和与之对应的分值<code>scores</code>；</li><li>如果是训练时，当然在RPN阶段需要根据预测出的<code>proposals</code>与候选框真值之间的误差来计算损失。</li></ol><h5 id="anchorgenerator">AnchorGenerator</h5><p><code>AnchorGenerator</code>在<code>torchvision.models.detection.anchor_utils</code>中实现，其作用是根据预定义的anchor的sizes和aspect_ratios，针对图像到featuremap的尺寸比例，计算feature map对应的anchors。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnchorGenerator</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Module that generates anchors for a set of feature maps and</span></span><br><span class="line"><span class="string">    image sizes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The module support computing anchors at multiple sizes and aspect ratios</span></span><br><span class="line"><span class="string">    per feature map. This module assumes aspect ratio = height / width for</span></span><br><span class="line"><span class="string">    each anchor.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    sizes and aspect_ratios should have the same number of elements, and it should</span></span><br><span class="line"><span class="string">    correspond to the number of feature maps.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    sizes[i] and aspect_ratios[i] can have an arbitrary number of elements,</span></span><br><span class="line"><span class="string">    and AnchorGenerator will output a set of sizes[i] * aspect_ratios[i] anchors</span></span><br><span class="line"><span class="string">    per spatial location for feature map i.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        sizes (Tuple[Tuple[int]]):</span></span><br><span class="line"><span class="string">        aspect_ratios (Tuple[Tuple[float]]):</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    __annotations__ = &#123;</span><br><span class="line">        <span class="string">&quot;cell_anchors&quot;</span>: <span class="type">Optional</span>[<span class="type">List</span>[torch.Tensor]],</span><br><span class="line">        <span class="string">&quot;_cache&quot;</span>: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">List</span>[torch.Tensor]]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        sizes=(<span class="params">(<span class="params"><span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span></span>),</span>),</span></span><br><span class="line"><span class="params">        aspect_ratios=(<span class="params">(<span class="params"><span class="number">0.5</span>, <span class="number">1.0</span>, <span class="number">2.0</span></span>),</span>),</span></span><br><span class="line"><span class="params">    </span>):</span><br><span class="line">        <span class="built_in">super</span>(AnchorGenerator, self).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(sizes[<span class="number">0</span>], (<span class="built_in">list</span>, <span class="built_in">tuple</span>)):</span><br><span class="line">            <span class="comment"># TODO change this</span></span><br><span class="line">            sizes = <span class="built_in">tuple</span>((s,) <span class="keyword">for</span> s <span class="keyword">in</span> sizes)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(aspect_ratios[<span class="number">0</span>], (<span class="built_in">list</span>, <span class="built_in">tuple</span>)):</span><br><span class="line">            aspect_ratios = (aspect_ratios,) * <span class="built_in">len</span>(sizes)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(sizes) == <span class="built_in">len</span>(aspect_ratios)</span><br><span class="line"></span><br><span class="line">        self.sizes = sizes</span><br><span class="line">        self.aspect_ratios = aspect_ratios</span><br><span class="line">        self.cell_anchors = <span class="literal">None</span></span><br><span class="line">        self._cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> https://github.com/pytorch/pytorch/issues/26792</span></span><br><span class="line">    <span class="comment"># For every (aspect_ratios, scales) combination, output a zero-centered anchor with those values.</span></span><br><span class="line">    <span class="comment"># (scales, aspect_ratios) are usually an element of zip(self.scales, self.aspect_ratios)</span></span><br><span class="line">    <span class="comment"># This method assumes aspect ratio = height / width for an anchor.</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">generate_anchors</span>(<span class="params">self, scales, aspect_ratios, dtype=torch.float32, device=<span class="string">&quot;cpu&quot;</span></span>):</span><br><span class="line">        <span class="comment"># type: (<span class="type">List</span>[<span class="built_in">int</span>], <span class="type">List</span>[<span class="built_in">float</span>], <span class="built_in">int</span>, Device) -&gt; Tensor  # noqa: F821</span></span><br><span class="line">        scales = torch.as_tensor(scales, dtype=dtype, device=device)</span><br><span class="line">        aspect_ratios = torch.as_tensor(aspect_ratios, dtype=dtype, device=device)</span><br><span class="line">        h_ratios = torch.sqrt(aspect_ratios)</span><br><span class="line">        w_ratios = <span class="number">1</span> / h_ratios</span><br><span class="line"></span><br><span class="line">        ws = (w_ratios[:, <span class="literal">None</span>] * scales[<span class="literal">None</span>, :]).view(-<span class="number">1</span>)</span><br><span class="line">        hs = (h_ratios[:, <span class="literal">None</span>] * scales[<span class="literal">None</span>, :]).view(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        base_anchors = torch.stack([-ws, -hs, ws, hs], dim=<span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> base_anchors.<span class="built_in">round</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_cell_anchors</span>(<span class="params">self, dtype, device</span>):</span><br><span class="line">        <span class="comment"># type: (<span class="built_in">int</span>, Device) -&gt; <span class="literal">None</span>  # noqa: F821</span></span><br><span class="line">        <span class="keyword">if</span> self.cell_anchors <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            cell_anchors = self.cell_anchors</span><br><span class="line">            <span class="keyword">assert</span> cell_anchors <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">            <span class="comment"># suppose that all anchors have the same device</span></span><br><span class="line">            <span class="comment"># which is a valid assumption in the current state of the codebase</span></span><br><span class="line">            <span class="keyword">if</span> cell_anchors[<span class="number">0</span>].device == device:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        cell_anchors = [</span><br><span class="line">            self.generate_anchors(</span><br><span class="line">                sizes,</span><br><span class="line">                aspect_ratios,</span><br><span class="line">                dtype,</span><br><span class="line">                device</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">for</span> sizes, aspect_ratios <span class="keyword">in</span> <span class="built_in">zip</span>(self.sizes, self.aspect_ratios)</span><br><span class="line">        ]</span><br><span class="line">        self.cell_anchors = cell_anchors</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">num_anchors_per_location</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">len</span>(s) * <span class="built_in">len</span>(a) <span class="keyword">for</span> s, a <span class="keyword">in</span> <span class="built_in">zip</span>(self.sizes, self.aspect_ratios)]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># For every combination of (a, (g, s), i) in (self.cell_anchors, zip(grid_sizes, strides), 0:2),</span></span><br><span class="line">    <span class="comment"># output g[i] anchors that are s[i] distance apart in direction i, with the same dimensions as a.</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">grid_anchors</span>(<span class="params">self, grid_sizes, strides</span>):</span><br><span class="line">        <span class="comment"># type: (<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], <span class="type">List</span>[<span class="type">List</span>[Tensor]]) -&gt; <span class="type">List</span>[Tensor]</span></span><br><span class="line">        anchors = []</span><br><span class="line">        cell_anchors = self.cell_anchors</span><br><span class="line">        <span class="keyword">assert</span> cell_anchors <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(grid_sizes) == <span class="built_in">len</span>(strides) == <span class="built_in">len</span>(cell_anchors)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> size, stride, base_anchors <span class="keyword">in</span> <span class="built_in">zip</span>(</span><br><span class="line">            grid_sizes, strides, cell_anchors</span><br><span class="line">        ):</span><br><span class="line">            grid_height, grid_width = size</span><br><span class="line">            stride_height, stride_width = stride</span><br><span class="line">            device = base_anchors.device</span><br><span class="line"></span><br><span class="line">            <span class="comment"># For output anchor, compute [x_center, y_center, x_center, y_center]</span></span><br><span class="line">            shifts_x = torch.arange(</span><br><span class="line">                <span class="number">0</span>, grid_width, dtype=torch.float32, device=device</span><br><span class="line">            ) * stride_width</span><br><span class="line">            shifts_y = torch.arange(</span><br><span class="line">                <span class="number">0</span>, grid_height, dtype=torch.float32, device=device</span><br><span class="line">            ) * stride_height</span><br><span class="line">            shift_y, shift_x = torch.meshgrid(shifts_y, shifts_x)</span><br><span class="line">            shift_x = shift_x.reshape(-<span class="number">1</span>)</span><br><span class="line">            shift_y = shift_y.reshape(-<span class="number">1</span>)</span><br><span class="line">            shifts = torch.stack((shift_x, shift_y, shift_x, shift_y), dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># For every (base anchor, output anchor) pair,</span></span><br><span class="line">            <span class="comment"># offset each zero-centered base anchor by the center of the output anchor.</span></span><br><span class="line">            anchors.append(</span><br><span class="line">                (shifts.view(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>) + base_anchors.view(<span class="number">1</span>, -<span class="number">1</span>, <span class="number">4</span>)).reshape(-<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> anchors</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cached_grid_anchors</span>(<span class="params">self, grid_sizes, strides</span>):</span><br><span class="line">        <span class="comment"># type: (<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], <span class="type">List</span>[<span class="type">List</span>[Tensor]]) -&gt; <span class="type">List</span>[Tensor]</span></span><br><span class="line">        key = <span class="built_in">str</span>(grid_sizes) + <span class="built_in">str</span>(strides)</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self._cache:</span><br><span class="line">            <span class="keyword">return</span> self._cache[key]</span><br><span class="line">        anchors = self.grid_anchors(grid_sizes, strides)</span><br><span class="line">        self._cache[key] = anchors</span><br><span class="line">        <span class="keyword">return</span> anchors</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, image_list, feature_maps</span>):</span><br><span class="line">        <span class="comment"># type: (ImageList, <span class="type">List</span>[Tensor]) -&gt; <span class="type">List</span>[Tensor]</span></span><br><span class="line">        grid_sizes = <span class="built_in">list</span>([feature_map.shape[-<span class="number">2</span>:] <span class="keyword">for</span> feature_map <span class="keyword">in</span> feature_maps])</span><br><span class="line">        image_size = image_list.tensors.shape[-<span class="number">2</span>:]</span><br><span class="line">        dtype, device = feature_maps[<span class="number">0</span>].dtype, feature_maps[<span class="number">0</span>].device</span><br><span class="line">        strides = [[torch.tensor(image_size[<span class="number">0</span>] // g[<span class="number">0</span>], dtype=torch.int64, device=device),</span><br><span class="line">                    torch.tensor(image_size[<span class="number">1</span>] // g[<span class="number">1</span>], dtype=torch.int64, device=device)] <span class="keyword">for</span> g <span class="keyword">in</span> grid_sizes]</span><br><span class="line">        self.set_cell_anchors(dtype, device)</span><br><span class="line">        anchors_over_all_feature_maps = self.cached_grid_anchors(grid_sizes, strides)</span><br><span class="line">        anchors = torch.jit.annotate(<span class="type">List</span>[<span class="type">List</span>[torch.Tensor]], [])</span><br><span class="line">        <span class="keyword">for</span> i, (image_height, image_width) <span class="keyword">in</span> <span class="built_in">enumerate</span>(image_list.image_sizes):</span><br><span class="line">            anchors_in_image = []</span><br><span class="line">            <span class="keyword">for</span> anchors_per_feature_map <span class="keyword">in</span> anchors_over_all_feature_maps:</span><br><span class="line">                anchors_in_image.append(anchors_per_feature_map)</span><br><span class="line">            anchors.append(anchors_in_image)</span><br><span class="line">        anchors = [torch.cat(anchors_per_image) <span class="keyword">for</span> anchors_per_image <span class="keyword">in</span> anchors]</span><br><span class="line">        <span class="comment"># Clear the cache in case that memory leaks.</span></span><br><span class="line">        self._cache.clear()</span><br><span class="line">        <span class="keyword">return</span> anchors</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这部分代码也有点长，主要原理也还是看<code>__forward__</code>计算流即可，这里面有一系列预备的计算，随后就是两层的for循环，表示：每一个图片可以传入<spanclass="math inline">\(n\)</span>个（尺寸不同的）featuremap，每一个feature map上都有<spanclass="math inline">\(k_i\)</span>个anchor，那么每个图片就有<spanclass="math inline">\(K = \sum_{i=1}^{n}k_i\)</span>个anchors。其中，每个滑窗位置上有<spanclass="math inline">\(A\)</span>个anchor，第<spanclass="math inline">\(i\)</span>个feature map上有<spanclass="math inline">\(L_i\)</span>个滑窗位置，则该层feature map上有<spanclass="math inline">\(k_i = A L_i\)</span>个anchors。</p><p>两层循环，外层遍历images，内层遍历featuremaps，由此输出所有图片的feature map上的anchors。</p><p>在具体实现中，AnchorGenerator：</p><ol type="1"><li><code>self.set_cell_anchors</code>函数负责为每一层featuremap生成<code>self.cell_anchors</code>，这个CellAnchors的尺寸基于的是输入图片tensor的尺寸，；</li><li><code>self.cached_grid_anchors</code>函数内会进一步调用<code>self.grid_anchors</code>函数，该函数负责根据featuremap的网格尺寸以及该featuremap相较于输入图片tensor的步长，计算出<code>anchors_over_all_feature_maps</code>，它的尺寸则是基于输入图片tensor的尺寸。</li><li>双重for循环，输入<spanclass="math inline">\(N\)</span>个图片，就相应地将anchors复制出<spanclass="math inline">\(N\)</span>份。</li><li>最后<code>torch.cat</code>拉平每个图片上不同feature map上的所有<spanclass="math inline">\(K\)</span>个anchors，形成一个长度为<spanclass="math inline">\(N\)</span>的list，每个元素是<spanclass="math inline">\(K \times 4\)</span>的anchors张量。</li></ol><p>对应到例子，<code>torchvision</code>实现默认为：</p><ol type="1"><li>3种aspect ratio，分别为0.5, 1.0, 2.0；</li><li>每层feature map对应1个scale，5层feature map分别为16, 32, 64, 128,256。</li></ol><p>因此，<code>cell_anchors</code>中，每层feature map都是3个anchorcells：</p><ol type="1"><li><code>'0'</code>: shape[3, 4]</li><li><code>'1'</code>: shape[3, 4]</li><li><code>'2'</code>: shape[3, 4]</li><li><code>'3'</code>: shape[3, 4]</li><li><code>'4'</code>: shape[3, 4]</li></ol><p>结合例子来算，把<code>cell_anchors</code>算到输入图像张量的每一个滑窗位置上，就可以算出所有位置上的所有<code>anchors_over_all_feature_maps</code>：</p><ol type="1"><li><code>'0'</code>: shape[208896, 4]，<spanclass="math inline">\(208896 = 256 \times 272 \times 3\)</span>；</li><li><code>'1'</code>: shape[52224, 4]，<span class="math inline">\(52224= 128 \times 136 \times 3\)</span>；</li><li><code>'2'</code>: shape[13056, 4]，<span class="math inline">\(13056= 64 \times 68 \times 3\)</span>；</li><li><code>'3'</code>: shape[3264, 4]，<span class="math inline">\(3264 =32 \times 34 \times 3\)</span>；</li><li><code>'4'</code>: shape[816, 4]，<span class="math inline">\(816 =16 \times 17 \times 3\)</span>；</li></ol><p>最后返回的<code>anchors</code>会为输入的每个图片复制一份，并通过<code>torch.cat</code>拉平：</p><ol type="1"><li>shape[278256, 4], <span class="math inline">\(278256 = 208896 +52224 + 13056 + 3264 + 816\)</span>；</li><li>shape[278256, 4], <span class="math inline">\(278256 = 208896 +52224 + 13056 + 3264 + 816\)</span>；</li></ol><h5 id="rpnhead">RPNHead</h5><p><code>RPNHead</code>在<code>torchvision.models.detection.rpn</code>包中实现。RPNHead被用于以滑窗的形式在特征提取出的featuremap上滑动并计算每个anchor的bbox回归值和object/non-object二分类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RPNHead</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Adds a simple RPN Head with classification and regression heads</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        in_channels (int): number of channels of the input feature</span></span><br><span class="line"><span class="string">        num_anchors (int): number of anchors to be predicted</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, num_anchors</span>):</span><br><span class="line">        <span class="built_in">super</span>(RPNHead, self).__init__()</span><br><span class="line">        self.conv = nn.Conv2d(</span><br><span class="line">            in_channels, in_channels, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        self.cls_logits = nn.Conv2d(in_channels, num_anchors, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span>)</span><br><span class="line">        self.bbox_pred = nn.Conv2d(</span><br><span class="line">            in_channels, num_anchors * <span class="number">4</span>, kernel_size=<span class="number">1</span>, stride=<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> layer <span class="keyword">in</span> self.children():</span><br><span class="line">            torch.nn.init.normal_(layer.weight, std=<span class="number">0.01</span>)</span><br><span class="line">            torch.nn.init.constant_(layer.bias, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># type: (<span class="type">List</span>[Tensor]) -&gt; <span class="type">Tuple</span>[<span class="type">List</span>[Tensor], <span class="type">List</span>[Tensor]]</span></span><br><span class="line">        logits = []</span><br><span class="line">        bbox_reg = []</span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> x:</span><br><span class="line">            t = F.relu(self.conv(feature))</span><br><span class="line">            logits.append(self.cls_logits(t))</span><br><span class="line">            bbox_reg.append(self.bbox_pred(t))</span><br><span class="line">        <span class="keyword">return</span> logits, bbox_reg</span><br></pre></td></tr></table></figure><p>可以看到，RPNHead的结构不复杂，就是三个卷积：</p><ol type="1"><li><code>self.conv</code>：3×3卷积，对输入的featuremap做卷积处理；</li><li><code>self.cls_logits</code>：1×1卷积，对处理后的feature map <spanclass="math inline">\(t\)</span>做卷积，取得object/non-object的分类数值；</li><li><code>self.bbox_reg</code>：1×1卷积，对处理后的feature map <spanclass="math inline">\(t\)</span>做卷积，取得bbox坐标值的回归数值。</li></ol><p>在<code>forward</code>前向传播计算的时候，输入的x是一个<code>List[Tensor]</code>，即FPN的输出。值得注意的是，<code>for</code>循环遍历的并不是每一张图片，而是FPN输出的每一层特征。</p><p>在本例中，RPNHead的两个卷积分支输出了两个<code>List[Tensor]</code>：</p><p><code>logits</code> (<code>objectness</code>):</p><ol type="1"><li><code>'0'</code>: shape[2, 3, 252, 272]；</li><li><code>'1'</code>: shape[2, 3, 128, 136]；</li><li><code>'2'</code>: shape[2, 3, 64, 68]；</li><li><code>'3'</code>: shape[2, 3, 32, 34]；</li><li><code>'4'</code>: shape[2, 3, 16, 17]；</li></ol><p><code>bbox_regs</code> (<code>pred_bbox_deltas</code>):</p><ol type="1"><li><code>'0'</code>: shape[2, 12, 252, 272]；</li><li><code>'1'</code>: shape[2, 12, 128, 136]；</li><li><code>'2'</code>: shape[2, 12, 64, 68]；</li><li><code>'3'</code>: shape[2, 12, 32, 34]；</li><li><code>'4'</code>: shape[2, 12, 16, 17]；</li></ol><p>因为每个滑窗位置对应三种<code>ratios</code>，即3个anchors，所以<code>logits</code>是3个值，而<code>bbox_regs</code>因为坐标乘4，所以是12个值。</p><h5 id="boxcoder">BoxCoder</h5><p><code>BoxCoder</code>在<code>torchvision.models.detection._utils</code>中实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BoxCoder</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This class encodes and decodes a set of bounding boxes into</span></span><br><span class="line"><span class="string">    the representation used for training the regressors.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, weights, bbox_xform_clip=math.log(<span class="params"><span class="number">1000.</span> / <span class="number">16</span></span>)</span>):</span><br><span class="line">        <span class="comment"># type: (<span class="type">Tuple</span>[<span class="built_in">float</span>, <span class="built_in">float</span>, <span class="built_in">float</span>, <span class="built_in">float</span>], <span class="built_in">float</span>) -&gt; <span class="literal">None</span></span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Arguments:</span></span><br><span class="line"><span class="string">            weights (4-element tuple)</span></span><br><span class="line"><span class="string">            bbox_xform_clip (float)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.weights = weights</span><br><span class="line">        self.bbox_xform_clip = bbox_xform_clip</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">self, reference_boxes, proposals</span>):</span><br><span class="line">        <span class="comment"># type: (<span class="type">List</span>[Tensor], <span class="type">List</span>[Tensor]) -&gt; <span class="type">List</span>[Tensor]</span></span><br><span class="line">        boxes_per_image = [<span class="built_in">len</span>(b) <span class="keyword">for</span> b <span class="keyword">in</span> reference_boxes]</span><br><span class="line">        reference_boxes = torch.cat(reference_boxes, dim=<span class="number">0</span>)</span><br><span class="line">        proposals = torch.cat(proposals, dim=<span class="number">0</span>)</span><br><span class="line">        targets = self.encode_single(reference_boxes, proposals)</span><br><span class="line">        <span class="keyword">return</span> targets.split(boxes_per_image, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode_single</span>(<span class="params">self, reference_boxes, proposals</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Encode a set of proposals with respect to some</span></span><br><span class="line"><span class="string">        reference boxes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Arguments:</span></span><br><span class="line"><span class="string">            reference_boxes (Tensor): reference boxes</span></span><br><span class="line"><span class="string">            proposals (Tensor): boxes to be encoded</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        dtype = reference_boxes.dtype</span><br><span class="line">        device = reference_boxes.device</span><br><span class="line">        weights = torch.as_tensor(self.weights, dtype=dtype, device=device)</span><br><span class="line">        targets = encode_boxes(reference_boxes, proposals, weights)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> targets</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">self, rel_codes, boxes</span>):</span><br><span class="line">        <span class="comment"># type: (Tensor, <span class="type">List</span>[Tensor]) -&gt; Tensor</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">isinstance</span>(boxes, (<span class="built_in">list</span>, <span class="built_in">tuple</span>))</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">isinstance</span>(rel_codes, torch.Tensor)</span><br><span class="line">        boxes_per_image = [b.size(<span class="number">0</span>) <span class="keyword">for</span> b <span class="keyword">in</span> boxes]</span><br><span class="line">        concat_boxes = torch.cat(boxes, dim=<span class="number">0</span>)</span><br><span class="line">        box_sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> boxes_per_image:</span><br><span class="line">            box_sum += val</span><br><span class="line">        pred_boxes = self.decode_single(</span><br><span class="line">            rel_codes.reshape(box_sum, -<span class="number">1</span>), concat_boxes</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> pred_boxes.reshape(box_sum, -<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decode_single</span>(<span class="params">self, rel_codes, boxes</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        From a set of original boxes and encoded relative box offsets,</span></span><br><span class="line"><span class="string">        get the decoded boxes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Arguments:</span></span><br><span class="line"><span class="string">            rel_codes (Tensor): encoded boxes</span></span><br><span class="line"><span class="string">            boxes (Tensor): reference boxes.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        boxes = boxes.to(rel_codes.dtype)</span><br><span class="line"></span><br><span class="line">        widths = boxes[:, <span class="number">2</span>] - boxes[:, <span class="number">0</span>]</span><br><span class="line">        heights = boxes[:, <span class="number">3</span>] - boxes[:, <span class="number">1</span>]</span><br><span class="line">        ctr_x = boxes[:, <span class="number">0</span>] + <span class="number">0.5</span> * widths</span><br><span class="line">        ctr_y = boxes[:, <span class="number">1</span>] + <span class="number">0.5</span> * heights</span><br><span class="line"></span><br><span class="line">        wx, wy, ww, wh = self.weights</span><br><span class="line">        dx = rel_codes[:, <span class="number">0</span>::<span class="number">4</span>] / wx</span><br><span class="line">        dy = rel_codes[:, <span class="number">1</span>::<span class="number">4</span>] / wy</span><br><span class="line">        dw = rel_codes[:, <span class="number">2</span>::<span class="number">4</span>] / ww</span><br><span class="line">        dh = rel_codes[:, <span class="number">3</span>::<span class="number">4</span>] / wh</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Prevent sending too large values into torch.exp()</span></span><br><span class="line">        dw = torch.clamp(dw, <span class="built_in">max</span>=self.bbox_xform_clip)</span><br><span class="line">        dh = torch.clamp(dh, <span class="built_in">max</span>=self.bbox_xform_clip)</span><br><span class="line"></span><br><span class="line">        pred_ctr_x = dx * widths[:, <span class="literal">None</span>] + ctr_x[:, <span class="literal">None</span>]</span><br><span class="line">        pred_ctr_y = dy * heights[:, <span class="literal">None</span>] + ctr_y[:, <span class="literal">None</span>]</span><br><span class="line">        pred_w = torch.exp(dw) * widths[:, <span class="literal">None</span>]</span><br><span class="line">        pred_h = torch.exp(dh) * heights[:, <span class="literal">None</span>]</span><br><span class="line"></span><br><span class="line">        pred_boxes1 = pred_ctr_x - torch.tensor(<span class="number">0.5</span>, dtype=pred_ctr_x.dtype, device=pred_w.device) * pred_w</span><br><span class="line">        pred_boxes2 = pred_ctr_y - torch.tensor(<span class="number">0.5</span>, dtype=pred_ctr_y.dtype, device=pred_h.device) * pred_h</span><br><span class="line">        pred_boxes3 = pred_ctr_x + torch.tensor(<span class="number">0.5</span>, dtype=pred_ctr_x.dtype, device=pred_w.device) * pred_w</span><br><span class="line">        pred_boxes4 = pred_ctr_y + torch.tensor(<span class="number">0.5</span>, dtype=pred_ctr_y.dtype, device=pred_h.device) * pred_h</span><br><span class="line">        pred_boxes = torch.stack((pred_boxes1, pred_boxes2, pred_boxes3, pred_boxes4), dim=<span class="number">2</span>).flatten(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> pred_boxes</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>RPN中<code>self.box_coder</code>使用BoxCoder作为bbox的编解码器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proposals = self.box_coder.decode(pred_bbox_deltas.detach(), anchors)</span><br></pre></td></tr></table></figure><p>通过BoxCoder实例，将RPNHead回归出的<code>pred_bbox_deltas</code>与RPN的锚框<code>anchors</code>做解码计算，把回归出的偏移值加到基准anchors位置上，解码输出候选框<code>proposals</code>。</p><p>在本例中，RPN的<code>forward</code>对解码出的原始<code>proposals</code>做了维度整理<code>proposals = proposals.view(num_images, -1, 4)</code>，得到的<code>proposals</code>是：</p><ul><li>shape[2, 278256, 4]</li></ul><h5 id="filter_proposals">filter_proposals</h5><p><code>filter_proposals</code>是一个对RPNHead生成的候选框<code>proposals</code>的过滤操作，在RPN类<code>RegionProposalNetwork</code>中作为成员函数实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RegionProposalNetwork</span>(torch.nn.Module):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_proposals</span>(<span class="params">self, proposals, objectness, image_shapes, num_anchors_per_level</span>):</span><br><span class="line">        <span class="comment"># type: (Tensor, Tensor, <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]], <span class="type">List</span>[<span class="built_in">int</span>]) -&gt; <span class="type">Tuple</span>[<span class="type">List</span>[Tensor], <span class="type">List</span>[Tensor]]</span></span><br><span class="line">        num_images = proposals.shape[<span class="number">0</span>]</span><br><span class="line">        device = proposals.device</span><br><span class="line">        <span class="comment"># do not backprop throught objectness</span></span><br><span class="line">        objectness = objectness.detach()</span><br><span class="line">        objectness = objectness.reshape(num_images, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        levels = [</span><br><span class="line">            torch.full((n,), idx, dtype=torch.int64, device=device)</span><br><span class="line">            <span class="keyword">for</span> idx, n <span class="keyword">in</span> <span class="built_in">enumerate</span>(num_anchors_per_level)</span><br><span class="line">        ]</span><br><span class="line">        levels = torch.cat(levels, <span class="number">0</span>)</span><br><span class="line">        levels = levels.reshape(<span class="number">1</span>, -<span class="number">1</span>).expand_as(objectness)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># select top_n boxes independently per level before applying nms</span></span><br><span class="line">        top_n_idx = self._get_top_n_idx(objectness, num_anchors_per_level)</span><br><span class="line"></span><br><span class="line">        image_range = torch.arange(num_images, device=device)</span><br><span class="line">        batch_idx = image_range[:, <span class="literal">None</span>]</span><br><span class="line"></span><br><span class="line">        objectness = objectness[batch_idx, top_n_idx]</span><br><span class="line">        levels = levels[batch_idx, top_n_idx]</span><br><span class="line">        proposals = proposals[batch_idx, top_n_idx]</span><br><span class="line"></span><br><span class="line">        final_boxes = []</span><br><span class="line">        final_scores = []</span><br><span class="line">        <span class="keyword">for</span> boxes, scores, lvl, img_shape <span class="keyword">in</span> <span class="built_in">zip</span>(proposals, objectness, levels, image_shapes):</span><br><span class="line">            boxes = box_ops.clip_boxes_to_image(boxes, img_shape)</span><br><span class="line">            keep = box_ops.remove_small_boxes(boxes, self.min_size)</span><br><span class="line">            boxes, scores, lvl = boxes[keep], scores[keep], lvl[keep]</span><br><span class="line">            <span class="comment"># non-maximum suppression, independently done per level</span></span><br><span class="line">            keep = box_ops.batched_nms(boxes, scores, lvl, self.nms_thresh)</span><br><span class="line">            <span class="comment"># keep only topk scoring predictions</span></span><br><span class="line">            keep = keep[:self.post_nms_top_n()]</span><br><span class="line">            boxes, scores = boxes[keep], scores[keep]</span><br><span class="line">            final_boxes.append(boxes)</span><br><span class="line">            final_scores.append(scores)</span><br><span class="line">        <span class="keyword">return</span> final_boxes, final_scores</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对<code>proposals</code>的过滤操作分几个阶段实现：</p><ol type="1"><li>首先，根据<code>objectness</code>分值和<code>num_anchors_per_level</code>来在每层选出<code>top_n_idx(pre_nms_top_n)</code>用于在NMS前先筛选一下<code>proposals</code>；</li><li>此后，进入for循环，遍历batch中的每张图片，<ol type="1"><li>先做一些裁边界、去小框的处理；</li><li>然后再做（类间）NMS；</li><li>保留当前图片所有结果的<code>post_nms_top_n</code>的目标作为返回结果。</li></ol></li></ol><p>最后将这么多筛选操作筛选出的<code>final_boxes</code>和<code>final_scores</code>返回（<code>boxes</code>是筛选后的<code>proposals</code>，<code>scores</code>是筛选后的<code>objectness</code>）。</p><p>在本例中，有两张图片，每张图片上有278256个<code>anchors</code>，因此产生278256个<code>proposals</code>和<code>objectness</code>，进过筛选处理后：</p><ol type="1"><li><code>final_boxes</code>：<ol type="1"><li>shape[1000, 4]</li><li>shape[1000, 4]</li></ol></li><li><code>final_scores</code>:<ol type="1"><li>shape 1000</li><li>shape 1000</li></ol></li></ol><p>因为FasterRCNN中默认值<code>rpn_post_nms_top_n_test=1000</code>，所以在eval模式（即test,infer情况）下，例子中的两张图片都各筛选出了top-1000个boxes。</p><h4 id="roiheads">RoIHeads</h4><p><code>RoIHeads</code>在<code>torchvision.models.detection.roi_heads</code>包中实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RoIHeads</span>(torch.nn.Module):</span><br><span class="line">    __annotations__ = &#123;</span><br><span class="line">        <span class="string">&#x27;box_coder&#x27;</span>: det_utils.BoxCoder,</span><br><span class="line">        <span class="string">&#x27;proposal_matcher&#x27;</span>: det_utils.Matcher,</span><br><span class="line">        <span class="string">&#x27;fg_bg_sampler&#x27;</span>: det_utils.BalancedPositiveNegativeSampler,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                 box_roi_pool,</span></span><br><span class="line"><span class="params">                 box_head,</span></span><br><span class="line"><span class="params">                 box_predictor,</span></span><br><span class="line"><span class="params">                 <span class="comment"># Faster R-CNN training</span></span></span><br><span class="line"><span class="params">                 fg_iou_thresh, bg_iou_thresh,</span></span><br><span class="line"><span class="params">                 batch_size_per_image, positive_fraction,</span></span><br><span class="line"><span class="params">                 bbox_reg_weights,</span></span><br><span class="line"><span class="params">                 <span class="comment"># Faster R-CNN inference</span></span></span><br><span class="line"><span class="params">                 score_thresh,</span></span><br><span class="line"><span class="params">                 nms_thresh,</span></span><br><span class="line"><span class="params">                 detections_per_img,</span></span><br><span class="line"><span class="params">                 <span class="comment"># Mask</span></span></span><br><span class="line"><span class="params">                 mask_roi_pool=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 mask_head=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 mask_predictor=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 keypoint_roi_pool=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 keypoint_head=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 keypoint_predictor=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 </span>):</span><br><span class="line">        <span class="built_in">super</span>(RoIHeads, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.box_similarity = box_ops.box_iou</span><br><span class="line">        <span class="comment"># assign ground-truth boxes for each proposal</span></span><br><span class="line">        self.proposal_matcher = det_utils.Matcher(</span><br><span class="line">            fg_iou_thresh,</span><br><span class="line">            bg_iou_thresh,</span><br><span class="line">            allow_low_quality_matches=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        self.fg_bg_sampler = det_utils.BalancedPositiveNegativeSampler(</span><br><span class="line">            batch_size_per_image,</span><br><span class="line">            positive_fraction)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> bbox_reg_weights <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            bbox_reg_weights = (<span class="number">10.</span>, <span class="number">10.</span>, <span class="number">5.</span>, <span class="number">5.</span>)</span><br><span class="line">        self.box_coder = det_utils.BoxCoder(bbox_reg_weights)</span><br><span class="line"></span><br><span class="line">        self.box_roi_pool = box_roi_pool</span><br><span class="line">        self.box_head = box_head</span><br><span class="line">        self.box_predictor = box_predictor</span><br><span class="line"></span><br><span class="line">        self.score_thresh = score_thresh</span><br><span class="line">        self.nms_thresh = nms_thresh</span><br><span class="line">        self.detections_per_img = detections_per_img</span><br><span class="line"></span><br><span class="line">        self.mask_roi_pool = mask_roi_pool</span><br><span class="line">        self.mask_head = mask_head</span><br><span class="line">        self.mask_predictor = mask_predictor</span><br><span class="line"></span><br><span class="line">        self.keypoint_roi_pool = keypoint_roi_pool</span><br><span class="line">        self.keypoint_head = keypoint_head</span><br><span class="line">        self.keypoint_predictor = keypoint_predictor</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_mask</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.mask_roi_pool <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> self.mask_head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> self.mask_predictor <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_keypoint</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.keypoint_roi_pool <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> self.keypoint_head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> self.keypoint_predictor <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">assign_targets_to_proposals</span>(<span class="params">self, proposals, gt_boxes, gt_labels</span>):</span><br><span class="line">        <span class="comment"># type: (<span class="type">List</span>[Tensor], <span class="type">List</span>[Tensor], <span class="type">List</span>[Tensor]) -&gt; <span class="type">Tuple</span>[<span class="type">List</span>[Tensor], <span class="type">List</span>[Tensor]]</span></span><br><span class="line">        matched_idxs = []</span><br><span class="line">        labels = []</span><br><span class="line">        <span class="keyword">for</span> proposals_in_image, gt_boxes_in_image, gt_labels_in_image <span class="keyword">in</span> <span class="built_in">zip</span>(proposals, gt_boxes, gt_labels):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> gt_boxes_in_image.numel() == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># Background image</span></span><br><span class="line">                device = proposals_in_image.device</span><br><span class="line">                clamped_matched_idxs_in_image = torch.zeros(</span><br><span class="line">                    (proposals_in_image.shape[<span class="number">0</span>],), dtype=torch.int64, device=device</span><br><span class="line">                )</span><br><span class="line">                labels_in_image = torch.zeros(</span><br><span class="line">                    (proposals_in_image.shape[<span class="number">0</span>],), dtype=torch.int64, device=device</span><br><span class="line">                )</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment">#  set to self.box_similarity when https://github.com/pytorch/pytorch/issues/27495 lands</span></span><br><span class="line">                match_quality_matrix = box_ops.box_iou(gt_boxes_in_image, proposals_in_image)</span><br><span class="line">                matched_idxs_in_image = self.proposal_matcher(match_quality_matrix)</span><br><span class="line"></span><br><span class="line">                clamped_matched_idxs_in_image = matched_idxs_in_image.clamp(<span class="built_in">min</span>=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">                labels_in_image = gt_labels_in_image[clamped_matched_idxs_in_image]</span><br><span class="line">                labels_in_image = labels_in_image.to(dtype=torch.int64)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># Label background (below the low threshold)</span></span><br><span class="line">                bg_inds = matched_idxs_in_image == self.proposal_matcher.BELOW_LOW_THRESHOLD</span><br><span class="line">                labels_in_image[bg_inds] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># Label ignore proposals (between low and high thresholds)</span></span><br><span class="line">                ignore_inds = matched_idxs_in_image == self.proposal_matcher.BETWEEN_THRESHOLDS</span><br><span class="line">                labels_in_image[ignore_inds] = -<span class="number">1</span>  <span class="comment"># -1 is ignored by sampler</span></span><br><span class="line"></span><br><span class="line">            matched_idxs.append(clamped_matched_idxs_in_image)</span><br><span class="line">            labels.append(labels_in_image)</span><br><span class="line">        <span class="keyword">return</span> matched_idxs, labels</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">subsample</span>(<span class="params">self, labels</span>):</span><br><span class="line">        <span class="comment"># type: (<span class="type">List</span>[Tensor]) -&gt; <span class="type">List</span>[Tensor]</span></span><br><span class="line">        sampled_pos_inds, sampled_neg_inds = self.fg_bg_sampler(labels)</span><br><span class="line">        sampled_inds = []</span><br><span class="line">        <span class="keyword">for</span> img_idx, (pos_inds_img, neg_inds_img) <span class="keyword">in</span> <span class="built_in">enumerate</span>(</span><br><span class="line">            <span class="built_in">zip</span>(sampled_pos_inds, sampled_neg_inds)</span><br><span class="line">        ):</span><br><span class="line">            img_sampled_inds = torch.where(pos_inds_img | neg_inds_img)[<span class="number">0</span>]</span><br><span class="line">            sampled_inds.append(img_sampled_inds)</span><br><span class="line">        <span class="keyword">return</span> sampled_inds</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_gt_proposals</span>(<span class="params">self, proposals, gt_boxes</span>):</span><br><span class="line">        <span class="comment"># type: (<span class="type">List</span>[Tensor], <span class="type">List</span>[Tensor]) -&gt; <span class="type">List</span>[Tensor]</span></span><br><span class="line">        proposals = [</span><br><span class="line">            torch.cat((proposal, gt_box))</span><br><span class="line">            <span class="keyword">for</span> proposal, gt_box <span class="keyword">in</span> <span class="built_in">zip</span>(proposals, gt_boxes)</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proposals</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_targets</span>(<span class="params">self, targets</span>):</span><br><span class="line">        <span class="comment"># type: (<span class="type">Optional</span>[<span class="type">List</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]]]) -&gt; <span class="literal">None</span></span></span><br><span class="line">        <span class="keyword">assert</span> targets <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">all</span>([<span class="string">&quot;boxes&quot;</span> <span class="keyword">in</span> t <span class="keyword">for</span> t <span class="keyword">in</span> targets])</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">all</span>([<span class="string">&quot;labels&quot;</span> <span class="keyword">in</span> t <span class="keyword">for</span> t <span class="keyword">in</span> targets])</span><br><span class="line">        <span class="keyword">if</span> self.has_mask():</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">all</span>([<span class="string">&quot;masks&quot;</span> <span class="keyword">in</span> t <span class="keyword">for</span> t <span class="keyword">in</span> targets])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_training_samples</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                                proposals,  <span class="comment"># type: List[Tensor]</span></span></span><br><span class="line"><span class="params">                                targets     <span class="comment"># type: Optional[List[Dict[str, Tensor]]]</span></span></span><br><span class="line"><span class="params">                                </span>):</span><br><span class="line">        <span class="comment"># type: (...) -&gt; <span class="type">Tuple</span>[<span class="type">List</span>[Tensor], <span class="type">List</span>[Tensor], <span class="type">List</span>[Tensor], <span class="type">List</span>[Tensor]]</span></span><br><span class="line">        self.check_targets(targets)</span><br><span class="line">        <span class="keyword">assert</span> targets <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">        dtype = proposals[<span class="number">0</span>].dtype</span><br><span class="line">        device = proposals[<span class="number">0</span>].device</span><br><span class="line"></span><br><span class="line">        gt_boxes = [t[<span class="string">&quot;boxes&quot;</span>].to(dtype) <span class="keyword">for</span> t <span class="keyword">in</span> targets]</span><br><span class="line">        gt_labels = [t[<span class="string">&quot;labels&quot;</span>] <span class="keyword">for</span> t <span class="keyword">in</span> targets]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># append ground-truth bboxes to propos</span></span><br><span class="line">        proposals = self.add_gt_proposals(proposals, gt_boxes)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># get matching gt indices for each proposal</span></span><br><span class="line">        matched_idxs, labels = self.assign_targets_to_proposals(proposals, gt_boxes, gt_labels)</span><br><span class="line">        <span class="comment"># sample a fixed proportion of positive-negative proposals</span></span><br><span class="line">        sampled_inds = self.subsample(labels)</span><br><span class="line">        matched_gt_boxes = []</span><br><span class="line">        num_images = <span class="built_in">len</span>(proposals)</span><br><span class="line">        <span class="keyword">for</span> img_id <span class="keyword">in</span> <span class="built_in">range</span>(num_images):</span><br><span class="line">            img_sampled_inds = sampled_inds[img_id]</span><br><span class="line">            proposals[img_id] = proposals[img_id][img_sampled_inds]</span><br><span class="line">            labels[img_id] = labels[img_id][img_sampled_inds]</span><br><span class="line">            matched_idxs[img_id] = matched_idxs[img_id][img_sampled_inds]</span><br><span class="line"></span><br><span class="line">            gt_boxes_in_image = gt_boxes[img_id]</span><br><span class="line">            <span class="keyword">if</span> gt_boxes_in_image.numel() == <span class="number">0</span>:</span><br><span class="line">                gt_boxes_in_image = torch.zeros((<span class="number">1</span>, <span class="number">4</span>), dtype=dtype, device=device)</span><br><span class="line">            matched_gt_boxes.append(gt_boxes_in_image[matched_idxs[img_id]])</span><br><span class="line"></span><br><span class="line">        regression_targets = self.box_coder.encode(matched_gt_boxes, proposals)</span><br><span class="line">        <span class="keyword">return</span> proposals, matched_idxs, labels, regression_targets</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">postprocess_detections</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                               class_logits,    <span class="comment"># type: Tensor</span></span></span><br><span class="line"><span class="params">                               box_regression,  <span class="comment"># type: Tensor</span></span></span><br><span class="line"><span class="params">                               proposals,       <span class="comment"># type: List[Tensor]</span></span></span><br><span class="line"><span class="params">                               image_shapes     <span class="comment"># type: List[Tuple[int, int]]</span></span></span><br><span class="line"><span class="params">                               </span>):</span><br><span class="line">        <span class="comment"># type: (...) -&gt; <span class="type">Tuple</span>[<span class="type">List</span>[Tensor], <span class="type">List</span>[Tensor], <span class="type">List</span>[Tensor]]</span></span><br><span class="line">        device = class_logits.device</span><br><span class="line">        num_classes = class_logits.shape[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        boxes_per_image = [boxes_in_image.shape[<span class="number">0</span>] <span class="keyword">for</span> boxes_in_image <span class="keyword">in</span> proposals]</span><br><span class="line">        pred_boxes = self.box_coder.decode(box_regression, proposals)</span><br><span class="line"></span><br><span class="line">        pred_scores = F.softmax(class_logits, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        pred_boxes_list = pred_boxes.split(boxes_per_image, <span class="number">0</span>)</span><br><span class="line">        pred_scores_list = pred_scores.split(boxes_per_image, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        all_boxes = []</span><br><span class="line">        all_scores = []</span><br><span class="line">        all_labels = []</span><br><span class="line">        <span class="keyword">for</span> boxes, scores, image_shape <span class="keyword">in</span> <span class="built_in">zip</span>(pred_boxes_list, pred_scores_list, image_shapes):</span><br><span class="line">            boxes = box_ops.clip_boxes_to_image(boxes, image_shape)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># create labels for each prediction</span></span><br><span class="line">            labels = torch.arange(num_classes, device=device)</span><br><span class="line">            labels = labels.view(<span class="number">1</span>, -<span class="number">1</span>).expand_as(scores)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># remove predictions with the background label</span></span><br><span class="line">            boxes = boxes[:, <span class="number">1</span>:]</span><br><span class="line">            scores = scores[:, <span class="number">1</span>:]</span><br><span class="line">            labels = labels[:, <span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># batch everything, by making every class prediction be a separate instance</span></span><br><span class="line">            boxes = boxes.reshape(-<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">            scores = scores.reshape(-<span class="number">1</span>)</span><br><span class="line">            labels = labels.reshape(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># remove low scoring boxes</span></span><br><span class="line">            inds = torch.where(scores &gt; self.score_thresh)[<span class="number">0</span>]</span><br><span class="line">            boxes, scores, labels = boxes[inds], scores[inds], labels[inds]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># remove empty boxes</span></span><br><span class="line">            keep = box_ops.remove_small_boxes(boxes, min_size=<span class="number">1e-2</span>)</span><br><span class="line">            boxes, scores, labels = boxes[keep], scores[keep], labels[keep]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># non-maximum suppression, independently done per class</span></span><br><span class="line">            keep = box_ops.batched_nms(boxes, scores, labels, self.nms_thresh)</span><br><span class="line">            <span class="comment"># keep only topk scoring predictions</span></span><br><span class="line">            keep = keep[:self.detections_per_img]</span><br><span class="line">            boxes, scores, labels = boxes[keep], scores[keep], labels[keep]</span><br><span class="line"></span><br><span class="line">            all_boxes.append(boxes)</span><br><span class="line">            all_scores.append(scores)</span><br><span class="line">            all_labels.append(labels)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> all_boxes, all_scores, all_labels</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                features,      <span class="comment"># type: Dict[str, Tensor]</span></span></span><br><span class="line"><span class="params">                proposals,     <span class="comment"># type: List[Tensor]</span></span></span><br><span class="line"><span class="params">                image_shapes,  <span class="comment"># type: List[Tuple[int, int]]</span></span></span><br><span class="line"><span class="params">                targets=<span class="literal">None</span>   <span class="comment"># type: Optional[List[Dict[str, Tensor]]]</span></span></span><br><span class="line"><span class="params">                </span>):</span><br><span class="line">        <span class="comment"># type: (...) -&gt; <span class="type">Tuple</span>[<span class="type">List</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]], <span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]]</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Arguments:</span></span><br><span class="line"><span class="string">            features (List[Tensor])</span></span><br><span class="line"><span class="string">            proposals (List[Tensor[N, 4]])</span></span><br><span class="line"><span class="string">            image_shapes (List[Tuple[H, W]])</span></span><br><span class="line"><span class="string">            targets (List[Dict])</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> targets <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">for</span> t <span class="keyword">in</span> targets:</span><br><span class="line">                <span class="comment"># <span class="doctag">TODO:</span> https://github.com/pytorch/pytorch/issues/26731</span></span><br><span class="line">                floating_point_types = (torch.<span class="built_in">float</span>, torch.double, torch.half)</span><br><span class="line">                <span class="keyword">assert</span> t[<span class="string">&quot;boxes&quot;</span>].dtype <span class="keyword">in</span> floating_point_types, <span class="string">&#x27;target boxes must of float type&#x27;</span></span><br><span class="line">                <span class="keyword">assert</span> t[<span class="string">&quot;labels&quot;</span>].dtype == torch.int64, <span class="string">&#x27;target labels must of int64 type&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> self.has_keypoint():</span><br><span class="line">                    <span class="keyword">assert</span> t[<span class="string">&quot;keypoints&quot;</span>].dtype == torch.float32, <span class="string">&#x27;target keypoints must of float type&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.training:</span><br><span class="line">            proposals, matched_idxs, labels, regression_targets = self.select_training_samples(proposals, targets)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            labels = <span class="literal">None</span></span><br><span class="line">            regression_targets = <span class="literal">None</span></span><br><span class="line">            matched_idxs = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        box_features = self.box_roi_pool(features, proposals, image_shapes)</span><br><span class="line">        box_features = self.box_head(box_features)</span><br><span class="line">        class_logits, box_regression = self.box_predictor(box_features)</span><br><span class="line"></span><br><span class="line">        result = torch.jit.annotate(<span class="type">List</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, torch.Tensor]], [])</span><br><span class="line">        losses = &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> self.training:</span><br><span class="line">            <span class="keyword">assert</span> labels <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> regression_targets <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">            loss_classifier, loss_box_reg = fastrcnn_loss(</span><br><span class="line">                class_logits, box_regression, labels, regression_targets)</span><br><span class="line">            losses = &#123;</span><br><span class="line">                <span class="string">&quot;loss_classifier&quot;</span>: loss_classifier,</span><br><span class="line">                <span class="string">&quot;loss_box_reg&quot;</span>: loss_box_reg</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            boxes, scores, labels = self.postprocess_detections(class_logits, box_regression, proposals, image_shapes)</span><br><span class="line">            num_images = <span class="built_in">len</span>(boxes)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_images):</span><br><span class="line">                result.append(</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">&quot;boxes&quot;</span>: boxes[i],</span><br><span class="line">                        <span class="string">&quot;labels&quot;</span>: labels[i],</span><br><span class="line">                        <span class="string">&quot;scores&quot;</span>: scores[i],</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.has_mask():</span><br><span class="line">            mask_proposals = [p[<span class="string">&quot;boxes&quot;</span>] <span class="keyword">for</span> p <span class="keyword">in</span> result]</span><br><span class="line">            <span class="keyword">if</span> self.training:</span><br><span class="line">                <span class="keyword">assert</span> matched_idxs <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">                <span class="comment"># during training, only focus on positive boxes</span></span><br><span class="line">                num_images = <span class="built_in">len</span>(proposals)</span><br><span class="line">                mask_proposals = []</span><br><span class="line">                pos_matched_idxs = []</span><br><span class="line">                <span class="keyword">for</span> img_id <span class="keyword">in</span> <span class="built_in">range</span>(num_images):</span><br><span class="line">                    pos = torch.where(labels[img_id] &gt; <span class="number">0</span>)[<span class="number">0</span>]</span><br><span class="line">                    mask_proposals.append(proposals[img_id][pos])</span><br><span class="line">                    pos_matched_idxs.append(matched_idxs[img_id][pos])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pos_matched_idxs = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.mask_roi_pool <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                mask_features = self.mask_roi_pool(features, mask_proposals, image_shapes)</span><br><span class="line">                mask_features = self.mask_head(mask_features)</span><br><span class="line">                mask_logits = self.mask_predictor(mask_features)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                mask_logits = torch.tensor(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">&quot;Expected mask_roi_pool to be not None&quot;</span>)</span><br><span class="line"></span><br><span class="line">            loss_mask = &#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> self.training:</span><br><span class="line">                <span class="keyword">assert</span> targets <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">                <span class="keyword">assert</span> pos_matched_idxs <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">                <span class="keyword">assert</span> mask_logits <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">                gt_masks = [t[<span class="string">&quot;masks&quot;</span>] <span class="keyword">for</span> t <span class="keyword">in</span> targets]</span><br><span class="line">                gt_labels = [t[<span class="string">&quot;labels&quot;</span>] <span class="keyword">for</span> t <span class="keyword">in</span> targets]</span><br><span class="line">                rcnn_loss_mask = maskrcnn_loss(</span><br><span class="line">                    mask_logits, mask_proposals,</span><br><span class="line">                    gt_masks, gt_labels, pos_matched_idxs)</span><br><span class="line">                loss_mask = &#123;</span><br><span class="line">                    <span class="string">&quot;loss_mask&quot;</span>: rcnn_loss_mask</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                labels = [r[<span class="string">&quot;labels&quot;</span>] <span class="keyword">for</span> r <span class="keyword">in</span> result]</span><br><span class="line">                masks_probs = maskrcnn_inference(mask_logits, labels)</span><br><span class="line">                <span class="keyword">for</span> mask_prob, r <span class="keyword">in</span> <span class="built_in">zip</span>(masks_probs, result):</span><br><span class="line">                    r[<span class="string">&quot;masks&quot;</span>] = mask_prob</span><br><span class="line"></span><br><span class="line">            losses.update(loss_mask)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># keep none checks in if conditional so torchscript will conditionally</span></span><br><span class="line">        <span class="comment"># compile each branch</span></span><br><span class="line">        <span class="keyword">if</span> self.keypoint_roi_pool <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> self.keypoint_head <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> \</span><br><span class="line">                <span class="keyword">and</span> self.keypoint_predictor <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            keypoint_proposals = [p[<span class="string">&quot;boxes&quot;</span>] <span class="keyword">for</span> p <span class="keyword">in</span> result]</span><br><span class="line">            <span class="keyword">if</span> self.training:</span><br><span class="line">                <span class="comment"># during training, only focus on positive boxes</span></span><br><span class="line">                num_images = <span class="built_in">len</span>(proposals)</span><br><span class="line">                keypoint_proposals = []</span><br><span class="line">                pos_matched_idxs = []</span><br><span class="line">                <span class="keyword">assert</span> matched_idxs <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">                <span class="keyword">for</span> img_id <span class="keyword">in</span> <span class="built_in">range</span>(num_images):</span><br><span class="line">                    pos = torch.where(labels[img_id] &gt; <span class="number">0</span>)[<span class="number">0</span>]</span><br><span class="line">                    keypoint_proposals.append(proposals[img_id][pos])</span><br><span class="line">                    pos_matched_idxs.append(matched_idxs[img_id][pos])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pos_matched_idxs = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">            keypoint_features = self.keypoint_roi_pool(features, keypoint_proposals, image_shapes)</span><br><span class="line">            keypoint_features = self.keypoint_head(keypoint_features)</span><br><span class="line">            keypoint_logits = self.keypoint_predictor(keypoint_features)</span><br><span class="line"></span><br><span class="line">            loss_keypoint = &#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> self.training:</span><br><span class="line">                <span class="keyword">assert</span> targets <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">                <span class="keyword">assert</span> pos_matched_idxs <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">                gt_keypoints = [t[<span class="string">&quot;keypoints&quot;</span>] <span class="keyword">for</span> t <span class="keyword">in</span> targets]</span><br><span class="line">                rcnn_loss_keypoint = keypointrcnn_loss(</span><br><span class="line">                    keypoint_logits, keypoint_proposals,</span><br><span class="line">                    gt_keypoints, pos_matched_idxs)</span><br><span class="line">                loss_keypoint = &#123;</span><br><span class="line">                    <span class="string">&quot;loss_keypoint&quot;</span>: rcnn_loss_keypoint</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">assert</span> keypoint_logits <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">                <span class="keyword">assert</span> keypoint_proposals <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">                keypoints_probs, kp_scores = keypointrcnn_inference(keypoint_logits, keypoint_proposals)</span><br><span class="line">                <span class="keyword">for</span> keypoint_prob, kps, r <span class="keyword">in</span> <span class="built_in">zip</span>(keypoints_probs, kp_scores, result):</span><br><span class="line">                    r[<span class="string">&quot;keypoints&quot;</span>] = keypoint_prob</span><br><span class="line">                    r[<span class="string">&quot;keypoints_scores&quot;</span>] = kps</span><br><span class="line"></span><br><span class="line">            losses.update(loss_keypoint)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result, losses</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要看<code>__forward__</code>函数的实现，虽然很长，但是如果只考虑FasterR-CNN需要的部分（不考虑用于MaskR-CNN的图像分割分支），其实可以概括为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">            features,      <span class="comment"># type: Dict[str, Tensor]</span></span></span><br><span class="line"><span class="params">            proposals,     <span class="comment"># type: List[Tensor]</span></span></span><br><span class="line"><span class="params">            image_shapes,  <span class="comment"># type: List[Tuple[int, int]]</span></span></span><br><span class="line"><span class="params">            targets=<span class="literal">None</span>   <span class="comment"># type: Optional[List[Dict[str, Tensor]]]</span></span></span><br><span class="line"><span class="params">            </span>):</span><br><span class="line">    <span class="comment"># 1. RoI Pool (or RoI Align)</span></span><br><span class="line">    box_features = self.box_roi_pool(features, proposals, image_shapes)</span><br><span class="line">    <span class="comment"># 2. MLP Head</span></span><br><span class="line">    box_features = self.box_head(box_features)</span><br><span class="line">    <span class="comment"># 3. Predictor</span></span><br><span class="line">    class_logits, box_regression = self.box_predictor(box_features)</span><br><span class="line"></span><br><span class="line">    result = torch.jit.annotate(<span class="type">List</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, torch.Tensor]], [])</span><br><span class="line">    losses = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> self.training:</span><br><span class="line">        <span class="keyword">assert</span> labels <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> regression_targets <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">        loss_classifier, loss_box_reg = fastrcnn_loss(</span><br><span class="line">            class_logits, box_regression, labels, regression_targets)</span><br><span class="line">        losses = &#123;</span><br><span class="line">            <span class="string">&quot;loss_classifier&quot;</span>: loss_classifier,</span><br><span class="line">            <span class="string">&quot;loss_box_reg&quot;</span>: loss_box_reg</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 4. Postprocess Detections</span></span><br><span class="line">        boxes, scores, labels = self.postprocess_detections(class_logits, box_regression, proposals, image_shapes)</span><br><span class="line">        num_images = <span class="built_in">len</span>(boxes)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_images):</span><br><span class="line">            result.append(</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;boxes&quot;</span>: boxes[i],</span><br><span class="line">                    <span class="string">&quot;labels&quot;</span>: labels[i],</span><br><span class="line">                    <span class="string">&quot;scores&quot;</span>: scores[i],</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result, losses</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Faster R-CNN的RoIHeads主要包含几个步骤：</p><ol type="1"><li>RoIPool：由<code>box_features = self.box_roi_pool(features, proposals, image_shapes)</code>执行，FasterR-CNN的RoIPool的具体实现是<code>torchvision.ops.poolers</code>包中的<code>MultiScaleRoIAlign</code>类。因为目标的形状不尽相同，所以涉及到的特征窗口就不尽相同。RoIPool的目的在于通过把尺寸不定的RoIwindow划分为固定的网格做池化，来把输入的变长的RoI特征池化为定长的特征输出，方便后续的特征处理。</li><li>MLPHead：由<code>box_features = self.box_head(box_features)</code>执行，FasterR-CNN的MLPHead的具体实现是<code>torchvision.models.detection.faster_rcnn</code>中的<code>TwoMLPHead</code>类。MLPHead承接RoIPool池化出的定长特征向量，并通过MLP做非线性计算，输出最终特征用于后续的任务（分类、回归等）。</li><li>Predictor：由<code>class_logits, box_regression = self.box_predictor(box_features)</code>执行，FasterR-CNN的Predictor的具体实现是<code>torchvision.models.detection.faster_rcnn</code>中的<code>FastRCNNPredictor</code>类。上一步MLP操作输出的特征作为最后的特征，交给Predictor去做具体任务的预测，例如：目标分类，bbox位置和尺寸值的回归预测。</li><li>PostprocessDetections：由<code>boxes, scores, labels = self.postprocess_detections(class_logits, box_regression, proposals, image_shapes)</code>，该函数是RoIHeads类的一个成员函数。</li></ol><h5 id="multiscaleroialign">MultiScaleRoIAlign</h5><p><code>torchvision</code>采用<code>torchvision.ops.poolers</code>包中的<code>MultiScaleRoIAlign</code>作为FasterR-CNN的RoI Pool的实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MultiScaleRoIAlign</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Multi-scale RoIAlign pooling, which is useful for detection with or without FPN.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    It infers the scale of the pooling via the heuristics present in the FPN paper.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        featmap_names (List[str]): the names of the feature maps that will be used</span></span><br><span class="line"><span class="string">            for the pooling.</span></span><br><span class="line"><span class="string">        output_size (List[Tuple[int, int]] or List[int]): output size for the pooled region</span></span><br><span class="line"><span class="string">        sampling_ratio (int): sampling ratio for ROIAlign</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Examples::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; m = torchvision.ops.MultiScaleRoIAlign([&#x27;feat1&#x27;, &#x27;feat3&#x27;], 3, 2)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; i = OrderedDict()</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; i[&#x27;feat1&#x27;] = torch.rand(1, 5, 64, 64)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; i[&#x27;feat2&#x27;] = torch.rand(1, 5, 32, 32)  # this feature won&#x27;t be used in the pooling</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; i[&#x27;feat3&#x27;] = torch.rand(1, 5, 16, 16)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # create some random bounding boxes</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; boxes = torch.rand(6, 4) * 256; boxes[:, 2:] += boxes[:, :2]</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; # original image size, before computing the feature maps</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; image_sizes = [(512, 512)]</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; output = m(i, [boxes], image_sizes)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; print(output.shape)</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; torch.Size([6, 5, 3, 3])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    __annotations__ = &#123;</span><br><span class="line">        <span class="string">&#x27;scales&#x27;</span>: <span class="type">Optional</span>[<span class="type">List</span>[<span class="built_in">float</span>]],</span><br><span class="line">        <span class="string">&#x27;map_levels&#x27;</span>: <span class="type">Optional</span>[LevelMapper]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        featmap_names: <span class="type">List</span>[<span class="built_in">str</span>],</span></span><br><span class="line"><span class="params">        output_size: <span class="type">Union</span>[<span class="built_in">int</span>, <span class="type">Tuple</span>[<span class="built_in">int</span>], <span class="type">List</span>[<span class="built_in">int</span>]],</span></span><br><span class="line"><span class="params">        sampling_ratio: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    </span>):</span><br><span class="line">        <span class="built_in">super</span>(MultiScaleRoIAlign, self).__init__()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(output_size, <span class="built_in">int</span>):</span><br><span class="line">            output_size = (output_size, output_size)</span><br><span class="line">        self.featmap_names = featmap_names</span><br><span class="line">        self.sampling_ratio = sampling_ratio</span><br><span class="line">        self.output_size = <span class="built_in">tuple</span>(output_size)</span><br><span class="line">        self.scales = <span class="literal">None</span></span><br><span class="line">        self.map_levels = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">convert_to_roi_format</span>(<span class="params">self, boxes: <span class="type">List</span>[Tensor]</span>) -&gt; Tensor:</span><br><span class="line">        concat_boxes = torch.cat(boxes, dim=<span class="number">0</span>)</span><br><span class="line">        device, dtype = concat_boxes.device, concat_boxes.dtype</span><br><span class="line">        ids = torch.cat(</span><br><span class="line">            [</span><br><span class="line">                torch.full_like(b[:, :<span class="number">1</span>], i, dtype=dtype, layout=torch.strided, device=device)</span><br><span class="line">                <span class="keyword">for</span> i, b <span class="keyword">in</span> <span class="built_in">enumerate</span>(boxes)</span><br><span class="line">            ],</span><br><span class="line">            dim=<span class="number">0</span>,</span><br><span class="line">        )</span><br><span class="line">        rois = torch.cat([ids, concat_boxes], dim=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> rois</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">infer_scale</span>(<span class="params">self, feature: Tensor, original_size: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        <span class="comment"># assumption: the scale is of the form 2 ** (-k), with k integer</span></span><br><span class="line">        size = feature.shape[-<span class="number">2</span>:]</span><br><span class="line">        possible_scales = torch.jit.annotate(<span class="type">List</span>[<span class="built_in">float</span>], [])</span><br><span class="line">        <span class="keyword">for</span> s1, s2 <span class="keyword">in</span> <span class="built_in">zip</span>(size, original_size):</span><br><span class="line">            approx_scale = <span class="built_in">float</span>(s1) / <span class="built_in">float</span>(s2)</span><br><span class="line">            scale = <span class="number">2</span> ** <span class="built_in">float</span>(torch.tensor(approx_scale).log2().<span class="built_in">round</span>())</span><br><span class="line">            possible_scales.append(scale)</span><br><span class="line">        <span class="keyword">assert</span> possible_scales[<span class="number">0</span>] == possible_scales[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> possible_scales[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup_scales</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        features: <span class="type">List</span>[Tensor],</span></span><br><span class="line"><span class="params">        image_shapes: <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]],</span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(image_shapes) != <span class="number">0</span></span><br><span class="line">        max_x = <span class="number">0</span></span><br><span class="line">        max_y = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> shape <span class="keyword">in</span> image_shapes:</span><br><span class="line">            max_x = <span class="built_in">max</span>(shape[<span class="number">0</span>], max_x)</span><br><span class="line">            max_y = <span class="built_in">max</span>(shape[<span class="number">1</span>], max_y)</span><br><span class="line">        original_input_shape = (max_x, max_y)</span><br><span class="line"></span><br><span class="line">        scales = [self.infer_scale(feat, original_input_shape) <span class="keyword">for</span> feat <span class="keyword">in</span> features]</span><br><span class="line">        <span class="comment"># get the levels in the feature map by leveraging the fact that the network always</span></span><br><span class="line">        <span class="comment"># downsamples by a factor of 2 at each level.</span></span><br><span class="line">        lvl_min = -torch.log2(torch.tensor(scales[<span class="number">0</span>], dtype=torch.float32)).item()</span><br><span class="line">        lvl_max = -torch.log2(torch.tensor(scales[-<span class="number">1</span>], dtype=torch.float32)).item()</span><br><span class="line">        self.scales = scales</span><br><span class="line">        self.map_levels = initLevelMapper(<span class="built_in">int</span>(lvl_min), <span class="built_in">int</span>(lvl_max))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        x: <span class="type">Dict</span>[<span class="built_in">str</span>, Tensor],</span></span><br><span class="line"><span class="params">        boxes: <span class="type">List</span>[Tensor],</span></span><br><span class="line"><span class="params">        image_shapes: <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]],</span></span><br><span class="line"><span class="params">    </span>) -&gt; Tensor:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Arguments:</span></span><br><span class="line"><span class="string">            x (OrderedDict[Tensor]): feature maps for each level. They are assumed to have</span></span><br><span class="line"><span class="string">                all the same number of channels, but they can have different sizes.</span></span><br><span class="line"><span class="string">            boxes (List[Tensor[N, 4]]): boxes to be used to perform the pooling operation, in</span></span><br><span class="line"><span class="string">                (x1, y1, x2, y2) format and in the image reference size, not the feature map</span></span><br><span class="line"><span class="string">                reference.</span></span><br><span class="line"><span class="string">            image_shapes (List[Tuple[height, width]]): the sizes of each image before they</span></span><br><span class="line"><span class="string">                have been fed to a CNN to obtain feature maps. This allows us to infer the</span></span><br><span class="line"><span class="string">                scale factor for each one of the levels to be pooled.</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            result (Tensor)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        x_filtered = []</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> x.items():</span><br><span class="line">            <span class="keyword">if</span> k <span class="keyword">in</span> self.featmap_names:</span><br><span class="line">                x_filtered.append(v)</span><br><span class="line">        num_levels = <span class="built_in">len</span>(x_filtered)</span><br><span class="line">        rois = self.convert_to_roi_format(boxes)</span><br><span class="line">        <span class="keyword">if</span> self.scales <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.setup_scales(x_filtered, image_shapes)</span><br><span class="line"></span><br><span class="line">        scales = self.scales</span><br><span class="line">        <span class="keyword">assert</span> scales <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> num_levels == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> roi_align(</span><br><span class="line">                x_filtered[<span class="number">0</span>], rois,</span><br><span class="line">                output_size=self.output_size,</span><br><span class="line">                spatial_scale=scales[<span class="number">0</span>],</span><br><span class="line">                sampling_ratio=self.sampling_ratio</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        mapper = self.map_levels</span><br><span class="line">        <span class="keyword">assert</span> mapper <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        levels = mapper(boxes)</span><br><span class="line"></span><br><span class="line">        num_rois = <span class="built_in">len</span>(rois)</span><br><span class="line">        num_channels = x_filtered[<span class="number">0</span>].shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        dtype, device = x_filtered[<span class="number">0</span>].dtype, x_filtered[<span class="number">0</span>].device</span><br><span class="line">        result = torch.zeros(</span><br><span class="line">            (num_rois, num_channels,) + self.output_size,</span><br><span class="line">            dtype=dtype,</span><br><span class="line">            device=device,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        tracing_results = []</span><br><span class="line">        <span class="keyword">for</span> level, (per_level_feature, scale) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(x_filtered, scales)):</span><br><span class="line">            idx_in_level = torch.where(levels == level)[<span class="number">0</span>]</span><br><span class="line">            rois_per_level = rois[idx_in_level]</span><br><span class="line"></span><br><span class="line">            result_idx_in_level = roi_align(</span><br><span class="line">                per_level_feature, rois_per_level,</span><br><span class="line">                output_size=self.output_size,</span><br><span class="line">                spatial_scale=scale, sampling_ratio=self.sampling_ratio)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> torchvision._is_tracing():</span><br><span class="line">                tracing_results.append(result_idx_in_level.to(dtype))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># result and result_idx_in_level&#x27;s dtypes are based on dtypes of different</span></span><br><span class="line">                <span class="comment"># elements in x_filtered.  x_filtered contains tensors output by different</span></span><br><span class="line">                <span class="comment"># layers.  When autocast is active, it may choose different dtypes for</span></span><br><span class="line">                <span class="comment"># different layers&#x27; outputs.  Therefore, we defensively match result&#x27;s dtype</span></span><br><span class="line">                <span class="comment"># before copying elements from result_idx_in_level in the following op.</span></span><br><span class="line">                <span class="comment"># We need to cast manually (can&#x27;t rely on autocast to cast for us) because</span></span><br><span class="line">                <span class="comment"># the op acts on result in-place, and autocast only affects out-of-place ops.</span></span><br><span class="line">                result[idx_in_level] = result_idx_in_level.to(result.dtype)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> torchvision._is_tracing():</span><br><span class="line">            result = _onnx_merge_levels(levels, tracing_results)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实际上Faster R-CNN论文发表时并没有RoI Align技术，当时仍然沿用的是FastR-CNN中的RoI Pool。RoIPool指的是对RoI内的特征做池化，取得一个小的featuremap，即，把原来形状不定的<span class="math inline">\(h \timesw\)</span>（<span class="math inline">\(h,w\)</span>均为变量）的RoI窗口内的特征池化为统一的<spanclass="math inline">\(H \times W\)</span>（<spanclass="math inline">\(H, W\)</span>均为常量）的小feature map。</p><p>RoI Align其实是Mask R-CNN论文中提出的概念。RoI Align觉得RoIPool的处理太粗糙了，存在量化（Quantization）的问题，计算featuremap上的窗口坐标的时候就舍入取整了，窗口内划分bins的时候又舍入取整了，这样就很不精确。这样的量化处理，用作分类任务倒还影响不大，但是用作图像分割这种像素级精度的任务时就是个问题了。</p><blockquote><p>RoI Align对RoIPool的改进及其二次插值的数学计算原理可以仔细阅读这篇文章：</p><p><ahref="https://towardsdatascience.com/understanding-region-of-interest-part-2-roi-align-and-roi-warp-f795196fc193">UnderstandingRegion of Interest — (RoI Align and RoI Warp) | by Kemal Erdem(burnpiro) | Towards Data Science</a></p></blockquote><p>MultiScaleRoIAlign核心的RoIAlign操作是通过调用<code>torchvision.ops.roi_align</code>包的<code>roi_align</code>函数实现的，而该函数实际上也只是执行了对底层<code>torch.ops.torchvision.roi_align</code>函数的调用。</p><p>在本例中，输入的两张图片经过RPN处理后，各得到1000个boxes，即共2000个boxes。经过RoIPool/ RoIAlign处理后，输出为：</p><ul><li><code>box_features</code>（<code>results</code>）：shape[2000, 256,7, 7]</li></ul><p>表示2000个boxes，都被池化为了<span class="math inline">\(C, H, W =256, 7, 7\)</span>的特征。</p><h5 id="twomlphead">TwoMLPHead</h5><p><code>torchvision</code>采用<code>torchvision.models.detection.faster_rcnn</code>包中的<code>TwoMLPHead</code>作为MLPHead的实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TwoMLPHead</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Standard heads for FPN-based models</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        in_channels (int): number of input channels</span></span><br><span class="line"><span class="string">        representation_size (int): size of the intermediate representation</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, representation_size</span>):</span><br><span class="line">        <span class="built_in">super</span>(TwoMLPHead, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.fc6 = nn.Linear(in_channels, representation_size)</span><br><span class="line">        self.fc7 = nn.Linear(representation_size, representation_size)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = x.flatten(start_dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        x = F.relu(self.fc6(x))</span><br><span class="line">        x = F.relu(self.fc7(x))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p>这部分并不复杂，实际上就是实现了两层的MLP，名为<code>fc6</code>和<code>fc7</code>。</p><p>在本例中，RoIAlign输出的<code>box_features</code>原shape[2000, 256,7, 7]，在TwoMLPHead中：</p><ol type="1"><li>首先经过flatten处理，变为shape[2000, 12544]；</li><li>进过双层MLP处理后，变为shape[2000, 1024]。</li></ol><p>返回的是如上非线性转换后的<code>box_features</code>特征，此时shape[2000,1024]。</p><h5 id="fastrcnnpredictor">FastRCNNPredictor</h5><p><code>torchvision</code>采用<code>torchvision.models.detection.faster_rcnn</code>包中的<code>FastRCNNPredictor</code>作为Predictor的实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FastRCNNPredictor</span>(nn.Module):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Standard classification + bounding box regression layers</span></span><br><span class="line"><span class="string">    for Fast R-CNN.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Arguments:</span></span><br><span class="line"><span class="string">        in_channels (int): number of input channels</span></span><br><span class="line"><span class="string">        num_classes (int): number of output classes (including background)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, num_classes</span>):</span><br><span class="line">        <span class="built_in">super</span>(FastRCNNPredictor, self).__init__()</span><br><span class="line">        self.cls_score = nn.Linear(in_channels, num_classes)</span><br><span class="line">        self.bbox_pred = nn.Linear(in_channels, num_classes * <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">if</span> x.dim() == <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">list</span>(x.shape[<span class="number">2</span>:]) == [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">        x = x.flatten(start_dim=<span class="number">1</span>)</span><br><span class="line">        scores = self.cls_score(x)</span><br><span class="line">        bbox_deltas = self.bbox_pred(x)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> scores, bbox_deltas</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这部分也并不复杂，实际上就是同论文中描述的一样，通过MLP实现了两个预测分支：</p><ol type="1"><li><code>self.cls_score</code>分支预测目标的分类分值<code>scores</code>；</li><li><code>self.bbox_pred</code>分支回归目标对应各个分类的目标框回归值。</li></ol><p>在<code>torchvision</code>的预训练模型中，FastRCNNPredictor的<code>num_classes</code>是91，即能识别含背景在内的91个类。</p><p>在本例中，两个分支根据RoIAlign和TwoMLPHead提取出的特征，分别预测输出：</p><ol type="1"><li><code>class_logits</code>（<code>socres</code>）：shape[2000,91]；</li><li><code>box_regression</code>（<code>bbox_deltas</code>）：shape[2000,364]。</li></ol><p>意思是输入的2张图片上共2000个框（1000个/图片），这2000个框都做了分类预测，并且为每个类分别计算了目标框的回归修正值。</p><h5 id="postprocess_detections">postprocess_detections</h5><p>在模型的Predictor完成预测后，还需要做后续的一些处理，该部分的处理在<code>torchvision.models.detection.roi_heads.RoIHeads</code>的<code>postprocess_detections</code>函数中实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RoIHeads</span>(torch.nn.Module):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">postprocess_detections</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                               class_logits,    <span class="comment"># type: Tensor</span></span></span><br><span class="line"><span class="params">                               box_regression,  <span class="comment"># type: Tensor</span></span></span><br><span class="line"><span class="params">                               proposals,       <span class="comment"># type: List[Tensor]</span></span></span><br><span class="line"><span class="params">                               image_shapes     <span class="comment"># type: List[Tuple[int, int]]</span></span></span><br><span class="line"><span class="params">                               </span>):</span><br><span class="line">        <span class="comment"># type: (...) -&gt; <span class="type">Tuple</span>[<span class="type">List</span>[Tensor], <span class="type">List</span>[Tensor], <span class="type">List</span>[Tensor]]</span></span><br><span class="line">        device = class_logits.device</span><br><span class="line">        num_classes = class_logits.shape[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        boxes_per_image = [boxes_in_image.shape[<span class="number">0</span>] <span class="keyword">for</span> boxes_in_image <span class="keyword">in</span> proposals]</span><br><span class="line">        pred_boxes = self.box_coder.decode(box_regression, proposals)</span><br><span class="line"></span><br><span class="line">        pred_scores = F.softmax(class_logits, -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        pred_boxes_list = pred_boxes.split(boxes_per_image, <span class="number">0</span>)</span><br><span class="line">        pred_scores_list = pred_scores.split(boxes_per_image, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        all_boxes = []</span><br><span class="line">        all_scores = []</span><br><span class="line">        all_labels = []</span><br><span class="line">        <span class="keyword">for</span> boxes, scores, image_shape <span class="keyword">in</span> <span class="built_in">zip</span>(pred_boxes_list, pred_scores_list, image_shapes):</span><br><span class="line">            boxes = box_ops.clip_boxes_to_image(boxes, image_shape)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># create labels for each prediction</span></span><br><span class="line">            labels = torch.arange(num_classes, device=device)</span><br><span class="line">            labels = labels.view(<span class="number">1</span>, -<span class="number">1</span>).expand_as(scores)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># remove predictions with the background label</span></span><br><span class="line">            boxes = boxes[:, <span class="number">1</span>:]</span><br><span class="line">            scores = scores[:, <span class="number">1</span>:]</span><br><span class="line">            labels = labels[:, <span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># batch everything, by making every class prediction be a separate instance</span></span><br><span class="line">            boxes = boxes.reshape(-<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">            scores = scores.reshape(-<span class="number">1</span>)</span><br><span class="line">            labels = labels.reshape(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># remove low scoring boxes</span></span><br><span class="line">            inds = torch.where(scores &gt; self.score_thresh)[<span class="number">0</span>]</span><br><span class="line">            boxes, scores, labels = boxes[inds], scores[inds], labels[inds]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># remove empty boxes</span></span><br><span class="line">            keep = box_ops.remove_small_boxes(boxes, min_size=<span class="number">1e-2</span>)</span><br><span class="line">            boxes, scores, labels = boxes[keep], scores[keep], labels[keep]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># non-maximum suppression, independently done per class</span></span><br><span class="line">            keep = box_ops.batched_nms(boxes, scores, labels, self.nms_thresh)</span><br><span class="line">            <span class="comment"># keep only topk scoring predictions</span></span><br><span class="line">            keep = keep[:self.detections_per_img]</span><br><span class="line">            boxes, scores, labels = boxes[keep], scores[keep], labels[keep]</span><br><span class="line"></span><br><span class="line">            all_boxes.append(boxes)</span><br><span class="line">            all_scores.append(scores)</span><br><span class="line">            all_labels.append(labels)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> all_boxes, all_scores, all_labels</span><br></pre></td></tr></table></figure><p>后处理在for循环中，遍历每一张图片：</p><ol type="1"><li>去除背景类的框；</li><li>去除低分框；</li><li>去除空框（尺寸极小的无意义小框）；</li><li>对它的boxes和scores做（类内）NMS；</li><li>保留<code>self.detections_per_img</code>个的top-k个目标。</li></ol><p>因为本例输入的是随机值填充的模拟图片，所以在去除低分框的环节，2000个候选框就因为没有实际的目标而被全部滤除了。</p><h4id="generalizedrcnntransform.postprocess">GeneralizedRCNNTransform.postprocess</h4><p>FasterR-CNN模型的后期处理由<code>torchvision.models.detection.transform</code>包的<code>GeneralizedRCNNTransform</code>类实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GeneralizedRCNNTransform</span>(nn.Module):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">postprocess</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                    result,               <span class="comment"># type: List[Dict[str, Tensor]]</span></span></span><br><span class="line"><span class="params">                    image_shapes,         <span class="comment"># type: List[Tuple[int, int]]</span></span></span><br><span class="line"><span class="params">                    original_image_sizes  <span class="comment"># type: List[Tuple[int, int]]</span></span></span><br><span class="line"><span class="params">                    </span>):</span><br><span class="line">        <span class="comment"># type: (...) -&gt; <span class="type">List</span>[<span class="type">Dict</span>[<span class="built_in">str</span>, Tensor]]</span></span><br><span class="line">        <span class="keyword">if</span> self.training:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">for</span> i, (pred, im_s, o_im_s) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(result, image_shapes, original_image_sizes)):</span><br><span class="line">            boxes = pred[<span class="string">&quot;boxes&quot;</span>]</span><br><span class="line">            boxes = resize_boxes(boxes, im_s, o_im_s)</span><br><span class="line">            result[i][<span class="string">&quot;boxes&quot;</span>] = boxes</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;masks&quot;</span> <span class="keyword">in</span> pred:</span><br><span class="line">                masks = pred[<span class="string">&quot;masks&quot;</span>]</span><br><span class="line">                masks = paste_masks_in_image(masks, boxes, o_im_s)</span><br><span class="line">                result[i][<span class="string">&quot;masks&quot;</span>] = masks</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;keypoints&quot;</span> <span class="keyword">in</span> pred:</span><br><span class="line">                keypoints = pred[<span class="string">&quot;keypoints&quot;</span>]</span><br><span class="line">                keypoints = resize_keypoints(keypoints, im_s, o_im_s)</span><br><span class="line">                result[i][<span class="string">&quot;keypoints&quot;</span>] = keypoints</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>其实对于目标检测而言，实际上只对<code>boxes</code>的坐标做了resize的操作。因为<code>GeneralizedRCNNTransform</code>在对输入图像做预处理的时候，有进行尺寸转换，而且转tensor的时候又增加了padding是同一batch的图像张量能够保持尺寸一致。所以输出结果的时候，还是要把在tensor上的坐标转换为原始图像尺度上的坐标。</p><h2 id="总结">3 总结</h2><p>最后总览一下整个模型的实现结构，只需通过简单的<code>print</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(model)</span><br></pre></td></tr></table></figure><p>，即可输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line">FasterRCNN(</span><br><span class="line">  (transform): GeneralizedRCNNTransform(</span><br><span class="line">      Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])</span><br><span class="line">      Resize(min_size=(800,), max_size=1333, mode=&#x27;bilinear&#x27;)</span><br><span class="line">  )</span><br><span class="line">  (backbone): BackboneWithFPN(</span><br><span class="line">    (body): IntermediateLayerGetter(</span><br><span class="line">      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)</span><br><span class="line">      (bn1): FrozenBatchNorm2d(64)</span><br><span class="line">      (relu): ReLU(inplace=True)</span><br><span class="line">      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)</span><br><span class="line">      (layer1): Sequential(</span><br><span class="line">        (0): Bottleneck(</span><br><span class="line">          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn1): FrozenBatchNorm2d(64)</span><br><span class="line">          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)</span><br><span class="line">          (bn2): FrozenBatchNorm2d(64)</span><br><span class="line">          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn3): FrozenBatchNorm2d(256)</span><br><span class="line">          (relu): ReLU(inplace=True)</span><br><span class="line">          (downsample): Sequential(</span><br><span class="line">            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">            (1): FrozenBatchNorm2d(256)</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">        (1): Bottleneck(</span><br><span class="line">          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn1): FrozenBatchNorm2d(64)</span><br><span class="line">          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)</span><br><span class="line">          (bn2): FrozenBatchNorm2d(64)</span><br><span class="line">          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn3): FrozenBatchNorm2d(256)</span><br><span class="line">          (relu): ReLU(inplace=True)</span><br><span class="line">        )</span><br><span class="line">        (2): Bottleneck(</span><br><span class="line">          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn1): FrozenBatchNorm2d(64)</span><br><span class="line">          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)</span><br><span class="line">          (bn2): FrozenBatchNorm2d(64)</span><br><span class="line">          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn3): FrozenBatchNorm2d(256)</span><br><span class="line">          (relu): ReLU(inplace=True)</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">      (layer2): Sequential(</span><br><span class="line">        (0): Bottleneck(</span><br><span class="line">          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn1): FrozenBatchNorm2d(128)</span><br><span class="line">          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)</span><br><span class="line">          (bn2): FrozenBatchNorm2d(128)</span><br><span class="line">          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn3): FrozenBatchNorm2d(512)</span><br><span class="line">          (relu): ReLU(inplace=True)</span><br><span class="line">          (downsample): Sequential(</span><br><span class="line">            (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)</span><br><span class="line">            (1): FrozenBatchNorm2d(512)</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">        (1): Bottleneck(</span><br><span class="line">          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn1): FrozenBatchNorm2d(128)</span><br><span class="line">          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)</span><br><span class="line">          (bn2): FrozenBatchNorm2d(128)</span><br><span class="line">          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn3): FrozenBatchNorm2d(512)</span><br><span class="line">          (relu): ReLU(inplace=True)</span><br><span class="line">        )</span><br><span class="line">        (2): Bottleneck(</span><br><span class="line">          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn1): FrozenBatchNorm2d(128)</span><br><span class="line">          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)</span><br><span class="line">          (bn2): FrozenBatchNorm2d(128)</span><br><span class="line">          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn3): FrozenBatchNorm2d(512)</span><br><span class="line">          (relu): ReLU(inplace=True)</span><br><span class="line">        )</span><br><span class="line">        (3): Bottleneck(</span><br><span class="line">          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn1): FrozenBatchNorm2d(128)</span><br><span class="line">          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)</span><br><span class="line">          (bn2): FrozenBatchNorm2d(128)</span><br><span class="line">          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn3): FrozenBatchNorm2d(512)</span><br><span class="line">          (relu): ReLU(inplace=True)</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">      (layer3): Sequential(</span><br><span class="line">        (0): Bottleneck(</span><br><span class="line">          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn1): FrozenBatchNorm2d(256)</span><br><span class="line">          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)</span><br><span class="line">          (bn2): FrozenBatchNorm2d(256)</span><br><span class="line">          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn3): FrozenBatchNorm2d(1024)</span><br><span class="line">          (relu): ReLU(inplace=True)</span><br><span class="line">          (downsample): Sequential(</span><br><span class="line">            (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)</span><br><span class="line">            (1): FrozenBatchNorm2d(1024)</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">        (1): Bottleneck(</span><br><span class="line">          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn1): FrozenBatchNorm2d(256)</span><br><span class="line">          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)</span><br><span class="line">          (bn2): FrozenBatchNorm2d(256)</span><br><span class="line">          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn3): FrozenBatchNorm2d(1024)</span><br><span class="line">          (relu): ReLU(inplace=True)</span><br><span class="line">        )</span><br><span class="line">        (2): Bottleneck(</span><br><span class="line">          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn1): FrozenBatchNorm2d(256)</span><br><span class="line">          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)</span><br><span class="line">          (bn2): FrozenBatchNorm2d(256)</span><br><span class="line">          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn3): FrozenBatchNorm2d(1024)</span><br><span class="line">          (relu): ReLU(inplace=True)</span><br><span class="line">        )</span><br><span class="line">        (3): Bottleneck(</span><br><span class="line">          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn1): FrozenBatchNorm2d(256)</span><br><span class="line">          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)</span><br><span class="line">          (bn2): FrozenBatchNorm2d(256)</span><br><span class="line">          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn3): FrozenBatchNorm2d(1024)</span><br><span class="line">          (relu): ReLU(inplace=True)</span><br><span class="line">        )</span><br><span class="line">        (4): Bottleneck(</span><br><span class="line">          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn1): FrozenBatchNorm2d(256)</span><br><span class="line">          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)</span><br><span class="line">          (bn2): FrozenBatchNorm2d(256)</span><br><span class="line">          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn3): FrozenBatchNorm2d(1024)</span><br><span class="line">          (relu): ReLU(inplace=True)</span><br><span class="line">        )</span><br><span class="line">        (5): Bottleneck(</span><br><span class="line">          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn1): FrozenBatchNorm2d(256)</span><br><span class="line">          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)</span><br><span class="line">          (bn2): FrozenBatchNorm2d(256)</span><br><span class="line">          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn3): FrozenBatchNorm2d(1024)</span><br><span class="line">          (relu): ReLU(inplace=True)</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">      (layer4): Sequential(</span><br><span class="line">        (0): Bottleneck(</span><br><span class="line">          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn1): FrozenBatchNorm2d(512)</span><br><span class="line">          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)</span><br><span class="line">          (bn2): FrozenBatchNorm2d(512)</span><br><span class="line">          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn3): FrozenBatchNorm2d(2048)</span><br><span class="line">          (relu): ReLU(inplace=True)</span><br><span class="line">          (downsample): Sequential(</span><br><span class="line">            (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)</span><br><span class="line">            (1): FrozenBatchNorm2d(2048)</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">        (1): Bottleneck(</span><br><span class="line">          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn1): FrozenBatchNorm2d(512)</span><br><span class="line">          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)</span><br><span class="line">          (bn2): FrozenBatchNorm2d(512)</span><br><span class="line">          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn3): FrozenBatchNorm2d(2048)</span><br><span class="line">          (relu): ReLU(inplace=True)</span><br><span class="line">        )</span><br><span class="line">        (2): Bottleneck(</span><br><span class="line">          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn1): FrozenBatchNorm2d(512)</span><br><span class="line">          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)</span><br><span class="line">          (bn2): FrozenBatchNorm2d(512)</span><br><span class="line">          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)</span><br><span class="line">          (bn3): FrozenBatchNorm2d(2048)</span><br><span class="line">          (relu): ReLU(inplace=True)</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">    (fpn): FeaturePyramidNetwork(</span><br><span class="line">      (inner_blocks): ModuleList(</span><br><span class="line">        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))</span><br><span class="line">        (1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))</span><br><span class="line">        (2): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))</span><br><span class="line">        (3): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))</span><br><span class="line">      )</span><br><span class="line">      (layer_blocks): ModuleList(</span><br><span class="line">        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="line">        (1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="line">        (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="line">        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="line">      )</span><br><span class="line">      (extra_blocks): LastLevelMaxPool()</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">  (rpn): RegionProposalNetwork(</span><br><span class="line">    (anchor_generator): AnchorGenerator()</span><br><span class="line">    (head): RPNHead(</span><br><span class="line">      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))</span><br><span class="line">      (cls_logits): Conv2d(256, 3, kernel_size=(1, 1), stride=(1, 1))</span><br><span class="line">      (bbox_pred): Conv2d(256, 12, kernel_size=(1, 1), stride=(1, 1))</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">  (roi_heads): RoIHeads(</span><br><span class="line">    (box_roi_pool): MultiScaleRoIAlign()</span><br><span class="line">    (box_head): TwoMLPHead(</span><br><span class="line">      (fc6): Linear(in_features=12544, out_features=1024, bias=True)</span><br><span class="line">      (fc7): Linear(in_features=1024, out_features=1024, bias=True)</span><br><span class="line">    )</span><br><span class="line">    (box_predictor): FastRCNNPredictor(</span><br><span class="line">      (cls_score): Linear(in_features=1024, out_features=91, bias=True)</span><br><span class="line">      (bbox_pred): Linear(in_features=1024, out_features=364, bias=True)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>模型结构可以总结为层次结构：</p><ul><li>Faster R-CNN<ul><li>(transform): GeneralizedRCNNTransform</li><li>(backbone): BackboneWithFPN<ul><li>(body): IntermediateLayerGetter</li><li>(fpn): FeaturePyramidNetwork</li></ul></li><li>(rpn): RegionProposalNetwork<ul><li>(anchor_generator): AnchorGenerator</li><li>(head): RPNHead</li></ul></li><li>(roi_heads): RoIHeads<ul><li>(box_roi_pool): MultiScaleRoIAlign</li><li>(box_head): TwoMLPHead</li><li>(box_predictor): FastRCNNPredictor</li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> R-CNN </tag>
            
            <tag> Object Detection </tag>
            
            <tag> CV </tag>
            
            <tag> PyTorch </tag>
            
            <tag> Deep Learning </tag>
            
            <tag> Faster R-CNN </tag>
            
            <tag> torchvision </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go笔记</title>
      <link href="/posts/Go%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/Go%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>抽空学习Go语言。</p><span id="more"></span><h1 id="go笔记">Go笔记</h1><p>参考书籍：</p><blockquote><p>朱荣鑫，黄迪璇，张天. Go语言高并发与微服务实战[M].北京：中国铁道出版社有限公司，2020.</p></blockquote><p>代码同步更新在GitHub：<ahref="https://github.com/HearyShen/LearnGo">HearyShen/LearnGo</a></p><h2 id="基本变量">1 基本变量</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line"><span class="string">&quot;unicode/utf8&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// run with command:</span></span><br><span class="line"><span class="comment">// go run src\1_variables.go</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 3 ways to declare and initialize a variable</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;3 ways to declare and init a variable:\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">&quot;100&quot;</span></span><br><span class="line">c := <span class="number">0.17</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;a value = %v (%T)\n&quot;</span>, a, a)</span><br><span class="line">fmt.Printf(<span class="string">&quot;b value = %v (%T)\n&quot;</span>, b, b)</span><br><span class="line">fmt.Printf(<span class="string">&quot;c value = %v (%T)\n&quot;</span>, c, c)</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line"><span class="comment">// swap variables</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;Easy way to swap variables:\n&quot;</span>)</span><br><span class="line">v1 := <span class="number">1</span></span><br><span class="line">v2 := <span class="number">2</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;before swap: v1 = %v (%T), v2 = %v (%T)\n&quot;</span>, v1, v1, v2, v2)</span><br><span class="line"></span><br><span class="line">v1, v2 = v2, v1</span><br><span class="line">fmt.Printf(<span class="string">&quot;after swap: v1 = %v (%T), v2 = %v (%T)\n&quot;</span>, v1, v1, v2, v2)</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Integer</span></span><br><span class="line"><span class="comment">signed: int8, int16, int32, int64</span></span><br><span class="line"><span class="comment">unsigned: uint8, uint16, uint32, uint64</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> vUint16 <span class="type">uint16</span> = math.MaxUint8 + <span class="number">1</span></span><br><span class="line"><span class="comment">// vUint16 = math.MaxUint16 + 1// src\1_variables.go:37:9: constant 256 overflows uint16</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;vUint16 = %v (%T)\n&quot;</span>, vUint16, vUint16)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vUint8 <span class="type">uint8</span> = <span class="type">uint8</span>(vUint16)</span><br><span class="line">fmt.Printf(<span class="string">&quot;vUint8 = %v (%T)\n&quot;</span>, vUint8, vUint8) <span class="comment">// truncated: 0000 0001 (0000 0000)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Float</span></span><br><span class="line"><span class="comment">float32, float64</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> vFloat32 <span class="type">float32</span> = math.E</span><br><span class="line"><span class="keyword">var</span> vFloat64 <span class="type">float64</span> = math.E</span><br><span class="line">fmt.Printf(<span class="string">&quot;vFloat32 = %f (%T)\n&quot;</span>, vFloat32, vFloat32)</span><br><span class="line">fmt.Printf(<span class="string">&quot;vFloat64 = %.10f (%T)\n&quot;</span>, vFloat64, vFloat64)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Bool</span></span><br><span class="line"><span class="comment">true/false, can not cast to integer types</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> vBool <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;vBool = %v (%T)\n&quot;</span>, vBool, vBool)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">String</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> vStr <span class="type">string</span> = <span class="string">&quot;你好, Go!&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;vStr = \&quot;%s\&quot; (%T)\n&quot;</span>, vStr, vStr)</span><br><span class="line">fmt.Printf(<span class="string">&quot;byte len of vStr = %v\n&quot;</span>, <span class="built_in">len</span>(vStr))                    <span class="comment">// 3*2 + 5*1 = 11, chinese character uses 3 bytes</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;rune len of vStr = %v\n&quot;</span>, utf8.RuneCountInString(vStr)) <span class="comment">// 7</span></span><br><span class="line"><span class="comment">// traverse each unicode character</span></span><br><span class="line"><span class="keyword">for</span> i, h := <span class="keyword">range</span> vStr &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;[%v:%c]&quot;</span>, i, h)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Pointer</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> ptrStr *<span class="type">string</span> = &amp;vStr</span><br><span class="line">fmt.Printf(<span class="string">&quot;ptrStr = %v (%T)\n&quot;</span>, ptrStr, ptrStr)</span><br><span class="line">fmt.Printf(<span class="string">&quot;*ptrStr = %v (%T)\n&quot;</span>, *ptrStr, *ptrStr)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Struct</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> vStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">id     <span class="type">int</span></span><br><span class="line">name   <span class="type">string</span></span><br><span class="line">salary <span class="type">float32</span></span><br><span class="line">&#125;</span><br><span class="line">vStruct.id = <span class="number">1</span></span><br><span class="line">vStruct.name = <span class="string">&quot;Mike&quot;</span></span><br><span class="line">vStruct.salary = <span class="number">123.45</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;vStruct = %v (%T)\n&quot;</span>, vStruct, vStruct)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="命令行参数flag">2 命令行参数flag</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// run with command:</span></span><br><span class="line"><span class="comment">// go run src\2_flag.go --username mike --password 123456 --id 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// argument name, default value, tips</span></span><br><span class="line"><span class="keyword">var</span> username *<span class="type">string</span> = flag.String(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;guest&quot;</span>, <span class="string">&quot;a string of username&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> password <span class="type">string</span></span><br><span class="line">flag.StringVar(&amp;password, <span class="string">&quot;password&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;a string of password&quot;</span>)</span><br><span class="line"></span><br><span class="line">id := flag.Int(<span class="string">&quot;id&quot;</span>, <span class="number">0</span>, <span class="string">&quot;an integer of id&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag.Parse()</span><br><span class="line">fmt.Printf(<span class="string">&quot;username = %v, password = %v, id = %v\n&quot;</span>, *username, password, *id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常量const">3 常量const</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run with command:</span></span><br><span class="line"><span class="comment">// go run src\3_const.go</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> helloStr = <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">name   = <span class="string">&quot;Mike&quot;</span></span><br><span class="line">salary = <span class="number">123.45</span></span><br><span class="line">)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v (%T)&quot;</span>, name, name)</span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;Tom&quot;</span> <span class="comment">// cannot assign to name</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v (%T)&quot;</span>, name, name)</span><br><span class="line"></span><br><span class="line">ptrName := &amp;name <span class="comment">// cannot take the address of name</span></span><br><span class="line">*ptrName = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v (%T)&quot;</span>, name, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类型type">4 类型type</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run with command:</span></span><br><span class="line"><span class="comment">// go run src\4_type.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> aliasInt = <span class="type">int</span> <span class="comment">// declare an alias for int</span></span><br><span class="line"><span class="keyword">type</span> myInt <span class="type">int</span>      <span class="comment">// defines a new type</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Person is type of a struct</span></span><br><span class="line"><span class="keyword">type</span> BasicPerson <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age  <span class="type">uint8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> vAliasInt aliasInt</span><br><span class="line">fmt.Printf(<span class="string">&quot;vAliasInt = %v (%T)\n&quot;</span>, vAliasInt, vAliasInt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vMyInt myInt</span><br><span class="line">fmt.Printf(<span class="string">&quot;vMyint = %v (%T)\n&quot;</span>, vMyInt, vMyInt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person BasicPerson</span><br><span class="line">person.name = <span class="string">&quot;Mike&quot;</span></span><br><span class="line">person.age = <span class="number">20</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;person = %v (%T)\n&quot;</span>, person, person)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="if-else条件">5 if-else条件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// run with command:</span></span><br><span class="line"><span class="comment">// go run src\5_ifelse.go --score 100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">score := flag.Int(<span class="string">&quot;score&quot;</span>, <span class="number">-1</span>, <span class="string">&quot;Score of a test&quot;</span>)</span><br><span class="line"></span><br><span class="line">flag.Parse()</span><br><span class="line">fmt.Printf(<span class="string">&quot;score = %v (%T)\n&quot;</span>, *score, *score)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> *score &lt; <span class="number">60</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Fail to pass&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> *score &lt; <span class="number">80</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Fine&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> *score &lt;= <span class="number">100</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Excellent&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Wrong score&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="switch-case条件">6 switch-case条件</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// run with command:</span></span><br><span class="line"><span class="comment">// go run src\6_switchcase.go -score 100 -course CPP</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">score := flag.Int(<span class="string">&quot;score&quot;</span>, <span class="number">-1</span>, <span class="string">&quot;Score of a test&quot;</span>)</span><br><span class="line">course := flag.String(<span class="string">&quot;course&quot;</span>, <span class="string">&quot;CPP&quot;</span>, <span class="string">&quot;Course name&quot;</span>)</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;score = %v (%T)\n&quot;</span>, *score, *score)</span><br><span class="line">fmt.Printf(<span class="string">&quot;course = %v (%T)\n&quot;</span>, *course, *course)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> *score &lt; <span class="number">60</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;fail to pass&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> *score &lt; <span class="number">80</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;fine&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> *score &lt;= <span class="number">100</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;excellent&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;wrong score&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> *course &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;CPP&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;C plus plus&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;PY&quot;</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;Python&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">fmt.Println(<span class="string">&quot;Unknown&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="for-loop循环">7 for-loop循环</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run with commands:</span></span><br><span class="line"><span class="comment">// go run src\7_forloop.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Golang only has for loop</span></span><br><span class="line"><span class="comment">// Golang does not support while and do-while loop</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数组array">8 数组array</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// init array</span></span><br><span class="line"><span class="keyword">var</span> colors [<span class="number">3</span>]<span class="type">string</span></span><br><span class="line">colors[<span class="number">0</span>] = <span class="string">&quot;Red&quot;</span></span><br><span class="line">colors[<span class="number">1</span>] = <span class="string">&quot;Green&quot;</span></span><br><span class="line">colors[<span class="number">2</span>] = <span class="string">&quot;Blue&quot;</span></span><br><span class="line">fmt.Println(colors)</span><br><span class="line"></span><br><span class="line"><span class="comment">// init array with initial values</span></span><br><span class="line">languages := [...]<span class="type">string</span>&#123;<span class="string">&quot;C&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;Java&quot;</span>&#125;</span><br><span class="line">fmt.Println(languages)</span><br><span class="line"></span><br><span class="line"><span class="comment">// init array with new(type), returns a pointer</span></span><br><span class="line">nations := <span class="built_in">new</span>([<span class="number">3</span>]<span class="type">string</span>)</span><br><span class="line">nations[<span class="number">0</span>] = <span class="string">&quot;China&quot;</span></span><br><span class="line">nations[<span class="number">1</span>] = <span class="string">&quot;India&quot;</span></span><br><span class="line">nations[<span class="number">2</span>] = <span class="string">&quot;Japan&quot;</span></span><br><span class="line">fmt.Println(*nations)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="切片slice">9 切片slice</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run with commands:</span></span><br><span class="line"><span class="comment">// go run src\9_slice.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// slice is a variable length sequence of data</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// [...]int&#123;&#125; marks a fixed length array,</span></span><br><span class="line"><span class="comment">// while []int&#123;&#125; declares a variable length slice</span></span><br><span class="line">slice := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">printSlice(<span class="string">&quot;slice&quot;</span>, slice)</span><br><span class="line">printSlice(<span class="string">&quot;subSlice&quot;</span>, slice[<span class="number">3</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment">// slice can be appended with one or more elements</span></span><br><span class="line"><span class="comment">// If it has sufficient capacity, the destination is resliced to accommodate the new elements.</span></span><br><span class="line"><span class="comment">// If it does not, a new underlying array will be allocated.</span></span><br><span class="line">slice = <span class="built_in">append</span>(slice, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line">printSlice(<span class="string">&quot;slice&quot;</span>, slice)</span><br><span class="line">printSlice(<span class="string">&quot;subSlice&quot;</span>, slice[<span class="number">3</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment">// slice can also be created from an array</span></span><br><span class="line">arr := [...]<span class="type">int</span>&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;</span><br><span class="line">arrSlice := arr[:<span class="number">3</span>]</span><br><span class="line">printSlice(<span class="string">&quot;arrSlice&quot;</span>, arrSlice)</span><br><span class="line"></span><br><span class="line"><span class="comment">// slice can also be dynamically created with make([]T, size, cap)</span></span><br><span class="line">madeSlice := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">8</span>, <span class="number">16</span>)</span><br><span class="line">printSlice(<span class="string">&quot;makeSlice&quot;</span>, madeSlice)</span><br><span class="line"></span><br><span class="line"><span class="comment">// slice can be copied from src slice to dest slice</span></span><br><span class="line"><span class="built_in">copy</span>(madeSlice, slice)</span><br><span class="line">printSlice(<span class="string">&quot;copiedSlice&quot;</span>, madeSlice)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(tag <span class="type">string</span>, slice []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s: date = %v, len = %d, cap = %d, addr = %p\n&quot;</span>, tag, slice, <span class="built_in">len</span>(slice), <span class="built_in">cap</span>(slice), &amp;slice)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="列表list">10 列表list</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;container/list&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// run with commands:</span></span><br><span class="line"><span class="comment">// go run src\10_list.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// list.List in go is a doubly linked list</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// create a list</span></span><br><span class="line">numsList := list.New()</span><br><span class="line"></span><br><span class="line"><span class="comment">// append elements to list with PushBack</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">numsList.PushBack(i)</span><br><span class="line">&#125;</span><br><span class="line">printList(numsList)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add elements to front with PushFront</span></span><br><span class="line">first := numsList.PushFront(<span class="number">0</span>)</span><br><span class="line">printList(numsList)</span><br><span class="line"></span><br><span class="line"><span class="comment">// elements can be removed</span></span><br><span class="line">numsList.Remove(first)</span><br><span class="line">printList(numsList)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printList</span><span class="params">(srcList *list.List)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> node := srcList.Front(); node != <span class="literal">nil</span>; node = node.Next() &#123;</span><br><span class="line">fmt.Print(node.Value, <span class="string">&quot; &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字典map">11 字典map</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run with commands:</span></span><br><span class="line"><span class="comment">// go run src\11_map.go</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// create a map</span></span><br><span class="line">emptyMap := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;&#125;</span><br><span class="line">printMap(emptyMap)</span><br><span class="line"></span><br><span class="line"><span class="comment">// create and init a map</span></span><br><span class="line">city2id := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;Suzhou&quot;</span>:   <span class="string">&quot;0512&quot;</span>,</span><br><span class="line"><span class="string">&quot;Beijing&quot;</span>:  <span class="string">&quot;010&quot;</span>,</span><br><span class="line"><span class="string">&quot;Shanghai&quot;</span>: <span class="string">&quot;021&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">printMap(city2id)</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a map with make(type)</span></span><br><span class="line">id2city := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span><br><span class="line"></span><br><span class="line">id2city[<span class="string">&quot;0512&quot;</span>] = <span class="string">&quot;Suzhou&quot;</span></span><br><span class="line">id2city[<span class="string">&quot;010&quot;</span>] = <span class="string">&quot;Beijing&quot;</span></span><br><span class="line">id2city[<span class="string">&quot;021&quot;</span>] = <span class="string">&quot;Shanghai&quot;</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;Query: 010, Result: %s\n&quot;</span>, id2city[<span class="string">&quot;010&quot;</span>])</span><br><span class="line">printMap(id2city)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printMap</span><span class="params">(srcMap <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;len = %d\n&quot;</span>, <span class="built_in">len</span>(srcMap))</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> srcMap &#123;</span><br><span class="line">fmt.Println(k, v, <span class="string">&quot; &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数func">12 函数func</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// run with commands:</span></span><br><span class="line"><span class="comment">// go run src\12_func.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A standard paradigm of function in go:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">func func_name(inputParams) (returnParams) &#123;</span></span><br><span class="line"><span class="comment">func body</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a func with multiple inputs and single output</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a func with multiple inputs and multiple outputs</span></span><br><span class="line"><span class="comment">// return values can be named</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">div</span><span class="params">(dividend, divisor <span class="type">int</span>)</span></span> (quotient, remainder <span class="type">int</span>) &#123;</span><br><span class="line">quotient = dividend / divisor</span><br><span class="line">remainder = dividend % divisor</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addMul</span><span class="params">(x, y <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">int</span>) &#123;</span><br><span class="line">vAdd := x + y</span><br><span class="line">vMul := x * y</span><br><span class="line"><span class="keyword">return</span> vAdd, vMul</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a function with input but no return value</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">echo</span><span class="params">(s <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// input a func as a callback func</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">traverse</span><span class="params">(arr []<span class="type">int</span>, handler <span class="keyword">func</span>(num <span class="type">int</span>)</span></span>) &#123;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> arr &#123;</span><br><span class="line">handler(v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pass a pointer to func</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">increase</span><span class="params">(x *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">*x = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// call a named function</span></span><br><span class="line">fmt.Println(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">fmt.Println(div(<span class="number">8</span>, <span class="number">5</span>))</span><br><span class="line">fmt.Println(addMul(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">echo(<span class="string">&quot;Hello, world!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// define and call an anonymous func</span></span><br><span class="line">vMul := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x - y</span><br><span class="line">&#125;(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">fmt.Println(vMul)</span><br><span class="line"></span><br><span class="line">curTime := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(time.Now())</span><br><span class="line">&#125;</span><br><span class="line">curTime()</span><br><span class="line"></span><br><span class="line"><span class="comment">// use an anonymous func as callback function</span></span><br><span class="line">arr := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">traverse(arr, <span class="function"><span class="keyword">func</span><span class="params">(num <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Print(num*num, <span class="string">&quot; &quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line"><span class="comment">// pass num to func by its pointer</span></span><br><span class="line">vNum := <span class="number">1</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Before: &quot;</span>, vNum)</span><br><span class="line">increase(&amp;vNum)</span><br><span class="line">fmt.Println(<span class="string">&quot;After: &quot;</span>, vNum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="闭包closure">13 闭包closure</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run with commands:</span></span><br><span class="line"><span class="comment">// go run src\13_closure.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// closure is a function carrying state</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createCounter</span><span class="params">(initial <span class="type">int</span>)</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> initial &lt; <span class="number">0</span> &#123;</span><br><span class="line">initial = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">initial++</span><br><span class="line"><span class="keyword">return</span> initial</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">counter1 := createCounter(<span class="number">0</span>)</span><br><span class="line">fmt.Println(counter1()) <span class="comment">// 1</span></span><br><span class="line">fmt.Println(counter1()) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">counter2 := createCounter(<span class="number">10</span>)</span><br><span class="line">fmt.Println(counter2()) <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">fmt.Println(counter1()) <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结构体struct">14 结构体struct</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run with commands:</span></span><br><span class="line"><span class="comment">// go run src\14_struct.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct can be defined in paradigm:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">type structName struct &#123;</span></span><br><span class="line"><span class="comment">value1 valueType1</span></span><br><span class="line"><span class="comment">value2 valueType2</span></span><br><span class="line"><span class="comment">...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Name  <span class="type">string</span></span><br><span class="line">Birth <span class="type">string</span></span><br><span class="line">ID    <span class="type">uint64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// declare a struct variable</span></span><br><span class="line"><span class="keyword">var</span> person1 Person</span><br><span class="line">person1.Name = <span class="string">&quot;Mike&quot;</span></span><br><span class="line">person1.Birth = <span class="string">&quot;1990-1-2&quot;</span></span><br><span class="line">person1.ID = <span class="number">1</span></span><br><span class="line">fmt.Println(person1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// new a struct variable</span></span><br><span class="line">person2 := <span class="built_in">new</span>(Person) <span class="comment">// person2 is a pointer</span></span><br><span class="line">person2.Name = <span class="string">&quot;Tom&quot;</span></span><br><span class="line">person2.Birth = <span class="string">&quot;1991-2-3&quot;</span></span><br><span class="line">person2.ID = <span class="number">2</span></span><br><span class="line">fmt.Println(person2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// another way to new a person with empty initial values</span></span><br><span class="line">person3 := &amp;Person&#123;&#125; <span class="comment">// person3 is a pointer</span></span><br><span class="line">person3.Name = <span class="string">&quot;Nancy&quot;</span></span><br><span class="line">person3.Birth = <span class="string">&quot;1992-3-4&quot;</span></span><br><span class="line">person3.ID = <span class="number">3</span></span><br><span class="line">fmt.Println(person3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// create an object with initial values</span></span><br><span class="line">person4 := Person&#123;</span><br><span class="line">Name:  <span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">Birth: <span class="string">&quot;1993-4-5&quot;</span>,</span><br><span class="line">ID:    <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(person4)</span><br><span class="line"></span><br><span class="line">person5 := &amp;Person&#123; <span class="comment">// person5 is a pointer</span></span><br><span class="line">Name:  <span class="string">&quot;John&quot;</span>,</span><br><span class="line">Birth: <span class="string">&quot;1994-5-6&quot;</span>,</span><br><span class="line">ID:    <span class="number">5</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(person5)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方法method">15 方法method</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run with commands:</span></span><br><span class="line"><span class="comment">// go run src\15_method.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">In go, method is a function with recipient.</span></span><br><span class="line"><span class="comment">Recipient can be any type, typically a struct, which means any type in</span></span><br><span class="line"><span class="comment">go can have its methods.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Method can be defined in paradigm:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">func (recipient RecipientType) methodName(inputParams) (returnParams) &#123;</span></span><br><span class="line"><span class="comment">func body</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Age  <span class="type">uint8</span></span><br><span class="line">ID   <span class="type">uint64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// modify student&#x27;s name with pointer to the instance</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(student *Student)</span></span> setName(name <span class="type">string</span>) &#123;</span><br><span class="line">student.Name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// non-pointer, unable to modify the original instance</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(student Student)</span></span> badSet(name <span class="type">string</span>) &#123;</span><br><span class="line">student.Name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(student Student)</span></span> <span class="built_in">print</span>() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Student %s (ID: %v) is %v years old.\n&quot;</span>,</span><br><span class="line">student.Name, student.ID, student.Age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">student1 := Student&#123;</span><br><span class="line">Name: <span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">Age:  <span class="number">12</span>,</span><br><span class="line">ID:   <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">student1.<span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">student1.badSet(<span class="string">&quot;Little Jack&quot;</span>)</span><br><span class="line">student1.<span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">student1.setName(<span class="string">&quot;Big Jack&quot;</span>)</span><br><span class="line">student1.<span class="built_in">print</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="接口interface">16 接口interface</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run with commands:</span></span><br><span class="line"><span class="comment">// go run src\16_interface1.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">standard interface paradigm:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">type interfaceName interface &#123;</span></span><br><span class="line"><span class="comment">func1(inputParams) (returnParams)</span></span><br><span class="line"><span class="comment">func2(inputParams) (returnParams)</span></span><br><span class="line"><span class="comment">func3(inputParams) (returnParams)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">If the interfaceName is in uppercase, its a public interface.</span></span><br><span class="line"><span class="comment">If the function name is in uppercase, its a public function.</span></span><br><span class="line"><span class="comment">A public function can be accessed outside of the package,</span></span><br><span class="line"><span class="comment">otherwise, non-public function can only be accessed inside of</span></span><br><span class="line"><span class="comment">the package.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">interface</span> &#123;</span><br><span class="line">CatchMouse()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">interface</span> &#123;</span><br><span class="line">Bark()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CatDog <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type CatDog implements functions in interface Cat</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(catDog *CatDog)</span></span> CatchMouse() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s is catching mice!\n&quot;</span>, catDog.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type CatDog implements functions in interface Dog</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(catDog *CatDog)</span></span> Bark() &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s is barking!\n&quot;</span>, catDog.Name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// catDog is a pointer to CatDog instance</span></span><br><span class="line">catDog := &amp;CatDog&#123;</span><br><span class="line">Name: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// declare Cat interface and point to CatDog type</span></span><br><span class="line"><span class="keyword">var</span> cat Cat</span><br><span class="line">cat = catDog</span><br><span class="line">cat.CatchMouse()</span><br><span class="line"></span><br><span class="line"><span class="comment">// declare Dog interface and point to CatDog type</span></span><br><span class="line"><span class="keyword">var</span> dog Dog</span><br><span class="line">dog = catDog</span><br><span class="line">dog.Bark()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>另</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run with commands:</span></span><br><span class="line"><span class="comment">// go run src\16_interface2.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">standard interface paradigm:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">type interfaceName interface &#123;</span></span><br><span class="line"><span class="comment">func1(inputParams) (returnParams)</span></span><br><span class="line"><span class="comment">func2(inputParams) (returnParams)</span></span><br><span class="line"><span class="comment">func3(inputParams) (returnParams)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">If the interfaceName is in uppercase, its a public interface.</span></span><br><span class="line"><span class="comment">If the function name is in uppercase, its a public function.</span></span><br><span class="line"><span class="comment">A public function can be accessed outside of the package,</span></span><br><span class="line"><span class="comment">otherwise, non-public function can only be accessed inside of</span></span><br><span class="line"><span class="comment">the package.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Printer <span class="keyword">interface</span> &#123;</span><br><span class="line">Print(<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FuncCaller <span class="function"><span class="keyword">func</span><span class="params">(p <span class="keyword">interface</span>&#123;&#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(funcCaller FuncCaller)</span></span> Print(p <span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">funcCaller(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Printer is the abstraction of printer</span></span><br><span class="line"><span class="comment">// FuncCaller func is the implementation of printer</span></span><br><span class="line"><span class="comment">// printer can call Printer.Print implemented by FuncCaller&#x27;s Print</span></span><br><span class="line"><span class="keyword">var</span> printer Printer</span><br><span class="line">printer = FuncCaller(<span class="function"><span class="keyword">func</span><span class="params">(p <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">fmt.Println(p)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// cast an anonymous function to FuncCaller type</span></span><br><span class="line"><span class="comment">// then printer calls Print implemented by FuncCaller</span></span><br><span class="line">printer.Print(<span class="string">&quot;Golang is Good!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="嵌入embedding">17 嵌入embedding</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// run with commands:</span></span><br><span class="line"><span class="comment">// go run src\16_interface2.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct can embed anonymous attributes (type-only) to implement composition relation.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">standard embedded struct type paradigm:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">type A struct &#123;</span></span><br><span class="line"><span class="comment">typeB</span></span><br><span class="line"><span class="comment">typeC</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Swimming <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(swim *Swimming)</span></span> swim() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;swimming&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Flying <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(flying *Flying)</span></span> fly() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;flying&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wild Duck can swim and fly</span></span><br><span class="line"><span class="keyword">type</span> WildDuck <span class="keyword">struct</span> &#123;</span><br><span class="line">Swimming</span><br><span class="line">Flying</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Domestic Duck can only swim</span></span><br><span class="line"><span class="keyword">type</span> DomesticDuck <span class="keyword">struct</span> &#123;</span><br><span class="line">Swimming</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">wildDuck := WildDuck&#123;&#125;</span><br><span class="line">wildDuck.fly()</span><br><span class="line">wildDuck.swim()</span><br><span class="line"></span><br><span class="line">domesticDuck := DomesticDuck&#123;&#125;</span><br><span class="line">domesticDuck.swim()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境下重装NVIDIA驱动报错kernel module (nvidia_modeset) in use问题分析</title>
      <link href="/posts/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%87%8D%E8%A3%85NVIDIA%E9%A9%B1%E5%8A%A8%E6%8A%A5%E9%94%99kernel-module-nvidia-modeset-in-use%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
      <url>/posts/Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%87%8D%E8%A3%85NVIDIA%E9%A9%B1%E5%8A%A8%E6%8A%A5%E9%94%99kernel-module-nvidia-modeset-in-use%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>Linux环境下重装NVIDIA驱动时，遭遇报错kernel module (nvidia_modeset)inuse。本文排查问题原因，并由此给出了无需重启系统也可正常重装的解决方案。</p><span id="more"></span><h1id="linux环境下重装nvidia驱动报错kernel-module-nvidia_modeset-in-use问题分析">Linux环境下重装NVIDIA驱动报错kernelmodule (nvidia_modeset) in use问题分析</h1><h2 id="问题描述">1 问题描述</h2><p>在Linux环境下重装NVIDIA驱动时，出现报错，原因是内核模块正在使用中<code>kernel module (nvidia_modeset) in use</code>，导致无法安装新驱动。</p><p>NVIDIA驱动安装的报错页面给出的解决方案是重启一下（reboot）即可。但如果是服务器环境下，有其他用户的计算任务在执行，不希望打断，能否避免重启呢？</p><p>不知道原因的情况下，直接使用<code>rmmod nvidia_modeset</code>卸载该内核模块时，会遭遇报错，因为正在被占用而导致无法卸载。而<code>rmmod -f</code>的强制卸载又存在风险，可能造成系统崩溃（systemcrash）。</p><h2 id="原因分析">2 原因分析</h2><p>照理说，老驱动已经卸载，那么不应该存在驱动相关的内核模块仍被使用的情况。</p><p>根据提示，既然是内核模块被占用的问题，那首先通过<code>lsmod</code>检查内核模块的使用情况，可以查到类似的引用关系：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Module                  Size  Used by</span><br><span class="line">nvidia_modeset       1183744  1</span><br><span class="line">nvidia              19722240  1 nvidia_modeset</span><br></pre></td></tr></table></figure><p>从中可以发现，内核模块<code>nvidia_modeset</code>依赖于内核模块<code>nvidia</code>。</p><p>通过进一步检查nvidia相关进程<code>ps -aux | grep nvidia</code>，发现实际上是nvidia的persistencemode的守护进程占用了内核模块nvidia_modeset。而之所以有这样一个守护进程，是为了避免nvidia-smi每次唤起过慢的问题，即，通过设置<code>sudo nvidia-persistenced --persistence-mode</code>启用persistencemode，借助守护进程来维护记录GPU的状态，避免每次nvidia-smi都需要同步检查每一个GPU状态在阻塞等待上耗费太多时间。</p><h2 id="解决方案">3 解决方案</h2><p>查出了原因，再想办法解决就容易了。</p><p>首先，通过<code>ps -aux | grep nvidia</code>找出使用<code>nvidia_modeset</code>的进程。</p><p>随后，通过<code>sudo kill [pid]</code>结束该persistencemode的守护进程。</p><p>通过<code>ps</code>进行验证，等待进程结束后，再检查<code>lsmod</code>就可以发现<code>nvidia_modeset</code>不再被占用了。</p><p>此时，通过<code>rmmod</code>卸载残余的nvidia内核模块，就不会再有报错了。</p><p>如此清理完内核模块后，重新执行NVIDIA驱动安装程序，即一切正常了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> Linux </tag>
            
            <tag> NVIDIA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis笔记</title>
      <link href="/posts/Redis%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/Redis%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>Redis作为一款高效的键值型内存数据库，值得学习。本文梳理学习过程中的笔记。</p><span id="more"></span><h1 id="redis笔记">Redis笔记</h1><blockquote><p>钱文品. Redis深度历险：核心原理与应用实践[M]. 北京: 电子工业出版社,2019.</p></blockquote><h2 id="概述">1 概述</h2><h3 id="了解">1.1 了解</h3><p>Redis主要可以用作：</p><ul><li>缓存：记录点赞数、缓存热帖、用户行为、榜单……；</li><li>分布式锁</li></ul><h3 id="安装">1.2 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">sudo apt install redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># centos</span></span><br><span class="line">sudo yum install redis</span><br></pre></td></tr></table></figure><h3 id="运行">1.3 运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redis command-line interface</span></span><br><span class="line">redis-cli</span><br></pre></td></tr></table></figure><h2 id="数据结构">2 数据结构</h2><p>Redis提供5种基础数据结构，分别为：字符串string、列表list、字典hash、集合set、有序集合zset。</p><h3 id="字符串string">2.1 字符串string</h3><p>Redis所有数据结构都以唯一的key字符串作为名称，以此获得相应的value数据。</p><p>Redisstring内部数据结构类似Java的ArrayList，预分配冗余空间以免频繁分配内存。当字符串小于1MB时，扩容方法为加倍当前容量；当超过1MB时，每次扩充1MB空间。字符串最大长度为512MB。</p><h3 id="列表list">2.2 列表list</h3><p>Redislist类似Java中的LinkedList链表（实际上不完全是），双向链表，插入和删除时间复杂度O(1)，查询时间复杂度O(N)。</p><p>当list删除最后一个元素时，该数据结构被自动删除，内存回收。</p><p>双向链表可以被用来实现队列、栈。</p><h4 id="底层实现ziplist与quicklist">2.2.1底层实现——ziplist与quicklist</h4><p>Redis list底层实现是quicklist数据结构。</p><p>当list元素较少时，采用ziplist（压缩列表）。ziplist用连续内存将所有的元素连续存储。</p><p>当list元素较多时，采用quicklist（快速链表）。quicklist是将链表与ziplist结合的产物，每一个ziplist包含多个元素，却仅需两个前后指针，因此，quicklist避免了为每个元素配备prev/next双指针的空间消耗。quicklist既满足了快速的插入和删除，又避免了产生较大的空间冗余。</p><h3 id="字典hash">2.3 字典hash</h3><p>Redis hash类似Java中的HashMap，无序字典，存储键值对。</p><p>hash采用数组+链表的数据结构，但hash的值只能是字符串。</p><p>当hash删除最后一个元素时，该数据结构被自动删除，内存回收。</p><h4 id="渐进式rehash">2.3.1 渐进式rehash</h4><p>Java的HashMap每次rehash需要一次性全部rehash，而Redis的hash在rehash时，为了避免阻塞服务，采用渐进式rehash。</p><p>渐进式rehash在rehash时，保留新旧两个hash结构。旧的hashtable仍可用作查询，同时将旧的hashtable持续rehash到新的hashtable上。等rehash全部完成后，才以新的hashtable取代旧的hashtable。</p><h3 id="集合set">2.4 集合set</h3><p>Redis set相当于Java中的HashSet，内部的键值对时无序的、唯一的。</p><p>set的底层实现相当于是hash，只不过hash的value村的都是NULL。</p><p>当set删除最后一个元素时，该数据结构被自动删除，内存回收。</p><h3 id="有序集合zset">2.5 有序集合zset</h3><p>Redis zset类似Java的SortedSet和HashMap的结合体。</p><p>zset一方面是set，value元素是唯一的，另一方面其有序性是依靠为value赋予score作为排序权重实现的。</p><p>当zset删除最后一个元素时，该数据结构被自动删除，内存回收。</p><h4 id="跳跃列表skiplist">2.5.1 跳跃列表skiplist</h4><p>zset内部的排序功能采用skiplist实现。</p><p>skiplist中，高层（level）链表跨度大，连接比较大的跨度范围。越往底层跨度越小，表示比较小的跨度范围。通过skiplist，可以从大范围缩小到小范围，快速定位插入与查询的位置。</p><h3 id="小结">2.6 小结</h3><h4 id="通用性质">2.6.1 通用性质</h4><p>list, set, hash, zset这四种容器数据结构具有两个通用性质：</p><ol type="1"><li>create if not exists：操作时，如容器不存在，则新建；</li><li>drop if not elements：操作时，如容器为空，则删除。</li></ol><h4 id="过期时间">2.6.2 过期时间</h4><p>所有数据结构都可设置过期时间，过期则删除。</p><p>字符串设置过期时间后，如果字符串被修改，则过期时间失效。</p><h2 id="应用">3 应用</h2><h3 id="分布式锁">3.1 分布式锁</h3><p>setnx (set if not exists)指令做锁标记，del删除锁标记。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; setnx lock:resource_a <span class="literal">true</span></span><br><span class="line">&gt; expire lock:resource_a 5</span><br><span class="line">&gt; del lock:resource_a</span><br></pre></td></tr></table></figure><ul><li>事务需要判单自己能够设置对争用资源的分布式锁，才能修改资源。</li><li>expire设置5秒过期时间，防止死锁。</li></ul><h3 id="延时队列">3.2 延时队列</h3><p>list可以作为异步消息队列。</p><p>rpush/lpush操作入队列，lpop/rpop操作出队列。</p><p>blpop/brpop可以阻塞式（blocking）地读取数据。</p><h3 id="位图">3.3 位图</h3><p>get/set处理整个位图的内容。</p><p>getbit/setbit处理各个位。</p><p>bitcount统计范围内1的位数。</p><p>bitpos查询第一个0或1的位置。</p><p>bitfield，包含get/set/incrby子指令，可以读取、设置和自增指定范围的位。bitfield可以混合多个子指令执行。</p><h3 id="hyperloglog">3.4 HyperLogLog</h3><p>统计PV量无需去重，incrby自增就可以。统计UV则需要去重，不是简单的自增，去重常用的set集合在数据量很大时会消耗巨大的内存空间。</p><p>HyperLogLog可以实现去重计数问题。</p><p>pfadd添加元素（增加对该元素的计数）；</p><p>pfcount统计元素的计数。</p><p>pfmerge用于合并多个pf计数元素为同一个元素，合并pf计数值。</p><p>pf指的是HyperLogLog的发明人Philippe Flajolet教授。</p><p>HyperLogLog数据结构在计数较小时采用稀疏矩阵存储，在计数超过阈值时，转变为稠密矩阵。</p><p>HyperLogLog占据12KB存储空间，在数据量很大时，比set小了太多。</p><p>HyperLogLog的原理是调整低位连续零位的最大长度K，若K越大，概率越低，则说明计数N越大，由此通过有限的连续零位K来估算计数N，K与N存在线性相关性。占用12KB则是因为Redis的HyperLogLog实现采用<spanclass="math inline">\(2^{14}=16384\)</span>个桶，每个桶maxbit为6bit，因此<span class="math inline">\(2^{14} \times 6bit \div 8bit/byte =12KB\)</span>。</p><h3 id="布隆过滤器bloom-filter">3.5 布隆过滤器（Bloom Filter）</h3><blockquote><p><a href="https://github.com/RedisBloom/RedisBloom">RedisBloom</a></p><p><strong>RedisBloom: Probabilistic Data Structures forRedis</strong></p><p>The RedisBloom module provides four data structures: a scalable<strong>Bloom filter</strong>, a <strong>cuckoo filter</strong>, a<strong>count-min sketch</strong>, and a <strong>top-k</strong>. Thesedata structures trade perfect accuracy for extreme memory efficiency, sothey're especially useful for big data and streaming applications.</p></blockquote><p>bf.add添加元素；</p><p>bf.exists检查元素是否存在。</p><p>bf.madd添加多个元素；</p><p>bf.mexists检查多个元素是否存在。（返回分别表示每个元素存在性的0/1）</p><p>bf.reverse在添加元素之前预设布隆过滤器的key,error_rate和initial_size。</p><p>布隆过滤器：</p><ul><li>添加时计算元素k个哈希，将对应的k个bit置为1；</li><li>检查存在时计算元素k个哈希，检查对应的k个bits是否都为1，如果是，则元素存在，否则不存在。</li></ul><p>对hash函数数量k，布隆过滤器bit数量m，预计元素数量n，错误率f，有公式：<span class="math display">\[k = \ln2 \times (m/n) =  0.7 \times (m / n) \\f = 2^{-k} =  0.6185^{m/n}\]</span></p><ul><li>此时错误率最低。</li></ul><h3 id="简单限流">3.6 简单限流</h3><p>以zset的score范围来划定滑动窗口。score存储timestamp，这样就可以计算得出时间窗口内的元素数量，判断访问计数是否超限。</p><p>zset不适合数量很大的限流，例如：60秒内限流100万次，100万个元素的zset会占用过大的空间。</p><h3 id="漏斗限流">3.7 漏斗限流</h3><blockquote><p><a href="https://github.com/brandur/redis-cell">redis-cell</a></p><p>A Redis module that provides rate limiting in Redis as a singlecommand. Implements the fairly sophisticated <ahref="https://en.wikipedia.org/wiki/Generic_cell_rate_algorithm">genericcell rate algorithm</a> (GCRA) which provides a rolling time window anddoesn't depend on a background drip process.</p></blockquote><p>漏斗（funnel）容量有限，不满时可以装入液体，漏斗满时无法装入液体，需要等漏斗内的液体慢慢流走一部分，才能继续装入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CL.THROTTLE user123 15 30 60 1</span><br><span class="line">               ▲     ▲  ▲  ▲ ▲</span><br><span class="line">               |     |  |  | └───── apply 1 token (default if omitted)</span><br><span class="line">               |     |  └──┴─────── 30 tokens / 60 seconds</span><br><span class="line">               |     └───────────── 15 max_burst</span><br><span class="line">               └─────────────────── key &quot;user123&quot;</span><br></pre></td></tr></table></figure><h3 id="geohash">3.8 GeoHash</h3><p>通过GeoHash功能，可以快速找出指定经纬度周围的元素。</p><p>GeoHash将二维平面处理成网格，然后不断地行、列二分，对二维坐标进行编码，映射为一维整数。</p><p>Redis中，GeoHash将经纬度编码为52位整数，存入zset中，score是经纬度编码整数（zset的浮点数score可以无损存储52位整数），value是元素值。在zset中，借助skiplist来找出元素附近范围的其他元素是很容易的事情。使用坐标时，将编码整数解码还原为坐标即可。</p><p>geoadd添加经纬度坐标；</p><p>geodist计算元素之间的距离；</p><p>geopos读取元素的坐标；</p><p>geohash读取元素的经纬度编码字符串（base32编码的坐标值）。</p><p>georadiusbymember查询指定元素附近的其他元素。</p><p>注意：集群中，单个key下存储的坐标数量不宜过多（超过1MB），避免集群迁移出现卡顿。或者干脆采用独立实例，不做集群。</p><h3 id="scan">3.9 scan</h3><p>keys列出符合pattern的key，采用遍历算法，时间复杂度O(N)。</p><p>scan从指定cursor开始，匹配pattern，扫描count个槽位。相较于keys，scan可以避免每次遍历整个redis内存槽。</p><p>Redis本身就相当于是一个很大的HashMap。scan的遍历顺序采用高位进位加法，以此避免字典扩容和缩容时重复或遗漏遍历槽位。</p><p>zscan遍历zset元素；</p><p>sscan遍历set元素；</p><p>hscan遍历hash元素。</p><h3 id="避免bigkey">3.10 避免bigkey</h3><p>在业务开发中，避免大key的产生。</p><p>大key数据不论是在集群迁移时，还是在容器需要扩容时，哪怕是在回收时（因较大内存空间的分配和回收），都容易造成卡顿。</p><p>可以采用<code>--bigkeys</code>选项来检索大key。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --bigkeys</span><br></pre></td></tr></table></figure><h2 id="原理">4 原理</h2><h3 id="io模型">4.1 I/O模型</h3><p>Redis是单线程程序。</p><p>Redis通过非阻塞I/O多路复用技术来提高单线程I/O处理效率。</p><p>对于每一个客户端socket连接，Redis为其关联：</p><ol type="1"><li>一个指令队列，用于从客户端socket连接中读取指令。指令队列中的指令遵循FCFS；</li><li>一个响应队列，用于向客户端socket连接中写入指令。如果响应队列为空，说明暂无响应数据，则将该响应队列移出多路复用的write_fds以节省select代价。</li></ol><p>对于定时任务，Redis采用最小堆进行管理：</p><ul><li>最临近的任务放在堆顶；</li><li>取堆顶任务的距离时间作为select操作的timeout，这样在这段时间内就可以放心地select，不必担心错过定时任务。</li></ul><h3 id="通信协议">4.2 通信协议</h3><p>RESP (Redis SerializationProtocol)是Redis采用地通信协议，这是一种文本协议，实现简单，解析性能好。</p><p>RESP把数据分为5种最小单元类型，制定规则：</p><ol type="1"><li>单行字符串，以<code>+</code>开头；</li><li>多行字符串，以<code>$&lt;len&gt;</code>开头；</li><li>整数，以<code>:</code>开头；</li><li>错误消息，以<code>-</code>开头；</li><li>数组，以<code>*&lt;len&gt;</code>开头。</li></ol><h3 id="持久化">4.3 持久化</h3><h4 id="快照">4.3.1 快照</h4><p>Redis采用fork机制创建子进程来导出快照。</p><p>内存空间采用COW机制，因此，父进程照常处理事务，修改的数据会记录在新的空间中，而子进程看到的仍然是fork时的内存数据，不用担心导出时数据又被更新的情况。</p><h4 id="aof日志">4.3.2 AOF日志</h4><p>AOF日志记录Redis实例创建以来所有的修改性指令序列。</p><p>Redis收到客户端修改指令后，进行检查和处理，如果指令执行成功，则立即将该指令文本存储到AOF日志中。</p><p><strong>AOF重写</strong>：长时间修改会积累大量的AOF日志，Redis可以开辟一个子进程遍历生成新的AOF指令日志，替代旧的AOF日志，起到日志瘦身的效果。（对同一个key频繁修改，会产生大量AOF日志，但实际上存一项就可以了。）</p><p><strong>fsync</strong>：Redis定期调用fsync确保AOF日志实实在在写入磁盘，避免突然断电造成内存缓冲数据丢失。</p><p><strong>混合持久化</strong>：快照 +AOF日志（增量）。提高重启效率，避免重做全部的AOF日志操作。</p><h3 id="管道">4.4 管道</h3><p>Redis客户端重排指令。将读指令连续归在一起，写指令连续归在一起。这样客户端只需要向操作系统网络写缓冲区写一次，读缓冲区读一次即可，服务器端同理。节省了网络读写的次数。</p><h3 id="事务">4.5 事务</h3><p>Redis可以实现begin, commit和rollback的事务功能。</p><h3 id="pubsub">4.6 PubSub</h3><p>PubSub, Publisher Subscriber.</p><p>消息多播，一个Publisher可以向多个Subscriber提供消息。</p><p>Subscriber需要先订阅若干个channel，随后，Publisher向channel中发布数据，Redis会将数据提供给订阅该channel的所有Subscriber。</p><p>但是，如果subscriber掉线了，过后再上线，就不会再收到掉线时错过的消息了。Redis宕机时，就相当于时没有任何subscriber的情况，会造成所有的消息都被直接丢失的情况。</p><p>Redis在5.0版本开始提供新的Stream数据结构，实现了持久化的消息队列。</p><h3 id="节省空间">4.7 节省空间</h3><h4 id="bit-vs-64bit">4.7.1 32bit vs 64bit</h4><p>32bit编译的Redis比64bit编译的版本节省一半的指针内存消耗。如使用内存不超过4GB，采用32bit即可。</p><h4 id="基于ziplist的小对象压缩存储">4.7.2基于ziplist的小对象压缩存储</h4><p>相较于传统的链表，每个entry作为一个节点，都需要配备prev/next两个指针，ziplist则将多个entry以数组的形式存为一个节点，减少所需的指针空间。</p><p>每个ziplits节点存储：</p><ol type="1"><li>zlbytes，4字节，ziplist占用的字节数；</li><li>zltail，4字节，最后一个entry的偏移地址；</li><li>zllen，2字节，ziplist的entry数量；</li><li>entry数组，存储若干entry；</li><li>zlend，1字节，幻数255标记结尾。</li></ol><h4 id="基于intset的紧凑整数数组">4.7.3 基于intset的紧凑整数数组</h4><p>inset数据结构包含：</p><ol type="1"><li>encoding，表示value的位宽；</li><li>length，表示元素的个数；</li><li>value数组，存储若干value。</li></ol><p>若整数用uint16表示即可，intset就用uint16；需要升级到uint32或uint64时再动态升级。</p><h4 id="内存回收机制">4.7.4 内存回收机制</h4><p>删除key时，内存不会立即全部回收释放交给操作系统，而是会预留部分内存给未来的使用需求。</p><h4 id="内存分配算法">4.7.5 内存分配算法</h4><p>Redis有多种内存分配算法：</p><ol type="1"><li>jemalloc，facebook；</li><li>tcmalloc，google。</li></ol><p>Redis默认使用jemalloc，该库性能稍好。</p><p>通过<code>info memory</code>可以查到当前使用的内存分配库。</p><h2 id="集群">5 集群</h2><p>多个Redis节点组成Redis集群。</p><h3 id="redis集群与cap定理">5.1 Redis集群与CAP定理</h3><h4 id="cap定理">5.1.1 CAP定理</h4><p>CAP定理指的是分布式系统的一致性（Consistency）、可用性（Availability）和分区容忍性（Partitiontolerance）不能三者兼得，最多只能满足两项。</p><p>当网络异常时，分布式节点之间无法连接，形成网络分区现象，如果要容忍分区情况，此时有两种选择：</p><ol type="1"><li><strong>保证可用性</strong>：即允许对每个节点的读和写，这样一来，节点之间就会因为无法立即同步而出现数据不一致的问题，<strong>放弃了强一致性</strong>，即AP；</li><li><strong>放弃可用性</strong>：只允许对每个节点的读，禁止写，这样一来，能保证节点之间的数据<strong>一致性</strong>，但用户无法更新数据，<strong>损失了可用性</strong>，即CP[；</li></ol><p>也就是说，网络分区发生时，一致性和可用性无法两全。</p><h4 id="最终一致性">5.1.2 最终一致性</h4><p>Redis的主从节点之间异步同步，不能保证严格的强一致性，因此Redis的选择是放弃一致性，转而满足可用性和分区容忍性。</p><p>Redis提供的是<strong>最终一致性</strong>（Eventuallyconsistent），网络断开时，主从节点之间会出现不一致，但网络恢复后，会多策略地尽快同步，最终主从节点保持一致。</p><h3 id="集群同步技术">5.2 集群同步技术</h3><h4 id="主从同步与从从同步">5.2.1 主从同步与从从同步</h4><p>主从同步（master-slavesync）：主节点与从节点之间同步，主节点把数据复制（replicate）到从节点。</p><p>从从同步（slave-slave sync）：从节点把数据复制到另一个从节点。</p><p>通过引入从从同步，可以降低主节点的同步负担。</p><h4 id="增量同步">5.2.2 增量同步</h4><p>Redis同步指令流。</p><p>Redis主节点把写指令记录在本地的指令缓存（buffer）中，异步地将缓存中地指令同步到从节点，即增量同步。</p><p>指令缓存采用的是定长环形数组，因此，如果数组写满了，就会重新从头写入，也就覆盖掉了原有内容。如果网络分区发生时，有节点上产生大量写指令，为了避免指令缓存被覆盖导致写入记录丢失，不能只依赖指令缓存来保存未同步的指令。</p><h4 id="快照同步">5.2.3 快照同步</h4><p>快照同步：执行bgsave操作，把内存中的数据全部快照存储到硬盘文件中。</p><p>增加从节点：增加新的从节点时，通过快照同步为从节点全量加载数据，随后再做增量同步。</p><p>快照同步死循环问题：当快照同步太慢，或者指令缓存太小时，就会出现快照同步还没结束，指令缓存就写满的情况。这样一来，指令就不得不直接写入，那快照就过期了，又得重新做一遍快照，而重新做快照可能又太慢，指令缓存又写满了……。为避免死循环，需要设置一个合适的指令缓存大小。</p><h4 id="无盘复制">5.2.4 无盘复制</h4><p>快照同步需要写入磁盘，有不小的文件IO代价。而且Redis执行AOF时需要做fsync，如果此时快照同步，就不得不延后fsync，这样AOF就延后了，指令执行就延后了。</p><p>为此，Redis2.8.18开始支持无盘复制，主节点可以通过socket通信直接把快照发给从节点，避免磁盘上的文件IO代价。</p><h4 id="wait指令实现同步复制">5.2.5 wait指令实现同步复制</h4><p>Redis的复制本身时异步执行的，因此不具备强一致性。</p><p>通过wait指令，可以实现Redis的同步复制，保证系统的（在没有网络分区情况下的）强一致性。</p><p>wait可以有限等待，也可以无限等待N个从节点同步完成，再执行后续指令。</p><p>如果无限等待时，Redis出现网络分区，那么同步无法完成，就会一直阻塞，导致Redis失去可用性。</p><h3 id="sentinel自动主从切换技术">5.3 Sentinel：自动主从切换技术</h3><p>RedisSentinel集群通常包含3~5个Sentinel节点，保证Sentinel的可用性。</p><p>Sentinel集群持续监控主节点和从节点的状态，一旦出现问题，就自动提升一个可用的从节点为主节点，取代故障的不可用的主节点。</p><p>Sentinel的具体工作流程：</p><ol type="1"><li>Client首先向Sentinel请求主节点的地址；</li><li>Sentinel将最新的主节点地址返回给Client；</li><li>Client访问主节点。</li></ol><h3 id="codis中心化集群方案">5.4 Codis：中心化集群方案</h3><p>Codis是Redis集群方案之一，在Codis基础之上，开发出了TiDB。</p><p>单个Redis节点如果存储太多数据，会使得快照文件rdb特别大，导致同步起来很耗时，而且全量恢复也变得很慢。</p><p>Codis通过把数据分散到众多Redis节点上，来避免每个节点的数据量过大。</p><p>Codis对key做哈希，映射到1024个槽位（slots），以此求模，取得数据应该映射到的节点序号。分配完成后，Codis节点会存储槽位与Redis节点的映射关系。</p><p>Codis的扩容：可以通过增加Redis节点来扩容集群的容量。</p><p>Codis通过mget指令可以从分散的节点上取数据并汇总给用户。</p><h3 id="cluster去中心化集群方案">5.5 Cluster：去中心化集群方案</h3><p>Redis Cluster是去中心化的集群方案，每个节点都是对等的。</p><p>Redis Cluster把数据分为16384个槽位（<spanclass="math inline">\(2^{14}\)</span>），每个节点负责一部分的槽位。客户端根据key来确定槽位，进而确定目标节点。如果客户端向错误的节点发送请求，该节点会计算key对应的槽位，向客户端发送重定向的响应，告知客户端目标节点。</p><p><strong>节点迁移</strong>：迁移的最小单位是槽位，流程是从源节点获取内容，然后存到目标节点，最后从源节点中删除内容。</p><p><strong>容错</strong>：RedisCluster可以为每个主节点设置若干从节点，自动实现故障时从节点提升为主节点。</p><p><strong>可能下线与确定下线</strong>：集群节点采用Gossip协议来广播自己的状态。一个节点发现某个节点失联，则进入可能下线（PFail,PossiblyFail）状态。集群中大多数节点都收到该节点失联的消息，则标记该节点为确定下线（Fail）状态。</p><h2 id="扩展">6 扩展</h2><h3 id="streamredis5.0的消息队列">6.1 Stream：Redis5.0的消息队列</h3><p>Redis Stream是Redis5.0中退出的一款新的支持多播的可持久化消息队列，极大地借鉴了Kafka的设计。</p><p>RedisStream通过消息链表将所有加入的消息串起来，每个消息包含唯一ID（timestampInMillis-sequence）和消息内容（形如hash结构的键值对）。</p><p>消费组：每个Stream可以挂载多个消费组（ConsumerGroup），不同消费组互相独立，互不影响，每个消费组都有一个游标last_delivered_id在Stream数组上向前移动，表示当前已经消费到哪条消息了。</p><p>消费者：每个消费组中可以包含多个消费者（Consumer），消费者之间为竞争关系，任意一个消费者读取消息都会使消费组的游标last_delivered_id向前移动。</p><p>PEL：每个消费者有一个的PEL（Pending EntriesList），PEL是一个状态列表pending_ids，记录已经被客户端读取，但尚未收到ACK的消息ID。通过PEL可以确保客户端至少消费了消息1次，而不会在网络传输中途丢失了消息。客户端重连时，可以根据PEL重新获取一遍接收失败的消息。</p><p>分区：Redis没有原生支持分区，分区Stream可以通过在客户端设计哈希策略来实现。Kafka原生支持Partition也是通过客户端的HashStrategy来决定将不同的消息加入不同的分区的。</p><p>xgroup create：创建消费组，创建时需要指定从哪个消息ID开始消费。</p><p>xadd：加入消息；</p><p>xdel：删除消息，只设置标志位，不实际删除消息；</p><p>xrange：获取消息列表，自动过滤标记为删除的消息；</p><p>xlen：获取消息长度；</p><p>del：删除整个消息列表的所有消息。</p><h3 id="info状态诊断">6.2 info：状态诊断</h3><p>info指令可查询：</p><ol type="1"><li>server：服务器信息；</li><li>clients：客户端信息；</li><li>memory：运行内存统计数据；</li><li>persistence：持久化信息；</li><li>stats：通用统计数据；</li><li>replication：主从复制；</li><li>cpu：cpu使用情况；</li><li>cluster：集群信息；</li><li>keyspace：键值对统计信息。</li></ol><p>查询方式如：</p><p>Redis内：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; info memory</span><br></pre></td></tr></table></figure><p>Redis外：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli info memory</span><br></pre></td></tr></table></figure><h3 id="redlock分布式锁">6.3 Redlock分布式锁</h3><p>Sentinel集群中，主节点挂掉后，从节点取而代之，但主节点的分布式锁没有同步到从节点，新升任主节点的从节点中没有这个分布式锁，就会造成不安全性。</p><p>对多个对等的Redis实例，Redlock基于“大多数机制”，加锁时，向过半的节点发送set指令，过半的节点加锁成功，则本次加锁成功；解锁时，向所有节点发送del指令。因为Redlock需要向多个节点进行读写，考虑出错重试、时钟漂移等问题，相对单实例Redis的性能会下降一点。</p><h3 id="过期策略">6.4 过期策略</h3><p>设置了expire时间的key放在一个独立的字典里。</p><p>Redis的过期策略既有定期扫描，也有惰性策略。</p><p>定期扫描，Redis默认每秒10次过期扫描，扫描算法为：</p><ol type="1"><li>从过期字典中随机选出20个key；</li><li>删除这20个key中已经过期的key；</li><li>如果过期key的比例超过1/4，则重复步骤1.。</li></ol><p>为避免循环过度造成线程卡死，默认设置扫描时间上限为25ms。这个25ms的依据是，1秒10次，每次25ms，总共最多占用250ms，即1/4的CPU时间。Redis实际上限制的是CPU时间，避免过期扫描耗费超过1/4的CPU时间。</p><p>如果大量key同时过期，Redis就会循环扫描字典，删除key，直到过期字典中的过期key比例变低。当过期的key数量很多的时候，扫描时间是完全可能撞到25ms的上限的。再加上内存回收的代价，就会产生比较多的CPU消耗。如果此时新来的请求设置的超时时间很短，例如10ms，就会导致刚设置数据，就开始扫描，等25ms扫描完，才来得及处理客户端的读取操作时，key早就过期了。客户端就发现自己刚设置的值，立即去修改就会超时过期，实际上是因为Redis的过期策略在间隔中消耗了时间。</p><p>为了避免以上问题，一方面，考虑到过期策略扫描耗时，过期时间不宜设置的过短；另一方面，避免大量key同时过期，哪怕对统一的过期时间加上一个随机量也好。</p><p>惰性策略：访问key时对key的过期时间进行检查，如果过期了就删除。</p><p>从节点不会主动执行过期策略，主节点删除节点并同步del给从节点，从节点收到后写入AOF，跟着主节点照做就是。不过因为同步是异步的，所以主从节点之间强一致性无法保证。</p><h3 id="内存淘汰算法">6.5 内存淘汰算法</h3><p>Redis不允许发生swap，因为会造成性能急剧下降。</p><p>当Redis实际内存超过maxmemory时，有几种maxmemory-policy：</p><ol type="1"><li>noeviction：可读不可写；</li><li>volatile-lru：淘汰过期集合中最少使用的（LRU）；</li><li>volatile-ttl：淘汰过期集合中剩余寿命TTL最小的key；</li><li>volatile-random：淘汰过期集合中随机key；</li><li>allkeys-lru：全体key中淘汰LRU；</li><li>allkeys-random：全体key中淘汰随机的key。</li></ol><h3 id="懒惰删除">6.6 懒惰删除</h3><p>del直接删除，通常非常快，但对象非常大时，删除操作会造成单线程卡顿。</p><p>Redis4.0引入的unlink可以解决卡顿问题，unlink卸下待删除对象，然后交给后台线程去异步地回收内存。</p><p>Redis4.0为flushdb和flushall都引入了异步化，加上async选项即可，如：<code>flushall async</code>。</p><p>异步删除借助异步队列实现，MainThread通过submitTask将待删除对象放入ConcurrentQueue，懒惰删除线程LazyFreeThread从中fetchTask并执行异步删除。</p><p>Redis的AOFSync需要将AOF日志同步到磁盘，需要调用sync函数，因为sync比较耗时，因此采用异步线程去调用，该异步线程也有自己的任务队列，存放AOFSync任务。</p><p>Redis在del和flush以外，也会在key过期、LRU淘汰、rename指令执行时回收内存。节点接受全量同步rdb文件后也会清空内存以载入数据。这些删除场景涉及额外的选项：</p><ol type="1"><li>slave-lazy-flush：从节点接受rdb文件后的flush操作；</li><li>lazyfree-lazy-eviction：内存达到maxmemory时进行淘汰；</li><li>lazyfree-lazy-expire-key：过期删除；</li><li>lazyfree-lazy-server-del rename：指令删除destKey。</li></ol><h3 id="jedis">6.7 Jedis</h3><p>Jedis是Java的Redis开源客户端。</p><p>因为Jedis对象不是线程安全的，所以使用Jedis是从Jedis连接池JedisPool中取出一个Jedis对象归该线程独占，用完了再还给连接池。</p><p>Jedis默认没有重试机制，网络抖动造成连接断开，再发送指令就会报错。需要手动捕获JedisConnectionException进行重连处理。</p><h3 id="redis安全">6.8 Redis安全</h3><h4 id="指令安全">6.8.1 指令安全</h4><p>rename-command既可以将已有命令更名，也可以更名为空字符串，从而屏蔽该命令被调用。</p><h4 id="端口安全">6.8.2 端口安全</h4><p>bind指令规定监听的IP地址。</p><p>requirepass设置密码访问限制，从节点masterauth设置于主节点同步连接密码。</p><h4 id="脚本安全">6.8.3 脚本安全</h4><p>避免UGC的Lua脚本。</p><p>避免以root权限启动Redis。</p><h4 id="ssl代理">6.8.4 SSL代理</h4><p>使用SSH保护Redis连接。</p><p>使用官方推荐的spiped工具对SSH通道进行二次加密。spiped是一款加密代理软件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识分布式系统：CAP定理与BASE理论</title>
      <link href="/posts/%E5%88%9D%E8%AF%86%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%9ACAP%E5%AE%9A%E7%90%86%E4%B8%8EBASE%E7%90%86%E8%AE%BA/"/>
      <url>/posts/%E5%88%9D%E8%AF%86%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%9ACAP%E5%AE%9A%E7%90%86%E4%B8%8EBASE%E7%90%86%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<p>初步学习分布式系统，理解CAP定理与BASE理论。</p><span id="more"></span><h1id="初识分布式系统cap定理与base理论">初识分布式系统：CAP定理与BASE理论</h1><p>传统单机事务模型难以应对分布式事务的处理需求，需要分布式系统。分布式系统的节点分布在网络中，难以像传统的集中式事务处理系统那样实现严格的ACID特性。</p><h2 id="cap定理">1 CAP定理</h2><h3 id="背景">1.1 背景</h3><p>2000年7月，加州大学伯克利分校Eric Brewer教授在ACM PODC (Principles ofDistributed Computing)会议上提出了CAP猜想。</p><p>2年后，麻省理工学院的Seth Gilbert和NancyLynch从理论上证明了CAP猜想的可行性，从此CAP定理成为分布式计算领域的公认定理。</p><h3 id="定理">1.2 定理</h3><p><strong>CAP定理</strong>：一个分布式系统不可能同时满足一致性（Consistency）、可用性（Availiability）与分区容错性（Partitiontorlence）这三个基本需求，最多智能同时满足其中两项。</p><img src="/posts/%E5%88%9D%E8%AF%86%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%EF%BC%9ACAP%E5%AE%9A%E7%90%86%E4%B8%8EBASE%E7%90%86%E8%AE%BA/CAP_Theorem.png" class="" title="CAP Theorem"><h4 id="一致性consistency">1.2.1 一致性（Consistency）</h4><p>一致性指的是多副本之间的一致性。分布式系统场景下，一个副本更新后，其他副本如果没有及时更新，那从其他副本上读取到的数据仍然是老数据，即，副本之间的数据出现不一致。</p><p>所有节点在同一时间具有相同的数据。</p><h4 id="可用性availibity">1.2.2 可用性（Availibity）</h4><p>可用性指的是系统提供的服务必须一直处于可用状态，即，对用户请求总是在有限的时间内返回结果。</p><p>每个请求不关成功或是失败都有响应。</p><h4 id="分区容错性partition-torlence">1.2.3 分区容错性（Partitiontorlence）</h4><p>分区容错性指的是分布式系统遇到任何网络分区故障时，仍然能够对外提供满足一致性和可用性的服务，除非整个网络环境都发生了故障。</p><p>系统中任意信息的丢失或失败不影响系统的继续运作。</p><p>注：</p><ul><li>分布式系统中，不同节点分布在不同的子网络，可能出现子网络之间网络断连，但子网络内部正常，使得分布式系统被分割为若干孤立区域。</li><li>组成一个分布式系统的每个节点的加入和退出，都可以看成时一个特殊的网络分区。</li></ul><h3 id="应用">1.3 应用</h3><p>根据CAP定理，分布式系统在应用中必须作出取舍，只能满足最多两个性质，意味着必须选择放弃一个性质。</p><table><colgroup><col style="width: 20%" /><col style="width: 50%" /><col style="width: 28%" /></colgroup><thead><tr class="header"><th>放弃性质</th><th>说明</th><th>应用</th></tr></thead><tbody><tr class="odd"><td>CA：放弃分区容错性（-P）</td><td>单点集群系统，放弃分区容错性意味着放弃系统的可扩展性。实现分区容错性，简单的方法是将所有的数据（至少是事务相关的数据）放在一个分布式节点上，这样网络分区问题时，每个子网络都有依赖数据的可用副本。</td><td>RDBMS</td></tr><tr class="even"><td>CP：放弃可用性（-A）</td><td>一旦分布式系统遭遇网络分区或其他故障，受影响的服务需要等待一定时间才能恢复对外服务，在这段时间内不可用。满足一致性，分区容忍性的系统，通常性能不是特别高。</td><td>MongoDB, HBase, Redis</td></tr><tr class="odd"><td>AP：放弃一致性（-C）</td><td>放弃分布式系统的强一致性，保证分布式系统的最终一致性。引入时间窗口的概念，隔一段时间在不同节点之间复制数据副本。</td><td>CouchDB, Cassandra, DynamoDB, Riak</td></tr></tbody></table><p>具体地，</p><ul><li>CA：放弃分区容错性<ul><li>RDBMS：关系型数据库管理系统（Relational Database ManagementSystem），不具备可扩展性。</li></ul></li><li>CP：放弃可用性<ul><li>MongoDB：NoSQL，面向文档（document-oriented）；</li><li>HBase：Hadoop Database，面向列（column-oriented）；</li><li>Redis：Remote Dictionary Server，键值存储；</li></ul></li><li>AP：放弃一致性<ul><li>CouchDB：面向文档；</li><li>Cassandra：面向列；</li><li>DynamoDB：面向文档；</li><li>Riak：键值存储；</li></ul></li></ul><h2 id="base理论">2 BASE理论</h2><p>BASE名字取自缩写：</p><ul><li>Basically Available</li><li>Soft state</li><li>Eventually consistent</li></ul><h3 id="背景-1">2.1 背景</h3><p>BASE理论由eBay架构师Dan Prichett在文章BASE: An AcidAlternative中首次提出，是对CAP中一致性和可用性权衡的结果。</p><h3 id="理论">2.2 理论</h3><p>BASE理论的核心思想是：即使无法做到强一致性（Strongconsistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventualconsistency）。</p><p>牺牲强一致性来获得可用性。</p><h4 id="基本可用basically-available">2.2.1 基本可用（BasicallyAvailable）</h4><p>分布式系统在出现不可预知故障时，允许损失部分可用性。</p><p>如：</p><ul><li>响应时间上的损失：出现故障时，响应时间一定程度增加；</li><li>功能上的损失：购物节高峰时，部分用户被引导到一个降级页面。</li></ul><h4 id="软状态soft-state">2.2.2 软状态（Soft state）</h4><p>允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。</p><h4 id="最终一致性eventually-consistent">2.2.3 最终一致性（Eventuallyconsistent）</h4><p>系统中所有的数据副本，经过一段时间同步后，最终能达到一个一致的状态。</p><p>不需要实时一致，达到一致所需的时间延迟，取决于网络延迟、系统负载和数据复制方案设计等因素。</p><p>实际工程实践中，最终一致性存在五类变种：</p><ol type="1"><li>因果一致性（Causalconsistency）：进程A修改数据后通知进程B，进程B读取的数据应该是新值。</li><li>读己之所写（Read yourwrites）：进程A修改后再读取，得到的应该是新值。</li><li>会话一致性（Sessionconsistency）；系统保证再同一个有效的会话中实现读己之所写。</li><li>单调读一致性（Monotonic readconsistency）：进程读到新值后，后续不应该反而读出旧值。</li><li>单调写一致性（Monotonic writeconsistency）：同一个进程的写操作应该顺序执行。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Distributed System </tag>
            
            <tag> CAP Theorem </tag>
            
            <tag> BASE Theory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selector - 从JDK11源码理解Java I/O复用原理</title>
      <link href="/posts/Selector-%E4%BB%8EJDK11%E6%BA%90%E7%A0%81%E7%90%86%E8%A7%A3Java-I-O%E5%A4%8D%E7%94%A8%E5%8E%9F%E7%90%86/"/>
      <url>/posts/Selector-%E4%BB%8EJDK11%E6%BA%90%E7%A0%81%E7%90%86%E8%A7%A3Java-I-O%E5%A4%8D%E7%94%A8%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>阅读JDK11源码实现的过程中，发现同为<code>java.nio.channels.Selector</code>，是Windows和Linux平台的<code>Selector.open()</code>所构造的Selector的底层实现完全不一样。</p><span id="more"></span><h1 id="selector---从jdk11源码理解java-io复用原理">Selector -从JDK11源码理解Java I/O复用原理</h1><p>Selector是JavaNIO中核心的多路复用选择器。线程可以将SocketChannel与选择键注册到Selector上，而Selector会选出I/O状态符合选择键条件的SocketChannel实例。</p><h2 id="应用层">应用层</h2><p>线程将SocketChannel实例与选择键注册到Selector上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    socketChannel.register(<span class="built_in">this</span>.selector, SelectionKey.OP_READ);    <span class="comment">// socketChannel is always Writable</span></span><br><span class="line">    <span class="comment">// socketChannel.register(this.selector, SelectionKey.OP_READ | SelectionKey.OP_WRITE);</span></span><br><span class="line">    <span class="built_in">this</span>.selector.wakeup();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClosedChannelException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Selector可以取出I/O状态符合选择键的SocketChannel集合，遍历处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.selector.select();</span><br><span class="line"></span><br><span class="line">    Set&lt;SelectionKey&gt; selectionKeySet = <span class="built_in">this</span>.selector.selectedKeys();</span><br><span class="line">    Iterator&lt;SelectionKey&gt; selectionKeys = selectionKeySet.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (selectionKeys.hasNext()) &#123;</span><br><span class="line">        <span class="type">SelectionKey</span> <span class="variable">selectionKey</span> <span class="operator">=</span> selectionKeys.next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (selectionKey.isReadable()) &#123;</span><br><span class="line">            selectionKey.cancel();      <span class="comment">// avoid repeating selecting the same channel</span></span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> (SocketChannel) selectionKey.channel();</span><br><span class="line"></span><br><span class="line">            <span class="type">HttpWorker</span> <span class="variable">httpWorker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpWorker</span>(webRoot, socketChannel);</span><br><span class="line">            <span class="built_in">this</span>.executorService.submit(httpWorker);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        selectionKeys.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象层">抽象层</h2><h3 id="selector">Selector</h3><h4 id="selector.open">Selector.open()</h4><p>外部通过<code>Selector.open()</code>方法就可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"></span><br><span class="line"><span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br></pre></td></tr></table></figure><p>在<code>Selector</code>抽象类中实现为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Selector</span> <span class="keyword">implements</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* more */</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Opens a selector.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; The new selector is created by invoking the &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     * java.nio.channels.spi.SelectorProvider#openSelector openSelector&#125; method</span></span><br><span class="line"><span class="comment">     * of the system-wide default &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     * java.nio.channels.spi.SelectorProvider&#125; object.  &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  A new selector</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  IOException</span></span><br><span class="line"><span class="comment">     *          If an I/O error occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Selector <span class="title function_">open</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> SelectorProvider.provider().openSelector();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* more */</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上只是一层抽象，具体调用了<code>SelectorProvider</code>来提供和打开<code>Selector</code>实例。</p><h4 id="selector.select">Selector.select()</h4><p>多路复用的核心功能，选出可进行I/O的通道们的键集。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Selector</span> <span class="keyword">implements</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* more */</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Selects a set of keys whose corresponding channels are ready for I/O</span></span><br><span class="line"><span class="comment">     * operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; This method performs a blocking &lt;a href=&quot;#selop&quot;&gt;selection</span></span><br><span class="line"><span class="comment">     * operation&lt;/a&gt;.  It returns only after at least one channel is selected,</span></span><br><span class="line"><span class="comment">     * this selector&#x27;s &#123;<span class="doctag">@link</span> #wakeup wakeup&#125; method is invoked, the current</span></span><br><span class="line"><span class="comment">     * thread is interrupted, or the given timeout period expires, whichever</span></span><br><span class="line"><span class="comment">     * comes first.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; This method does not offer real-time guarantees: It schedules the</span></span><br><span class="line"><span class="comment">     * timeout as if by invoking the &#123;<span class="doctag">@link</span> Object#wait(long)&#125; method. &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  timeout  If positive, block for up to &#123;<span class="doctag">@code</span> timeout&#125;</span></span><br><span class="line"><span class="comment">     *                  milliseconds, more or less, while waiting for a</span></span><br><span class="line"><span class="comment">     *                  channel to become ready; if zero, block indefinitely;</span></span><br><span class="line"><span class="comment">     *                  must not be negative</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  The number of keys, possibly zero,</span></span><br><span class="line"><span class="comment">     *          whose ready-operation sets were updated</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  IOException</span></span><br><span class="line"><span class="comment">     *          If an I/O error occurs</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  ClosedSelectorException</span></span><br><span class="line"><span class="comment">     *          If this selector is closed</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment">     *          If the value of the timeout argument is negative</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">select</span><span class="params">(<span class="type">long</span> timeout)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* more */</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法在Selector抽象类定义，但具体实现位于作为其子类的<code>SelectorImpl</code>实现类中。</p><h5 id="selectorimpl">SelectorImpl</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Base Selector implementation class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SelectorImpl</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractSelector</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* more */</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Selects the keys for channels that are ready for I/O operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action  the action to perform, can be null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout timeout in milliseconds to wait, 0 to not wait, -1 to</span></span><br><span class="line"><span class="comment">     *                wait indefinitely</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">doSelect</span><span class="params">(Consumer&lt;SelectionKey&gt; action, <span class="type">long</span> timeout)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">lockAndDoSelect</span><span class="params">(Consumer&lt;SelectionKey&gt; action, <span class="type">long</span> timeout)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            ensureOpen();</span><br><span class="line">            <span class="keyword">if</span> (inSelect)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;select in progress&quot;</span>);</span><br><span class="line">            inSelect = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (publicSelectedKeys) &#123;</span><br><span class="line">                    <span class="keyword">return</span> doSelect(action, timeout);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                inSelect = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">select</span><span class="params">(<span class="type">long</span> timeout)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (timeout &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Negative timeout&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> lockAndDoSelect(<span class="literal">null</span>, (timeout == <span class="number">0</span>) ? -<span class="number">1</span> : timeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">select</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> lockAndDoSelect(<span class="literal">null</span>, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* more */</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SelectorImpl的<code>select</code>方法调用了<code>lockAndDoSelect</code>方法。传入的参数表示不执行任何操作，且默认持续等待。</p><p>在<code>lockAndDoSelect</code>方法中，用synchronized关键字保护当前Selector对象，实现并发同步。内部也通过isSelect标记来防止并发select操作，实际执行的方法是<code>doSelect</code>方法，该方法在SelectorImpl类中被定义，但没有实现。具体实现取决于其子类，即实现层的实现。</p><h3 id="selectorprovider">SelectorProvider</h3><p>SelectorPrivider是一个抽象类。</p><h4 id="selectorprovider.provider">SelectorProvider.provider()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SelectorProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* more */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the system-wide default selector provider for this invocation of</span></span><br><span class="line"><span class="comment">     * the Java virtual machine.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; The first invocation of this method locates the default provider</span></span><br><span class="line"><span class="comment">     * object as follows: &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;ol&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&lt;p&gt; If the system property</span></span><br><span class="line"><span class="comment">     *   &#123;<span class="doctag">@code</span> java.nio.channels.spi.SelectorProvider&#125; is defined then it is</span></span><br><span class="line"><span class="comment">     *   taken to be the fully-qualified name of a concrete provider class.</span></span><br><span class="line"><span class="comment">     *   The class is loaded and instantiated; if this process fails then an</span></span><br><span class="line"><span class="comment">     *   unspecified error is thrown.  &lt;/p&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&lt;p&gt; If a provider class has been installed in a jar file that is</span></span><br><span class="line"><span class="comment">     *   visible to the system class loader, and that jar file contains a</span></span><br><span class="line"><span class="comment">     *   provider-configuration file named</span></span><br><span class="line"><span class="comment">     *   &#123;<span class="doctag">@code</span> java.nio.channels.spi.SelectorProvider&#125; in the resource</span></span><br><span class="line"><span class="comment">     *   directory &#123;<span class="doctag">@code</span> META-INF/services&#125;, then the first class name</span></span><br><span class="line"><span class="comment">     *   specified in that file is taken.  The class is loaded and</span></span><br><span class="line"><span class="comment">     *   instantiated; if this process fails then an unspecified error is</span></span><br><span class="line"><span class="comment">     *   thrown.  &lt;/p&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *   &lt;li&gt;&lt;p&gt; Finally, if no provider has been specified by any of the above</span></span><br><span class="line"><span class="comment">     *   means then the system-default provider class is instantiated and the</span></span><br><span class="line"><span class="comment">     *   result is returned.  &lt;/p&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;/ol&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; Subsequent invocations of this method return the provider that was</span></span><br><span class="line"><span class="comment">     * returned by the first invocation.  &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  The system-wide default selector provider</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SelectorProvider <span class="title function_">provider</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (provider != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> provider;</span><br><span class="line">            <span class="keyword">return</span> AccessController.doPrivileged(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;&gt;() &#123;</span><br><span class="line">                    <span class="keyword">public</span> SelectorProvider <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loadProviderFromProperty())</span><br><span class="line">                                <span class="keyword">return</span> provider;</span><br><span class="line">                            <span class="keyword">if</span> (loadProviderAsService())</span><br><span class="line">                                <span class="keyword">return</span> provider;</span><br><span class="line">                            provider = sun.nio.ch.DefaultSelectorProvider.create();</span><br><span class="line">                            <span class="keyword">return</span> provider;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* more */</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>provider()</code>方法是一个synchronized同步锁保护的单例模式，返回SelectorProvider类型的实例。</p><p>具体地，当没有实例时，需要创建实例。</p><p>创建实例通过AccessController来执行特权行为。</p><p>根据官方文档，AccessController被用于控制操作的权限和决策。</p><blockquote><p>The AccessController class is used for access control operations anddecisions. More specifically, the AccessController class is used forthree purposes:</p><ul><li>to decide whether an access to a critical system resource is to beallowed or denied, based on the security policy currently ineffect,</li><li>to mark code as being "privileged", thus affecting subsequent accessdeterminations, and</li><li>to obtain a "snapshot" of the current calling context soaccess-control decisions from a different context can be made withrespect to the saved context.</li></ul></blockquote><p>这个AccessController起到三种作用：</p><ol type="1"><li>检查权限：决定对关键系统资源的访问是否应该批准；</li><li>授予权限：把代码标记为特权代码，以便执行后续操作；</li><li>保存快照：保存当前调用上下文，以便做来自其它上下文的访问控制决策的时候能够考虑到已保存的上下文。</li></ol><p>具体地，在此处，<code>AccessController.doPrivileged(...)</code>方法起到的是第二个作用，授予权限，执行特权代码：</p><blockquote><p>Performs the specified PrivilegedAction with privileges enabled.</p><p>The action is performed with all of the permissions possessed by thecaller's protection domain.</p></blockquote><p>该方法的输入参数是一个实现了<code>PrivilegedAction</code>接口的匿名类，该匿名类实现了接口的<code>run()</code>方法。该方法依靠外层提供的特权权限，来实例化一个<code>SelectorProvider</code>。实例化的过程分三种优先级：</p><ol type="1"><li><code>loadProviderFromProperty()</code></li><li><code>loadProviderAsService()</code></li><li><code>provider = sun.nio.ch.DefaultSelectorProvider.create()</code></li></ol><h5 id="第一优先级-loadproviderfromproperty">第一优先级<code>loadProviderFromProperty</code></h5><p>第一优先级通过系统检查<code>java.nio.channels.spi.SelectorProvider</code>是否存在，如果存在则加载，反之，则返回<code>false</code>。</p><blockquote><p>Service-provider classes for the java.nio.channels package.</p></blockquote><p><code>java.nio.channels.spi</code>包提供了一批ServiceProvider的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SelectorProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* more */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">loadProviderFromProperty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cn</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;java.nio.channels.spi.SelectorProvider&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cn == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">tmp</span> <span class="operator">=</span> Class.forName(cn, <span class="literal">true</span>,</span><br><span class="line">                                       ClassLoader.getSystemClassLoader()).newInstance();</span><br><span class="line">            provider = (SelectorProvider)tmp;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException x) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceConfigurationError</span>(<span class="literal">null</span>, x);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException x) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceConfigurationError</span>(<span class="literal">null</span>, x);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException x) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceConfigurationError</span>(<span class="literal">null</span>, x);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException x) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceConfigurationError</span>(<span class="literal">null</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* more */</span> </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法首先读取检查系统属性中，键<code>java.nio.channels.spi.SelectorProvider</code>是否有设置值。如果没有，则返回false，如果有，用这个值加载SelectorProvider类。</p><p>该方法通过<code>Class.forName</code>方法，指定通过系统类加载器在运行时动态加载系统属性中设置的SelectorProvider类（如指定）。</p><h5 id="第二优先级-loadproviderasservice">第二优先级<code>loadProviderAsService</code></h5><p>如果第一优先级所需的<code>java.nio.channels.spi.SelectorProvider</code>不存在，则需要启动第二优先级的加载工作。</p><p>如果<code>META-INF/services</code>中，存放了<code>java.nio.channels.spi.SelectorProvider</code>的jar文件，则通过系统类加载器加载该服务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SelectorProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* more */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">loadProviderAsService</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        ServiceLoader&lt;SelectorProvider&gt; sl =</span><br><span class="line">            ServiceLoader.load(SelectorProvider.class,</span><br><span class="line">                               ClassLoader.getSystemClassLoader());</span><br><span class="line">        Iterator&lt;SelectorProvider&gt; i = sl.iterator();</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!i.hasNext())</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                provider = i.next();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ServiceConfigurationError sce) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sce.getCause() <span class="keyword">instanceof</span> SecurityException) &#123;</span><br><span class="line">                    <span class="comment">// Ignore the security exception, try the next provider</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> sce;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* more */</span> </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法通过<code>ServiceLoader</code>来加载服务，选取可见的第一个<code>SelectorProvider</code>实例。</p><h5 id="最终优先级-sun.nio.ch.defaultselectorprovider">最终优先级<code>sun.nio.ch.DefaultSelectorProvider</code></h5><p>如果上述SelectorProvider都不存在，就会加载<code>sun.nio.ch.DefaultSelectorProvider</code>作为最终选择。</p><p><strong>实际运行中，如果没有实现和配置前两种，默认会启用该最终优先级。</strong></p><p>DefaultSelectorProvider的对外提供统一的接口，内部仅仅是完成对实现类的实例化，而具体实例化什么类，取决于JDK的操作系统版本。</p><h3 id="defaultselectorprovider">DefaultSelectorProvider</h3><h4 id="defaultselector.create">DefaultSelector.create()</h4><p>具体地，该<code>sun.nio.ch.DefaultSelectorProvider</code>对外提供一致接口，其<code>create</code>方法实际上仅仅是一层封装，只是实现了一个<code>new</code>实例化操作，但不同操作系统平台的JDK的内部实现不同：</p><ul><li>在WindowsJDK11中，其实例化的是<code>sun.nio.ch.WindowsSelectorProvider</code>类。</li><li>在LinuxJDK11中，其实例化的是<code>sun.nio.ch.EPollSelectorProvider</code>类。</li></ul><p>Windows JDK11：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates this platform&#x27;s default SelectorProvider</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSelectorProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Prevent instantiation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">DefaultSelectorProvider</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the default SelectorProvider.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SelectorProvider <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">sun</span>.nio.ch.WindowsSelectorProvider();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Linux JDK11:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates this platform&#x27;s default SelectorProvider</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSelectorProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Prevent instantiation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">DefaultSelectorProvider</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the default SelectorProvider.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SelectorProvider <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EPollSelectorProvider</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3id="windowsselectorprovider与epollselectorprovider">WindowsSelectorProvider与EPollSelectorProvider</h3><p>这一层都继承自SelectorProviderImpl抽象类，实际上也没有实现什么特别的功能逻辑，只是调用对应的SelectorImpl实现类。</p><p>这一层实现了从SelectorProvider到SelectorImpl的交互。</p><p>具体到每种SelectorImpl是如何实现的，在下一节实现层具体分析。</p><h4id="windowsselectorprovider.openselector">WindowsSelectorProvider.openSelector()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * SelectorProvider for sun.nio.ch.WindowsSelectorImpl.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @author Konstantin Kladko</span></span><br><span class="line"><span class="comment"> * @since 1.4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsSelectorProvider</span> <span class="keyword">extends</span> <span class="title class_">SelectorProviderImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AbstractSelector <span class="title function_">openSelector</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WindowsSelectorImpl</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4id="epollselectorprovider.openselector">EPollSelectorProvider.openSelector()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EPollSelectorProvider</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">SelectorProviderImpl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> AbstractSelector <span class="title function_">openSelector</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EPollSelectorImpl</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Channel <span class="title function_">inheritedChannel</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> InheritedChannel.getChannel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承关系小结">继承关系小结</h3><h4 id="selector系列">Selector系列</h4><ul><li><code>abstract class Selector</code><ul><li><code>abstract class AbstractSelector extends Selector</code><ul><li><code>abstract class SelectorImpl exntends AbstractSelector</code><ul><li><code>class WindowsSelectorImpl extends SelectorImpl</code></li><li><code>class EPollSelectorImpl extends SelectorImpl</code></li></ul></li></ul></li></ul></li></ul><h4 id="selectorprovider系列">SelectorProvider系列</h4><ul><li><code>abstract class SelectorProvider</code><ul><li><code>abstract class SelectorProviderImpl extends SelectorProvider</code><ul><li><code>class WindowsSelectorProvider extends SelectorProviderImpl</code></li><li><code>class EPollSelectorProvider extends SelectorProviderImpl</code></li></ul></li></ul></li><li><code>class DefaultSelectorProvider</code></li></ul><h2 id="实现层">实现层</h2><h3 id="windows-jdk11的实现">Windows JDK11的实现</h3><p>在WindowsJDK11中，其实例化的是<code>sun.nio.ch.WindowsSelectorProvider</code>类返回给上层使用。</p><h4 id="windowsselectorprovider">WindowsSelectorProvider</h4><p>简单回顾一下，WindowsSelectorProvider实现了从对外的SelectorProvider到具体的WindowsSelectorImpl实现类的转接。</p><p>该类继承自<code>SelectorProviderImpl</code>抽象类，是对其的具体实现，供外部抽象层调用，实现的只是转接调用，调用<code>WindowsSelectorImpl</code>这一个实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsSelectorProvider</span> <span class="keyword">extends</span> <span class="title class_">SelectorProviderImpl</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AbstractSelector <span class="title function_">openSelector</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WindowsSelectorImpl</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="windowsselectorimpl">WindowsSelectorImpl</h4><p>概括地来讲，WindowsSelectorImpl的底层实现是通过JNI接口调用地本地poll方法，但是不是简单调用，而是进行了多线程的改进。</p><p>为什么要采用多线程呢？因为poll方法本身可以处理的文件描述符（filedescriptor）数量是有限的，一般和select方法类似，不超过1024个。实际的应用场景中，需要并发处理的文件描述符是完全有可能超过这个上限的。WindowsJDK11中的实现则采用多线程对poll进行改进，一个线程能处理的文件描述符数量是有限的，那么如果文件描述符数量很多，用多个线程分摊处理不就好了么。</p><h5 id="主要数据结构">主要数据结构</h5><table><colgroup><col style="width: 25%" /><col style="width: 13%" /><col style="width: 61%" /></colgroup><thead><tr class="header"><th>类型</th><th>变量</th><th>说明</th></tr></thead><tbody><tr class="odd"><td><code>SelectionKeyImpl[]</code></td><td>channelArray</td><td>The list of SelectableChannels serviced by this Selector. Every modMAX_SELECTABLE_FDS entry is bogus, to align this array with the pollarray, where the corresponding entry is occupied by thewakeupSocket</td></tr><tr class="even"><td><code>PollArrayWrapper</code></td><td>pollWrapper</td><td>The global native poll array holds file decriptors and eventmasks</td></tr><tr class="odd"><td><code>List&lt;SelectThread&gt;</code></td><td>threads</td><td>A list of helper threads for select.</td></tr><tr class="even"><td><code>Pipe</code></td><td>wakeupPipe</td><td>Pipe used as a wakeup object.</td></tr><tr class="odd"><td><code>FdMap</code></td><td>fdMap</td><td>Maps file descriptors to their indices in pollArray</td></tr><tr class="even"><td><code>SubSelector</code></td><td>subSelector</td><td>SubSelector for the main thread</td></tr><tr class="odd"><td><code>Object</code></td><td>interruptLock</td><td>Lock for interrupt triggering and clearing</td></tr><tr class="even"><td><code>Object</code></td><td>updateLock</td><td>pending new registrations/updates, queued by implRegister andsetEventOps</td></tr><tr class="odd"><td><code>Deque&lt;SelectionKeyImpl&gt;</code></td><td>newKeys</td><td></td></tr><tr class="even"><td><code>Deque&lt;SelectionKeyImpl&gt;</code></td><td>updateKeys</td><td></td></tr></tbody></table><h5id="windowsselectorimpl.doselect">WindowsSelectorImpl.doSelect()</h5><p>Windows平台JDK11是如何select出对应状态的SocketChannel的呢？</p><p>抽象层的<code>Selector.select()</code>调用由<code>SelectorImpl.select()</code>实现，而该实现主要是调用了<code>SelectorImpl.lockAndDoSelect()</code>，其中调用<code>SelectorImpl.doSelect()</code>，该方法在Windows平台的JDK11中由<code>WindowsSelectorImpl.doSelect()</code>具体实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A multi-threaded implementation of Selector for Windows.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Konstantin Kladko</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark Reinhold</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowsSelectorImpl</span> <span class="keyword">extends</span> <span class="title class_">SelectorImpl</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* more */</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">doSelect</span><span class="params">(Consumer&lt;SelectionKey&gt; action, <span class="type">long</span> timeout)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">assert</span> Thread.holdsLock(<span class="built_in">this</span>);</span><br><span class="line">        <span class="built_in">this</span>.timeout = timeout; <span class="comment">// set selector timeout</span></span><br><span class="line">        processUpdateQueue();</span><br><span class="line">        processDeregisterQueue();</span><br><span class="line">        <span class="keyword">if</span> (interruptTriggered) &#123;</span><br><span class="line">            resetWakeupSocket();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Calculate number of helper threads needed for poll. If necessary</span></span><br><span class="line">        <span class="comment">// threads are created here and start waiting on startLock</span></span><br><span class="line">        adjustThreadsCount();</span><br><span class="line">        finishLock.reset(); <span class="comment">// reset finishLock</span></span><br><span class="line">        <span class="comment">// Wakeup helper threads, waiting on startLock, so they start polling.</span></span><br><span class="line">        <span class="comment">// Redundant threads will exit here after wakeup.</span></span><br><span class="line">        startLock.startThreads();</span><br><span class="line">        <span class="comment">// do polling in the main thread. Main thread is responsible for</span></span><br><span class="line">        <span class="comment">// first MAX_SELECTABLE_FDS entries in pollArray.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            begin();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                subSelector.poll();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                finishLock.setException(e); <span class="comment">// Save this exception</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Main thread is out of poll(). Wakeup others and wait for them</span></span><br><span class="line">            <span class="keyword">if</span> (threads.size() &gt; <span class="number">0</span>)</span><br><span class="line">                finishLock.waitForHelperThreads();</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">              end();</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="comment">// Done with poll(). Set wakeupSocket to nonsignaled  for the next run.</span></span><br><span class="line">        finishLock.checkForException();</span><br><span class="line">        processDeregisterQueue();</span><br><span class="line">        <span class="type">int</span> <span class="variable">updated</span> <span class="operator">=</span> updateSelectedKeys(action);</span><br><span class="line">        <span class="comment">// Done with poll(). Set wakeupSocket to nonsignaled  for the next run.</span></span><br><span class="line">        resetWakeupSocket();</span><br><span class="line">        <span class="keyword">return</span> updated;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* more */</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>WindowsSelectorImpl.doSelect()</code>方法，执行的流程主要为：</p><ol type="1"><li>首先进行了一些状态更新，处理新的注册和修改、被取消的键集。</li><li>随后计算所需线程数量，准备多线程poll操作所需的辅助线程（helperthreads）。<ol type="1"><li>如果主线程就足够处理当前这么多的描述符了，那就不需要再启动辅助线程了；</li><li>如果主线程没法独自处理大量的描述符，那就需要创建并启动辅助线程来帮忙。</li></ol></li><li>主线程本身当然是要承担poll的工作的，即<code>subSelector.poll()</code>，这是主线程自己调用自己的subSelector在执行poll操作。</li><li>如果有辅助线程帮忙，即<code>threads.size()&gt;0</code>的情况，那么就需要通过<code>finishLock.waitForHelperThreads()</code>的同步操作来等待辅助线程们完成他们的工作。</li><li>至此，poll的处理就完成了，此后进行一些收尾的检查，状态的更新，即可返回本次<code>doSelect</code>操作更新过的键的数量。</li></ol><h4id="windowsselectorimpl.selectthread">WindowsSelectorImpl.SelectThread</h4><h5id="windowsselectorimpl.selectthread.run">WindowsSelectorImpl.SelectThread.run()</h5><p>辅助线程是<code>WindowsSelectorImpl.SelectThread</code>类的实例，线程类最核心的内容就是其实现的<code>run</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Represents a helper thread used for select.</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SelectThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> index; <span class="comment">// index of this thread</span></span><br><span class="line">    <span class="keyword">final</span> SubSelector subSelector;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">lastRun</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// last run number</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> zombie;</span><br><span class="line">    <span class="comment">// Creates a new thread</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SelectThread</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">&quot;SelectorHelper&quot;</span>, <span class="number">0</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">this</span>.index = i;</span><br><span class="line">        <span class="built_in">this</span>.subSelector = <span class="keyword">new</span> <span class="title class_">SubSelector</span>(i);</span><br><span class="line">        <span class="comment">//make sure we wait for next round of poll</span></span><br><span class="line">        <span class="built_in">this</span>.lastRun = startLock.runsCounter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">makeZombie</span><span class="params">()</span> &#123;</span><br><span class="line">        zombie = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isZombie</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> zombie;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123; <span class="comment">// poll loop</span></span><br><span class="line">            <span class="comment">// wait for the start of poll. If this thread has become</span></span><br><span class="line">            <span class="comment">// redundant, then exit.</span></span><br><span class="line">            <span class="keyword">if</span> (startLock.waitForStart(<span class="built_in">this</span>)) &#123;</span><br><span class="line">                subSelector.freeFDSetBuffer();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// call poll()</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                subSelector.poll(index);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// Save this exception and let other threads finish.</span></span><br><span class="line">                finishLock.setException(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// notify main thread, that this thread has finished, and</span></span><br><span class="line">            <span class="comment">// wakeup others, if this thread is the first to finish.</span></span><br><span class="line">            finishLock.threadFinished();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难发现，辅助线程的线程类的实现中，其执行的核心操作其实就是调用了<code>subSelector.poll(index)</code>，以此对本线程负责的文件描述符进行poll操作。</p><p>那这个<code>subSelector</code>又是怎么做的呢？</p><h4id="windowsselectorimpl.subselector">WindowsSelectorImpl.SubSelector</h4><p>前面介绍了主线程和辅助线程，两者都有一个subSelector实例，他们在执行poll操作的时候都是调用的<code>subSelector.poll()</code>。</p><h5id="windowsselectorimpl.subselector.poll">WindowsSelectorImpl.SubSelector.poll()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">SubSelector</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> pollArrayIndex; <span class="comment">// starting index in pollArray to poll</span></span><br><span class="line">    <span class="comment">// These arrays will hold result of native select().</span></span><br><span class="line">    <span class="comment">// The first element of each array is the number of selected sockets.</span></span><br><span class="line">    <span class="comment">// Other elements are file descriptors of selected sockets.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] readFds = <span class="keyword">new</span> <span class="title class_">int</span> [MAX_SELECTABLE_FDS + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] writeFds = <span class="keyword">new</span> <span class="title class_">int</span> [MAX_SELECTABLE_FDS + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] exceptFds = <span class="keyword">new</span> <span class="title class_">int</span> [MAX_SELECTABLE_FDS + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// Buffer for readfds, writefds and exceptfds structs that are passed</span></span><br><span class="line">    <span class="comment">// to native select().</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">fdsBuffer</span> <span class="operator">=</span> unsafe.allocateMemory(SIZEOF_FD_SET * <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SubSelector</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pollArrayIndex = <span class="number">0</span>; <span class="comment">// main thread</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SubSelector</span><span class="params">(<span class="type">int</span> threadIndex)</span> &#123; <span class="comment">// helper threads</span></span><br><span class="line">        <span class="built_in">this</span>.pollArrayIndex = (threadIndex + <span class="number">1</span>) * MAX_SELECTABLE_FDS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">poll</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123; <span class="comment">// poll for the main thread</span></span><br><span class="line">        <span class="keyword">return</span> poll0(pollWrapper.pollArrayAddress,</span><br><span class="line">                     Math.min(totalChannels, MAX_SELECTABLE_FDS),</span><br><span class="line">                     readFds, writeFds, exceptFds, timeout, fdsBuffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">poll</span><span class="params">(<span class="type">int</span> index)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// poll for helper threads</span></span><br><span class="line">        <span class="keyword">return</span>  poll0(pollWrapper.pollArrayAddress +</span><br><span class="line">                 (pollArrayIndex * PollArrayWrapper.SIZE_POLLFD),</span><br><span class="line">                 Math.min(MAX_SELECTABLE_FDS,</span><br><span class="line">                         totalChannels - (index + <span class="number">1</span>) * MAX_SELECTABLE_FDS),</span><br><span class="line">                 readFds, writeFds, exceptFds, timeout, fdsBuffer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">poll0</span><span class="params">(<span class="type">long</span> pollAddress, <span class="type">int</span> numfds,</span></span><br><span class="line"><span class="params">         <span class="type">int</span>[] readFds, <span class="type">int</span>[] writeFds, <span class="type">int</span>[] exceptFds, <span class="type">long</span> timeout, <span class="type">long</span> fdsBuffer)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* more */</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看源码可知，SubSelector的<code>poll()</code>和<code>poll(index)</code>方法实际上都是对<code>poll0()</code>方法的一层适配封装，实际上调用的就是<code>poll0()</code>。</p><h5id="windowsselectorimpl.subselector.poll0">WindowsSelectorImpl.SubSelector.poll0()</h5><p>从上面的源码可以看到，<code>poll0</code>方法并不是在Java中实现的，而是通过JNI调用的本地实现。</p><h3 id="linux-jdk11的实现">Linux JDK11的实现</h3><p>在LinuxJDK11中，其实例化的是<code>sun.nio.ch.EPollSelectorProvider</code>类返回给上层使用。</p><h4 id="epollselectorprovider">EPollSelectorProvider</h4><p>类似的，LinuxJDK11是通过EPollSelectorProvider提供外部访问接口的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EPollSelectorProvider</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">SelectorProviderImpl</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> AbstractSelector <span class="title function_">openSelector</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EPollSelectorImpl</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Channel <span class="title function_">inheritedChannel</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> InheritedChannel.getChannel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该<code>openSelector</code>方法主要是通过EPollSelectorImpl实现类来实例化一个EPollSelector并返回。</p><h4 id="epollselectorimpl">EPollSelectorImpl</h4><h5 id="epollselectorimpl.doselector">EPollSelectorImpl.doSelector</h5><p>Linux平台JDK11是如何select出对应状态的SocketChannel的呢？</p><p>实质上是调用的<code>EPoll.wait</code>方法来返回已经就绪的文件描述符数量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Linux epoll based Selector implementation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EPollSelectorImpl</span> <span class="keyword">extends</span> <span class="title class_">SelectorImpl</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* more */</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">doSelect</span><span class="params">(Consumer&lt;SelectionKey&gt; action, <span class="type">long</span> timeout)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">assert</span> Thread.holdsLock(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// epoll_wait timeout is int</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">to</span> <span class="operator">=</span> (<span class="type">int</span>) Math.min(timeout, Integer.MAX_VALUE);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">blocking</span> <span class="operator">=</span> (to != <span class="number">0</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">timedPoll</span> <span class="operator">=</span> (to &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> numEntries;</span><br><span class="line">        processUpdateQueue();</span><br><span class="line">        processDeregisterQueue();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            begin(blocking);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> timedPoll ? System.nanoTime() : <span class="number">0</span>;</span><br><span class="line">                numEntries = EPoll.wait(epfd, pollArrayAddress, NUM_EPOLLEVENTS, to);</span><br><span class="line">                <span class="keyword">if</span> (numEntries == IOStatus.INTERRUPTED &amp;&amp; timedPoll) &#123;</span><br><span class="line">                    <span class="comment">// timed poll interrupted so need to adjust timeout</span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">adjust</span> <span class="operator">=</span> System.nanoTime() - startTime;</span><br><span class="line">                    to -= TimeUnit.MILLISECONDS.convert(adjust, TimeUnit.NANOSECONDS);</span><br><span class="line">                    <span class="keyword">if</span> (to &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// timeout expired so no retry</span></span><br><span class="line">                        numEntries = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (numEntries == IOStatus.INTERRUPTED);</span><br><span class="line">            <span class="keyword">assert</span> IOStatus.check(numEntries);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            end(blocking);</span><br><span class="line">        &#125;</span><br><span class="line">        processDeregisterQueue();</span><br><span class="line">        <span class="keyword">return</span> processEvents(numEntries, action);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* more */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体地，在<code>EPollSelectorImpl.doSelect</code>方法中，和WindowsSelectorImpl中的实现类似：</p><ol type="1"><li>首先都有必要检查和更新状态，处理修改队列和取消注册队列；</li><li>通过<code>EPoll.wait</code>方法来获取处于就绪状态的I/O文件描述符数量；</li><li>最后更新状态，返回本次<code>doSelect</code>更新过的键的数量。</li></ol><h4 id="epoll">EPoll</h4><p>EPoll作为Linux内核提供的多路复用器，JDK11选择通过JNI接口来调用其功能。</p><p>JDK11中<code>EPoll</code>类是一个简易的包装类，epoll的实现不由JDK负责。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Provides access to the Linux epoll facility.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EPoll</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">EPoll</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> Unsafe.getUnsafe();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * typedef union epoll_data &#123;</span></span><br><span class="line"><span class="comment">     *     void *ptr;</span></span><br><span class="line"><span class="comment">     *     int fd;</span></span><br><span class="line"><span class="comment">     *     __uint32_t u32;</span></span><br><span class="line"><span class="comment">     *     __uint64_t u64;</span></span><br><span class="line"><span class="comment">     *  &#125; epoll_data_t;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * struct epoll_event &#123;</span></span><br><span class="line"><span class="comment">     *     __uint32_t events;</span></span><br><span class="line"><span class="comment">     *     epoll_data_t data;</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SIZEOF_EPOLLEVENT</span>   <span class="operator">=</span> eventSize();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">OFFSETOF_EVENTS</span>     <span class="operator">=</span> eventsOffset();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">OFFSETOF_FD</span>         <span class="operator">=</span> dataOffset();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// opcodes</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EPOLL_CTL_ADD</span>  <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EPOLL_CTL_DEL</span>  <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EPOLL_CTL_MOD</span>  <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// events</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EPOLLIN</span>   <span class="operator">=</span> <span class="number">0x1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EPOLLOUT</span>  <span class="operator">=</span> <span class="number">0x4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// flags</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EPOLLONESHOT</span>   <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Allocates a poll array to handle up to &#123;<span class="doctag">@code</span> count&#125; events.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">allocatePollArray</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.allocateMemory(count * SIZEOF_EPOLLEVENT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Free a poll array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">freePollArray</span><span class="params">(<span class="type">long</span> address)</span> &#123;</span><br><span class="line">        unsafe.freeMemory(address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns event[i];</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getEvent</span><span class="params">(<span class="type">long</span> address, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address + (SIZEOF_EPOLLEVENT*i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns event-&gt;data.fd</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getDescriptor</span><span class="params">(<span class="type">long</span> eventAddress)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getInt(eventAddress + OFFSETOF_FD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns event-&gt;events</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getEvents</span><span class="params">(<span class="type">long</span> eventAddress)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getInt(eventAddress + OFFSETOF_EVENTS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -- Native methods --</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">eventSize</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">eventsOffset</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">dataOffset</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">create</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">ctl</span><span class="params">(<span class="type">int</span> epfd, <span class="type">int</span> opcode, <span class="type">int</span> fd, <span class="type">int</span> events)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">wait</span><span class="params">(<span class="type">int</span> epfd, <span class="type">long</span> pollAddress, <span class="type">int</span> numfds, <span class="type">int</span> timeout)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        IOUtil.load();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="epoll.wait">EPoll.wait</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">wait</span><span class="params">(<span class="type">int</span> epfd, <span class="type">long</span> pollAddress, <span class="type">int</span> numfds, <span class="type">int</span> timeout)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException;</span><br></pre></td></tr></table></figure><p>该方法调用的应该是Linux中的<code>epoll_wait</code>系统调用。根据<code>man epoll_wait</code>查阅的Linux手册，具体说明：</p><blockquote><p>The epoll_wait() system call waits for events on the epoll(7)instance referred to by the file descriptor epfd. The memory areapointed to by events will contain the events that will be available forthe caller. Up to maxevents are returned by epoll_wait(). The maxeventsargument must be greater than zero.</p><p>The timeout argument specifies the number of milliseconds thatepoll_wait() will block.</p></blockquote><p>也就是说，JDK调用的<code>EPoll.wait</code>方法会在timeout时间内阻塞等待epoll的文件描述符epfd所引用的事件发生，发生后，其返回的结果是代表事件数量的整数。</p><h2 id="总结">总结</h2><p>从表层的<code>Selector</code>查到底层的<code>WindowsSelectorImpl</code>与<code>EPollImpl</code>，经过一层层抽丝剥茧，可以看到JDK在设计上清晰地体现着将抽象与实现分离的“依赖倒置原则”——顶层调用不应该依赖于底层实现，底层实现也不应该针对于顶层调用，双方都应该依赖于抽象。</p><p>考虑到Linux内核已经提供了好用的epoll多路复用，足以处理大规模的并发连接，JDK11通过JNI接口对epoll相关的系统调用进行本地调用即可，其实现也显得相对简单。Windows并未提供Epoll这样的多路复用模型，为解决poll存在的并发连接数量有限的问题，JDK11通过分而治之的分治思想，拉辅助线程来分担任务，通过实现动态多线程poll巧妙地实现了处理大量并发连接的能力。</p><p>最终，无论是Windows还是Linux，要想研究多路复用机制的更深层的实现原理，还是需要研究操作系统层级的实现原理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> NIO </tag>
            
            <tag> JDK </tag>
            
            <tag> I/O Multiplexing </tag>
            
            <tag> Poll </tag>
            
            <tag> EPoll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP服务器压力测试</title>
      <link href="/posts/HTTP%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
      <url>/posts/HTTP%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>对<ahref="https://github.com/HearyShen/HearyHTTPd">HearyHTTPd</a>进行压力测试。网上的压力测试工具很多，我测试了<ahref="https://httpd.apache.org/docs/2.4/programs/ab.html">Apachebenchmark</a>和<ahref="https://github.com/EZLippi/WebBench">WebBench</a>两款压力测试工具，并在台式机和实验室计算服务器上分别进行了压力测试，QPS分别约6400+、21000+和30000+。</p><span id="more"></span><h1 id="http服务器压力测试">HTTP服务器压力测试</h1><h2 id="apache-benchmark">1 Apache benchmark</h2><h3 id="简介">1.1 简介</h3><blockquote><p><a href="https://httpd.apache.org/docs/2.4/programs/ab.html">Apachebenchmark</a></p><p><strong>ab - Apache HTTP server benchmarking tool</strong></p><p><code>ab</code> is a tool for benchmarking your Apache HypertextTransfer Protocol (HTTP) server. It is designed to give you animpression of how your current Apache installation performs. Thisespecially shows you how many requests per second your Apacheinstallation is capable of serving.</p></blockquote><p>Apachebenchmark是一款Apache提供的HTTP服务器压力测试工具，随Apache安装。</p><h3 id="安装">1.2 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install apache2-utils</span><br></pre></td></tr></table></figure><h3 id="测试">1.3 测试</h3><p>我测试了我的<ahref="https://github.com/HearyShen/HearyHTTPd">HearyHTTPd</a>，用1000个客户机并发请求10万次。</p><p>在我的实验室台式机上进行了测试：</p><ul><li>CPU：Intel(R) Core(TM) i5-7500 CPU @ 3.40GHz</li><li>内存：单通道 8GB DDR4 2400Mhz</li><li>通过WSL中的Ubuntu来测试Windows环境JRE下运行的hhttpd。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">jyshen@JYSHEN-WORKPC:~$ ab -n 100000 -c 1000 http://localhost:8080/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1807734 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking localhost (be patient)</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Completed 20000 requests</span><br><span class="line">Completed 30000 requests</span><br><span class="line">Completed 40000 requests</span><br><span class="line">Completed 50000 requests</span><br><span class="line">Completed 60000 requests</span><br><span class="line">Completed 70000 requests</span><br><span class="line">Completed 80000 requests</span><br><span class="line">Completed 90000 requests</span><br><span class="line">Completed 100000 requests</span><br><span class="line">Finished 100000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:</span><br><span class="line">Server Hostname:        localhost</span><br><span class="line">Server Port:            8080</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        0 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      1000</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   15.595 seconds</span><br><span class="line">Complete requests:      100000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      1300000 bytes</span><br><span class="line">HTML transferred:       0 bytes</span><br><span class="line">Requests per second:    6412.45 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       155.947 [ms] (mean)</span><br><span class="line">Time per request:       0.156 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          81.41 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:       33   78  20.6     78     143</span><br><span class="line">Processing:    29   77  20.8     77     147</span><br><span class="line">Waiting:        4   45  16.8     41     146</span><br><span class="line">Total:         72  155   7.7    154     195</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    154</span><br><span class="line">  66%    155</span><br><span class="line">  75%    156</span><br><span class="line">  80%    156</span><br><span class="line">  90%    163</span><br><span class="line">  95%    169</span><br><span class="line">  98%    173</span><br><span class="line">  99%    184</span><br><span class="line"> 100%    195 (longest request)</span><br></pre></td></tr></table></figure><ul><li>测得结果平均每秒能处理6412个请求。</li><li>多次测试能稳定在6000以上。</li><li>测试中观察内存和CPU消耗无异常情况。</li><li>其他影响因素：实验过程中，Windows Defender的Antimalware ServiceExecutable进程的CPU使用率明显上升，约7~10%。</li></ul><p>另外，我在实验室的新服务器上进行了测试：</p><ul><li>CPU：2颗Intel(R) Xeon(R) Gold 6132 CPU @ 2.60GHz</li><li>内存：512G（16根32G） ECC DDR4 2666Mhz</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">(base) sjy@h3c-UniServer-R5200-G3:~$ ab -n 100000 -c 1000 http://localhost:8080/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1807734 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking localhost (be patient)</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Completed 20000 requests</span><br><span class="line">Completed 30000 requests</span><br><span class="line">Completed 40000 requests</span><br><span class="line">Completed 50000 requests</span><br><span class="line">Completed 60000 requests</span><br><span class="line">Completed 70000 requests</span><br><span class="line">Completed 80000 requests</span><br><span class="line">Completed 90000 requests</span><br><span class="line">Completed 100000 requests</span><br><span class="line">Finished 100000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        </span><br><span class="line">Server Hostname:        localhost</span><br><span class="line">Server Port:            8080</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        0 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      1000</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   4.753 seconds</span><br><span class="line">Complete requests:      100000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      1300000 bytes</span><br><span class="line">HTML transferred:       0 bytes</span><br><span class="line">Requests per second:    21041.56 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       47.525 [ms] (mean)</span><br><span class="line">Time per request:       0.048 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          267.13 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        7   24  63.7     20    1052</span><br><span class="line">Processing:     6   23   6.1     24      49</span><br><span class="line">Waiting:        5   17   5.1     16      44</span><br><span class="line">Total:         21   47  64.3     46    1084</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%     46</span><br><span class="line">  66%     47</span><br><span class="line">  75%     48</span><br><span class="line">  80%     49</span><br><span class="line">  90%     51</span><br><span class="line">  95%     53</span><br><span class="line">  98%     56</span><br><span class="line">  99%     62</span><br><span class="line"> 100%   1084 (longest request)</span><br></pre></td></tr></table></figure><ul><li>测得结果平均每秒能处理21041个请求。</li></ul><p>我还在另一台计算服务器上进行了测试：</p><ul><li>CPU：2颗Intel(R) Xeon(R) Silver 4216 CPU @ 2.10GHz</li><li>内存：128G（4根32G）ECC DDR4 2666Mhz</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">jyshen@ubuntu:~$ ab -c 1000 -n 100000 http://127.0.0.1:8080/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1706008 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 127.0.0.1 (be patient)</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Completed 20000 requests</span><br><span class="line">Completed 30000 requests</span><br><span class="line">Completed 40000 requests</span><br><span class="line">Completed 50000 requests</span><br><span class="line">Completed 60000 requests</span><br><span class="line">Completed 70000 requests</span><br><span class="line">Completed 80000 requests</span><br><span class="line">Completed 90000 requests</span><br><span class="line">Completed 100000 requests</span><br><span class="line">Finished 100000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        </span><br><span class="line">Server Hostname:        127.0.0.1</span><br><span class="line">Server Port:            8080</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        152 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      1000</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   3.296 seconds</span><br><span class="line">Complete requests:      100000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      21500000 bytes</span><br><span class="line">HTML transferred:       15200000 bytes</span><br><span class="line">Requests per second:    30338.50 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       32.961 [ms] (mean)</span><br><span class="line">Time per request:       0.033 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          6369.90 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0   16  63.0     13    1015</span><br><span class="line">Processing:     3   17   5.1     16      56</span><br><span class="line">Waiting:        3   13   4.9     11      55</span><br><span class="line">Total:          6   33  63.5     31    1042</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%     31</span><br><span class="line">  66%     32</span><br><span class="line">  75%     33</span><br><span class="line">  80%     34</span><br><span class="line">  90%     35</span><br><span class="line">  95%     36</span><br><span class="line">  98%     40</span><br><span class="line">  99%     44</span><br><span class="line"> 100%   1042 (longest request)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>测的结果平均每秒能处理30338个请求。</li></ul><h2 id="webbench">2 webBench</h2><h3 id="简介-1">2.1 简介</h3><p>GitHub地址：<ahref="https://github.com/EZLippi/WebBench">WebBench</a></p><blockquote><p>Webbench是RadimKolar在1997年写的一个在linux下使用的非常简单的网站压测工具。它使用fork()模拟多个客户端同时访问我们设定的URL，测试网站在压力下工作的性能，最多可以模拟3万个并发连接去测试网站的负载能力。官网地址:http://home.tiscali.cz/~cz210552/webbench.html</p></blockquote><h3 id="安装-1">2.2 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># prerequisite</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install build-essential</span><br><span class="line"></span><br><span class="line"><span class="comment"># install webbench</span></span><br><span class="line">wget http://home.tiscali.cz/~cz210552/distfiles/webbench-1.5.tar.gz</span><br><span class="line">tar -zxvf webbench-1.5.tar.gz</span><br><span class="line"><span class="built_in">cd</span> webbench-1.5/</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h3 id="测试-1">2.3 测试</h3><p>运行1万个并发client，1秒钟。</p><p>在我的实验室台式机上测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jyshen@JYSHEN-WORKPC:~$ webbench -c 10000 -t 1 http://localhost:8080/</span><br><span class="line">Webbench - Simple Web Benchmark 1.5</span><br><span class="line">Copyright (c) Radim Kolar 1997-2004, GPL Open Source Software.</span><br><span class="line"></span><br><span class="line">Benchmarking: GET http://localhost:8080/</span><br><span class="line">10000 clients, running 1 sec.</span><br><span class="line"></span><br><span class="line">Speed=39851336 pages/min, 8545485 bytes/sec.</span><br><span class="line">Requests: 664189 susceed, 0 failed.</span><br></pre></td></tr></table></figure><ul><li>测得66万多个并发请求均成功处理</li></ul><p>实验室的服务器无法fork创建出相同数量的1万子进程，提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(base) sjy@h3c-UniServer-R5200-G3:~/HearyHTTPd/webbench-1.5$ webbench -c 10000 -t 1 http://localhost:8080/</span><br><span class="line">Webbench - Simple Web Benchmark 1.5</span><br><span class="line">Copyright (c) Radim Kolar 1997-2004, GPL Open Source Software.</span><br><span class="line"></span><br><span class="line">Benchmarking: GET http://localhost:8080/</span><br><span class="line">10000 clients, running 1 sec.</span><br><span class="line">problems forking worker no. 8841</span><br><span class="line">fork failed.: Resource temporarily unavailable</span><br></pre></td></tr></table></figure><p>通过<code>htop</code>查了下，服务器上还有其他同学的不少计算程序在进行。暂时无法对比。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> Benchmark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadPoolExecutor - 从JDK11源码理解Java线程池原理</title>
      <link href="/posts/ThreadPoolExecutor-%E4%BB%8EJDK11%E6%BA%90%E7%A0%81%E7%90%86%E8%A7%A3Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8E%9F%E7%90%86/"/>
      <url>/posts/ThreadPoolExecutor-%E4%BB%8EJDK11%E6%BA%90%E7%A0%81%E7%90%86%E8%A7%A3Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>在开发<ahref="https://github.com/HearyShen/HearyHTTPd">HearyHTTPd</a>的过程中，为了有效利用多线程处理并发请求，我使用了Java的线程池机制。我查阅了JDK11中的线程池实现源码，本文对其原理进行进一步的梳理。</p><span id="more"></span><h1id="threadpoolexecutor---从jdk11源码理解java线程池原理">ThreadPoolExecutor- 从JDK11源码理解Java线程池原理</h1><h2 id="表层executors">1 表层——Executors</h2><p>JDK对外提供<code>Executors</code>类的三个静态方法供调用，可以快速生成线程池：</p><h3 id="newsinglethreadexecutor">1.1 newSingleThreadExecutor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span></span><br></pre></td></tr></table></figure><p>退化为只包含一个线程的“线程池”。</p><h3 id="newfixedthreadpool">1.2 newFixedThreadPool</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span> <span class="params">(<span class="type">int</span> nThreads)</span></span><br></pre></td></tr></table></figure><p>包含固定数量线程的线程池。</p><h3 id="newcachedthreadpool">1.3 newCachedThreadPool</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span></span><br></pre></td></tr></table></figure><p>按需创建线程的线程池。</p><h2 id="深一层threadpoolexecutor">2 深一层——ThreadPoolExecutor</h2><p>实质上，以上三个对外的静态方法，本质上都实例化了同一个类型，即：<code>ThreadPoolExecutor</code>，该类继承自抽象类<code>java.util.concurrent.AbstractExecutorService</code>，该抽象类实现了<code>ExecutorService</code>接口，该接口又继承自<code>Executor</code>接口。其中，<code>ExecutorService</code>就是一般外部调用线程池实例的抽象接口。</p><p><code>ThreadPoolExecutor</code>提供构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment"> * parameters, the default thread factory and the default rejected</span></span><br><span class="line"><span class="comment"> * execution handler.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;It may be more convenient to use one of the &#123;<span class="doctag">@link</span> Executors&#125;</span></span><br><span class="line"><span class="comment"> * factory methods instead of this general purpose constructor.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment"> *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment"> *        pool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment"> *        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment"> *        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment"> *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment"> *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125; is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                          TimeUnit unit,</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">         Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以设置线程池的一系列参数：</p><ul><li>核心线程池尺寸：线程池至少保有多少线程；</li><li>最大线程池尺寸：线程池最多能创建多少线程；</li><li>保活时间：线程数量如果超过核心线程数了，最多允许空闲多久，超过即终止线程；</li><li>时间单位：保活时间的时间单位，可以是纳秒、微秒、毫秒、秒、分钟、小时、天；</li><li>工作队列：提交给线程池的任务在执行前，会先放到工作队列中。</li></ul><h3 id="newsinglethreadexecutor-1">2.1 newSingleThreadExecutor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates an Executor that uses a single worker thread operating</span></span><br><span class="line"><span class="comment"> * off an unbounded queue. (Note however that if this single</span></span><br><span class="line"><span class="comment"> * thread terminates due to a failure during execution prior to</span></span><br><span class="line"><span class="comment"> * shutdown, a new one will take its place if needed to execute</span></span><br><span class="line"><span class="comment"> * subsequent tasks.)  Tasks are guaranteed to execute</span></span><br><span class="line"><span class="comment"> * sequentially, and no more than one task will be active at any</span></span><br><span class="line"><span class="comment"> * given time. Unlike the otherwise equivalent</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> newFixedThreadPool(1)&#125; the returned executor is</span></span><br><span class="line"><span class="comment"> * guaranteed not to be reconfigurable to use additional threads.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the newly created single-threaded Executor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>newSingleThreadExecutor</code>具体设置参数为：</p><ul><li>核心线程数和最大线程数都是1，这保证了线程池中有且只有一个线程。</li><li>因为只有1个线程，所以无所谓超时终止，因此保活时间为0。</li><li>提交给线程池的线程会放到一个<code>LinkedBlockingQueue</code>的实例中。<ul><li>这是一个默认无界的阻塞队列（可选有界以控制内存消耗）。</li></ul></li></ul><p>外面套了一层<code>FinalizableDelegatedExecutorService</code>实际上是该<code>Executors</code>类定义的一个内部静态类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">DelegatedExecutorService</span> &#123;</span><br><span class="line">    FinalizableDelegatedExecutorService(ExecutorService executor) &#123;</span><br><span class="line">        <span class="built_in">super</span>(executor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>只是实现了<code>finalize</code>方法，负责关闭线程池。</li></ul><p>该类进一步继承自另一个内部静态类<code>DelegatedExecutorService</code>，这是一个包装类，用于控制对外的提供的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A wrapper class that exposes only the ExecutorService methods</span></span><br><span class="line"><span class="comment"> * of an ExecutorService implementation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DelegatedExecutorService</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">ExecutorService</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="newfixedthreadpool-1">2.2 newFixedThreadPool</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a thread pool that reuses a fixed number of threads</span></span><br><span class="line"><span class="comment"> * operating off a shared unbounded queue.  At any point, at most</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> nThreads&#125; threads will be active processing tasks.</span></span><br><span class="line"><span class="comment"> * If additional tasks are submitted when all threads are active,</span></span><br><span class="line"><span class="comment"> * they will wait in the queue until a thread is available.</span></span><br><span class="line"><span class="comment"> * If any thread terminates due to a failure during execution</span></span><br><span class="line"><span class="comment"> * prior to shutdown, a new one will take its place if needed to</span></span><br><span class="line"><span class="comment"> * execute subsequent tasks.  The threads in the pool will exist</span></span><br><span class="line"><span class="comment"> * until it is explicitly &#123;<span class="doctag">@link</span> ExecutorService#shutdown shutdown&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nThreads the number of threads in the pool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the newly created thread pool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if &#123;<span class="doctag">@code</span> nThreads &lt;= 0&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>newFixedThreadPool</code>具体设置参数为：</p><ul><li>核心线程数和最大线程数都是输入参数<code>nThreads</code>，这保证了线程池中有且只有<code>nThreads</code>个线程。</li><li>因为只有<code>nThreads</code>个线程，所以无所谓超时终止，因此保活时间为0。</li><li>提交给线程池的线程会放到一个<code>LinkedBlockingQueue</code>的实例中。</li></ul><p>除了可以设置多个线程，其他参数与上一个单线程的线程池非常相似。</p><h3 id="newcachedthreadpool-1">2.3 newCachedThreadPool</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a thread pool that creates new threads as needed, but</span></span><br><span class="line"><span class="comment"> * will reuse previously constructed threads when they are</span></span><br><span class="line"><span class="comment"> * available.  These pools will typically improve the performance</span></span><br><span class="line"><span class="comment"> * of programs that execute many short-lived asynchronous tasks.</span></span><br><span class="line"><span class="comment"> * Calls to &#123;<span class="doctag">@code</span> execute&#125; will reuse previously constructed</span></span><br><span class="line"><span class="comment"> * threads if available. If no existing thread is available, a new</span></span><br><span class="line"><span class="comment"> * thread will be created and added to the pool. Threads that have</span></span><br><span class="line"><span class="comment"> * not been used for sixty seconds are terminated and removed from</span></span><br><span class="line"><span class="comment"> * the cache. Thus, a pool that remains idle for long enough will</span></span><br><span class="line"><span class="comment"> * not consume any resources. Note that pools with similar</span></span><br><span class="line"><span class="comment"> * properties but different details (for example, timeout parameters)</span></span><br><span class="line"><span class="comment"> * may be created using &#123;<span class="doctag">@link</span> ThreadPoolExecutor&#125; constructors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the newly created thread pool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>newCachedThreadPool</code>具体设置参数为：</p><ul><li>核心线程数为0，意味着如果线程池闲置后，不会保留任何线程。</li><li>最大线程数为最大整数，意味着如果需要，线程数量可以变得非常大。</li><li>缓存线程池的保活时间是60秒，线程不会立即被销毁，空闲60内如果有新任务，可以直接复用空闲线程。</li><li>提交给线程池的线程会放到一个<code>SynchronousQueue</code>的实例中。</li></ul><h2 id="再深一层从abstractexecutorservice到threadpoolexecutor">3再深一层——从AbstractExecutorService到ThreadPoolExecutor</h2><h3 id="任务提交伊始submit">3.1 任务提交伊始——submit</h3><p>外部使用线程池时，调用的是<code>submit</code>方法。该方法在接口<code>ExecutorService</code>中定义，在抽象类<code>AbstractExecutorService</code>中实现。</p><p>具体地，在抽象类<code>AbstractExecutorService</code>中，<code>submit</code>的实现为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RejectedExecutionException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException       &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, <span class="literal">null</span>);</span><br><span class="line">    execute(ftask);</span><br><span class="line">    <span class="keyword">return</span> ftask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>FutureTask</code>负责统一把输入的无论是<code>Runnable</code>还是<code>Callable</code>都统一转换为<code>FutureTask</code>实例，并以<code>RunnableFuture</code>接口的抽象形式返回。</p><p>随后，调用<code>execute(ftask)</code>方法来执行新提交的任务。该方法在抽象类的子类——<code>ThreadPoolExecutor</code>中具体实现。</p><h3 id="开始执行任务execute">3.2 开始执行任务——execute</h3><p>任务提交后需要执行起来，<code>submit</code>中执行的方法<code>execute(ftask)</code>在抽象类的子类——<code>ThreadPoolExecutor.execute</code>中具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Executes the given task sometime in the future.  The task</span></span><br><span class="line"><span class="comment"> * may execute in a new thread or in an existing pooled thread.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If the task cannot be submitted for execution, either because this</span></span><br><span class="line"><span class="comment"> * executor has been shutdown or because its capacity has been reached,</span></span><br><span class="line"><span class="comment"> * the task is handled by the current &#123;<span class="doctag">@link</span> RejectedExecutionHandler&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> command the task to execute</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> RejectedExecutionException at discretion of</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> RejectedExecutionHandler&#125;, if the task</span></span><br><span class="line"><span class="comment"> *         cannot be accepted for execution</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> command&#125; is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Proceed in 3 steps:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class="line"><span class="comment">     * start a new thread with the given command as its first</span></span><br><span class="line"><span class="comment">     * task.  The call to addWorker atomically checks runState and</span></span><br><span class="line"><span class="comment">     * workerCount, and so prevents false alarms that would add</span></span><br><span class="line"><span class="comment">     * threads when it shouldn&#x27;t, by returning false.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2. If a task can be successfully queued, then we still need</span></span><br><span class="line"><span class="comment">     * to double-check whether we should have added a thread</span></span><br><span class="line"><span class="comment">     * (because existing ones died since last checking) or that</span></span><br><span class="line"><span class="comment">     * the pool shut down since entry into this method. So we</span></span><br><span class="line"><span class="comment">     * recheck state and if necessary roll back the enqueuing if</span></span><br><span class="line"><span class="comment">     * stopped, or start a new thread if there are none.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3. If we cannot queue task, then we try to add a new</span></span><br><span class="line"><span class="comment">     * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class="line"><span class="comment">     * and so reject the task.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="literal">true</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = ctl.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">recheck</span> <span class="operator">=</span> ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">            addWorker(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="literal">false</span>))</span><br><span class="line">        reject(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，当工作线程较少，还不到核心线程数时，该方法会添加一个新线程，并把输入的<code>Runnable command</code>交给新线程执行。</p><p>如果已经达到核心线程数，该方法进行了一系列谨慎的检查工作，并且把输入的<code>Runnable command</code>加入到了<code>workQueue</code>中，具体地：</p><p>检查线程池控制字判断线程池是否在工作，如果是，就把任务加入工作队列<code>workQueue.offer(command)</code>：</p><ul><li>如果任务能够顺利加入工作队列（true），那么会有工作线程去处理它。典型的工作队列<code>LinkedBlockingQueue</code>就属于这一类，这种情况下，线程数量不会超过<code>corePoolSize</code>的核心线程数。<ul><li>当然，因为避免用重型锁，这里采用了CAS锁的形式，来避免加入任务后，线程池关闭、零线程的情况。<ul><li>如果第二次检查发现线程池不运行了，就移除刚刚加入的任务，并<code>reject</code>（<code>reject</code>方法会进一步调用<code>RejectedExecutionHandler</code>实例的<code>handler.rejectedExecution(command, this);</code>方法以便处理这种任务被线程池拒绝的情况）；</li><li>如果线程池还在运行，但是没有工作线程，就新建一个线程来处理工作队列中新加入的任务。</li></ul></li></ul></li><li>如果任务不能顺利加入工作队列（false），那么就需要启动新的工作线程。典型的工作队列<code>SynchronousQueue</code>就属于这一类，如果没有线程阻塞在读取上，就无法插入新的任务，即会返回false。这么一来，就会启动新的线程，毕竟有阻塞在读取上的线程，才能加入新的任务。这意味着线程数量完全有可能超过<code>corePoolSize</code>规定的核心线程数。</li></ul><h3 id="工作队列blockingqueue">3.3 工作队列——BlockingQueue</h3><p>工作队列是一个阻塞队列，用于解决生产者-消费者问题。也就是说，<code>execute</code>扮演的是一个生产者的角色，它负责把检查过的任务加入到工作队列中，供线程池中的工作线程取出并执行。</p><p>在<code>ThreadPoolExecutor</code>中，工作队列<code>workQueue</code>是一个<code>BlockingQueue&lt;Runnable&gt;</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The queue used for holding tasks and handing off to worker</span></span><br><span class="line"><span class="comment"> * threads.  We do not require that workQueue.poll() returning</span></span><br><span class="line"><span class="comment"> * null necessarily means that workQueue.isEmpty(), so rely</span></span><br><span class="line"><span class="comment"> * solely on isEmpty to see if the queue is empty (which we must</span></span><br><span class="line"><span class="comment"> * do for example when deciding whether to transition from</span></span><br><span class="line"><span class="comment"> * SHUTDOWN to TIDYING).  This accommodates special-purpose</span></span><br><span class="line"><span class="comment"> * queues such as DelayQueues for which poll() is allowed to</span></span><br><span class="line"><span class="comment"> * return null even if it may later return non-null when delays</span></span><br><span class="line"><span class="comment"> * expire.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;</span><br></pre></td></tr></table></figure><h3 id="添加工作线程addworker">3.4 添加工作线程——addWorker</h3><p>在上述<code>execute</code>方法中，要执行<code>Runnable</code>任务，需要线程池中有工作线程，是通过调用<code>addWorker</code>实现的。</p><p>具体地，线程池工作线程的创建和添加操作在<code>ThreadPoolExecutor.addWorker</code>方法中具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Checks if a new worker can be added with respect to current</span></span><br><span class="line"><span class="comment"> * pool state and the given bound (either core or maximum). If so,</span></span><br><span class="line"><span class="comment"> * the worker count is adjusted accordingly, and, if possible, a</span></span><br><span class="line"><span class="comment"> * new worker is created and started, running firstTask as its</span></span><br><span class="line"><span class="comment"> * first task. This method returns false if the pool is stopped or</span></span><br><span class="line"><span class="comment"> * eligible to shut down. It also returns false if the thread</span></span><br><span class="line"><span class="comment"> * factory fails to create a thread when asked.  If the thread</span></span><br><span class="line"><span class="comment"> * creation fails, either due to the thread factory returning</span></span><br><span class="line"><span class="comment"> * null, or due to an exception (typically OutOfMemoryError in</span></span><br><span class="line"><span class="comment"> * Thread.start()), we roll back cleanly.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> firstTask the task the new thread should run first (or</span></span><br><span class="line"><span class="comment"> * null if none). Workers are created with an initial first task</span></span><br><span class="line"><span class="comment"> * (in method execute()) to bypass queuing when there are fewer</span></span><br><span class="line"><span class="comment"> * than corePoolSize threads (in which case we always start one),</span></span><br><span class="line"><span class="comment"> * or when the queue is full (in which case we must bypass queue).</span></span><br><span class="line"><span class="comment"> * Initially idle threads are usually created via</span></span><br><span class="line"><span class="comment"> * prestartCoreThread or to replace other dying workers.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> core if true use corePoolSize as bound, else</span></span><br><span class="line"><span class="comment"> * maximumPoolSize. (A boolean indicator is used here rather than a</span></span><br><span class="line"><span class="comment"> * value to ensure reads of fresh values after checking other pool</span></span><br><span class="line"><span class="comment"> * state).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if successful</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">addWorker</span><span class="params">(Runnable firstTask, <span class="type">boolean</span> core)</span> &#123;</span><br><span class="line">    retry:</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();;) &#123;</span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (runStateAtLeast(c, SHUTDOWN)</span><br><span class="line">            &amp;&amp; (runStateAtLeast(c, STOP)</span><br><span class="line">                || firstTask != <span class="literal">null</span></span><br><span class="line">                || workQueue.isEmpty()))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (workerCountOf(c)</span><br><span class="line">                &gt;= ((core ? corePoolSize : maximumPoolSize) &amp; COUNT_MASK))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">break</span> retry;</span><br><span class="line">            c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">            <span class="keyword">if</span> (runStateAtLeast(c, SHUTDOWN))</span><br><span class="line">                <span class="keyword">continue</span> retry;</span><br><span class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">workerStarted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">workerAdded</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">Worker</span> <span class="variable">w</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        w = <span class="keyword">new</span> <span class="title class_">Worker</span>(firstTask);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> w.thread;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">            mainLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (isRunning(c) ||</span><br><span class="line">                    (runStateLessThan(c, STOP) &amp;&amp; firstTask == <span class="literal">null</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t.getState() != Thread.State.NEW)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line">                    workers.add(w);</span><br><span class="line">                    workerAdded = <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> workers.size();</span><br><span class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                        largestPoolSize = s;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">                t.start();</span><br><span class="line">                workerStarted = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">            addWorkerFailed(w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> workerStarted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中，会根据输入参数<code>boolean core</code>来约束工作线程数的上限。如果<code>core==true</code>，则线程数不超过<code>corePoolSize</code>；否则线程数上限为<code>maxPoolSize</code>。</p><h3 id="线程池工作线程runworker">3.5 线程池工作线程——runWorker</h3><p>线程池中保有的工作线程作为消费者的一方，要从工作队列中取出任务并执行。</p><p>具体地，线程池工作线程的主循环在<code>ThreadPoolExecutor.runWorker</code>方法中具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Main worker run loop.  Repeatedly gets tasks from queue and</span></span><br><span class="line"><span class="comment"> * executes them, while coping with a number of issues:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. We may start out with an initial task, in which case we</span></span><br><span class="line"><span class="comment"> * don&#x27;t need to get the first one. Otherwise, as long as pool is</span></span><br><span class="line"><span class="comment"> * running, we get tasks from getTask. If it returns null then the</span></span><br><span class="line"><span class="comment"> * worker exits due to changed pool state or configuration</span></span><br><span class="line"><span class="comment"> * parameters.  Other exits result from exception throws in</span></span><br><span class="line"><span class="comment"> * external code, in which case completedAbruptly holds, which</span></span><br><span class="line"><span class="comment"> * usually leads processWorkerExit to replace this thread.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2. Before running any task, the lock is acquired to prevent</span></span><br><span class="line"><span class="comment"> * other pool interrupts while the task is executing, and then we</span></span><br><span class="line"><span class="comment"> * ensure that unless pool is stopping, this thread does not have</span></span><br><span class="line"><span class="comment"> * its interrupt set.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 3. Each task run is preceded by a call to beforeExecute, which</span></span><br><span class="line"><span class="comment"> * might throw an exception, in which case we cause thread to die</span></span><br><span class="line"><span class="comment"> * (breaking loop with completedAbruptly true) without processing</span></span><br><span class="line"><span class="comment"> * the task.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 4. Assuming beforeExecute completes normally, we run the task,</span></span><br><span class="line"><span class="comment"> * gathering any of its thrown exceptions to send to afterExecute.</span></span><br><span class="line"><span class="comment"> * We separately handle RuntimeException, Error (both of which the</span></span><br><span class="line"><span class="comment"> * specs guarantee that we trap) and arbitrary Throwables.</span></span><br><span class="line"><span class="comment"> * Because we cannot rethrow Throwables within Runnable.run, we</span></span><br><span class="line"><span class="comment"> * wrap them within Errors on the way out (to the thread&#x27;s</span></span><br><span class="line"><span class="comment"> * UncaughtExceptionHandler).  Any thrown exception also</span></span><br><span class="line"><span class="comment"> * conservatively causes thread to die.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 5. After task.run completes, we call afterExecute, which may</span></span><br><span class="line"><span class="comment"> * also throw an exception, which will also cause thread to</span></span><br><span class="line"><span class="comment"> * die. According to JLS Sec 14.20, this exception is the one that</span></span><br><span class="line"><span class="comment"> * will be in effect even if task.run throws.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The net effect of the exception mechanics is that afterExecute</span></span><br><span class="line"><span class="comment"> * and the thread&#x27;s UncaughtExceptionHandler have as accurate</span></span><br><span class="line"><span class="comment"> * information as we can provide about any problems encountered by</span></span><br><span class="line"><span class="comment"> * user code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> w the worker</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">runWorker</span><span class="params">(Worker w)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">wt</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">Runnable</span> <span class="variable">task</span> <span class="operator">=</span> w.firstTask;</span><br><span class="line">    w.firstTask = <span class="literal">null</span>;</span><br><span class="line">    w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">completedAbruptly</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (task != <span class="literal">null</span> || (task = getTask()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            w.lock();</span><br><span class="line">            <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">            <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">            <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">            <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                 (Thread.interrupted() &amp;&amp;</span><br><span class="line">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                !wt.isInterrupted())</span><br><span class="line">                wt.interrupt();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                beforeExecute(wt, task);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    task.run();</span><br><span class="line">                    afterExecute(task, <span class="literal">null</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">                    afterExecute(task, ex);</span><br><span class="line">                    <span class="keyword">throw</span> ex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                task = <span class="literal">null</span>;</span><br><span class="line">                w.completedTasks++;</span><br><span class="line">                w.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completedAbruptly = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        processWorkerExit(w, completedAbruptly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开头<code>task</code>初始值为<code>firstTask</code>，是线程池的成员变量，用于引用初始任务，通常为空。因此，线程池的主线程作为<code>workQueue</code>的消费者，通常情况下都是通过<code>getTask()</code>方法来取出任务。</p><p>取出任务后，谨慎地进行线程池的状态检查，并在运行任务的前后，分别调用<code>beforeExecute</code>和<code>afterExecute</code>方法。这两个方法在<code>ThreadPoolExecutor</code>中实现内容为空，也就是说不做任何事情。这两个方法是预留的，可以被继承实现，以增加额外的检查和功能（如：记录日志）。</p><p>运行任务显得很简单，线程池的工作线程执行<code>Runnable</code>任务实例的<code>task,run()</code>方法即可。</p><h3 id="从工作队列中取任务gettask">3.6 从工作队列中取任务——getTask</h3><p><code>ThreadPoolExecutor.getTask()</code>的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Performs blocking or timed wait for a task, depending on</span></span><br><span class="line"><span class="comment"> * current configuration settings, or returns null if this worker</span></span><br><span class="line"><span class="comment"> * must exit because of any of:</span></span><br><span class="line"><span class="comment"> * 1. There are more than maximumPoolSize workers (due to</span></span><br><span class="line"><span class="comment"> *    a call to setMaximumPoolSize).</span></span><br><span class="line"><span class="comment"> * 2. The pool is stopped.</span></span><br><span class="line"><span class="comment"> * 3. The pool is shutdown and the queue is empty.</span></span><br><span class="line"><span class="comment"> * 4. This worker timed out waiting for a task, and timed-out</span></span><br><span class="line"><span class="comment"> *    workers are subject to termination (that is,</span></span><br><span class="line"><span class="comment"> *    &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut || workerCount &gt; corePoolSize&#125;)</span></span><br><span class="line"><span class="comment"> *    both before and after the timed wait, and if the queue is</span></span><br><span class="line"><span class="comment"> *    non-empty, this worker is not the last thread in the pool.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> task, or null if the worker must exit, in which case</span></span><br><span class="line"><span class="comment"> *         workerCount is decremented</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Runnable <span class="title function_">getTask</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">timedOut</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ctl.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (runStateAtLeast(c, SHUTDOWN)</span><br><span class="line">            &amp;&amp; (runStateAtLeast(c, STOP) || workQueue.isEmpty())) &#123;</span><br><span class="line">            decrementWorkerCount();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">wc</span> <span class="operator">=</span> workerCountOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Are workers subject to culling?</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">timed</span> <span class="operator">=</span> allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span><br><span class="line">            &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Runnable</span> <span class="variable">r</span> <span class="operator">=</span> timed ?</span><br><span class="line">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">                workQueue.take();</span><br><span class="line">            <span class="keyword">if</span> (r != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            timedOut = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">            timedOut = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，根据<code>timed</code>变量，决定是限时等待型读取或是阻塞型读取。</p><ul><li>如果<code>timed==true</code>，则在主循环中限时等待提取工作队列中的任务，即<code>workQueue.poll</code>方法：<ul><li>如果工作队列中有任务，则立即返回；</li><li>如果没有，则等待指定时间，如果仍然没有，则返回<code>null</code>。</li><li>（Retrieves and removes the head of this queue, waiting up to thespecified wait time if necessary for an element to becomeavailable.）</li></ul></li><li>如果<code>timed==false</code>，则在主循环中阻塞式提取工作队列中任务，即<code>workQueue.take</code>方法：<ul><li>如果工作队列中有任务，则立即返回；</li><li>如果没有，则线程阻塞，直到生产者加入任务后，有任务实例再返回。</li></ul></li></ul><h2 id="j.u.c阻塞队列">4 J.U.C阻塞队列</h2><p>上述“3.2开始执行任务——execute”中解释了LinkedBlockingQueue与SynchronousQueue为什么会分别用于不同的ThreadPoolExecutor。尤其是同步队列，<code>CachedThreadPool</code>依靠其插入失败就可以检测到没有数量匹配的读线程，由此增加线程池的线程数。</p><h3 id="无容量的同步队列synchronousqueue">4.1无容量的同步队列——SynchronousQueue</h3><p>这个容器就比较特别了，虽然名字是队列，但实际上没有任何容量。</p><blockquote><p>A blocking queue in which each insert operation must wait for acorresponding remove operation by another thread, and vice versa. Asynchronous queue does not have any internal capacity, not even acapacity of one. You cannot peek at a synchronous queue because anelement is only present when you try to remove it; you cannot insert anelement (using any method) unless another thread is trying to remove it;you cannot iterate as there is nothing to iterate. The head of the queueis the element that the first queued inserting thread is trying to addto the queue; if there is no such queued thread then no element isavailable for removal and poll() will return null. For purposes of otherCollection methods (for example contains), a SynchronousQueue acts as anempty collection. This queue does not permit null elements.</p></blockquote><p>使用该容器时，必须先取再插。也就是说，对于一个同步队列，如果没有任何线程在读取它，别的线程就无法对其插入新数据。通常，需要先启动一个线程读取同步队列，此时同步队列尚无数据，则该读线程会处于阻塞等待地状态。随后，启动一个线程向同步队列中插入数据，此时，阻塞等待数据的读线程会唤醒并读取插入数据。</p><p>因为其插入时必须要有读线程的特性，该容器被应用于检测读线程少于插入任务数量的情况，引导线程池增加新线程。</p><h3 id="链表阻塞队列linkedblockingqueue">4.2链表阻塞队列——LinkedBlockingQueue</h3><p>不难理解，这是一个基于链表实现的阻塞队列。</p><blockquote><p>An optionally-bounded blocking queue based on linked nodes. Thisqueue orders elements FIFO (first-in-first-out). The head of the queueis that element that has been on the queue the longest time. The tail ofthe queue is that element that has been on the queue the shortest time.New elements are inserted at the tail of the queue, and the queueretrieval operations obtain elements at the head of the queue. Linkedqueues typically have higher throughput than array-based queues but lesspredictable performance in most concurrent applications.</p></blockquote><p>既然是链表实现，那一般理解是可以无界的，当然也可以指定大小限定为有界。</p><p>链表阻塞队列采用FIFO模式，队列头是最早插入的，队列尾是最新插入的，取出时依据FIFO顺序。</p><p>基于链表阻塞队列在并发应用中吞吐量通常比基于数组的阻塞队列更大，因为基于链表的阻塞队列不至于同步锁定整个数组容器。基于链表的阻塞队列实际上在读写时，锁定入队和出队的位置就可以了。</p><h3 id="数组阻塞队列arrayblockingqueue">4.3数组阻塞队列——ArrayBlockingQueue</h3><p>不难理解，这是一个基于数组实现的阻塞队列。</p><blockquote><p>A bounded blocking queue backed by an array. This queue orderselements FIFO (first-in-first-out). The head of the queue is thatelement that has been on the queue the longest time. The tail of thequeue is that element that has been on the queue the shortest time. Newelements are inserted at the tail of the queue, and the queue retrievaloperations obtain elements at the head of the queue. This is a classic"bounded buffer", in which a fixed-sized array holds elements insertedby producers and extracted by consumers. Once created, the capacitycannot be changed. Attempts to put an element into a full queue willresult in the operation blocking; attempts to take an element from anempty queue will similarly block.</p><p>This class supports an optional fairness policy for ordering waitingproducer and consumer threads. By default, this ordering is notguaranteed. However, a queue constructed with fairness set to truegrants threads access in FIFO order. Fairness generally decreasesthroughput but reduces variability and avoids starvation.</p></blockquote><p>既然是基于数组实现的，那容器肯定是有界的，创建时就确定的，无法动态变化。这样一来，如果数组中存满了，再插入新的数据就需要阻塞至有元素被取走，同样地，如果数组中没有元素，读取操作需要阻塞至有元素被插入。</p><p>另外，数组阻塞队列还存在一个公平策略，如果严格要求保障FIFO的出入队列顺序，需要启用公平策略，这样可以避免饥饿问题（因为否则的话，可能有些元素长时间都不会被轮到取出来），但是也会减少吞吐量。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDK </tag>
            
            <tag> ThreadPool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL笔记</title>
      <link href="/posts/SQL%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/SQL%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>以MySQL为准，复习SQL，记录增删改查操作、常用函数以及其他功能。本文SQL语句均在MySQL中实验。</p><span id="more"></span><h1 id="sql笔记">SQL笔记</h1><h2 id="连接">0 连接</h2><p>主要是按照CYC2018的CS-Notes的结构进行学习记的笔记：</p><blockquote><p><a href="https://cyc2018.github.io/CS-Notes/#/notes/SQL">CS-NotesSQL</a></p></blockquote><p>菜鸟教程一贯的适合查阅，快速领悟：</p><blockquote><p><a href="https://www.runoob.com/mysql/mysql-tutorial.html">MySQL教程</a></p></blockquote><h2 id="增">1 增</h2><h3 id="新建数据库create-database">1.1 新建数据库（createdatabase）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE temp;</span><br><span class="line">USE temp;</span><br></pre></td></tr></table></figure><ul><li>新建一个名为temp的临时数据库。</li><li>选中、使用该数据库。</li></ul><h3 id="新建表create-table">1.2 新建表（create table）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  创建一个news表，记录标题、作者、时间。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> news(</span><br><span class="line">id <span class="type">INT</span> UNSIGNED AUTO_INCREMENT,</span><br><span class="line">    title <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    author <span class="type">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;Anonymous&#x27;</span>,</span><br><span class="line">    <span class="type">time</span> DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="插入行insert-into">1.3 插入行（insert into）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> news(title)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;news1&#x27;</span>);</span><br></pre></td></tr></table></figure><p>插入结果：</p><table><thead><tr class="header"><th>id</th><th>title</th><th>author</th><th>time</th></tr></thead><tbody><tr class="odd"><td>1</td><td>ABC</td><td>Anonymous</td><td>2020-07-03 14:41:01</td></tr></tbody></table><ul><li>id初始为1；</li><li>title是插入的指定值；</li><li>author虽未插入时指定，但有建表时的默认值填充；</li><li>time未在插入时指定，但有建表时默认以当前时间戳填充。</li></ul><h2 id="删">2 删</h2><h3 id="删除数据库drop-database">2.1 删除数据库（drop database）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE temp;</span><br></pre></td></tr></table></figure><h3 id="删除表drop-table">2.2 删除表（drop table）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> news;</span><br></pre></td></tr></table></figure><h3 id="删除行delete">2.3 删除行（delete）</h3><p>删除一行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> news </span><br><span class="line"><span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>删除所有行（清空表）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> mytable;</span><br></pre></td></tr></table></figure><h2 id="改">3 改</h2><h3 id="改表结构alter-table">3.1 改表结构（alter table）</h3><p>插入列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> news</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> isValid bool;</span><br></pre></td></tr></table></figure><p>删除列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> news</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> isValid;</span><br></pre></td></tr></table></figure><h3 id="改行数据update">3.2 改行数据（update）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> news</span><br><span class="line"><span class="keyword">SET</span> author <span class="operator">=</span> <span class="string">&#x27;Tom&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="查">4 查</h2><h3 id="查行数据select">4.1 查行数据（select）</h3><h4 id="基本查询select-...-from-table">4.1.1 基本查询(select ... fromtable)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查询全部属性（*）</span><br><span class="line">SELECT * FROM news;</span><br><span class="line"></span><br><span class="line">-- 查询指定属性</span><br><span class="line">SELECT title, author FROM news;</span><br></pre></td></tr></table></figure><h5 id="属性别名as">属性别名（as）</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> title <span class="keyword">AS</span> head, author <span class="keyword">AS</span> reporter</span><br><span class="line"><span class="keyword">FROM</span> news;</span><br></pre></td></tr></table></figure><ul><li>返回结果中，两列被命名为head和reporter。</li></ul><h4 id="条件查询where">4.1.2 条件查询（where）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询满足指定条件的指定属性</span></span><br><span class="line"><span class="keyword">SELECT</span> title, author </span><br><span class="line"><span class="keyword">FROM</span> news</span><br><span class="line"><span class="keyword">WHERE</span> author<span class="operator">=</span><span class="string">&#x27;Anonymous&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- BETWEEN 1 AND 2限制范围为 1 &lt;= id &lt;= 2</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> news</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="keyword">BETWEEN</span> <span class="number">1</span> <span class="keyword">AND</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 既有BETWEEN AND条件，又有title条件</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> news</span><br><span class="line"><span class="keyword">WHERE</span> ID <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">1</span> <span class="keyword">AND</span> title<span class="operator">=</span><span class="string">&#x27;news1&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="比较">1）比较</h5><table><thead><tr class="header"><th>操作符</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>=</td><td>等于</td></tr><tr class="even"><td>&lt;</td><td>小于</td></tr><tr class="odd"><td>&gt;</td><td>大于</td></tr><tr class="even"><td>&lt;&gt;或 !=</td><td>不等于</td></tr><tr class="odd"><td>&lt;=或 !&gt;</td><td>小于等于（即不大于）</td></tr><tr class="even"><td>&gt;=或 !&lt;</td><td>大于等于（即不小于）</td></tr><tr class="odd"><td>BETWEEN</td><td>在两个值之间</td></tr><tr class="even"><td>IS NULL</td><td>为 NULL 值</td></tr></tbody></table><h5 id="字符串的大小写敏感">2）字符串的大小写敏感</h5><p>默认的字符串比较是不区分大小写的，在类型为字符串的属性或字符串参数前使用<code>BINARY</code>操作符修饰，可以将字符串逐字节（byteby byte）比较。</p><h5 id="逻辑">3）逻辑</h5><p>逻辑与、或、非（AND / OR / NOT）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> news</span><br><span class="line"><span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">OR</span> (title<span class="operator">=</span><span class="string">&#x27;news2&#x27;</span> <span class="keyword">AND</span> <span class="type">time</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><ul><li>可以用小括号来决定优先级</li></ul><h5 id="通配符">4）通配符</h5><p>通过<code>LIKE</code>即可使用通配符：</p><ul><li><code>%</code>：通配&gt;=0个任意字符；</li><li><code>_</code>：通配1个任意字符；</li><li><code>\</code>：escape符，取消通配符的转义，使用其字面值。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> news</span><br><span class="line"><span class="keyword">WHERE</span> title <span class="keyword">LIKE</span> &quot;news%&quot;;</span><br></pre></td></tr></table></figure><p>备注：网上有笔记说LIKE子句可以用形如<code>[a-z]</code>的通配符，经实际测试不行，查MySQL文档中也没说LIKE有这个通配符。应该需要正则表达式REGEXP子句才对。</p><h5 id="正则表达式">5）正则表达式</h5><p>通过<code>REGEXP</code>即可使用正则表达式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> news</span><br><span class="line"><span class="keyword">WHERE</span> title REGEXP &quot;^[a-z]&#123;4&#125;[0-9]$&quot;;</span><br></pre></td></tr></table></figure><ul><li>以4个英文字母开头，1个数字结尾的正则。</li></ul><h4 id="去重distinct">4.1.3 去重（distinct）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用DISTINCT去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> author</span><br><span class="line"><span class="keyword">FROM</span> news;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果有多列，需要多列内容都相同，才认定为需要去重</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> title, author</span><br><span class="line"><span class="keyword">FROM</span> news;</span><br></pre></td></tr></table></figure><h4 id="限制数量limit">4.1.4 限制数量（limit）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用LIMIT限制返回结果数量</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> news</span><br><span class="line">LIMIT <span class="number">1</span>, <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或写明OFFSET</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> news</span><br><span class="line">LIMIT <span class="number">1</span> <span class="keyword">OFFSET</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li><code>LIMIT index, offset</code>，从结果的第index项开始，偏移offset行作为返回范围。</li><li>index从0开始，因此本例会返回结果的第二项。</li></ul><h4 id="排序order-by">4.1.5 排序（order by）</h4><p>升序（asc, ascending）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> news</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">ASC</span></span><br><span class="line">LIMIT <span class="number">1</span>, <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>返回升序排序的第二名，从小到大的第二名，即第二小的id。</li></ul><p>降序（desc, descending）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> news</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">1</span>, <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>返回降序排序的第二名，从大到小的第二名，即第二大的id。</li></ul><h4 id="分组group-by">4.1.6 分组（group by）</h4><p>使用groupby进行分组，此时select查询的属性必须是统计型的，不能每组内不同的属性。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> author, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> news</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> author;</span><br></pre></td></tr></table></figure><p>较复杂的，使用where子句设置每个行的条件，使用having子句设置每个分组的条件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> author, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> count</span><br><span class="line"><span class="keyword">FROM</span> news</span><br><span class="line"><span class="keyword">WHERE</span> id<span class="operator">&gt;</span><span class="number">1</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> author</span><br><span class="line"><span class="keyword">HAVING</span> count<span class="operator">&gt;</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="函数查询">4.2 函数查询</h3><p>以MySQL为例，有各类函数：</p><h4 id="统计">4.2.1 统计</h4><table><thead><tr class="header"><th>函 数</th><th>说 明</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>AVG()</td><td>返回某列的平均值</td><td>忽略NULL行</td></tr><tr class="even"><td>COUNT()</td><td>返回某列的行数</td><td></td></tr><tr class="odd"><td>MAX()</td><td>返回某列的最大值</td><td></td></tr><tr class="even"><td>MIN()</td><td>返回某列的最小值</td><td></td></tr><tr class="odd"><td>SUM()</td><td>返回某列值之和</td><td></td></tr></tbody></table><p>复杂一些的，结合distinct去重和count计数，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span>(author))</span><br><span class="line"><span class="keyword">FROM</span> news;</span><br></pre></td></tr></table></figure><ul><li>统计有多少个作者姓名</li></ul><h4 id="文本处理">4.2.2 文本处理</h4><table><colgroup><col style="width: 23%" /><col style="width: 22%" /><col style="width: 53%" /></colgroup><thead><tr class="header"><th>函数</th><th>说明</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>LEFT(str, len)</td><td>左边的字符</td><td></td></tr><tr class="even"><td>RIGHT(str, len)</td><td>右边的字符</td><td></td></tr><tr class="odd"><td>LOWER(str)</td><td>转换为小写字符</td><td></td></tr><tr class="even"><td>UPPER(str)</td><td>转换为大写字符</td><td></td></tr><tr class="odd"><td>LTRIM(str)</td><td>去除左边的空格</td><td></td></tr><tr class="even"><td>RTRIM(str)</td><td>去除右边的空格</td><td></td></tr><tr class="odd"><td>LENGTH(str)</td><td>长度</td><td></td></tr><tr class="even"><td>SOUNDEX(str)</td><td>转换为语音值</td><td>Sound Index：Knuth和Kant都对应K530</td></tr></tbody></table><h4 id="日期与时间">4.2.3 日期与时间</h4><table><colgroup><col style="width: 36%" /><col style="width: 43%" /><col style="width: 20%" /></colgroup><thead><tr class="header"><th>函 数</th><th>说 明</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>ADDDATE(date, days)</td><td>增加一个日期（天、周等）</td><td></td></tr><tr class="even"><td>ADDTIME(time, time)</td><td>增加一个时间（时、分等）</td><td></td></tr><tr class="odd"><td>CURDATE()</td><td>返回当前日期</td><td>CURRENT_DATE()</td></tr><tr class="even"><td>CURTIME()</td><td>返回当前时间</td><td>CURRENT_TIME()</td></tr><tr class="odd"><td>NOW()</td><td>返回当前日期和时间</td><td></td></tr><tr class="even"><td>DATE(datetime)</td><td>返回日期时间的日期部分</td><td></td></tr><tr class="odd"><td>TIME(datetime)</td><td>返回日期时间的时间部分</td><td></td></tr><tr class="even"><td>YEAR(date)</td><td>返回一个日期的年份部分</td><td></td></tr><tr class="odd"><td>MONTH(date)</td><td>返回一个日期的月份部分</td><td></td></tr><tr class="even"><td>DAY(date)</td><td>返回一个日期的天数部分</td><td></td></tr><tr class="odd"><td>DAYOFWEEK(date)</td><td>对于一个日期，返回对应的星期几</td><td></td></tr><tr class="even"><td>HOUR(time)</td><td>返回一个时间的小时部分</td><td></td></tr><tr class="odd"><td>MINUTE(time)</td><td>返回一个时间的分钟部分</td><td></td></tr><tr class="even"><td>SECOND(time)</td><td>返回一个时间的秒部分</td><td></td></tr><tr class="odd"><td>DATEDIFF(date, date)</td><td>计算两个日期之差</td><td></td></tr><tr class="even"><td>DATE_ADD(date, days)</td><td>高度灵活的日期运算函数</td><td></td></tr><tr class="odd"><td>DATE_FORMAT(date, format)</td><td>返回一个格式化的日期或时间串</td><td></td></tr></tbody></table><ul><li>日期格式：<code>YYYY-MM-DD</code></li><li>时间格式：<code>HH:MM:SS</code></li></ul><p>获取当前日期+时间、当前日期、当前时间、当前时间戳：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW(), <span class="built_in">CURRENT_DATE</span>(), <span class="built_in">CURRENT_TIME</span>(), <span class="built_in">CURRENT_TIMESTAMP</span>();</span><br><span class="line"><span class="comment">-- 2020-07-03 16:45:392020-07-0316:45:392020-07-03 16:45:39</span></span><br></pre></td></tr></table></figure><p>从当前日期中取出年份：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(CURDATE());</span><br></pre></td></tr></table></figure><h4 id="数学">4.2.4 数学</h4><table><colgroup><col style="width: 14%" /><col style="width: 8%" /><col style="width: 76%" /></colgroup><thead><tr class="header"><th>函数</th><th>说明</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>SIN(x)</td><td>正弦</td><td>三角函数输入弧度（radians），不是角度</td></tr><tr class="even"><td>COS(x)</td><td>余弦</td><td></td></tr><tr class="odd"><td>TAN(x)</td><td>正切</td><td></td></tr><tr class="even"><td>ABS(x)</td><td>绝对值</td><td></td></tr><tr class="odd"><td>SQRT(x)</td><td>平方根</td><td></td></tr><tr class="even"><td>MOD(m, n)</td><td>余数</td><td>m % n</td></tr><tr class="odd"><td>EXP(x)</td><td>指数</td><td>e^x</td></tr><tr class="even"><td>PI()</td><td>圆周率</td><td></td></tr><tr class="odd"><td>RAND([n])</td><td>随机数</td><td>浮点数，0&lt;=rand&lt;1.0；参数n可指定随机数种子，可选项。</td></tr><tr class="even"><td>FLOOR(x)</td><td>下取整</td><td></td></tr><tr class="odd"><td>CEILING(x)</td><td>上取整</td><td>别名CEIL(x)</td></tr></tbody></table><p>组合rand和floor可以获取任意<code>[i, j)</code>区间的随机整数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">7</span> <span class="operator">+</span> (RAND() <span class="operator">*</span> <span class="number">5</span>));</span><br></pre></td></tr></table></figure><ul><li><code>[7, 12)</code></li></ul><h4 id="其他">4.2.5 其他</h4><table><colgroup><col style="width: 19%" /><col style="width: 49%" /><col style="width: 31%" /></colgroup><thead><tr class="header"><th>函数</th><th>说明</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>IFNULL(expr1, expr2)</td><td>如果式1不为NULL，则返回式1，若式1为NULL，则返回式2</td><td>如果式1查询结果为空，也会返回式2</td></tr></tbody></table><h3 id="嵌套查询">4.3 嵌套查询</h3><p>父查询依赖于子查询，<strong>子查询只能返回一个字段的数据</strong>，可用于where子句的条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用IN子句，col1必须在查询出的col2结果中</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable1</span><br><span class="line"><span class="keyword">WHERE</span> col1 <span class="keyword">IN</span> (<span class="keyword">SELECT</span> col2</span><br><span class="line">               <span class="keyword">FROM</span> mytable2);</span><br><span class="line">               </span><br><span class="line"><span class="comment">-- 另外，如果子查询结果是一个基本变量，也可以用等于（=）之类的关系符比较</span></span><br></pre></td></tr></table></figure><p>从Customer和Orders两个表中，检索每个客户的订单数量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">                   <span class="keyword">FROM</span> Orders</span><br><span class="line">                   <span class="keyword">WHERE</span> Orders.cust_id <span class="operator">=</span> Customers.cust_id)</span><br><span class="line">                   <span class="keyword">AS</span> orders_num</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name;</span><br></pre></td></tr></table></figure><p>对每个Customer行，将其cust_id作为子查询的where条件。</p><h3 id="连接查询join">4.4 连接查询（join）</h3><p>连接多个表，语法为：<code>join ... on ...</code>。</p><p>效率一般比子查询更快。</p><p>可以用AS给表、计算字段、列取别名。</p><p>Employee表：</p><table><thead><tr class="header"><th>id</th><th>name</th><th>deptId</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Tom</td><td>1</td></tr><tr class="even"><td>2</td><td>Mike</td><td>1</td></tr><tr class="odd"><td>3</td><td>Sandy</td><td>2</td></tr><tr class="even"><td>4</td><td>Wendy</td><td>3</td></tr><tr class="odd"><td>5</td><td>Lily</td><td>0</td></tr></tbody></table><ul><li>Employee有一个对不上Dept的Lily员工</li></ul><p>Dept表：</p><table><thead><tr class="header"><th>deptId</th><th>deptName</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Dev</td></tr><tr class="even"><td>2</td><td>Deploy</td></tr><tr class="odd"><td>3</td><td>Finance</td></tr><tr class="even"><td>4</td><td>HR</td></tr></tbody></table><ul><li>Dept有一个对不上Employee的HR部</li></ul><h4 id="内连接inner-join">4.4.1 内连接（inner join）</h4><h5 id="等值连接">1）等值连接</h5><p><strong>比较运算符为<code>=</code>时，是等值连接。</strong></p><p>只有等值的、对的上的会起来，对不上的就丢弃（一个表有，而另一个表没有的）。内连接可以自主决定判定的属性和条件。</p><p>以deptId为连接条件进行内连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 以ON子句设定连接条件</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Dept</span><br><span class="line"><span class="keyword">ON</span> Employee.deptId <span class="operator">=</span> Dept.deptId;<span class="comment">-- 等值连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 相当于是等值条件下的多表查询</span></span><br><span class="line"><span class="keyword">SELECT</span> Employee.<span class="operator">*</span>, Dept.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Employee, Dept</span><br><span class="line"><span class="keyword">WHERE</span> Employee.deptId <span class="operator">=</span> Dept.deptId;</span><br></pre></td></tr></table></figure><p>结果为：</p><table><thead><tr class="header"><th>id</th><th>name</th><th>deptId</th><th>deptId</th><th>deptName</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Tom</td><td>1</td><td>1</td><td>Dev</td></tr><tr class="even"><td>2</td><td>Mike</td><td>1</td><td>1</td><td>Dev</td></tr><tr class="odd"><td>3</td><td>Sandy</td><td>2</td><td>2</td><td>Deploy</td></tr><tr class="even"><td>4</td><td>Wendy</td><td>3</td><td>3</td><td>Finance</td></tr></tbody></table><ul><li>没有部门可连接的Lily员工在连接中被丢弃了。</li><li>没有员工可供连接的HR部门在连接中被丢弃了。</li></ul><p>也可以为被连接的表起别名，并限制查询的列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> E.id, E.name, E.deptId, D.deptName</span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">as</span> E <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Dept <span class="keyword">as</span> D</span><br><span class="line"><span class="keyword">ON</span> E.deptId <span class="operator">=</span> D.deptId;</span><br></pre></td></tr></table></figure><p>结果为：</p><table><thead><tr class="header"><th>id</th><th>name</th><th>deptId</th><th>deptName</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Tom</td><td>1</td><td>Dev</td></tr><tr class="even"><td>2</td><td>Mike</td><td>1</td><td>Dev</td></tr><tr class="odd"><td>3</td><td>Sandy</td><td>2</td><td>Deploy</td></tr><tr class="even"><td>4</td><td>Wendy</td><td>3</td><td>Finance</td></tr></tbody></table><h5 id="非等值连接">2）非等值连接</h5><p><strong>比较运算符为<code>!=, &lt;&gt;, &lt;, &gt;, &lt;=, &gt;=</code>这些非等值比较时，是非等值连接。</strong></p><h5 id="自然连接natural-join">3）自然连接（natural join）</h5><p>不难发现，自然连接是等值连接的一种。</p><p>自然连接是写起来最“自然”的，自然连接自动对比属性名相同的列，把相同的值进行连接，而且自然连接会去重用于连接的相同的列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Dept;</span><br></pre></td></tr></table></figure><p>连接结果丢弃了连不上的部分（左表有但右表对不上，或右表有但左表对不上）：</p><table><thead><tr class="header"><th>deptId</th><th>id</th><th>name</th><th>deptName</th></tr></thead><tbody><tr class="odd"><td>1</td><td>1</td><td>Tom</td><td>Dev</td></tr><tr class="even"><td>1</td><td>2</td><td>Mike</td><td>Dev</td></tr><tr class="odd"><td>2</td><td>3</td><td>Sandy</td><td>Deploy</td></tr><tr class="even"><td>3</td><td>4</td><td>Wendy</td><td>Finance</td></tr></tbody></table><ul><li>没有部门可连接的Lily员工在连接中被丢弃了。</li><li>没有员工可供连接的HR部门在连接中被丢弃了。</li></ul><h5 id="自连接">4）自连接</h5><p>一个表自己和自己连接。</p><p>例如，只需要根据Edployee表就可以查询同部门的同事关系：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">as</span> E1 <span class="keyword">inner</span> <span class="keyword">join</span> Employee <span class="keyword">as</span> E2</span><br><span class="line"><span class="keyword">ON</span> E1.deptId <span class="operator">=</span> E2.deptId <span class="keyword">AND</span> E1.id <span class="operator">!=</span> E2.id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 相当于多表查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">as</span> E1, Employee <span class="keyword">as</span> E2</span><br><span class="line"><span class="keyword">WHERE</span> E1.deptId <span class="operator">=</span> E2.deptId <span class="keyword">AND</span> E1.id <span class="operator">!=</span> E2.id;</span><br></pre></td></tr></table></figure><p>结果为：</p><table><thead><tr class="header"><th>id</th><th>name</th><th>deptId</th><th>id</th><th>name</th><th>deptId</th></tr></thead><tbody><tr class="odd"><td>2</td><td>Mike</td><td>1</td><td>1</td><td>Tom</td><td>1</td></tr><tr class="even"><td>1</td><td>Tom</td><td>1</td><td>2</td><td>Mike</td><td>1</td></tr></tbody></table><ul><li>Mike和Tom是双向的同事关系</li></ul><h4 id="外连接outer-join">4.4.2 外连接（outer join）</h4><h5 id="左外连接left-outer-join">左外连接（left outer join）</h5><p>保留左表中对不上的多余行，空白部分用NULL填充（右表多余的行则丢弃）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">as</span> E <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Dept <span class="keyword">as</span> D</span><br><span class="line"><span class="keyword">ON</span> E.deptId <span class="operator">=</span> D.deptId;</span><br></pre></td></tr></table></figure><p>结果为：</p><table><thead><tr class="header"><th>id</th><th>name</th><th>deptId</th><th>deptId</th><th>deptName</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Tom</td><td>1</td><td>1</td><td>Dev</td></tr><tr class="even"><td>2</td><td>Mike</td><td>1</td><td>1</td><td>Dev</td></tr><tr class="odd"><td>3</td><td>Sandy</td><td>2</td><td>2</td><td>Deploy</td></tr><tr class="even"><td>4</td><td>Wendy</td><td>3</td><td>3</td><td>Finance</td></tr><tr class="odd"><td>5</td><td>Lily</td><td>0</td><td>NULL</td><td>NULL</td></tr></tbody></table><ul><li>右表的HR部因为在左表中没有可连接行而被丢弃。</li><li>右表的deptId尽管在右表中是主键，不可为NULL，但是在查询结果中是可以用NULL填充的。</li></ul><p>另外，如果增加WHERE条件，还可以选出只有左表才有的行（即对应的右表ISNULL）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">as</span> E <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Dept <span class="keyword">as</span> D</span><br><span class="line"><span class="keyword">ON</span> E.deptId <span class="operator">=</span> D.deptId</span><br><span class="line"><span class="keyword">WHERE</span> D.deptID <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h5 id="右外连接right-outer-join">右外连接（right outer join）</h5><p>保留右表中对不上的多余行，空白部分用NULL填充（左表多余的行则丢弃）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">as</span> E <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Dept <span class="keyword">as</span> D</span><br><span class="line"><span class="keyword">ON</span> E.deptId <span class="operator">=</span> D.deptId;</span><br></pre></td></tr></table></figure><p>结果为：</p><table><thead><tr class="header"><th>id</th><th>name</th><th>deptId</th><th>deptId</th><th>deptName</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Tom</td><td>1</td><td>1</td><td>Dev</td></tr><tr class="even"><td>2</td><td>Mike</td><td>1</td><td>1</td><td>Dev</td></tr><tr class="odd"><td>3</td><td>Sandy</td><td>2</td><td>2</td><td>Deploy</td></tr><tr class="even"><td>4</td><td>Wendy</td><td>3</td><td>3</td><td>Finance</td></tr><tr class="odd"><td>NULL</td><td>NULL</td><td>NULL</td><td>4</td><td>HR</td></tr></tbody></table><ul><li>左表的Lily因为在右表中没有可连接行而被丢弃。</li><li>左表的id尽管在右表中是主键，不可为NULL，但是在查询结果中是可以用NULL填充的。</li></ul><h4 id="交叉连接cross-join">4.4.3 交叉连接（cross join）</h4><p>交叉连接即笛卡尔积，不考虑连接匹配关系，只管将所有排列组合都列出来。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">cross</span> <span class="keyword">join</span> Dept;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 相当于无条件的多表查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Employee, Dept;</span><br></pre></td></tr></table></figure><p>结果为：</p><table><thead><tr class="header"><th>id</th><th>name</th><th>deptId</th><th>deptId</th><th>deptName</th></tr></thead><tbody><tr class="odd"><td>1</td><td>Tom</td><td>1</td><td>1</td><td>Dev</td></tr><tr class="even"><td>1</td><td>Tom</td><td>1</td><td>2</td><td>Deploy</td></tr><tr class="odd"><td>1</td><td>Tom</td><td>1</td><td>3</td><td>Finance</td></tr><tr class="even"><td>1</td><td>Tom</td><td>1</td><td>4</td><td>HR</td></tr><tr class="odd"><td>2</td><td>Mike</td><td>1</td><td>1</td><td>Dev</td></tr><tr class="even"><td>2</td><td>Mike</td><td>1</td><td>2</td><td>Deploy</td></tr><tr class="odd"><td>2</td><td>Mike</td><td>1</td><td>3</td><td>Finance</td></tr><tr class="even"><td>2</td><td>Mike</td><td>1</td><td>4</td><td>HR</td></tr><tr class="odd"><td>3</td><td>Sandy</td><td>2</td><td>1</td><td>Dev</td></tr><tr class="even"><td>3</td><td>Sandy</td><td>2</td><td>2</td><td>Deploy</td></tr><tr class="odd"><td>3</td><td>Sandy</td><td>2</td><td>3</td><td>Finance</td></tr><tr class="even"><td>3</td><td>Sandy</td><td>2</td><td>4</td><td>HR</td></tr><tr class="odd"><td>4</td><td>Wendy</td><td>3</td><td>1</td><td>Dev</td></tr><tr class="even"><td>4</td><td>Wendy</td><td>3</td><td>2</td><td>Deploy</td></tr><tr class="odd"><td>4</td><td>Wendy</td><td>3</td><td>3</td><td>Finance</td></tr><tr class="even"><td>4</td><td>Wendy</td><td>3</td><td>4</td><td>HR</td></tr><tr class="odd"><td>5</td><td>Lily</td><td>0</td><td>1</td><td>Dev</td></tr><tr class="even"><td>5</td><td>Lily</td><td>0</td><td>2</td><td>Deploy</td></tr><tr class="odd"><td>5</td><td>Lily</td><td>0</td><td>3</td><td>Finance</td></tr><tr class="even"><td>5</td><td>Lily</td><td>0</td><td>4</td><td>HR</td></tr></tbody></table><ul><li>全排列组合，共4×5=20行。</li></ul><h3 id="组合查询union">4.5 组合查询（union）</h3><p>使用 <strong>UNION</strong> 来组合两个查询，如果第一个查询返回 M行，第二个查询返回 N 行，那么组合查询的结果一般为 M+N 行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> Employee</span><br><span class="line"><span class="keyword">WHERE</span> deptId <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Employee</span><br><span class="line"><span class="keyword">WHERE</span> deptId <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>查询1返回2行，查询2返回1行，组合结果总共3行。</li><li>被组合的查询必须有相通性，要有相同的列、表达式或聚集函数才行。（不然没法组合到一起）。</li><li>默认去重，去除相同的行，可以通过<code>UNION ALL</code>来保留相同行。</li><li>被组合的查询不可以分组（orderby），只能对组合查询的结果进行分组。</li></ul><h2 id="其他功能">5 其他功能</h2><h3 id="视图view">5.1 视图（view）</h3><p>视图是虚拟的表，本身不包含数据，也就不能对其进行索引操作。</p><p>对视图的操作和对普通表的操作一样。</p><p>视图具有如下好处：</p><ul><li>简化复杂的 SQL 操作，比如复杂的连接；</li><li>只使用实际表的一部分数据；</li><li>通过只给用户访问视图的权限，保证数据的安全性；</li><li>更改数据格式和表示。</li></ul><h4 id="新建视图create-view">5.1.1 新建视图（create view）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> Developers <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> Employee</span><br><span class="line"><span class="keyword">WHERE</span> deptId <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">SELECT</span> deptId</span><br><span class="line"><span class="keyword">FROM</span> Dept</span><br><span class="line"><span class="keyword">WHERE</span> deptName <span class="operator">=</span> <span class="string">&#x27;Dev&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>将查询Dev部门的开发者名单的嵌套查询作为视图</li></ul><h4 id="查询视图select">5.1.2 查询视图（select）</h4><p>查询的时候就像查询表一样容易：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Developers;</span><br></pre></td></tr></table></figure><h4 id="删除视图drop-view">5.1.3 删除视图（drop view）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> Developers;</span><br></pre></td></tr></table></figure><h3 id="存储过程procedure">5.2 存储过程（procedure）</h3><p>相当于SQL的批处理程序，将一批SQL封装成一个存储过程。</p><p>使用存储过程的好处：</p><ul><li>代码封装，保证了一定的安全性；</li><li>代码复用；</li><li>由于是预先编译，因此具有很高的性能。</li></ul><h4 id="新建存储过程create-procedure">5.2.1 新建存储过程（createprocedure）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 声明语句结束符</span></span><br><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="comment">-- 新建存储过程，定义INT类型的OUT输出参数ret</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> myprocedure( <span class="keyword">out</span> ret <span class="type">int</span> )</span><br><span class="line">    <span class="keyword">begin</span><span class="comment">-- 过程开始</span></span><br><span class="line">        <span class="keyword">declare</span> y <span class="type">int</span>;<span class="comment">-- declare变量定义</span></span><br><span class="line">        <span class="keyword">select</span> <span class="built_in">sum</span>(col1)</span><br><span class="line">        <span class="keyword">from</span> mytable</span><br><span class="line">        <span class="keyword">into</span> y;</span><br><span class="line">        <span class="keyword">select</span> y<span class="operator">*</span>y <span class="keyword">into</span> ret;<span class="comment">-- 结果select into输出参数</span></span><br><span class="line">    <span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span><span class="comment">-- 过程结束</span></span><br><span class="line"></span><br><span class="line">delimiter ;<span class="comment">-- 存储过程定义完毕，将结束符恢复为封号;</span></span><br></pre></td></tr></table></figure><p>存储过程的参数可以从三种中选：</p><ul><li>IN：输入参数；</li><li>OUT：输出参数；</li><li>INOUT：即输入，也输出的参数。</li></ul><h4 id="调用存储过程call">5.2.2 调用存储过程（call）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 如果是传入参数，可以通过SET定义</span></span><br><span class="line"><span class="comment">-- 如：SET @name=&#x27;Tom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> myprocedure(<span class="variable">@ret</span>);<span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@ret</span>;<span class="comment">-- 使用返回结果变量</span></span><br></pre></td></tr></table></figure><h4 id="修改存储过程alter-procedure">5.2.3 修改存储过程（alterprocedure）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改存储过程名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> proc1 RENAME <span class="keyword">TO</span> proc2;</span><br></pre></td></tr></table></figure><h4 id="删除存储过程drop-procedure">5.2.4 删除存储过程（dropprocedure）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> proc2;</span><br></pre></td></tr></table></figure><h3 id="游标cursor">5.3 游标（cursor）</h3><p>游标可以一行一行处理，前进、后退一行。</p><p>游标的性能不会很好，逐行处理不如并发，且占用带宽，锁定资源，代码量也比批量select更多。</p><blockquote><p><ahref="https://segmentfault.com/a/1190000005807737">Mysql游标入门</a></p><p>游标主要用于交互式应用，其中用户需要滚动屏幕上的数据，并对数据进行浏览或做出更改。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> myyoubiao ()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">declare</span> done <span class="type">boolean</span> <span class="keyword">default</span> <span class="number">0</span>; <span class="comment">--循环标记</span></span><br><span class="line">    <span class="keyword">declare</span> tmp <span class="type">int</span>; <span class="comment">-- 临时存储变量</span></span><br><span class="line">    <span class="keyword">declare</span> t <span class="type">DECIMAL</span>(<span class="number">8</span>,<span class="number">2</span>); <span class="comment">-- 同上</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">declare</span> myCursor <span class="keyword">CURSOR</span> <span class="keyword">for</span> <span class="keyword">select</span> id <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line">    <span class="keyword">declare</span> continue handler <span class="keyword">for</span> <span class="keyword">sqlstate</span> <span class="string">&#x27;02000&#x27;</span> <span class="keyword">set</span> done <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> mytable <span class="comment">-- 表不存在是创建， 存在时跳过</span></span><br><span class="line">    (uId <span class="type">int</span>, total <span class="type">decimal</span>(<span class="number">8</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> myCursor;</span><br><span class="line">    </span><br><span class="line">    REPEAT</span><br><span class="line">        <span class="keyword">fetch</span> myCursor <span class="keyword">into</span> tmp;</span><br><span class="line">            <span class="keyword">call</span> getTotalByUser2(tmp, <span class="number">1</span>, t); <span class="comment">-- 根据用户id获取该用户总订单金额， 含税</span></span><br><span class="line">            <span class="keyword">insert</span> <span class="keyword">into</span> mytable(uId,total) <span class="keyword">values</span>(tmp,t); <span class="comment">--插入新表</span></span><br><span class="line">    UNTIL done <span class="keyword">end</span> REPEAT;</span><br><span class="line">    <span class="keyword">CLOSE</span> myCursor;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="触发器trigger">5.4 触发器（trigger）</h3><p>触发器会在条件触发时自动执行，条件包括：对表的delete、insert和update。</p><p>可以在触发条件执行前或执行后执行触发器操作。之前执行使用 BEFORE关键字，之后执行使用 AFTER 关键字。BEFORE 用于数据验证和净化，AFTER用于审计跟踪，将修改记录到另外一张表中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 触发器在对表进行插入操作后执行</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> mytrigger AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> mytable</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">SELECT</span> NEW.col <span class="keyword">into</span> <span class="variable">@result</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@result</span>; <span class="comment">-- 获取结果</span></span><br></pre></td></tr></table></figure><p>DELETE 触发器包含一个名为 OLD 的虚拟表，并且是只读的。</p><p>UPDATE 触发器包含一个名为 NEW 和一个名为 OLD 的虚拟表，其中 NEW是可以被修改的，而 OLD 是只读的。</p><p>MySQL 不允许在触发器中使用 CALL 语句，也就是不能调用存储过程。</p><h3 id="事务管理transaction">5.5 事务管理（transaction）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> ...</span><br><span class="line"><span class="keyword">SAVEPOINT</span> delete1</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> ...</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> delete1</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> ...</span><br><span class="line"><span class="keyword">COMMIT</span></span><br></pre></td></tr></table></figure><p><strong>保存点（savepoint）</strong>：事务处理中设置的临时占位符（placeholder），你可以对它发布回退（与回退整个事务处理不同）。</p><p><strong>回退（rollback）</strong>：撤销指定 SQL 语句的过程。</p><p><strong>隐式自动提交</strong>（autocommit）：</p><ol type="1"><li>MySQL的事务提交<strong>默认是隐式提交</strong>，每执行一条语句就把这条语句当成一个事务然后进行提交。</li><li>当出现 START TRANSACTION语句时，会<strong>自动关闭隐式提交</strong>；</li><li>当 COMMIT 或 ROLLBACK语句执行后，事务会自动关闭，<strong>重新恢复隐式提交</strong>。</li></ol><p>设置 autocommit 为 0 可以取消自动提交；autocommit标记是针对每个连接而不是针对服务器的。</p><p><strong>保存点（savepoint）与回滚（rollback）</strong>：</p><ul><li>如果没有设置保留点，ROLLBACK 会回退到 START TRANSACTION语句处；</li><li>如果设置了保留点，并且在 ROLLBACK中指定该保留点，则会回退到该保留点。</li></ul><h3 id="字符集与字符序charset-collation">5.6 字符集与字符序（charset&amp; collation）</h3><blockquote><p><ahref="https://www.cnblogs.com/chyingp/p/mysql-character-set-collation.html">再见乱码：5分钟读懂MySQL字符集设置</a></p></blockquote><p>MySQL支持多种字符集 与 字符序。</p><ol type="1"><li>一个字符集对应至少一种字符序（一般是1对多）。</li><li>两个不同的字符集不能有相同的字符序。</li><li>每个字符集都有默认的字符序。</li></ol><h4 id="查询支持的字符集">5.6.1 查询支持的字符集：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span>;</span><br></pre></td></tr></table></figure><p>结果：</p><table><thead><tr class="header"><th>Charset</th><th>Description</th><th>Default collation</th><th>Maxlen</th></tr></thead><tbody><tr class="odd"><td>big5</td><td>Big5 Traditional Chinese</td><td>big5_chinese_ci</td><td>2</td></tr><tr class="even"><td>dec8</td><td>DEC West European</td><td>dec8_swedish_ci</td><td>1</td></tr><tr class="odd"><td>cp850</td><td>DOS West European</td><td>cp850_general_ci</td><td>1</td></tr><tr class="even"><td>略……</td><td>……</td><td>……</td><td>……</td></tr></tbody></table><h4 id="查询支持的字符序">5.6.2 查询支持的字符序：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW COLLATION;</span><br></pre></td></tr></table></figure><p>结果：</p><table><thead><tr class="header"><th>Collation</th><th>Charset</th><th>Id</th><th>Default</th><th>Compiled</th><th>Sortlen</th></tr></thead><tbody><tr class="odd"><td>big5_chinese_ci</td><td>big5</td><td>1</td><td>Yes</td><td>Yes</td><td>1</td></tr><tr class="even"><td>big5_bin</td><td>big5</td><td>84</td><td></td><td>Yes</td><td>1</td></tr><tr class="odd"><td>dec8_swedish_ci</td><td>dec8</td><td>3</td><td>Yes</td><td>Yes</td><td>1</td></tr></tbody></table><h4 id="设置字符集和字符序">5.6.3 设置字符集和字符序</h4><p>创建表时设置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(</span><br><span class="line">    col <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> latin <span class="keyword">COLLATE</span> latin1_general_ci </span><br><span class="line">)</span><br><span class="line"><span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> hebrew <span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></table></figure><p>排序、分组时设置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> col <span class="keyword">COLLATE</span> latin1_general_ci;</span><br></pre></td></tr></table></figure><h2 id="权限与安全">6 权限与安全</h2><h3 id="用户管理user">6.1 用户管理（user）</h3><h4 id="查询用户">6.1.1 查询用户</h4><p>查询系统表获取用户清单：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p>查询当前用户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">current_user</span>();</span><br></pre></td></tr></table></figure><ul><li>返回<code>heary@localhost</code>。</li></ul><h4 id="新建用户create-user">6.1.2 新建用户（create user）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> myuser IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;mypassword&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="修改用户">6.1.3 修改用户</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME <span class="keyword">USER</span> myuser <span class="keyword">TO</span> newuser;</span><br></pre></td></tr></table></figure><h4 id="删除用户drop-user">6.1.4 删除用户（drop user）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> myuser;</span><br></pre></td></tr></table></figure><h4 id="设置密码set-password-for">6.1.5 设置密码（set passwordfor）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> PASSWROD <span class="keyword">FOR</span> myuser <span class="operator">=</span> Password(<span class="string">&#x27;new_password&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>必须使用Password函数对密码进行加密。</li></ul><h3 id="权限管理grant">6.2 权限管理（grant）</h3><h4 id="查询权限show-grants-for">6.2.1 查询权限（show grants for）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> myuser;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例如查询当前用户权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="built_in">current_user</span>();</span><br><span class="line"><span class="comment">-- GRANT ALL PRIVILEGES ON *.* TO &#x27;heary&#x27;@&#x27;localhost&#x27; WITH GRANT OPTION</span></span><br></pre></td></tr></table></figure><h4 id="授予权限grant">6.2.2 授予权限（grant）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> mydatabase.<span class="operator">*</span> <span class="keyword">TO</span> myuser;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- GRANT ALL PRIVILEGES ON *.* TO &#x27;heary&#x27;@&#x27;localhost&#x27;;</span></span><br></pre></td></tr></table></figure><h4 id="撤销权限revoke">6.2.3 撤销权限（revoke）</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> mydatabase.<span class="operator">*</span> <span class="keyword">FROM</span> myuser;</span><br></pre></td></tr></table></figure><p>GRANT 和 REVOKE 可在几个层次上控制访问权限：</p><ul><li>整个服务器，使用 GRANT ALL 和 REVOKE ALL；</li><li>整个数据库，使用 ON database.*；</li><li>特定的表，使用 ON database.table；</li><li>特定的列；</li><li>特定的存储过程。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库原理笔记</title>
      <link href="/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>梳理数据库原理，编写笔记。</p><span id="more"></span><h1 id="数据库原理笔记">数据库原理笔记</h1><h2 id="链接">0 链接</h2><p>主要学习CYC2018的笔记：</p><blockquote><p><ahref="https://cyc2018.github.io/CS-Notes/#/notes/数据库系统原理">数据库系统原理</a></p></blockquote><p>博客<ahref="https://www.cnblogs.com/CoderAyu/">码农阿宇</a>的文章，以实例深入分析了MySQL的InnoDB的封锁原理，重点分析了可重复读隔离级别能否防幻读（我觉得update的时候为了避免丢失修改，要拿最新的快照，因此就引入了新插入的数据，然后再去读的化，就造成了幻影读）：</p><blockquote><p><ahref="https://www.cnblogs.com/CoderAyu/p/11525408.html">事务隔离级别中的可重复读能防幻读吗?</a></p></blockquote><p>掘金上的一文对MVCC的ReadView机制有比较细致的介绍，有助于理解：</p><blockquote><p><ahref="https://juejin.im/post/5cdbfec051882515cc7e4afd">面试官：谈谈你对Mysql的MVCC的理解?</a></p></blockquote><p>关于设计范式的知乎讨论：</p><blockquote><p><ahref="https://www.zhihu.com/question/24696366">如何理解关系型数据库的常见设计范式？</a></p></blockquote><h2 id="事务transaction">1 事务（Transaction）</h2><h3 id="概念">1.1 概念</h3><p>数据库事务（简称：事务）是数据库管理系统执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。</p><p>基本地，事务的执行要么全部执行成功，要么全部都没执行（如果执行了一半，就回滚撤销回全部都没执行的状态）。</p><p>比如说，转账支付事务：</p><ol type="1"><li>从张三的账户扣除100元；</li><li>对李四的账户增加100元。</li></ol><p>这两个操作，要么都执行成功，即转账成功；要么都没执行，即转账失败。如果执行了一半出错了，那必须回滚，要不然帐就对不上了。</p><p>具体地，事务需要满足ACID四大性质：</p><h3 id="acid">1.2 ACID</h3><p><strong>原子性（Atomicity）</strong>：事务作为<strong>一个整体</strong>被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。</p><ul><li>如上所述的例子，转账事务要么执行到位，要么就别执行，不可分割出来只完成一部分。</li></ul><p><strong>一致性（Consistency）</strong>：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应<strong>满足完整性约束</strong>。</p><ul><li>数据库修改前后的状态都应该是满足约束条件的，比如说：张三转账给李四，两人合起来的总金额应该是不变的，不能凭空多出钱，或者消失钱。</li></ul><p><strong>隔离性（Isolation）</strong>：多个事务<strong>并发</strong>执行时，一个事务的执行不应影响其他事务的执行。</p><ul><li>张三给李四转账100元，王五也给李四转账200元，李四账上本来有300元。两个转账事务同时执行，都需要<strong>先读取李四的账户余额，然后加上转入金额算出新余额，最后把新余额写入数据库</strong>。如果没有满足隔离性，就会出现：两个并发事务都先“同时”读取李四的账户，发现余额是300元，于是“同时”计算转入金额后的新余额，分别在读到的余额上加了100元和200元，新余额结果为：400元和500元，最后“同时”写入数据库，实际最终写入的可能是400元也可能是500元。实际上应该是300+100+200=600元才对！</li><li>并发事务的“同时”实际上有细粒度的先后顺序。</li></ul><p><strong>持久性（Durability）</strong>：已被提交的事务对数据库的修改应该<strong>永久保存</strong>在数据库中。</p><ul><li>转账的记录得保留存档，有据可查，不能数据库断电、重启了就没账目了。</li></ul><h3 id="acid与正确性">1.3 ACID与正确性</h3><p>实际上，ACID四个特性不是平级的并列关系，而是：</p><ul><li><strong>数据库执行结果的正确性</strong>，需要依靠：<strong>一致性（Consistency）</strong>；<ul><li><strong>一致性</strong>依靠：<ul><li><strong>原子性（Atomicity）</strong>；</li><li><strong>隔离性（Isolation）</strong>；</li></ul></li></ul></li><li>数据库系统崩溃后依然正确，需要依靠：<strong>持久性（Durability）</strong></li></ul><p>正如上述的例子，数据库需要把转账事务作为整体执行（原子性），而且事务之间不能互相产生干扰（隔离性），这样转账的结果才是正确的。</p><p>转账的结果需要记录下来，要不然数据库系统突然断电、出了故障，这笔转账就消失了。</p><h2 id="并发一致性问题">2 并发一致性问题</h2><p>并发一致性问题是<strong>并发环境</strong> +<strong>事务隔离性（Isolation）缺失</strong>的情况下会出现的问题。</p><p>具体地，是”一写三读“问题——一个写问题，三个读问题：</p><h3 id="丢失修改">2.1 丢失修改</h3><p><em>同记录，两个写。</em></p><p>并发事务T1、T2“同时”修改记录A，都“同时”读取了旧数据，将其修改为新数据，结果是后写入的覆盖掉了先写入的数据。先写入的修改内容就丢失了。</p><p>正确的情况是：一个事务完成修改后，另一个事务在此基础之上再进行修改，即，对相同记录的两个写事务需要相互隔离。</p><h3 id="读脏数据">2.2 读脏数据</h3><p><em>同记录，一读一写。</em></p><p>并发事务T1、T2，其中，T1修改记录A，T2需要读取记录A。结果并发执行的时候，T1刚修改A为一个结果，还有后续工作未完成。如果在尚未完成T1事务的情况下，T2去读了A，此时，如果T1事务后续操作执行出错，数据库系统就会回滚了T1事务。这样一来，T2读取的只是T1执行过程中的临时修改的数据，并不是结果数据。</p><p>正确的情况是：T1要么在T2事务完成前读取正确的老数据，要么在T2事务完成后读取正确的新数据，即，对相同记录的一读一写的两个事务需要相互隔离。</p><h3 id="不可重复读">2.3 不可重复读</h3><p><em>同记录，一读一写。</em></p><p>并发事务T1、T2，其中，T1修改记录A，T2反复读取记录A。结果并发执行的时候，T2先读取了记录A的旧数据，随后T1修改了记录A，此后T2读取到了记录A的新数据。T2发现，在同一个事务的执行过程中，读取到的记录A前后矛盾不一致。</p><p>正确的情况是：除非业务逻辑可接受这种情况，否则应该是正在被读取的记录不可以被修改，即，对相同记录的一读一写的两个事务需要相互隔离。</p><h3 id="幻影读">2.4 幻影读</h3><p><em>同范围，一读一写。</em></p><p>与不可重复读类似，但不可重复读是因为读取了被修改的<strong>特定数据字段</strong>，而幻影读是因为<strong>统计的范围内</strong>有数据被修改。</p><p>并发事务T1、T2，其中，T1修改表A，T2反复统计表A。结果并发执行的时候，T2先统计了表A的数据（比如计数），随后T1修改了表A（比如说插入一行新数据），此后T2再统计表A的数据。T2发现，在同一个事务的执行过程中，对表A的数据的统计结果前后矛盾不一致，</p><p>正确的情况是：除非业务逻辑可接受这种情况，否则应该是正在被读取的表（范围）不可以被修改，即，对相同范围的一读一写的两个事务需要相互隔离。</p><h2 id="封锁">3 封锁</h2><p>要想实现并发一致性，就需要在并发环境下保证事务的<strong>隔离性</strong>。</p><p>解决方法就是<strong>封锁（Lock）</strong>。</p><h3 id="封锁粒度">3.1 封锁粒度</h3><p>MySQL有行级锁和表级锁。</p><p>细粒度锁：</p><ul><li>优：系统并发度高（因为只锁定有关的数据，锁定的数据少，发生争用的概率越低，系统并发程度就越高）；</li><li>缺：封锁开销大（相较于对整个表上一个锁，细粒度锁需要对涉及到的记录都上锁，锁的数量更多，上锁、释放锁、检查锁的开销也就成倍增多）。</li></ul><p>粗粒度锁：</p><ul><li>优：封锁开销小；</li><li>缺：系统并发度低。</li></ul><h3 id="封锁类型">3.2 封锁类型</h3><h4 id="读写锁">3.2.1 读写锁</h4><ul><li>互斥锁（Exclusive），简写为 X 锁，又称写锁。</li><li>共享锁（Shared），简写为 S 锁，又称读锁。</li></ul><p>读写锁兼容关系：</p><table><thead><tr class="header"><th></th><th>X</th><th>S</th></tr></thead><tbody><tr class="odd"><td>X</td><td><strong>No</strong></td><td><strong>No</strong></td></tr><tr class="even"><td>S</td><td><strong>No</strong></td><td>Yes</td></tr></tbody></table><ul><li>X锁排斥任何其他锁，S锁兼容S锁。</li></ul><h4 id="意图锁">3.2.2 意图锁</h4><p>意向锁有助于多粒度封锁。</p><p>对表A上X锁，不仅需要检查表级锁兼容情况，还需要检查表内每行有没有锁，代价很大。如果能够在表级记录下表内有没有锁，就很方便。</p><p>意图锁夹在读写锁的上级，设置细粒度读写锁时，要先设置粗粒度意向锁：</p><ul><li>先获得表的IS锁，才能进一步设置行的S锁；</li><li>先获得表的IX锁，才能进一步设置行的X锁。</li></ul><p>这样锁表的时候，看看表上的意向锁情况，就知道表内有没有行锁了。</p><p>意向锁与读写锁的兼容关系：</p><table><thead><tr class="header"><th></th><th>X</th><th>IX</th><th>S</th><th>IS</th></tr></thead><tbody><tr class="odd"><td>X</td><td><strong>No</strong></td><td><strong>No</strong></td><td><strong>No</strong></td><td><strong>No</strong></td></tr><tr class="even"><td>IX</td><td><strong>No</strong></td><td>Yes</td><td><strong>No</strong></td><td>Yes</td></tr><tr class="odd"><td>S</td><td><strong>No</strong></td><td><strong>No</strong></td><td>Yes</td><td>Yes</td></tr><tr class="even"><td>IS</td><td><strong>No</strong></td><td>Yes</td><td>Yes</td><td>Yes</td></tr></tbody></table><ul><li>IS-IS, IS-IX,IX-IX都是兼容的，表级意向不需要互斥，要看具体的行有没有互斥（可能虽然是对同一个表的意向，但表内的读写的具体行是不相同的，没有产生互斥）；</li></ul><h3 id="封锁协议">3.3 封锁协议</h3><h4 id="一级封锁协议">3.3.1 一级封锁协议</h4><p>协议内容：</p><ul><li>写前加X锁，事务提交后释放；</li></ul><p>存在问题：</p><ul><li><p>读脏数据：读不需要上锁，因此可能读到写事务提交前的修改数据。</p></li><li><p>不可重复读：读不需要上锁，因此可能读到修改前、修改后的数据。</p></li></ul><h4 id="二级封锁协议">3.3.2 二级封锁协议</h4><p>协议内容：</p><ul><li>写前加X锁，事务提交后释放；</li><li>读前加S锁，读后立即释放；</li></ul><p>存在问题：</p><ul><li><p><del>读脏数据：已解决。</del></p></li><li><p>不可重复读：读后立即释放锁，因此可能读到修改前、修改后的数据（读-修改-读）。</p></li></ul><h4 id="三级封锁协议">3.3.3 三级封锁协议</h4><p>协议内容：</p><ul><li>写前加X锁，事务提交后释放；</li><li>读前加S锁，事务提交后释放；</li></ul><p>存在问题：</p><ul><li><p><del>读脏数据：已解决。</del></p></li><li><p><del>不可重复读：已解决。</del></p></li></ul><h4 id="两段锁协议">3.3.4 两段锁协议</h4><p>2PL(Two Phase Locking)。</p><p>事务分两个阶段进行加锁和解锁：</p><ul><li>加锁阶段：从开始，到事务执行结束（commit或rollback），只加锁；</li><li>解锁阶段：事务执行结束后，只解锁。</li></ul><p>两端所协议 ==&gt; 可串行化调度。（反之则不一定成立）</p><p>可串行化调度表示事务并发执行的结果和串行执行的结果一样，意味着不会出现并发一致性问题。</p><blockquote><p>MySQL 的 InnoDB存储引擎采用两段锁协议，会根据隔离级别在需要的时候自动加锁，并且所有的锁都是在同一时刻被释放，这被称为隐式锁定。</p></blockquote><h2 id="隔离级别">4 隔离级别</h2><h3 id="四级别">4.1 四级别</h3><p><strong>未提交读（ReadUncommitted）</strong>：能读到未提交的修改。</p><p><strong>提交读（Read Committed）</strong>：只能读到已提交的修改。</p><p><strong>可重复读（RepeatableRead）</strong>：同一事务中多次读的结果一致。</p><p><strong>可串行化（Serializable）</strong>：并发执行与串行调度结果一致，无并发一致性问题。</p><h3 id="隔离级别与并发一致性问题">4.2 隔离级别与并发一致性问题</h3><table><thead><tr class="header"><th></th><th>脏读</th><th>不可重复读</th><th>幻影读</th></tr></thead><tbody><tr class="odd"><td>未提交读</td><td><strong>有</strong></td><td><strong>有</strong></td><td><strong>有</strong></td></tr><tr class="even"><td>提交读</td><td>无</td><td><strong>有</strong></td><td><strong>有</strong></td></tr><tr class="odd"><td>可重复读</td><td>无</td><td>无</td><td><strong>有</strong></td></tr><tr class="even"><td>可串行化</td><td>无</td><td>无</td><td>无</td></tr></tbody></table><ul><li>可重复读隔离级别仍然有幻影读问题是因为，一般认为可重复读是对读的行上了锁，使之无法被修改，解决了可重复读问题，但<strong>无法阻止插入新的行</strong>，所以仍然有幻影读问题。</li></ul><h2 id="多版本并发控制mvcc">5 多版本并发控制（MVCC）</h2><p>多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的InnoDB存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。而未提交读隔离级别总是读取最新的数据行，要求很低，无需使用MVCC。可串行化隔离级别需要对所有读取的行都加锁，单纯使用 MVCC无法实现。</p><h3 id="基本思想">5.1 基本思想</h3><p><strong>悲观锁</strong>：害怕被错误修改，老老实实上锁。但封锁的代价很高，大多数情况下是多数读、少数写，能不用锁就争取不用锁。</p><p>那怎么才能避免用锁呢？</p><p><strong>乐观锁</strong>：MVCC类似CopyOnWrite的思想，使用了“版本”（Version）的概念：</p><ul><li>读的时候就直接读现有版本；</li><li>写（Insert, Delete,Update，即增删改）的时候，把现有的<strong>数据行</strong>复制一份快照作为新版本，写事务对新版本快照进行修改，提交的时候把旧版本更新为新版本（新快照）。</li></ul><h3 id="实现">5.2 实现</h3><h4 id="版本号">5.2.1 版本号</h4><ul><li><strong>SYS_ID</strong>：系统版本号，是一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。</li><li><strong>TRX_ID</strong> ：事务版本号，事务开始时的系统版本号。</li></ul><h4 id="撤销日志undo-log">5.2.2 撤销日志（Undo log）</h4><p>MVCC 的多版本指的是多个版本的快照，快照存储在 Undo日志中，该日志通过回滚指针 ROLL_PTR 把一个数据行的所有快照连接起来。</p><p>对MySQL的插入和更新操作，会形成撤销日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO t(id, x) VALUES(1, &quot;a&quot;);</span><br><span class="line">UPDATE t SET x=&quot;b&quot; WHERE id=1;</span><br><span class="line">UPDATE t SET x=&quot;c&quot; WHERE id=1;</span><br></pre></td></tr></table></figure><p>因为没有以<code>START TRANSACTION</code>开头，MySQL根据AutoCommit机制，将每一句SQL作为一个事务来执行，形成的撤销日志形如：</p><table><colgroup><col style="width: 7%" /><col style="width: 4%" /><col style="width: 4%" /><col style="width: 6%" /><col style="width: 9%" /><col style="width: 4%" /><col style="width: 62%" /></colgroup><thead><tr class="header"><th>version</th><th>id</th><th>x</th><th>TRX_ID</th><th>ROLL_PTR</th><th>DEL</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>3</td><td>1</td><td>'c'</td><td>3</td><td>version 2</td><td>0</td><td>Record：目前的最新版本（即所有语句执行完成后的状态）</td></tr><tr class="even"><td>2</td><td>1</td><td>'b'</td><td>2</td><td>version 1</td><td>0</td><td>Undo Update：第3行执行前的版本（即第2次Update之前的状态）</td></tr><tr class="odd"><td>1</td><td>1</td><td>'a'</td><td>1</td><td>version 0</td><td>0</td><td>Undo Update：第2行执行前的版本（即第1次Update之前的状态）</td></tr><tr class="even"><td>0</td><td>1</td><td></td><td></td><td></td><td></td><td>Undo Insert：第1行执行前的版本（即Insert之前的状态）</td></tr></tbody></table><ul><li>增删改：INSERT、UPDATE、DELETE操作会创建新日志，并记录事务版本号TRX_ID；</li><li>删除操作形成的新状态不易表示，因此用DEL字段来标记Delete操作；</li></ul><h4 id="readview">5.2.3 ReadView</h4><p>MVCC维护了一个ReadView结构，以列表的形式列举当前未提交的事务<code>TRX_IDs=&#123;TRX_ID_1, TRX_ID_2, ...&#125;</code>，并且记录该列表的最小值<code>TRX_ID_MIN</code>和最大值<code>TRX_ID_MAX</code>。</p><p>事务执行读取操作前，会获取系统的<code>TRX_ID_MIN</code>和<code>TRX_ID_MAX</code>：</p><ul><li><p><strong>提交读</strong>级别，事务获取每次进行读取操作时，都会读取系统最新的<code>TRX_ID_MIN</code>和<code>TRX_ID_MAX</code>；</p></li><li><p><strong>可重复读</strong>级别，事务开始时获取系统最新的<code>TRX_ID_MIN</code>和<code>TRX_ID_MAX</code>，此后不再更新。</p></li></ul><p><strong>在Select读取时</strong>，需要检验该数据行快照的<code>TRX_ID</code>与<code>TRX_ID_MIN</code>和<code>TRX_ID_MAX</code>的关系，判断是否可以读出来：</p><ul><li>若<code>TRX_ID &lt; TRX_ID_MIN</code>，则说明当前未提交的事务没有对该数据行创建新的版本快照，意味着对该数据行进行修改操作（或可重复读隔离），也就是说这个数据行可以正常读取使用。</li><li>若<code>TRX_ID &gt; TRX_ID_MAX</code>，则说明该数据行在本事务启动后被修改过，因此不可使用。（我认为这种情况只会出现在<strong>可重复读</strong>，因为这等隔离级别的自事务启动时读取<code>TRX_ID_MAX</code>后就不再更新，有可能系统执行了其他事务，<code>TRX_ID</code>超过了其启动时读取的<code>TRX_ID_MAX</code>。为了满足可重复读，显然不应该读取该新版本数据行。）</li><li>若<code>TRX_ID_MIN &lt;= TRX_ID &lt;= TRX_ID_MAX</code>，则说明可能有未提交的事务对该数据行创建了新的版本快照，意味着可能对该数据行进行了修改操作（或可重复读隔离），那这就要根据事务的隔离级别来判断能不能读了：<ul><li>若<strong>提交读</strong>级别，则事务只肯读已提交的版本快照，那就要看这个版本有没有被提交。具体地，看这个<code>TRX_ID</code>在不在未提交事务列表<code>TRX_IDs</code>里：<ul><li>如果在，那么说明该数据行版本快照还未被提交，不可以读取使用；</li><li>如果不在，那么说明该数据行版本快照已经被提交了，可以读取使用。（<code>TRX_ID</code>在这个范围中，不代表一定是未提交地，也有可能是已经其前后的事务还未提交，但该事务执行的比较快，已经提交了。因此，要根据未提交事务列表<code>TRX_IDs</code>来确认<code>TRX_ID</code>事务到底有没有提交。）</li></ul></li><li>若<strong>可重复读</strong>级别，则都不可读。因为此范围内的事务可能陆陆续续会提交，如果同意读取此范围内事务的已提交结果，前一次读到的结果完全有可能因为陆续提交的事务而被修改掉。</li></ul></li></ul><p>如果当前数据行版本快照不能读，就沿着Undolog的回滚指针ROLL_PTR再找更早的一个快照，再继续判断。</p><h4 id="快照读与当前读">5.2.4 快照读与当前读</h4><p><strong>快照读</strong></p><p>查操作（select）时快照中的数据，不需要加锁。</p><p>也可以手动对SELECT查询加S或X锁：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> ? lock <span class="keyword">in</span> share mode;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> ? <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure><p><strong>当前读</strong></p><p>增删改操作（insert, delete,update）需要读取最新数据以便进行修改（否则就会出现丢失修改的并发一致性问题），因此需要加锁占有最新数据。</p><h2 id="next-key-locks">6 Next-Key Locks</h2><p>MVCC可以解决通过读取指定的快照版本，可以解决不可重复读问题，但无法控制范围的变化，例如：insert,delete操作。MySQL的InnoDB存储引擎引入Next-KeyLocks，与MVCC结合使用，在可重复读的隔离级别下，可以解决幻影读问题。</p><p>核心思想就是锁区间、锁范围。</p><h3 id="record-locks">6.1 Record Locks</h3><p>锁单个记录。</p><p>锁定一个记录上的索引，而不是记录本身。</p><p>如果表没有设置索引，InnoDB 会自动在主键上创建隐藏的聚簇索引，因此Record Locks 依然可以使用。</p><h3 id="gap-locks">6.2 Gap Locks</h3><p>锁开区间。</p><p><strong>锁定索引之间的间隙，但是不包含索引本身。</strong>例如当一个事务执行以下语句，其它事务就不能在t.c 中插入 15。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> c <span class="keyword">BETWEEN</span> <span class="number">10</span> <span class="keyword">and</span> <span class="number">20</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><h3 id="next-key-locks-1">6.3 Next-Key Locks</h3><p><strong>它是 Record Locks 和 Gap Locks的结合，不仅锁定一个记录上的索引，也锁定索引之间的间隙。</strong>它锁定一个前开后闭区间，例如一个索引包含以下值：10,11, 13, and 20，那么就需要锁定以下区间：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="operator">-</span>∞, <span class="number">10</span>]</span><br><span class="line">(<span class="number">10</span>, <span class="number">11</span>]</span><br><span class="line">(<span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line">(<span class="number">13</span>, <span class="number">20</span>]</span><br><span class="line">(<span class="number">20</span>, <span class="operator">+</span>∞)</span><br></pre></td></tr></table></figure><h2 id="关系数据库设计理论">7 关系数据库设计理论</h2><h3 id="函数依赖">7.1 函数依赖</h3><p>对于属性（表列）集合<span class="math inline">\(A = {A_1, A_2, ...A_n}\)</span>。</p><p><strong>函数依赖</strong>：<span class="math inline">\(A \toB\)</span>，A函数决定B，B函数依赖A；</p><p>若如果能找到真子集<span class="math inline">\(A&#39; \subsetneqA\)</span>，且<span class="math inline">\(A&#39; \to B\)</span>，则<spanclass="math inline">\(A \toB\)</span>是<strong>部分函数依赖</strong>，而<spanclass="math inline">\(A&#39; \toB\)</span>是<strong>完全函数依赖</strong>。</p><p><strong>传递函数依赖</strong>：<span class="math inline">\(A \toB\)</span>，<span class="math inline">\(B \to C\)</span>，则<spanclass="math inline">\(A \to C\)</span>是传递函数依赖。</p><p><strong>键码</strong>：能够函数决定<strong>其他所有属性</strong>的<strong>最小属性集</strong>，称为键码。</p><p>比如说：学号<span class="math inline">\(No\)</span>、姓名<spanclass="math inline">\(Name\)</span>、班级<spanclass="math inline">\(Class\)</span>；</p><p><span class="math inline">\(\{No, Name\} \to\{Class\}\)</span>是部分函数依赖，因为存在<spanclass="math inline">\(\{No\} \to\{Class\}\)</span>这样的完全函数依赖。学号<spanclass="math inline">\(\{No\}\)</span>因为能够完全决定剩下的所有属性，所以它就是键码。</p><h3 id="异常">7.2 异常</h3><p>典型异常：</p><ul><li><strong>冗余数据</strong>：如果学生选课表里有姓名，那么学生选多门课，就会把相同的姓名重复存储很多遍。</li><li><strong>修改异常</strong>：如果学生表里有姓名，学生选课表里也有姓名，那么改了学生表的姓名，学生选课表的姓名不会跟着改变，而会相互不一致。</li><li><strong>删除异常</strong>：如果说我把学生信息和学生选课表混在一起存为一个学生信息与选课表，那么，如果把学生的选课都删掉，这个学生的信息也跟着消失了。</li><li><strong>插入异常</strong>：如果说我把学生信息和学生选课表混在一起存为一个学生信息与选课表，那么，如果学生是新生，还没选课，就无法插入（无法只插入学生的个人信息）。</li></ul><h3 id="范式">7.3 范式</h3><h4 id="第一范式1nf">7.3.1 第一范式（1NF）</h4><p><strong>禁止属性分解。</strong></p><p>属性具有<strong>原子性</strong>，是不可分解的最小单元。</p><p>每列的属性<spanclass="math inline">\(A\)</span>必须是不可再分的，不可以再划分子属性<spanclass="math inline">\(A_1, A_2, ...A_n\)</span>，例如：如果出生日期是一个属性，就不可以再划分二级属性为年、月、日三个子属性来存。表列属性不能是层次结构的。</p><p>第一范式是对关系型数据库表的基本要求，满足第一范式，才有个表的样子。</p><h4 id="第二范式2nf">7.3.2 第二范式（2NF）</h4><p><strong>禁止部分依赖。</strong></p><p><strong>2NF在1NF的基础之上，消除了非主属性对于键码的部分函数依赖</strong>。</p><p>也就是说，非主属性必须完全依赖于键码（全部主属性）。</p><p>通俗的说，非主属性部分函数依赖于键码，意味着该非主属性不需要全部主属性就能够决定了，即，部分主属性就足以函数决定该非主属性。这是2NF不允许的。</p><p>例如：学号SID、课程号CID、姓名SName、课名CName、分数Score。</p><ul><li>学号、课程号是两个主属性，它们共同组成键码；</li><li>姓名、课名、分数是非主属性。</li><li>非主属性分数Score：有<span class="math inline">\(\{SID, CID\} \toScore\)</span>，这说明分数Score完全函数依赖于键码，没问题。</li><li>非主属性姓名SName：因为<span class="math inline">\(SID \toSName\)</span>，这意味着非主属性姓名SName部分依赖于键码。不满足2NF。</li><li>非主属性课程名CName：因为<span class="math inline">\(CID \toCName\)</span>，这意味着非主属性课程名CName部分依赖于键码。不满足2NF。</li></ul><p>具体地，非主属性必须完全依赖于键码。</p><h4 id="第三范式3nf">7.3.3 第三范式（3NF）</h4><p><strong>禁止传递依赖。</strong></p><p><strong>3NF在2NF的基础之上，消除非主属性对于键码的传递函数依赖。</strong></p><p>也就是说，非主属性相互之间没有任何依赖关系。</p><p>如果表的所有属性中包含属性<span class="math inline">\(A, B,C\)</span>，存在传递依赖<span class="math inline">\(A \toB\)</span>，<span class="math inline">\(B \toC\)</span>。那么，应该用两张表拆开来，分为表1中只有<spanclass="math inline">\(A \to B\)</span>，表2中记录<spanclass="math inline">\(B \to C\)</span>。</p><p>例如：学号SID、院系号DID、院系名DName。</p><ul><li><span class="math inline">\(SID \to DID\)</span>、<spanclass="math inline">\(DID \to DName\)</span>这就形成了<spanclass="math inline">\(SID \toDName\)</span>的传递函数依赖。不满足3NF。</li><li>应该分开来，分为表1：{学号SID, 院系号DID}和表2：{院系号DID,院系名DName}。</li></ul><h4 id="bcnf">7.3.4 BCNF</h4><p><strong>禁止主属性之间的依赖。</strong></p><p><strong>BCNF在3NF的基础之上，消除主属性对于键码的部分与传递函数依赖。</strong></p><p>键码内的主属性相互没有依赖关系。</p><p>例如：仓库、管理员、货物、数量。</p><ul><li>仓库、管理员和货物是主属性，共同组成键码。</li><li>数量是非主属性。</li><li>但是，键码内部的主属性之间，存在依赖关系，如：由管理员+货物就可以确定仓库。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式笔记</title>
      <link href="/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>设计模式有不少书籍、笔记和文档，抽象的、形式化的逻辑关系就不再赘述。本文主要记录学习过程中的感性理解，记录具象的案例、自己通俗理解的原理和适用情况。</p><span id="more"></span><h1 id="设计模式笔记">设计模式笔记</h1><h2 id="链接">0 链接</h2><blockquote><p><ahref="https://cyc2018.github.io/CS-Notes/#/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%951">CS-Notes设计模式</a></p></blockquote><p>CYC2018的笔记，讲的言简意赅，配合Java代码的示例，可读性好，容易快速看懂，还列举了这些设计模式在JDK中的应用。</p><blockquote><p><ahref="https://design-patterns.readthedocs.io/zh_CN/latest/">图说设计模式</a></p></blockquote><p>图说设计模式文档列举的设计模式少一些，但每个设计模式写的都更为详细，配合UML关系图、时序图、C++代码实例以及优缺点评述，可以更深地理解。</p><blockquote><p><ahref="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式|菜鸟教程</a></p></blockquote><p>菜鸟教程网站的设计模式，配备图示、示例代码，主要是介绍部分对核心思想、优缺点列举的很清晰。</p><h2 id="创建型模式creational-pattern">1 创建型模式（CreationalPattern）</h2><p>顾名思义，创建型模式就是创建实例。</p><h3 id="单例singleton">1.1 单例（Singleton）</h3><p>理解：</p><ul><li>确保<strong>一个类只有一个实例</strong>。</li></ul><p>案例：</p><ul><li>驱动程序提供的服务，如：打印机驱动程序提供的打印服务。</li></ul><p>原理：</p><ul><li>通过类的静态方法和静态变量，调用getSingleton方法时返回唯一的实例（若未初始化，则先初始化创建）。</li></ul><p>适用：</p><ul><li>面向全局提供单例的、不希望重复创建实例的情况。</li></ul><h3 id="简单工厂simple-factory">1.2 简单工厂（Simple Factory）</h3><p>理解：</p><ul><li>一个工厂根据订单要求来实例化相应的产品。</li></ul><p>案例：</p><ul><li>客户给食品工厂下达订单，订单要求饼干，工厂就调用饼干实例化方法生产饼干；订单要求棒冰，工厂就调用棒冰实例化方法生产棒冰。</li></ul><p>原理：</p><ul><li>工厂类的<code>creareProduct</code>方法根据输入的参数，实例化对应的产品作为结果返回。</li><li>用户调用时，调用具体工厂，用抽象产品来接收返回的创建出的产品。</li></ul><p>适用：</p><ul><li>产品类型少，创建对象少。对扩展性要求不高。因为一旦增加产品，就需要修改工厂实现。</li></ul><h3 id="工厂方法factory-method">1.3 工厂方法（Factory Method）</h3><p>理解：</p><ul><li>一个具体工厂生产其对应的具体产品，用户调用哪个具体工厂，就生产其对应的产品。</li><li><strong>一个工厂生产一类产品。</strong></li></ul><p>案例：</p><ul><li>饼干工厂生产饼干，棒冰工厂生产棒冰。客户调用哪个具体工厂，就生产得到哪个具体产品。</li></ul><p>原理：</p><ul><li>具体工厂的<code>createProduct</code>方法生成其对应的具体产品。</li><li>用户调用时，用抽象工厂（基类、接口）来调用具体工厂，用抽象产品（基类、接口）来接收具体产品。</li></ul><p>适用：</p><ul><li>比简单工厂可扩展性更好，客户端中处理的都是抽象工厂、抽象产品，可以轻松扩展新的具体工厂和具体产品。符合开放闭合原则。</li></ul><h3 id="抽象工厂abstract-factory">1.4 抽象工厂（Abstract Factory）</h3><p>理解：</p><ul><li>不同的工厂可以生产同类但不同种的产品。</li><li><strong>一个工厂生产多类产品。</strong></li></ul><p>案例：</p><ul><li>苹果工厂可以生产手机和电脑，小米工厂也可以生产手机和电脑，他们生产的产品属于同类但不同种。客户调用哪个具体工厂，就获取该工厂生产的各类产品。</li></ul><p>原理：</p><ul><li>具体工厂的<code>createProductA</code>生产其对应的A类具体商品，<code>createProductB</code>生产其对应的B类具体商品。</li><li>每类产品用一个抽象产品表示，每个工厂都可以生产若干个抽象产品的具体产品。</li></ul><p>适用：</p><ul><li>相比于工厂模式一个具体工厂生产一类产品，抽象工厂可以适用于更复杂的情况——一个具体工厂可以生产多类产品。</li></ul><h3 id="生成器builder">1.5 生成器（Builder）</h3><p>理解：</p><ul><li>生成器可以接受<strong>持续的增删修改</strong>，最终的结果用来生成一个整体的东西。</li></ul><p>案例：</p><ul><li><code>StringBuilder</code>可以连续接受String的增删，然后生成一个最终的String。</li><li>电商购物车可以接受商品的增删修改，结算的时候再生成一个最终的订单。</li></ul><p>原理：</p><ul><li>生成器内部是一个容器，对容器进行增删修改，最后生成时用容器中的数据来创建一个生成结果。</li></ul><p>适用：</p><ul><li>实例的创建过程比较复杂，不是一下子就能创建的，需要连续增删修改，直到到最终生成的情况。</li></ul><h3 id="原型prototype">1.6 原型（Prototype）</h3><p>理解：</p><ul><li>相当于<strong>克隆</strong>给定原型对象，以一个实例为原型，再克隆一个出来。</li></ul><p>案例：</p><ul><li>我有一份纸质文件作为原型，我用复印机复印了一份出来，即创建了原型的复制。</li></ul><p>原理：</p><ul><li>原型类要提供克隆方法供外部调用。</li></ul><p>适用：</p><ul><li>给定原型，克隆出新对象的情况。</li></ul><h2 id="行为型模式behavioral-pattern">2 行为型模式（BehavioralPattern）</h2><p>行为型模式是对在不同对象之间划分责任和算法的抽象化。就像是划分每个人的工作内容和职责。</p><h3 id="责任链chain-of-responsibility">2.1 责任链（Chain ofResponsibility）</h3><p>理解：</p><ul><li>发送者发出请求，接收方是一个责任链，链上的对象依次收到请求，能处理就处理请求完成任务，不能处理就往后面继续传递，直到最后有接收者处理掉。</li></ul><p>案例：</p><ul><li>用户发来HTTPGET请求，CDN里有缓存就直接响应，没有就发给源站，源站的缓存里有结果就拿来响应，没有就继续查询数据库，数据库有结果就返回，没有就再转交给NotFound的处理机制去处理，完成响应。</li></ul><p>原理：</p><ul><li>把<code>Handler</code>组织成链表的形式，前面的无法处理，就交给后续的处理。</li></ul><h3 id="命令command">2.2 命令（Command）</h3><p>理解：</p><ul><li>把命令（命令对应一系列操作）封装在一个<strong>命令对象</strong>里。</li><li>Client把Command设置到Invoker里用来调用，而Command里负责调用Receiver的方法，即执行命令。</li></ul><p>案例：</p><ul><li>遥控器就是一个Invoker，里面装了很多代表Command的按钮，Client只管操作遥控器上的按钮，按钮所对应的命令程序负责发送信号，遥控目标。</li></ul><p>原理：</p><ul><li>对命令进行封装，将命令执行的流程封装在命令对象中。</li><li>引入抽象命令接口，外部只需要调用命令实例执行命令方法，具体命令才负责具体完成命令所需的具体执行步骤。</li></ul><p>适用：</p><ul><li>Client不直接和Receiver接触。</li><li>Command既然已经封装为实例了，那就可以以实例的形式放到容器里，例如：队列，排队等待执行。</li></ul><h3 id="解释器interpreter">2.3 解释器（Interpreter）</h3><p>理解：</p><ul><li>为语言创建解释器，通常由语言的语法和语法分析来定义。</li></ul><p>案例：</p><ul><li>句法分析，句法解析树。</li></ul><p>原理：</p><ul><li>解析上下文，分解交给下一级，形成句法分析树。</li></ul><p>适用：</p><ul><li>语法、句法等分析。</li></ul><h3 id="迭代器iterator">2.4 迭代器（Iterator）</h3><p>理解：</p><ul><li>顺序访问，迭代容器内的对象。</li></ul><p>案例：</p><ul><li>各类数据结构的迭代器。</li></ul><p>原理：</p><ul><li>迭代器与容器相关联，记录着容器中的迭代位置，提供hasNext()和next()方法来检测后续有没有，以及获取后续元素。</li></ul><p>适用：</p><ul><li>迭代容器。</li></ul><h3 id="中介者mediator">2.5 中介者（Mediator）</h3><p>理解：</p><ul><li>做一件事情需要牵涉到很多对象，找一个<strong>中介</strong>，让中介去和杂七杂八的对象打交道，我只要和中介对接就可以了。</li></ul><p>案例：</p><ul><li>线程池里有很多线程，我不需要去管理每一个具体线程，我只需要把任务交给线程池就行。</li><li>房产中介负责给汇总卖方们的信息，提供给买方一个结论。</li></ul><p>原理：</p><ul><li>中介需要调用各方面的对象（同事），完成复杂的沟通和控制，完成调用者的目标。</li></ul><p>适用：</p><ul><li>调用方从与各种对象的复杂控制关系中脱离出来，交给中介去处理。</li></ul><h3 id="备忘录memento">2.6 备忘录（Memento）</h3><p>理解：</p><ul><li>把对象的内部状态<strong>记录</strong>下来，必要的适合可以<strong>恢复</strong>到当时的状态。</li></ul><p>案例：</p><ul><li>序列化，如：把一个字典序列化为JSON格式的文本，必要的适合可以从JSON来恢复出字典。</li></ul><p>原理：</p><ul><li>对象要实现<code>createMemento</code>方法（backup）来输出内部状态，实现<code>setMemento</code>方法（recover）来根据记录内部状态的备忘录恢复内部状态。</li></ul><p>适用：</p><ul><li>个人理解就是实现备份和恢复的功能。</li></ul><h3 id="观察者observer">2.7 观察者（Observer）</h3><p>理解：</p><ul><li>观察者可以<strong>注册</strong>到被观察对象上，被观察对象状态变化的时候，要<strong>通知</strong>观察者。</li></ul><p>案例：</p><ul><li>烟雾报警器状态变化的时候，要发送信息、信号来通知房屋管理方，手机APP。</li><li>服务器管理平台发现服务器温度过热了，服务器管理平台通过邮件、消息推送告警信息给管理员。</li></ul><p>原理：</p><ul><li>被观察对象里能够添加、关联观察者，被观察对象的update方法除了修改内部状态，也要执行观察者的notify方法。</li></ul><h3 id="状态state">2.8 状态（State）</h3><p>理解：</p><ul><li>主体的状态会<strong>自动</strong>变化，根据主体的状态，做相应的操作。</li></ul><p>案例：</p><ul><li>在自动贩卖机有货的时候按购买按钮执行的是支付-出货操作，在没货的时候按购买按钮，执行的是缺货提醒操作。按下同一个按钮，在状态不同的时候执行的操作就不同了。</li></ul><p>原理：</p><ul><li>调用的是状态实例的方法，这样状态改变了，调用的方法自然就改变了。</li><li>状态的方法要检测上下文，及时修改主体的状态。主体关联状态，每一个状态实例也关联主体。</li><li>售卖机有货的时候，购买时，调用售卖机的<code>HasProductState.sell()</code>方法，该方法如果发现卖完就售空了，要把售卖机的状态修改为<code>NoProductState</code>缺货状态，下次再购买时，调用的就是<code>NoProductState.sell()</code>了。</li></ul><h3 id="策略strategy">2.9 策略（Strategy）</h3><p>理解：</p><ul><li>把算法实例化为策略对象，我给主体<strong>手动</strong>设置哪个策略，主体就执行哪个策略。</li></ul><p>案例：</p><ul><li>创建一个Robot，他调用自己的<code>hello()</code>方法来打招呼，该<code>hello</code>方法调用<code>strategy.hello()</code>，我把他的策略设置为<code>EnglishStrategy</code>，他就调用<code>EnglishStrategy.hello()</code>输出<code>Hello</code>，我把他的策略设置为<code>ChineseStrategy</code>，他就调用<code>ChineseStrategy.hello()</code>输出<code>你好</code>。</li></ul><p>原理：</p><ul><li>算法由策略对象实现，主体调用自己的策略对象实现的算法。</li></ul><h3 id="模板方法template-method">2.10 模板方法（Template Method）</h3><p>理解：</p><ul><li>抽象类定义的功能方法是一个<strong>调用模板</strong>，模板里具体被调的函数有的实现了，有的是抽象方法，还没实现，需要子类实现。</li></ul><p>案例：</p><ul><li>冲剂饮料作为抽象类，冲泡饮料包含：倒水、加冲剂、搅拌三步。倒水和搅拌没区别，加冲剂则为抽象方法。咖啡作为子类，实现的加冲剂方法就是加咖啡粉。橙汁作为子类，实现的加冲剂方法就是加橙汁粉。基类定义的模板由子类来实现。</li></ul><p>原理：</p><ul><li>抽象类可以定义具体方法和抽象方法，组合起来可以形成一个模板方法。模板方法中用到的抽象方法交给子类去实现。外部调用抽象类的模板方法就可以了。</li></ul><h3 id="访问者visitor">2.11 访问者（Visitor）</h3><p>理解：</p><ul><li>访问者访问对象结构（包含一些对象），对象结构要接待访问者，要安排对象结构中的每个对象<strong>接待</strong>访问者，让访问者<strong>访问</strong>这些对象。访问者访问完对象结构中的各个对象，就可以根据访问过程中记录的信息，汇总出结果。</li></ul><p>案例：</p><ul><li>访问者遍历一批客户对象，在访问的过程中汇总这些客户的订单数据（数量、金额）。</li><li>审计员访问（visit）工厂，工厂总经理负责接待（accept），要安排每一个办公室、车间、仓库的负责人接待（accept）审计员，让审计员访问（visit），审计员完成访问后，就可以得出审计结果，完成审计报告。</li></ul><p>原理：</p><ul><li>访问者实现访问方法<code>visit(element)</code>；</li><li>被访问的对象结构和对象实现接待方法<code>accept(visitor)</code>，接待方法中负责调用访问者的访问方法<code>visitor.visit(myself)</code>让访问者能访问自己；</li></ul><p>适用：</p><ul><li>数据结构预留面向访问者的接待方法，可以让外部动态地实现访问方法，增加对数据结构的遍历操作功能。</li></ul><h3 id="空对象null">2.12 空对象（Null）</h3><p>理解：</p><ul><li>空对象什么也不做，只是用来代替<code>Null</code>。</li><li>这样一来，调用方就不用检查结果是否为null了，只管调用空对象的对应方法，反正什么也不会做就结束了。</li></ul><p>案例：</p><ul><li>JDK中的<code>Collections.emptySet()</code>、<code>Collections.emptyMap()</code>、<code>Collections.emptyList()</code>都是返回可读但不可写的空对象。</li></ul><p>原理：</p><ul><li>实对象实现有功能的<code>handle()</code>方法，空对象实现没功能的<code>handle()</code>方法。调用实对象时执行功能操作，调用空对象时执行空白的、没有操作的方法。</li></ul><p>适用：</p><ul><li>检查判断Null代价高时，可以用空对象。</li></ul><h2 id="结构型模式structural-pattern">3 结构型模式（StructuralPattern）</h2><p>结构型模式的作用在于，把类或对象以某种结构模式来组合起来，形成一个更大的结构，就像搭积木。</p><h3 id="适配器adapter">3.1 适配器（Adapter）</h3><p>理解：</p><ul><li>适配器把具体的特殊调用<strong>转换</strong>为统一的调用方法，让用户可以通过适配器的一个方法，调用各种特殊的具体方法。</li></ul><p>案例：</p><ul><li>三脚插座只能用三脚插头，但是通过两脚转三脚适配器，就可以用两脚插头。</li></ul><p>原理：</p><ul><li><p>用户只需要调用适配器提供的统一的方法，适配器方法的实现则需要去调用具体各种的特殊方法。</p></li><li><p>Client只调用一个标准方法（如：<code>add()</code>方法），但被调用的数据结构各有各的特殊方法，有的数据结构是<code>append()</code>方法，有的是<code>push()</code>方法。通过定义适配器，Client统一都调用适配器<code>adapter.add()</code>即可，而适配器在<code>adapter.add()</code>中调用<code>data.push()</code>或<code>data.append()</code>这些特殊的add方法。</p></li></ul><h3 id="桥接bridge">3.2 桥接（Bridge）</h3><p>理解：</p><ul><li>将抽象与实现分离开来，使它们可以独立变化。</li><li>外部使用抽象接口，内部实现抽象接口。<strong>抽象接口</strong>就是桥接的桥梁。</li><li>顶层应用只关心抽象的接口功能，至于每个具体类与对象是怎么实现这些接口功能，是底层实现的关心的事情。顶层变动了底层不需要跟着改，底层变动了顶层也依旧可以工作，只要接口不改就行。</li></ul><p>案例：</p><ul><li>定义图形接口<code>Drawing</code>，配有绘制函数<code>draw()</code>；圆形<code>Circle</code>、方形<code>Square</code>都扩展了该接口，分别完成了<code>draw</code>绘制函数的具体实现。外部只需要通过调用<code>Drawing</code>接口引用图形实例，调用接口的<code>draw</code>函数实现实例的绘制，至于每个图形具体是如何实现绘制功能的，外部不需要关心。这种通过接口来引用实例、调用方法的做法就是桥接模式。</li></ul><p>原理：</p><ul><li>通过定义接口、抽象类来规定桥接的”桥“；具体类要负责扩展接口、实现抽象类，外部不关心其具体实现；外部通过接口、抽象类引用具体实例，调用接口、抽象类所定义的方法来调用具体实例的功能。</li></ul><h3 id="组合composite">3.3 组合（Composite）</h3><p>理解：</p><ul><li>把对象组合成树形结构。</li></ul><p>案例：</p><ul><li>二叉树，节点实例又包含了对左子树和右子树的引用。</li></ul><p>原理：</p><ul><li>组件（Component）类是组合类（Composite）和叶子类（Leaf）的父类，可以把组合类看成是树的中间节点。</li><li>组合对象拥有一个或者多个组件对象，因此组合对象的操作可以委托给组件对象去处理，而组件对象可以是另一个组合对象或者叶子对象。</li></ul><h3 id="装饰decorator">3.4 装饰（Decorator）</h3><p>理解：</p><ul><li>为对象<strong>添加功能</strong>；</li><li>装饰模式把原来的对象又包了一层（装饰了一层），装饰对象里包含了被装饰对象，不再直接调用原始的被装饰对象。这样一来，调用装饰对象的方法时候，就可以在调用被装饰对象方法的基础之上，再额外执行装饰对象增添的功能。</li></ul><p>案例：</p><ul><li>Java中的StreamI/O，通过<code>BufferedInputStream</code>、<code>BufferedOutputStream</code>、<code>ZipOutputStream</code>等装饰类，在调用<code>InputStream</code>和<code>OutputStream</code>的基础之上，额外实现了缓存、压缩等功能。</li></ul><p>原理：</p><ul><li>装饰类里把被装饰类实例作为成员，外部调用装饰类实现的方法，装饰类再调用被装饰类的方法，并实现一些其他的功能。</li></ul><h3 id="外观facade">3.5 外观（Facade）</h3><p>理解：</p><ul><li>系统内部太复杂了，外部难以访问操作，那就对外提供一批<strong>统一的简易接口</strong>，让外部更容易使用系统的功能。</li></ul><p>案例：</p><ul><li>手机、电脑的有各种一键模式：飞行模式可以一键关闭所有的无线电通信功能，不需要再一个个单独关闭WiFi、蓝牙、移动网络等等；勿扰模式可以一键关闭震动、铃声、消息弹窗等功能，不需要单独屏蔽；</li><li>一些”安全“软件的一键体检、一键优化也是对外提供的统一接口，一键实现了很多文件扫描、设置修改功能。</li></ul><p>原理：</p><ul><li>定义一个外观类，实现对外提供的方法，例如：一键优化、勿扰模式、飞行模式等方法，这些方法完成具体的操作。</li></ul><p>适用：</p><ul><li>通过外观（Facade）模式，为复杂子系统提供简单接口。</li></ul><h3 id="享元flyweight">3.6 享元（Flyweight）</h3><p>理解：</p><ul><li>Flyweight在英语里的意思是”小东西，无足轻重的东西“；</li><li>享元模式就是通过<strong>共享</strong>的形式来复用大量<strong>内部状态相同的小东西</strong>（细粒度对象），相同内容的小对象，没必要重复创建，共享同一个就可以了。</li></ul><p>案例：</p><ul><li>Java中的字符串常量池（StringPool），创建字符串对象时，如果字符串常量池中已经有相同内容的字符串常量了，那就不再实例化新对象了，直接共享已有的。</li><li>Java中，包装类<code>Integer</code>、<code>Long</code>、<code>Double</code>等的<code>valueOf()</code>函数也是共享相同的常量对象，已有的就不再新建，共享已有常量即可。</li><li>操作系统中，文件复制的Copy-on-Write(CoW)机制，也是共享（不过可能未必算小对象）。</li></ul><p>原理：</p><ul><li>享元对象包含内部状态（Intrinsic state）和外部状态（Extrinsicstate）。内部状态存储在享元内部，不因环境改变；外部状态由Client另外保存，调用的时候再传入享元。享元对象之间，内部状态相同，即可共享；外部状态则可以互相不同。</li><li>建立一个对象池（享元池，FlyweightPool），如果缓存池里有相同内部状态的享元对象，就无需实例化新对象，直接共享已有的。</li></ul><h3 id="代理proxy">3.7 代理（Proxy）</h3><p>理解：</p><ul><li>代理模式<strong>控制</strong>对原始对象的访问。</li><li>在用户和目标对象之间，加一层代理。让用户不直接接触目标对象，所需操作要经由代理来<strong>代办</strong>。</li></ul><p>案例：</p><ul><li>现实生活中，律师就是一种代理，将当事人与其他的相关方隔开，所有的对当事人的询问、诉求、谴责都经由律师处理，由律师来把关，判断合不合适，保护当事人利益。秘书、管家都由代理的功能，访客不直接见主人，需要先请求秘书、管家进行安排，秘书、管家作为中间的代理，负责把关、甄别，再转交给主人处理。</li><li>软件开发中，代理有以下四类：<ul><li>远程代理（RemoteProxy）：控制对远程对象（不同地址空间）的访问，它负责将请求及其参数进行编码，并向不同地址空间中的对象发送已经编码的请求。</li><li>虚拟代理（VirtualProxy）：根据需要创建开销很大的对象，它可以缓存实体的附加信息，以便延迟对它的访问，例如：在网站加载一个很大图片时，不能马上完成，可以用虚拟代理缓存图片的大小信息，然后生成一张临时图片代替原始图片。</li><li>保护代理（ProtectionProxy）：按权限控制对象的访问，它负责检查调用者是否具有实现一个请求所必须的访问权限。</li><li>智能代理（SmartReference）：取代了简单的指针，它在访问对象时执行一些附加操作：记录对象的引用次数；当第一次引用一个对象时，将它装入内存；在访问一个实际对象前，检查是否已经锁定了它，以确保其它对象不能改变它。</li></ul></li></ul><p>原理：</p><ul><li>代理实现和原始对象相同的接口，代理实例中关联了原始对象。使用时访问代理实例，调用代理实例实现的接口方法。代理实例实现的接口方法可以包含：编解码、权限检查、临时缓存、操作记录等功能。</li></ul><p>适用：</p><ul><li>个人感觉代理模式和装饰模式挺像的，都是把原始对象作为代理类型实例、装饰类型实例的成员，让外部不要直接调用原始对象，而是由代理实例、装饰实例去代办，往往用来增加额外功能。我感觉区别可能主要在于，代理模式侧重于控制访问权限（偏安全管控），装饰模式侧重于增加额外操作以改进功能（把粗糙的装饰得更完善）。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML笔记</title>
      <link href="/posts/UML%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/UML%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>准确理解设计模式首先要理解UML图，学习<ahref="https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html">看懂UML类图和时序图</a>，理解并记下笔记。</p><span id="more"></span><h1 id="uml笔记">UML笔记</h1><h2 id="链接">0 链接</h2><blockquote><p><ahref="https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html">看懂UML类图和时序图</a></p><p>本文主要参考该文档，是对该文档的学习、理解笔记。</p></blockquote><h2 id="uml笔记-1">1 UML笔记</h2><figure><imgsrc="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_class_struct.jpg"alt="_images/uml_class_struct.jpg" /><figcaption aria-hidden="true">_images/uml_class_struct.jpg</figcaption></figure><blockquote><ul><li>车的类图结构为&lt;<abstract>&gt;，表示车是一个抽象类；</li><li>它有两个继承类：小汽车和自行车；它们之间的关系为<strong>实现</strong>关系，使用带空心箭头的虚线表示；</li><li>小汽车为与SUV之间也是继承关系，它们之间的关系为<strong>泛化</strong>关系，使用带空心箭头的实线表示；</li><li>小汽车与发动机之间是<strong>组合</strong>关系，使用带实心箭头的实线表示；</li><li>学生与班级之间是<strong>聚合</strong>关系，使用带空心箭头的实线表示；</li><li>学生与身份证之间为<strong>关联</strong>关系，使用一根实线表示；</li><li>学生上学需要用到自行车，与自行车是一种<strong>依赖</strong>关系，使用带箭头的虚线表示；</li></ul></blockquote><h3 id="泛化与实现">1.1 泛化与实现</h3><h4 id="泛化关系generalization">1.1.1 泛化关系（Generalization）</h4><p>泛化关系是进一步的一般化、具体化。泛化关系是一种is-a的关系。</p><figure><imgsrc="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_generalization.jpg"alt="_images/uml_generalization.jpg" /><figcaptionaria-hidden="true">_images/uml_generalization.jpg</figcaption></figure><p>A generalizes B.</p><p>A泛化了B。</p><p>A is a B.</p><p>例如：</p><ul><li>“SUV”泛化了“小型车”；</li><li>“山地自行车”泛化了“山地车”；</li><li>“金丝猴”泛化了“猴子”；</li><li>“别墅”泛化了“住宅”；</li><li>“高级工程师”泛化了“工程师”。</li></ul><p>编程实现中，泛化关系表现为子类<strong>继承</strong>父类（子类泛化了父类）。</p><p>泛化关系中，泛化的对象本身就是一个实体，所以指向“实体”的线条用<strong>实线</strong>。</p><h4 id="实现关系realization">1.1.2 实现关系（Realization）</h4><p>实现关系是把虚的（abstract）实现为实的（concrete）。</p><figure><imgsrc="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_realize.jpg"alt="_images/uml_realize.jpg" /><figcaption aria-hidden="true">_images/uml_realize.jpg</figcaption></figure><p>A realizes B.</p><p>A实现了B。</p><p>例如：</p><ul><li>“小汽车”实现了“车”；</li><li>“自行车”实现了“车”；</li><li>“猴子”实现了“动物”；</li><li>“住宅”实现了“建筑”；</li><li>“工程师”实现了“职务”。</li></ul><p>编程实现中，泛化关系表现为<strong>实现抽象类或实现接口</strong>（子类实现了抽象类、接口）。</p><p>实现关系中，实现对象为抽象的类或接口，所以指向“虚体”的线条用<strong>虚线</strong>。</p><h4 id="辨析">1.1.3 辨析</h4><p>个人理解：泛化是一个具体类对另一个具体类型的泛化，而实现是对一个还不够具体的抽象类型的实现。具体的类本身就可以是一个完整的类型，抽象类型往往是一类事物的顶层抽象类。</p><h3 id="聚合与组合">1.2 聚合与组合</h3><h4 id="聚合关系aggregation">1.2.1 聚合关系（Aggregation）</h4><p>聚合关系指的是A聚合形成了B。</p><figure><imgsrc="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_aggregation.jpg"alt="_images/uml_aggregation.jpg" /><figcaption aria-hidden="true">_images/uml_aggregation.jpg</figcaption></figure><p>B aggregates A.</p><p>B聚合了若干A。</p><p>或者说，若干A聚合形成了B。</p><p>例如：</p><ul><li>“学生”聚合形成了“班级”；</li><li>“人”聚合形成了“部门”；</li><li>“服务器”聚合形成了“集群”。</li></ul><p>相较于组合关系，聚合关系是一种<strong>弱依赖</strong>关系，A聚合形成B，但B消失了，A仍然存在。（部门消失了，但人不会消失，仍然存在）</p><p>因为是一种“弱依赖”关系，所以用的菱形是<strong>空心</strong>的。</p><h4 id="组合关系composition">1.2.2 组合关系（Composition）</h4><p>组合关系指的是若干A组合形成了B，或者说，B组合了若干A而成。</p><figure><imgsrc="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_composition.jpg"alt="_images/uml_composition.jpg" /><figcaption aria-hidden="true">_images/uml_composition.jpg</figcaption></figure><p>A composes B.</p><p>A组合形成了B。</p><p>例如：</p><ul><li>“部门”组成了“公司”；</li></ul><p>相较于聚合关系，组合关系是一种<strong>强依赖</strong>关系，A组合形成了B，且B消失了，A也就消失了。（公司消失了，部门也就没了）</p><p>因为是一种“强依赖”关系，所以用的菱形是<strong>实心</strong>的。</p><h4 id="辨析-1">1.2.3 辨析</h4><p>个人理解：聚合一般是具体的实体聚合形成抽象的概念，组合关系则是抽象的观念符号组合成了一个更高一级的抽象的观念符号。</p><h3 id="关联与依赖">1.3 关联与依赖</h3><h4 id="关联关系association">1.3.1 关联关系（Association）</h4><p>关联关系指的是A与B具有<strong>固有的、结构性的</strong>关联关系，而非动态变化的。</p><figure><imgsrc="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_association.jpg"alt="_images/uml_association.jpg" /><figcaption aria-hidden="true">_images/uml_association.jpg</figcaption></figure><p>A associates B.</p><p>A关联B。</p><p>例如：</p><ul><li>“公民”和“身份证”是一种关联关系；（“公民”一定有“身份证”，身份证号是公民的一个固有属性）</li><li>“汽车”和“型号”是一种关联关系；</li></ul><p><em>关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如图，表示A知道B，但B不知道A。</em></p><p>关联关系是固有的、结构性的，不会动态变化，所以关联关系用<strong>实线</strong>表示。</p><p>在编程实现中，关联对象通常是以成员变量的形式实现的。</p><h4 id="依赖关系dependency">1.3.2 依赖关系（Dependency）</h4><p>依赖关系表示A需要用到B，是一种<strong>动态的、运行时的</strong>依赖关系，不是固有不变的结构性关系。</p><figure><imgsrc="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_dependency.jpg"alt="_images/uml_dependency.jpg" /><figcaption aria-hidden="true">_images/uml_dependency.jpg</figcaption></figure><p>A depends on B.</p><p>A依赖于B。</p><p>例如：</p><ul><li>“学生”依赖“笔”；（但“笔”并不是“学生”的一个固有属性，只是需要的时候会用到）</li></ul><p><em>依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生。</em></p><p>依赖关系是动态的、运行时的，在需要的时候才依赖的，不是固有的联系，所以依赖关系用<strong>虚线</strong>表示。</p><p>在编程实现中，依赖关系体现为类构造方法及类方法的<strong>传入参数</strong>，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；</p><h4 id="辨析-2">1.3.3 辨析</h4><p>个人理解：关联关系是固有属性，依赖关系是有时会需要的东西，例如：某个方法的传入参数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Java中执行Python等本地程序（命令）</title>
      <link href="/posts/%E5%9C%A8Java%E4%B8%AD%E6%89%A7%E8%A1%8CPython%E7%AD%89%E6%9C%AC%E5%9C%B0%E7%A8%8B%E5%BA%8F%EF%BC%88%E5%91%BD%E4%BB%A4%EF%BC%89/"/>
      <url>/posts/%E5%9C%A8Java%E4%B8%AD%E6%89%A7%E8%A1%8CPython%E7%AD%89%E6%9C%AC%E5%9C%B0%E7%A8%8B%E5%BA%8F%EF%BC%88%E5%91%BD%E4%BB%A4%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>在<ahref="https://github.com/HearyShen/HearyHTTPd">HearyHTTPd</a>的开发过程中，我想要调用本地CGI，因此就需要在Java中调用本地的其他程序，或者说：执行本地的命令。本文以Java中调用Python脚本作为CGI程序为例，记录Java调用本地程序、执行本地命令的方法。</p><span id="more"></span><h1id="在java中执行python等本地程序命令">在Java中执行Python等本地程序（命令）</h1><h2 id="概述">1 概述</h2><p>在<ahref="https://github.com/HearyShen/HearyHTTPd">HearyHTTPd</a>的开发过程中，我想要调用本地CGI，因此就需要在Java中调用本地的其他程序，或者说：执行本地的命令。</p><p>我查了查发现Java中可以很简便地以执行命令的形式执行本地程序。</p><p>主要的执行代码在于调用Runtime，执行本地命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(command, envs, file);</span><br></pre></td></tr></table></figure><p>查阅<code>java.lang.Runtime</code>，核心方法<code>exec</code>原型为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Process <span class="title function_">exec</span><span class="params">(String[] cmdarray, String[] envp, File dir)</span> <span class="keyword">throws</span> IOException</span><br></pre></td></tr></table></figure><ul><li><strong>getRuntime</strong>: Returns the runtime object associatedwith the current Java application.</li><li><strong>exec</strong>: Executes the specified command and argumentsin a separate process with the specified environment and workingdirectory.</li></ul><p><strong>实际上，这个函数额可以以执行命令的形式调用、执行任何本地程序，并通过标准输入、标准输出来传递数据。</strong></p><h2 id="代码">2 代码</h2><h3 id="java实现">2.1 Java实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> temp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JCallPy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        String[] command = &#123;</span><br><span class="line">                <span class="string">&quot;C:\\Users\\heary\\miniconda3\\envs\\python3\\python.exe&quot;</span>,</span><br><span class="line">                <span class="string">&quot;called.py&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        String[] envs = &#123;</span><br><span class="line">                <span class="string">&quot;QUERY_STRING=name=tom&amp;age=18&quot;</span>,</span><br><span class="line">                <span class="string">&quot;REQUEST_METHOD=POST&quot;</span>,</span><br><span class="line">                <span class="string">&quot;REMOTE_ADDR=127.0.0.1&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./src/temp&quot;</span>);</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(command, envs, file);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inputStream));</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> bufferedReader.readLine();</span><br><span class="line">        <span class="keyword">while</span> (line != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">            line = bufferedReader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">        process.waitFor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>此处只演示了执行本地Python脚本，通过环境变量传入CGI协议的参数，获取Python脚本运行过程中标准输出的内容，并显示出来。如果将输出结果进行处理，传输socket输出流或输出通道，就可以实现CGI的功能。</li></ul><h3 id="python实现">2.2 Python实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;HTTP/1.0 200 OK&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Content-type: text/html&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&lt;b&gt;Environment Variables&lt;/b&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&lt;ul&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> os.environ.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;&lt;li&gt;<span class="subst">&#123;key&#125;</span> = <span class="subst">&#123;value&#125;</span>&lt;/li&gt;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&lt;/ul&gt;&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="运行结果">2.3 运行结果</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.0 200 OK</span><br><span class="line">Content-type: text/html</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>Environment Variables<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>QUERY_STRING = name=tom&amp;age=18<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>REMOTE_ADDR = 127.0.0.1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>REQUEST_METHOD = POST<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>SYSTEMROOT = C:\Windows<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考资料">3 参考资料</h2><p><ahref="https://blog.csdn.net/leviopku/article/details/90207440">JAVA调用Python代码</a></p><p><a href="https://www.runoob.com/python/python-cgi.html">PythonCGI编程</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Java </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chromium内核浏览器访问localhost时的初始连接（initial connection）高延迟问题</title>
      <link href="/posts/Chromium%E5%86%85%E6%A0%B8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AElocalhost%E6%97%B6%E7%9A%84%E5%88%9D%E5%A7%8B%E8%BF%9E%E6%8E%A5%EF%BC%88initial-connection%EF%BC%89%E9%AB%98%E5%BB%B6%E8%BF%9F%E9%97%AE%E9%A2%98/"/>
      <url>/posts/Chromium%E5%86%85%E6%A0%B8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AElocalhost%E6%97%B6%E7%9A%84%E5%88%9D%E5%A7%8B%E8%BF%9E%E6%8E%A5%EF%BC%88initial-connection%EF%BC%89%E9%AB%98%E5%BB%B6%E8%BF%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>当<ahref="https://github.com/HearyShen/HearyHTTPd">HearyHTTPd</a>代码里设置为监听的host为<code>127.0.0.1</code>时，在Chrome中用http://localhost:8080 会有较大initial connectionlantency从而变得较慢，而用 http://127.0.0.1:8080 访问则很快。</p><span id="more"></span><h1id="chromium内核浏览器访问localhost时的初始连接initial-connection高延迟问题">Chromium内核浏览器访问localhost时的初始连接（initialconnection）高延迟问题</h1><h2 id="问题描述">1 问题描述</h2><p>在开发基于NIO的<ahref="https://github.com/HearyShen/HearyHTTPd">HearyHTTPd</a>服务器的时候，发现使用http://localhost:8080 访问时，存在高初始连接（initialconnection）延迟的问题，影响达数百毫秒。</p><p>经过对比和排查，发现问题仅限于基于Chromium内核的浏览器，而Firefox浏览器表现出了稳定且高速的性能。</p><h2 id="实验结果">2 实验结果</h2><p>通过<code>netstat -an</code>发现，不论输入的监听host为<code>localhost</code>，还是<code>127.0.0.1</code>，在计算机上监听的都是<code>127.0.0.1:8080</code>，没有监听IPv6的<code>[::1]:8080</code>。</p><h3 id="chromium内核浏览器">2.1 Chromium内核浏览器</h3><p>测试的Chromium内核浏览器：</p><ul><li>Google Chrome 83.0.4103.106（正式版本） （64 位）</li><li>Microsoft Edge 83.0.478.54 (官方内部版本) (64 位)</li></ul><p>两款浏览器差异不大，数值范围几乎一致。</p><p>测试结果：</p><table><colgroup><col style="width: 11%" /><col style="width: 27%" /><col style="width: 16%" /><col style="width: 22%" /><col style="width: 22%" /></colgroup><thead><tr class="header"><th>hhttpd host</th><th>request</th><th><code>localhost:8080</code></th><th><code>127.0.0.1:8080</code></th><th><code>[::1]:8080</code></th></tr></thead><tbody><tr class="odd"><td>localhost</td><td>首个文件（index.html）</td><td>3~10 ms</td><td><strong>3~10 ms</strong></td><td>ERR_CONNECTION_REFUSED</td></tr><tr class="even"><td></td><td>后续资源（js/css/fonts...）</td><td>250~700 ms</td><td><strong>3~20 ms</strong></td><td>ERR_CONNECTION_REFUSED</td></tr><tr class="odd"><td>127.0.0.1</td><td>首个文件（index.html）</td><td>3~10 ms</td><td><strong>3~10 ms</strong></td><td>ERR_CONNECTION_REFUSED</td></tr><tr class="even"><td></td><td>后续资源（js/css/fonts...）</td><td>250~700 ms</td><td><strong>3~20 ms</strong></td><td>ERR_CONNECTION_REFUSED</td></tr><tr class="odd"><td>[::1]</td><td>首个文件（index.html）</td><td>3~10 ms</td><td>ERR_CONNECTION_REFUSED</td><td><strong>3~10 ms</strong></td></tr><tr class="even"><td></td><td>后续资源（js/css/fonts...）</td><td>3~20 ms</td><td>ERR_CONNECTION_REFUSED</td><td><strong>3~20 ms</strong></td></tr></tbody></table><h3 id="firefox浏览器">2.2 Firefox浏览器</h3><p>测试的Firefox浏览器：</p><ul><li>Firefox 77.0.1 (64 位)</li></ul><p>测试结果：</p><table><colgroup><col style="width: 11%" /><col style="width: 27%" /><col style="width: 16%" /><col style="width: 22%" /><col style="width: 22%" /></colgroup><thead><tr class="header"><th>hhttpd host</th><th>request</th><th><code>localhost:8080</code></th><th><code>127.0.0.1:8080</code></th><th><code>[::1]:8080</code></th></tr></thead><tbody><tr class="odd"><td>localhost</td><td>首个文件（index.html）</td><td>2~4 ms</td><td><strong>1~2 ms</strong></td><td>ERR_CONNECTION_REFUSED</td></tr><tr class="even"><td></td><td>后续资源（js/css/fonts...）</td><td>2~15 ms</td><td><strong>2~10 ms</strong></td><td>ERR_CONNECTION_REFUSED</td></tr><tr class="odd"><td>127.0.0.1</td><td>首个文件（index.html）</td><td>2~4 ms</td><td><strong>1~2 ms</strong></td><td>ERR_CONNECTION_REFUSED</td></tr><tr class="even"><td></td><td>后续资源（js/css/fonts...）</td><td>2~15 ms</td><td><strong>2~10 ms</strong></td><td>ERR_CONNECTION_REFUSED</td></tr><tr class="odd"><td>[::1]</td><td>首个文件（index.html）</td><td>2~4 ms</td><td>ERR_CONNECTION_REFUSED</td><td><strong>1~2 ms</strong></td></tr><tr class="even"><td></td><td>后续资源（js/css/fonts...）</td><td>2~15 ms</td><td>ERR_CONNECTION_REFUSED</td><td><strong>2~10</strong> ms</td></tr></tbody></table><h3 id="实验总结">2.3 实验总结</h3><p>从结果上来看，通过localhost访问hhttpd的高初始连接（initialconnection）延迟问题仅出现在基于Chromium内核的浏览器上。</p><p>从分布来看，直接使用IP地址访问监听的IP地址（不论IPv4还是IPv6）都是最快的。</p><p>总体而言，Firefox表现出的性能最好。</p><h2 id="原因分析">3 原因分析</h2><p>暂时还没有找出造成该问题的准确原因。</p><p>推测可能与Chromium遇到localhost时，优先访问IPV6的本地环回地址<code>[::1]</code>有关。</p><h2 id="解决方案">4 解决方案</h2><p>推荐直接使用IP地址访问监听的IP地址（不论IPv4还是IPv6）。</p><h2 id="参考资料">5 参考资料</h2><p><ahref="https://blog.csdn.net/zeroJustGG/article/details/90639844">stalled和Initialconnection偶尔请求时间长</a></p><p><ahref="https://stackoverflow.com/questions/37919706/why-is-the-initial-connection-time-for-a-http-request-so-long">Whyis the initial connection time for a HTTP request so long?</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> HTTP </tag>
            
            <tag> Socket </tag>
            
            <tag> Broswer </tag>
            
            <tag> Web </tag>
            
            <tag> Chromium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于NIO的请求-响应双向Socket通信网络编程</title>
      <link href="/posts/%E5%9F%BA%E4%BA%8ENIO%E7%9A%84%E8%AF%B7%E6%B1%82-%E5%93%8D%E5%BA%94%E5%8F%8C%E5%90%91Socket%E9%80%9A%E4%BF%A1%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/posts/%E5%9F%BA%E4%BA%8ENIO%E7%9A%84%E8%AF%B7%E6%B1%82-%E5%93%8D%E5%BA%94%E5%8F%8C%E5%90%91Socket%E9%80%9A%E4%BF%A1%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>将<ahref="https://cyc2018.github.io/CS-Notes/#/notes/Java%20IO?id=%e5%a5%97%e6%8e%a5%e5%ad%97-nio-%e5%ae%9e%e4%be%8b">CyC2018的NIOSocket单向通信样例</a>改写为双向通信，记录下其中的机制、易出问题的要点。</p><span id="more"></span><h1id="基于nio的请求-响应双向socket通信网络编程">基于NIO的请求-响应双向Socket通信网络编程</h1><h2 id="概述">1 概述</h2><p>NIO是Java的New IO的缩写，基于块来提高读写数据的性能，而非基于流。</p><p>通过Selector对SocketChannel进行非阻塞式处理，可以提高线程效率。</p><p>因为本来Server端线程acceptClient端发来的Socket连接之后，需要阻塞线程，等待数据发过来变为可读后才能继续处理，而有了select机制后，就不需要阻塞线程了，线程可以去看看别的IO情况如何，无需阻塞线程进行等待。</p><h2 id="代码">2 代码</h2><h3 id="服务器端">2.1 服务器端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[Server] started listening</span></span><br><span class="line"><span class="comment">[Server] selected acceptable socket</span></span><br><span class="line"><span class="comment">[Server] selected readable socket</span></span><br><span class="line"><span class="comment">[Server] starts reading</span></span><br><span class="line"><span class="comment">Client: &#x27;Hello!&#x27;</span></span><br><span class="line"><span class="comment">[Server] finished reading</span></span><br><span class="line"><span class="comment">[Server] selected writable socket</span></span><br><span class="line"><span class="comment">[Server] starts writing</span></span><br><span class="line"><span class="comment">[Server] finished writing</span></span><br><span class="line"><span class="comment">[Server] closed writable socket</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NIOServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="type">ServerSocketChannel</span> <span class="variable">ssChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">        ssChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        ssChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> ssChannel.socket();</span><br><span class="line">        <span class="type">InetSocketAddress</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">        serverSocket.bind(address);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[Server] started listening&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// selector blocks until at least one channel is selected</span></span><br><span class="line">            selector.select();</span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; keyIterator = selectionKeys.iterator();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (keyIterator.hasNext()) &#123;</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">selectionKey</span> <span class="operator">=</span> keyIterator.next();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (selectionKey.isAcceptable()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[Server] selected acceptable socket&quot;</span>);</span><br><span class="line">                    <span class="type">ServerSocketChannel</span> <span class="variable">serverSocketChannel</span> <span class="operator">=</span> (ServerSocketChannel) selectionKey.channel();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// create a SocketChannel for accepted request socket</span></span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> serverSocketChannel.accept();</span><br><span class="line">                    socketChannel.configureBlocking(<span class="literal">false</span>);     <span class="comment">// configure as non-blocking</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// register the socketChannel</span></span><br><span class="line">                    socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selectionKey.isReadable()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[Server] selected readable socket&quot;</span>);</span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> (SocketChannel) selectionKey.channel();</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot;[Server] starts reading&quot;</span>);</span><br><span class="line">                    System.out.println(readDataFromSocketChannel(socketChannel));</span><br><span class="line">                    System.out.println(<span class="string">&quot;[Server] finished reading&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    socketChannel.register(selector, SelectionKey.OP_WRITE);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selectionKey.isWritable()) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[Server] selected writable socket&quot;</span>);</span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> (SocketChannel) selectionKey.channel();</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">&quot;[Server] starts writing&quot;</span>);</span><br><span class="line">                    writeDataToSocketChannel(socketChannel);</span><br><span class="line">                    System.out.println(<span class="string">&quot;[Server] finished writing&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    socketChannel.close();</span><br><span class="line">                    System.out.println(<span class="string">&quot;[Server] closed writable socket&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                keyIterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">readDataFromSocketChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            buffer.clear();</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> socketChannel.read(buffer);</span><br><span class="line">            <span class="keyword">if</span> (n == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="type">int</span> <span class="variable">limit</span> <span class="operator">=</span> buffer.limit();</span><br><span class="line">            <span class="type">char</span>[] dst = <span class="keyword">new</span> <span class="title class_">char</span>[limit];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; limit; i++) &#123;</span><br><span class="line">                dst[i] = (<span class="type">char</span>) buffer.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.append(dst);</span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeDataToSocketChannel</span><span class="params">(SocketChannel sChannel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        buffer.clear();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Server: &#x27;Have a nice day!&#x27;&quot;</span>;</span><br><span class="line">        buffer.put(s.getBytes(StandardCharsets.UTF_8));     <span class="comment">// write to buffer</span></span><br><span class="line">        buffer.flip();          <span class="comment">// flip buffer&#x27;s mode from &#x27;write&#x27; to &#x27;read&#x27;</span></span><br><span class="line">        sChannel.write(buffer); <span class="comment">// read from buffer, write to channel</span></span><br><span class="line">        buffer.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="客户端">2.2 客户端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[Client] starts writing</span></span><br><span class="line"><span class="comment">[Client] finished writing</span></span><br><span class="line"><span class="comment">[Client] starts reading</span></span><br><span class="line"><span class="comment">Server: &#x27;Have a nice day!&#x27;</span></span><br><span class="line"><span class="comment">[Client] fininshed reading</span></span><br><span class="line"><span class="comment">[Client] closed socket</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NIOClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// open socket</span></span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// write request to server</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Client: &#x27;Hello!&#x27;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;[Client] starts writing&quot;</span>);</span><br><span class="line">        out.write(s.getBytes());</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        System.out.println(<span class="string">&quot;[Client] finished writing&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// read response from server</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] readBuffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        System.out.println(<span class="string">&quot;[Client] starts reading&quot;</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> in.read(readBuffer);</span><br><span class="line">            <span class="keyword">if</span> (ret == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            stringBuilder.append(<span class="keyword">new</span> <span class="title class_">String</span>(readBuffer, StandardCharsets.UTF_8));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(stringBuilder.toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;[Client] fininshed reading&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// close socket</span></span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;[Client] closed socket&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实验">2.3 实验</h3><p>首先运行服务器端程序开始监听，然后运行客户端程序建立连接。</p><p>服务器端应看到如下输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Server] started listening</span><br><span class="line">[Server] selected acceptable socket</span><br><span class="line">[Server] selected readable socket</span><br><span class="line">[Server] starts reading</span><br><span class="line">Client: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">[Server] finished reading</span><br><span class="line">[Server] selected writable socket</span><br><span class="line">[Server] starts writing</span><br><span class="line">[Server] finished writing</span><br><span class="line">[Server] closed writable socket</span><br></pre></td></tr></table></figure><ul><li>Server读取到了Client发来的请求<code>Client: Hello!</code>，并作出响应。</li></ul><p>客户端应看到如下输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Client] starts writing</span><br><span class="line">[Client] finished writing</span><br><span class="line">[Client] starts reading</span><br><span class="line">Server: <span class="string">&#x27;Have a nice day!&#x27;</span></span><br><span class="line">[Client] fininshed reading</span><br><span class="line">[Client] closed socket</span><br></pre></td></tr></table></figure><ul><li>Client发送请求给Server端，随后读取到Server端发来的响应<code>Client: 'Hello!'</code>。</li></ul><h2 id="注意点">3 注意点</h2><p>相较于CyC2018的单向（仅请求）通信样例，我想要实现的是双向请求-响应双向通信。这意味着Client在发送完数据后，不可以关闭socket，因为还需要接收响应数据，应该在双向通信完成后再最终关闭socket。</p><p>当我将Client代码中的<code>out.close()</code>改为<code>out.flush()</code>后，发现服务器端陷入死循环。调试后才发现，服务器端除了第一次正确读取全部数据之后，后续读取<code>read</code>函数返回值均为0，正确情况下应该是<code>-1</code>表示Endof Stream。</p><p>经查，发现其实需要调用<code>socket.shutdownOutput();</code>来关闭TCP的输出流，告知对方输出已结束，这样对方<code>read</code>才会正确返回<code>-1</code>，即EOS。</p><p><code>Socket</code>的<code>shutdownInput</code>文档说明为：</p><blockquote><p><strong>shutdownInput</strong><code>public void shutdownInput() throws IOException</code> Places theinput stream for this socket at "end of stream". Any data sent to theinput stream side of the socket is acknowledged and then silentlydiscarded. If you read from a socket input stream after invoking thismethod on the socket, the stream's available method will return 0, andits read methods will return -1 (end of stream).</p><p><strong>Throws:</strong> <code>IOException</code> - if an I/O erroroccurs when shutting down this socket. <strong>Since:</strong> 1.3<strong>See Also:</strong><code>shutdownOutput()</code>,<code>close()</code>,<code>setSoLinger(boolean, int)</code>,<code>isInputShutdown()</code></p></blockquote><p><code>Socket</code>的<code>shutdownOutput</code>文档说明为：</p><blockquote><p><strong>shutdownOutput</strong><code>public void shutdownOutput() throws IOException</code> Disablesthe output stream for this socket. For a TCP socket, any previouslywritten data will be sent followed by TCP's normal connectiontermination sequence. If you write to a socket output stream afterinvoking shutdownOutput() on the socket, the stream will throw anIOException. <strong>Throws:</strong> <code>IOException</code> - if anI/O error occurs when shutting down this socket. <strong>Since:</strong>1.3 <strong>See Also:</strong> <code>shutdownInput()</code>,<code>close()</code>, <code>setSoLinger(boolean, int)</code>,<code>isOutputShutdown()</code></p></blockquote><h2 id="参考资料">4 参考资料</h2><p><ahref="https://cyc2018.github.io/CS-Notes/#/notes/Java%20IO?id=%e5%a5%97%e6%8e%a5%e5%ad%97-nio-%e5%ae%9e%e4%be%8b">CyC2018套接字-nio-实例</a></p><p><ahref="https://wiki.jikexueyuan.com/project/java-socket/socket-read-deadlock.html">Socket通信中由 read 返回值造成的的死锁问题</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Socket </tag>
            
            <tag> Network </tag>
            
            <tag> Java </tag>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HearyHTTPd - 写一个自己的HTTP服务器</title>
      <link href="/posts/HearyHTTPd-%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84HTTP%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/posts/HearyHTTPd-%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84HTTP%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>自己研究用Java写一个HTTP服务器。一看JHTTPd，EasyHTTPd这些名字就用过了，那就叫<ahref="https://github.com/HearyShen/HearyHTTPd">HearyHTTPd</a>吧，简称<strong>hhttpd</strong>。构想是做一个基于Reactor的多线程高并发HTTP服务器。</p><span id="more"></span><h1 id="hearyhttpd---写一个自己的http服务器">HearyHTTPd -写一个自己的HTTP服务器</h1><p>先写下开发日记，记录每天的进展和心得。</p><h2 id="开源地址">1 开源地址</h2><p>GitHub：<a href="https://github.com/HearyShen">HearyShen</a> / <ahref="https://github.com/HearyShen/HearyHTTPd">HearyHTTPd</a></p><h2 id="开发日记">2 开发日记</h2><h3 id="day-1-2020.6.15-mon">Day 1, 2020.6.15, Mon</h3><p>先从最简单的例子看起，廖雪峰写的的Java教程 <ahref="https://www.liaoxuefeng.com/wiki/1252599548343744/1304265903570978">Web基础</a>中的最基本的HTTP代码跑起来看看效果。这个例子的原理是：用ServerSocket监听端口，主线程阻塞直到接受（accept）到请求，接收到请求后，启动一个线程来处理这个Socket对象，读取输入流以解析请求，写入输出流以进行响应。</p><p>我进行了改进，实现了MainReactor和SubReactor的模式。</p><ul><li>MainReactor负责监听和接受请求，只负责将Socket对象加入（put）到BlockingQueue中；</li><li>SubReactor负责处理请求，做出响应，负责从BlockingQueue中取出（take）请求的Socket对象，读取输入流进行解析，写入输出流进行响应。</li></ul><p>设计一个Launcher来初始化数据结构，启动MainReactor和SubReactor线程。</p><p>第一天只实现了一个MainReactor线程和一个SubReactor线程，处理能力也只是响应"Hello,World."。初步把基本的脚手架搭起来，跑通了。</p><h3 id="day-2-2020.6.16-tue">Day 2, 2020.6.16, Tue</h3><p>第二天想到<ahref="https://heary.cn">我写的Hexo博客</a>就是一个静态网站，完全可以用自己写的HTTP服务器来部署呀。</p><p>于是自己写了一个GET请求处理功能，能够根据请求的路径来读取WebRoot路径下的本地文件，响应给浏览器。</p><p>不过初步的效果只能返回HTML文件，也就是说文本型的CSS、Javascript文件，二进制型的字体文件、图像文件还无法正常返回。需要进一步处理Content-Type，并实现二进制文件的响应功能。</p><p>不巧的是今天遇到一些别的琐事，下午和晚上都被占用了，没来得及做下去。</p><h3 id="day-3-2020.6.17-wed">Day 3, 2020.6.17, Wed</h3><p>今天对模块分工进行了重新构思和命名，分为：</p><ul><li>Reactor包<ul><li>包含MainReactor和SubReactor，是Reactor线程的实现；</li></ul></li><li>Processor包<ul><li>包含GetProcessor等，提供对HTTP的GET方法进行整体处理的功能；</li></ul></li><li>Resolver包<ul><li>包含RequestLineResolver、HeaderResolver，提供对报文请求行、请求头部的内容解析的功能；</li></ul></li><li>Responser包<ul><li>包含TextResponser、BinaryResponser和NotFoundResponser。Processor对请求解析根据Content-Type进行分流，交给对应的Responser进行处理和响应。</li></ul></li></ul><p>今天整理好了常用的Content-Type，实现了BinaryResponser来处理二进制对象的请求，实现了多线程的SubReactor，并且改进了RequestLineResolver来提升对带参请求的兼容性。</p><p>接下来打算研究下NIO，提高IO效率。</p><h3 id="day-4-2020.6.18-thu">Day 4, 2020.6.18, Thu</h3><p>今天研究了下NIO，并且写了一份基于NIO的请求-响应双向Socket通信的验证代码。</p><p>笔记记录在：<ahref="https://heary.cn/posts/%E5%9F%BA%E4%BA%8ENIO%E7%9A%84%E8%AF%B7%E6%B1%82-%E5%93%8D%E5%BA%94%E5%8F%8C%E5%90%91Socket%E9%80%9A%E4%BF%A1%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/">基于NIO的请求-响应双向Socket通信网络编程</a></p><p>接下来要基于NIO的<code>ServerSocketChannel</code> /<code>SocketChannel</code>以及<code>Selector</code>的IO复用技术对hhttpd进行改进。</p><p>初步构思基于NIO的hhttpd应该是一个MainReactor通过IO复用处理请求，将接收到的请求交给一个SubReactor，SubReactor通过IO复用处理可读请求，将其交给线程池进行处理（read/decode/compute/encode/response）。</p><p>简单例子是，比如说：client请求index.html，mainReactorselect到这个acceptable的serverSocketChannel，就accept它建立一个socketChannel，register到subReactor的selector上，client的请求数据发到server后，subReactor就能select到readable&amp;writable的socketChannel，于是将这个socketChannel交给threadPool去处理，由workerthread去read/decode/compute/encode/write。</p><h3 id="day-5-2020.6.19-fri">Day 5, 2020.6.19, Fri</h3><p>今天把项目进行了改写，全面基于Java的NIO。</p><p>层次架构可分为：</p><ul><li><p>MainReactor (single thread)</p></li><li><p>SubReactor (single thread)</p><ul><li>HttpWorker (Runnable in thread pool)<ul><li>GetProcesser<ul><li>TextResponser</li><li>BinaryResponser</li><li>NotFoundResponser</li><li>etc.</li></ul></li><li>PostProcesser</li><li>etc.</li></ul></li></ul></li></ul><p>一些注意点：</p><p><strong>注册新SocketChannel后唤醒SubReactor</strong>：MainReactor将accept的SocketChannel注册到SubReactor上后，SubReactor线程阻塞在<code>select()</code>操作处，需要通过<code>selector.wakeUp()</code>来唤醒阻塞，让SubReactor重新select得到新resigter上去的socketChannel；</p><p><strong>处理SocketChannel时要取消其在SubReactor的Selector上的注册以免重复</strong>：SubReactor在select得到Readable的SocketChannel后，应该调用<code>selectionKey.cancel()</code>来取消注册该socketChannel，否则该通道在workerthread处理完毕将其关闭之前，会一直保持Readable状态，以至于被SubReactor反复重复地select出来，并启动很多wokerthread去处理同一个socketChannel，不仅严重耗费资源，而且第一个执行完毕的线程关闭该socketChannel后，后续的其他线程就无法再读取该socketChannel，由此还会出现IOException异常。</p><p><strong>读写NIO的ByteBuffer时要注意offset和length</strong>：检查好文档中的offset指的是谁的offset，读写的length必须<code>Math.min(buffer.remaining(), bytesLen)</code>，即必须是内容长度和buffer长度两者中的最小值。</p><p>但是，我发现改写后，在Chrome浏览器的开发者工具中进行了验证，发现网络流耗时反而更长了。用NIO之前，基于Socket和输入输出流的每个资源文件的耗时大约50ms，可是使用NIO后，反而耗时高达300ms。这个反常现象需要进一步排查。</p><h3 id="day-6-2020.6.20-sat">Day 6, 2020.6.20, Sat</h3><p>使用NIO后反而变慢了一个数量级，这个问题让人费解。</p><p>我怀疑是否是Selector机制太慢了？因此尝试了不含Selector的阻塞式ServerSocketChannel，但是没有改善效果。</p><p>我还尝试了修改唤醒SubReactor的时机，调整线程池的类型和参数、排查通信过程中建立的每一个连接……，但可惜的时都无济于事。</p><p>就在我一筹莫展的时候，我发现我是习惯性用 http://localhost:8080访问的，我觉得会不会和localhost的解析有关，因此尝试使用http://127.0.0.1:8080访问，发现就一切正常了。也就是说，当hhttpd代码里设置为监听的host为<code>127.0.0.1</code>时，在Chrome中用http://localhost:8080 会有较大initial connectionlantency从而变得较慢，而用 http://127.0.0.1:8080 访问则很快。</p><p>事实上，当我做了更多的测试后，我发现和浏览器实现也有关。例如：不管监听或访问如何设置，Firefox浏览器总是很快。</p><p>详细排查结果记录在了：<ahref="https://heary.cn/posts/Chromium%E5%86%85%E6%A0%B8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AE%BF%E9%97%AElocalhost%E6%97%B6%E7%9A%84%E5%88%9D%E5%A7%8B%E8%BF%9E%E6%8E%A5%EF%BC%88initial-connection%EF%BC%89%E9%AB%98%E5%BB%B6%E8%BF%9F%E9%97%AE%E9%A2%98/">Chromium内核浏览器访问localhost时的初始连接（initialconnection）高延迟问题</a>。</p><h3 id="day-7-2020.6.21-sun">Day 7, 2020.6.21, Sun</h3><p>周日，给自己放个假，懒散的一天。</p><h3 id="day-8-2020.6.22-mon">Day 8, 2020.6.22, Mon</h3><p>准备和参加了招银网络科技的笔试。</p><h3 id="day-9-2020.6.23-tue">Day 9, 2020.6.23, Tue</h3><p>先实现了HTTP HEAD方法的处理响应。</p><p>然后实现了HTTP GET/POST方法的CGI响应功能。</p><ul><li>原理是：通过Java的runtime执行本地程序，利用环境变量传入基于CGI协议的参数，执行本地程序（CGI程序）产生的Process实例的标准输入输出可以传递信息，取得CGI程序的输出结果，把这个结果作为响应报文即可。</li><li>具体地，我写了一个很基本Python的本地CGI程序，输出一个包含HTML页面的报文，显示CGI程序得到的环境变量。</li><li>实际上，Java的Runtime可以以执行命令的方式调用各种形式的程序，CGI程序不仅限于Python。</li></ul><p>相关笔记记录在：<ahref="https://heary.cn/posts/在Java中执行Python等本地程序（命令）/">在Java中执行Python等本地程序（命令）</a></p><p>另外，还改写了HTTP requestline的解析方式，改为通过Java的URI类库进行处理，不再自行解析处理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> Socket </tag>
            
            <tag> Java </tag>
            
            <tag> NIO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyYAML - 在Python中使用YAML</title>
      <link href="/posts/PyYAML-%E5%9C%A8Python%E4%B8%AD%E4%BD%BF%E7%94%A8YAML/"/>
      <url>/posts/PyYAML-%E5%9C%A8Python%E4%B8%AD%E4%BD%BF%E7%94%A8YAML/</url>
      
        <content type="html"><![CDATA[<p><ahref="https://yaml.org/">YAML</a>是一种强大的具有可读性的数据序列化标准。在Python中，可以使用PyYAML对YAML格式的文件进行处理，比如：读写配置文件。</p><span id="more"></span><h1 id="pyyaml---在python中使用yaml">PyYAML - 在Python中使用YAML</h1><h2 id="链接">0 链接</h2><blockquote><p><a href="https://yaml.org/">YAML</a></p><p>YAML: YAML Ain't Markup Language</p><p>What It Is: YAML is a human friendly data serialization standard forall programming languages.</p></blockquote><ul><li>YAML标准官方网站</li></ul><blockquote><p><a href="https://pyyaml.org/">PyYAML</a></p><p><a href="http://pyyaml.org/wiki/PyYAML">PyYAML</a> is a full-featured<a href="http://yaml.org/">YAML</a> framework for the Python programminglanguage.</p></blockquote><ul><li>PyYAML，Python的全功能YAML框架</li></ul><blockquote><p><a href="https://pyyaml.org/wiki/PyYAMLDocumentation">PyYAMLDocumentation</a></p><p>PyYAML is a YAML parser and emitter for Python.</p></blockquote><ul><li>PyYAML文档</li></ul><blockquote><p><a href="https://www.runoob.com/w3cnote/yaml-intro.html">YAML入门教程 - runoob.com</a></p></blockquote><ul><li>中文、易上手的YAML入门教程</li></ul><h2 id="yaml">1 YAML</h2><h3 id="概述">1.1 概述</h3><p>YAML是一种数据序列化标准，目前看来是最强大的可读型数据序列化标准。</p><p>与传统配置文件格式INI（<code>*.ini</code>）或是JSON（<code>*.json</code>）相比，YAML（<code>*.yml</code>）是不仅支持的数据类型丰富，而且还支持注释之类的增强可读性的功能。</p><table><thead><tr class="header"><th></th><th>INI</th><th>JSON</th><th>YAML</th></tr></thead><tbody><tr class="odd"><td>数据类型</td><td>无*</td><td>有</td><td>有</td></tr><tr class="even"><td>层次结构</td><td>一层</td><td>多层</td><td>多层</td></tr><tr class="odd"><td>支持注释</td><td>支持</td><td>不支持</td><td>支持</td></tr></tbody></table><ul><li>INI本身不体现数据类型，需读取时指定数据类型，否则均视为字符串。</li></ul><h3 id="语法规则">1.2 语法规则</h3><h4 id="基本语法">1.2.1 基本语法</h4><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li><code>#</code>表示注释</li></ul><h4 id="数据类型">1.2.2 数据类型</h4><p>YAML 支持以下几种数据类型：</p><ul><li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） /字典（dictionary）</li><li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li><li>纯量（scalars）：单个的、不可再分的值</li></ul><h3 id="示例">1.3 示例</h3><p>在官方文档就有示例，不过我更推荐<ahref="https://www.runoob.com/w3cnote/yaml-intro.html">YAML 入门教程 -runoob.com</a>的一个例子，上手快。</p><p>我做了一定修改和测试（增加了dict）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># YAML支持注释</span></span><br><span class="line"><span class="attr">boolean:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="literal">TRUE</span>  <span class="comment">#true,True都可以</span></span><br><span class="line">  <span class="bullet">-</span> <span class="literal">FALSE</span>  <span class="comment">#false，False都可以</span></span><br><span class="line"><span class="attr">float:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">3.14</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">6.8523015e+5</span>  <span class="comment">#可以使用科学计数法</span></span><br><span class="line"><span class="attr">int:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">123</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">0b1010_0111_0100_1010_1110</span>    <span class="comment">#二进制表示</span></span><br><span class="line"><span class="attr">null:</span></span><br><span class="line">  <span class="attr">nodeName:</span> <span class="string">&#x27;node&#x27;</span></span><br><span class="line">  <span class="attr">parent:</span> <span class="string">~</span>  <span class="comment">#使用~表示null</span></span><br><span class="line"><span class="attr">string:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">哈哈</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;Hello world&#x27;</span>  <span class="comment">#可以使用双引号或者单引号包裹特殊字符</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">newline</span></span><br><span class="line">    <span class="string">newline2</span>    <span class="comment">#字符串可以拆成多行，每一行会被转化成一个空格</span></span><br><span class="line"><span class="attr">dict:</span> </span><br><span class="line">  <span class="attr">hp:</span> <span class="number">13</span></span><br><span class="line">  <span class="attr">sp:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">date:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">2018-02-17</span>    <span class="comment">#日期必须使用ISO 8601格式，即yyyy-MM-dd</span></span><br><span class="line"><span class="attr">datetime:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="number">2018-02-17T15:02:31+08:00</span>    <span class="comment">#时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span></span><br></pre></td></tr></table></figure><ul><li>经过我的测试，Python的tuple类型是不认的，只是解析为字符串，不过可以用list。</li></ul><h2 id="pyyaml">2 PyYAML</h2><p>详细的请参考官方文档<ahref="https://pyyaml.org/wiki/PyYAMLDocumentation">PyYAMLDocumentation</a>，以下介绍最简单的操作。</p><h3 id="安装">2.1 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pyyaml</span><br></pre></td></tr></table></figure><p>或使用pip：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyyaml</span><br></pre></td></tr></table></figure><h3 id="使用">2.2 使用</h3><h4 id="safe_load">2.2.1 safe_load</h4><p>把上述1.3的示例存入<code>config.yml</code>中，通过以下代码读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;config.yml&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cfgs = yaml.safe_load(f)</span><br><span class="line">    <span class="built_in">print</span>(cfgs)</span><br></pre></td></tr></table></figure><ul><li><p>一般建议使用<code>safe_load</code>，限制使用安全的、核心的YAML功能，否则YAML可以解析各种你想不到的东西，可能会调用Python中的任何东西，例如：直接构建一个类对象。（具体见<ahref="https://pyyaml.org/wiki/PyYAMLDocumentation">PyYAMLDocumentation</a>文档中的解释）</p></li><li><p>非安全函数为<code>yaml.load(...)</code></p></li></ul><p>结果是一个`<code>dict</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;boolean&#x27;</span>: [<span class="literal">True</span>, <span class="literal">False</span>], <span class="string">&#x27;float&#x27;</span>: [<span class="number">3.14</span>, <span class="number">685230.15</span>], <span class="string">&#x27;int&#x27;</span>: [<span class="number">123</span>, <span class="number">685230</span>], <span class="literal">None</span>: &#123;<span class="string">&#x27;nodeName&#x27;</span>: <span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;parent&#x27;</span>: <span class="literal">None</span>&#125;, <span class="string">&#x27;string&#x27;</span>: [<span class="string">&#x27;哈哈&#x27;</span>, <span class="string">&#x27;Hello world&#x27;</span>, <span class="string">&#x27;newline newline2&#x27;</span>], <span class="string">&#x27;dict&#x27;</span>: &#123;<span class="string">&#x27;hp&#x27;</span>: <span class="number">13</span>, <span class="string">&#x27;sp&#x27;</span>: <span class="number">5</span>&#125;, <span class="string">&#x27;date&#x27;</span>: [datetime.date(<span class="number">2018</span>, <span class="number">2</span>, <span class="number">17</span>)], <span class="string">&#x27;datetime&#x27;</span>: [datetime.datetime(<span class="number">2018</span>, <span class="number">2</span>, <span class="number">17</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">31</span>, tzinfo=datetime.timezone(datetime.timedelta(seconds=<span class="number">28800</span>)))]&#125;</span><br></pre></td></tr></table></figure><p>或通过IPython读取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">IPython <span class="number">7.12</span><span class="number">.0</span> -- An enhanced Interactive Python. <span class="type">Type</span> <span class="string">&#x27;?&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">In [<span class="number">1</span>]: cfgs</span><br><span class="line">Out[<span class="number">1</span>]:</span><br><span class="line">&#123;<span class="string">&#x27;boolean&#x27;</span>: [<span class="literal">True</span>, <span class="literal">False</span>],</span><br><span class="line"> <span class="string">&#x27;float&#x27;</span>: [<span class="number">3.14</span>, <span class="number">685230.15</span>],</span><br><span class="line"> <span class="string">&#x27;int&#x27;</span>: [<span class="number">123</span>, <span class="number">685230</span>],</span><br><span class="line"> <span class="literal">None</span>: &#123;<span class="string">&#x27;nodeName&#x27;</span>: <span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;parent&#x27;</span>: <span class="literal">None</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;string&#x27;</span>: [<span class="string">&#x27;哈哈&#x27;</span>, <span class="string">&#x27;Hello world&#x27;</span>, <span class="string">&#x27;newline newline2&#x27;</span>],</span><br><span class="line"> <span class="string">&#x27;dict&#x27;</span>: &#123;<span class="string">&#x27;hp&#x27;</span>: <span class="number">13</span>, <span class="string">&#x27;sp&#x27;</span>: <span class="number">5</span>&#125;,</span><br><span class="line"> <span class="string">&#x27;date&#x27;</span>: [datetime.date(<span class="number">2018</span>, <span class="number">2</span>, <span class="number">17</span>)],</span><br><span class="line"> <span class="string">&#x27;datetime&#x27;</span>: [datetime.datetime(<span class="number">2018</span>, <span class="number">2</span>, <span class="number">17</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">31</span>, tzinfo=datetime.timezone(datetime.timedelta(seconds=<span class="number">28800</span>)))]&#125;</span><br></pre></td></tr></table></figure><h4 id="safe_dump">2.2.2 safe_dump</h4><p>对于Python对象，也可以导出到文件流中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;config.dump.yml&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    cfgs = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;attrs&#x27;</span>: [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]&#125;</span><br><span class="line">    yaml.safe_dump(cfgs, f)</span><br></pre></td></tr></table></figure><ul><li>非安全函数为<code>yaml.dump(...)</code></li></ul><p>结果在<code>config.dump.yml</code>中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">age:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">attrs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">0</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">1</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">2</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">3</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">4</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">tom</span></span><br></pre></td></tr></table></figure><p>如果未指定输出流，直接导出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaml.safe_dump(cfgs)</span><br></pre></td></tr></table></figure><p>结果会直接显示出来，相当于默认为标准IO。</p><p>在<code>stream=None</code>时，源码中根据有无指定<code>encoding</code>来决定<code>stream</code>为<code>io.StringIO()</code>或是<code>io.BytesIO()</code>。</p><h2 id="小结">3 小结</h2><p>不难看出，YAML格式的文件非常适合作为配置文件：</p><ol type="1"><li>可读性强；</li><li>自带数据格式：而INI不支持，需要读取时设定读取方法；</li><li>支持层次结构：而INI不支持；</li><li>语法简单：基本就是冒号和空格（JSON还需要用大括号包好）；</li><li>和Python兼容很好：一个配置文件读出来就是Python的一个dict。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> YAML </tag>
            
            <tag> PyYAML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codetags - 用注释标记改进代码注释</title>
      <link href="/posts/Codetags-%E7%94%A8%E6%B3%A8%E9%87%8A%E6%A0%87%E8%AE%B0%E6%94%B9%E8%BF%9B%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A/"/>
      <url>/posts/Codetags-%E7%94%A8%E6%B3%A8%E9%87%8A%E6%A0%87%E8%AE%B0%E6%94%B9%E8%BF%9B%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<p>Codetags是<a href="https://www.python.org/dev/peps/pep-0350/">PEP350</a>的提案，常见的<code>TODO</code>就是Codetags的一种，用好Codetags可以让代码注释变得更可读、更易检索。</p><span id="more"></span><h1 id="codetags---用注释标记改进代码注释">Codetags -用注释标记改进代码注释</h1><h2 id="链接">0 链接</h2><blockquote><p><a href="https://www.python.org/dev/peps/pep-0350/">PEP 350 --Codetags</a></p><p><strong><a href="https://www.python.org/dev/peps/pep-0350/#id22">WhatAre Codetags?</a></strong></p><p>Programmers widely use ad-hoc code comment markup conventions toserve as reminders of sections of code that need closer inspection orreview. Examples of markup include <code>FIXME</code>,<code>TODO</code>, <code>XXX</code>, <code>BUG</code>, but there manymore in wide use in existing software. Such markup will henceforth bereferred to as <em>codetags</em>. These codetags may show up inapplication code, unit tests, scripts, general documentation, orwherever suitable.</p></blockquote><h2 id="codetags">1 Codetags</h2><h2 id="示例">1.1 示例</h2><p>Codetags是PEP 350种的一项编程提议，用在注释中。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span> needs to be implemented</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="comment"># <span class="doctag">BUG:</span> BUG here</span></span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>注释中使用好Codetags，可以让代码更直观、更加易于检索。</li></ul><p>另外，代码linting工具，如：<code>pylint</code>能够高亮显示出Codetags标记。</p><h2 id="清单">1.2 清单</h2><blockquote><p><a href="https://www.python.org/dev/peps/pep-0350/">PEP 350 --Codetags</a></p><p><strong><ahref="https://www.python.org/dev/peps/pep-0350/#id28">Mnemonics</a></strong></p></blockquote><table><colgroup><col style="width: 100%" /></colgroup><thead><tr class="header"><th>TODO (MILESTONE, MLSTN, DONE, YAGNI, TBD, TOBEDONE)</th></tr></thead><tbody><tr class="odd"><td><em>To do</em>: Informal tasks/features that are pendingcompletion.</td></tr><tr class="even"><td><strong>FIXME (XXX, DEBUG, BROKEN, REFACTOR, REFACT, RFCTR, OOPS,SMELL, NEEDSWORK, INSPECT)</strong></td></tr><tr class="odd"><td><em>Fix me</em>: Areas of problematic or ugly code needingrefactoring or cleanup.</td></tr><tr class="even"><td><strong>BUG (BUGFIX)</strong></td></tr><tr class="odd"><td><em>Bugs</em>: Reported defects tracked in bug database.</td></tr><tr class="even"><td><strong>NOBUG (NOFIX, WONTFIX, DONTFIX, NEVERFIX, UNFIXABLE,CANTFIX)</strong></td></tr><tr class="odd"><td><em>Will Not Be Fixed</em>: Problems that are well-known but willnever be addressed due to design problems or domain limitations.</td></tr><tr class="even"><td><strong>REQ (REQUIREMENT, STORY)</strong></td></tr><tr class="odd"><td><em>Requirements</em>: Satisfactions of specific, formalrequirements.</td></tr><tr class="even"><td><strong>RFE (FEETCH, NYI, FR, FTRQ, FTR)</strong></td></tr><tr class="odd"><td><em>Requests For Enhancement</em>: Roadmap items not yetimplemented.</td></tr><tr class="even"><td><strong>IDEA</strong></td></tr><tr class="odd"><td><em>Ideas</em>: Possible RFE candidates, but less formal thanRFE.</td></tr><tr class="even"><td><strong>??? (QUESTION, QUEST, QSTN, WTF)</strong></td></tr><tr class="odd"><td><em>Questions</em>: Misunderstood details.</td></tr><tr class="even"><td><strong>!!! (ALERT)</strong></td></tr><tr class="odd"><td><em>Alerts</em>: In need of immediate attention.</td></tr><tr class="even"><td><strong>HACK (CLEVER, MAGIC)</strong></td></tr><tr class="odd"><td><em>Hacks</em>: Temporary code to force inflexible functionality, orsimply a test change, or workaround a known problem.</td></tr><tr class="even"><td><strong>PORT (PORTABILITY, WKRD)</strong></td></tr><tr class="odd"><td><em>Portability</em>: Workarounds specific to OS, Python version,etc.</td></tr><tr class="even"><td><strong>CAVEAT (CAV, CAVT, WARNING, CAUTION)</strong></td></tr><tr class="odd"><td><em>Caveats</em>: Implementation details/gotchas that stand out asnon-intuitive.</td></tr><tr class="even"><td><strong>NOTE (HELP)</strong></td></tr><tr class="odd"><td><em>Notes</em>: Sections where a code reviewer found something thatneeds discussion or further investigation.</td></tr><tr class="even"><td><strong>FAQ</strong></td></tr><tr class="odd"><td><em>Frequently Asked Questions</em>: Interesting areas that requireexternal explanation.</td></tr><tr class="even"><td><strong>GLOSS (GLOSSARY)</strong></td></tr><tr class="odd"><td><em>Glossary</em>: Definitions for project glossary.</td></tr><tr class="even"><td><strong>SEE (REF, REFERENCE)</strong></td></tr><tr class="odd"><td><em>See</em>: Pointers to other code, web link, etc.</td></tr><tr class="even"><td><strong>TODOC (DOCDO, DODOC, NEEDSDOC, EXPLAIN,DOCUMENT)</strong></td></tr><tr class="odd"><td><em>Needs Documentation</em>: Areas of code that still need to bedocumented.</td></tr><tr class="even"><td><strong>CRED (CREDIT, THANKS)</strong></td></tr><tr class="odd"><td><em>Credits</em>: Accreditations for external provision ofenlightenment.</td></tr><tr class="even"><td><strong>STAT (STATUS)</strong></td></tr><tr class="odd"><td><em>Status</em>: File-level statistical indicator of maturity ofthis file.</td></tr><tr class="even"><td><strong>RVD (REVIEWED, REVIEW)</strong></td></tr><tr class="odd"><td><em>Reviewed</em>: File-level indicator that review wasconducted.</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Codetags </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Pages (*.github.io) TLS劫持和连接重置问题</title>
      <link href="/posts/GitHub-Pages-github-io-TLS%E5%8A%AB%E6%8C%81%E5%92%8C%E8%BF%9E%E6%8E%A5%E9%87%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
      <url>/posts/GitHub-Pages-github-io-TLS%E5%8A%AB%E6%8C%81%E5%92%8C%E8%BF%9E%E6%8E%A5%E9%87%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>本技术博客今天出现国内访问异常（GitHub Pages (*.github.io)TLS劫持和连接重置），已迁移并恢复正常访问。</p><span id="more"></span><h1 id="github-pages-.github.io-tls劫持和连接重置问题">GitHub Pages(*.github.io) TLS劫持和连接重置问题</h1><h2 id="问题说明">1 问题说明</h2><p>2020年3月26日，下午3点左右，发现部署在GitHub Pages(*.github.io)的博客，国内无法正常访问。</p><p>出现TLS劫持和连接重置问题。</p><p>TLS劫持，很诡异，是一个备注QQ邮箱<code>（34***8453@qq.com）</code>的自签发证书，原因不明。</p><p>连接重置，原因不明。</p><blockquote><p><a href="https://www.v2ex.com/t/656394">github.io大规模中间人？</a></p></blockquote><p>根据查阅到的V2EX技术网站上的反馈，似乎全国范围内，各地、各运营商网络下都复现了相同的问题。</p><h2 id="解决方案">2 解决方案</h2><p>迁移静态站点到其他部署平台。</p><p>本博客发现问题后，将站点部署到了<ahref="https://coding.net">Coding.net</a>上，目前已经恢复正常访问。</p>]]></content>
      
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> troubleshooting </tag>
            
            <tag> Cybersecurity </tag>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GNNs - 图神经网络学习笔记</title>
      <link href="/posts/GNNs-%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/GNNs-%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>参考AAAI 2020的Tutorial——<ahref="http://cse.msu.edu/~mayao4/tutorials/aaai2020/">Graph NeuralNetworks: Models andApplications</a>以及一些资料来读论文，学习图神经网络领域知识。</p><span id="more"></span><h1 id="gnns---图神经网络学习笔记">GNNs - 图神经网络学习笔记</h1><h2 id="链接">0 链接</h2><blockquote><p><a href="http://cse.msu.edu/~mayao4/tutorials/aaai2020/">Graph NeuralNetworks: Models and Applications</a>, AAAI 2020 Tutorial</p></blockquote><h2 id="研究背景">1 研究背景</h2><p>相当多的数据是图/图谱（graph）结构的，如：</p><ul><li>社交图谱；</li><li>传输图谱；</li><li>大脑图谱；</li><li>网页图谱；</li><li>分子图谱；</li><li>基因图谱。</li></ul><p>一系列的实际问题都需要对图谱进行处理、特征提取和表征，例如：</p><ul><li>链路预测；</li><li>节点分类；</li><li>社区检测；</li><li>（网页）排序。</li></ul><p>传统的深度学习方法所能处理的数据都是简单网格或序列，例如：</p><ul><li>通过CNNs处理固定尺寸的图像/网格；</li><li>通过RNNs处理文本/序列。</li></ul><p>然而图谱是由节点和边组成的，其形式是多变的：</p><ul><li>各个节点的邻域节点数量各不相同；</li><li>图谱有着复杂的拓扑结构；</li><li>图谱也不存在固定的节点序列。</li></ul><p>因此，图神经网络（Graph Neural Networks）被提出以解决这些问题。</p><h2 id="理论基础">2 理论基础</h2><h3 id="基本图论">2.1 基本图论</h3><p><em>Basic Graph Theory</em></p><h4 id="图和图信号">2.1.1 图和图信号</h4><img src="/posts/GNNs-%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/graph.png" class="" title="graph"><h5 id="图">图</h5><p>图（Graph）<spanclass="math inline">\(G\)</span>由节点（Vertices）集合<spanclass="math inline">\(V\)</span>和边（Edges）集合<spanclass="math inline">\(E\)</span>组成，形式化为： <spanclass="math display">\[V = \{v_1, ... v_N\}\]</span></p><p><span class="math display">\[E = \{e_1, ... e_M\}\]</span></p><p><span class="math display">\[G = \{V, E\}\]</span></p><h5 id="图信号">图信号</h5><p>那么，图信号（Graph Signal）可形式化为映射<spanclass="math inline">\(f\)</span>： <span class="math display">\[f: V \to \mathbb{R}^N\]</span></p><p>或 <span class="math display">\[f: V \to \mathbb{R}^{N \times d}\]</span> 即，映射<spanclass="math inline">\(f\)</span>把每一个节点<spanclass="math inline">\(v\)</span>映射为一个<spanclass="math inline">\(d\)</span>维实数向量： <spanclass="math display">\[v \to [f(1), f(2), ... f(d)]^T\]</span></p><h4 id="图的矩阵表示">2.1.2 图的矩阵表示</h4><h5 id="度矩阵">度矩阵</h5><p>度矩阵（Degree Matrix）： <span class="math display">\[D = diag(degree(v_1), ... degree(v_N))\]</span> 在此例中： <span class="math display">\[D =\begin{bmatrix}     1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\     0 &amp; 3 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\     0 &amp; 0 &amp; 4 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\     0 &amp; 0 &amp; 0 &amp; 2 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\     0 &amp; 0 &amp; 0 &amp; 0 &amp; 2 &amp; 0 &amp; 0 &amp; 0 \\     0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 4 &amp; 0 &amp; 0 \\     0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 3 &amp; 0 \\     0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 \\\end{bmatrix}\]</span></p><h5 id="邻接矩阵">邻接矩阵</h5><p>邻接矩阵（Adjacency Matrix）： <span class="math display">\[A[i,j] =\begin{cases}1&amp; v_i \in \mathcal{N}(v_j) \\0&amp; v_i \notin \mathcal{N}(v_j)\end{cases}\]</span> 在此例中：</p><p><span class="math display">\[A =\begin{bmatrix}     0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\     1 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 \\     0 &amp; 1 &amp; 0 &amp; 1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 \\     0 &amp; 0 &amp; 1 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 \\     0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 1 &amp; 0 &amp; 0 \\     0 &amp; 1 &amp; 1 &amp; 0 &amp; 1 &amp; 0 &amp; 1 &amp; 0 \\     0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 1 \\     0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 \\\end{bmatrix}\]</span></p><h5 id="拉普拉斯矩阵">拉普拉斯矩阵</h5><p>拉普拉斯矩阵（Laplacian Matrix）： <span class="math display">\[L = D - A\]</span> 在此例中：</p><p><span class="math display">\[L =\begin{bmatrix}     1 &amp; -1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\     -1 &amp; 3 &amp; -1 &amp; 0 &amp; 0 &amp; -1 &amp; 0 &amp; 0 \\     0 &amp; -1 &amp; 4 &amp; -1 &amp; 0 &amp; -1 &amp; -1 &amp; 0 \\     0 &amp; 0 &amp; -1 &amp; 2 &amp; -1 &amp; 0 &amp; 0 &amp; 0 \\     0 &amp; 0 &amp; 0 &amp; -1 &amp; 2 &amp; -1 &amp; 0 &amp; 0 \\     0 &amp; -1 &amp; -1 &amp; 0 &amp; -1 &amp; 4 &amp; -1 &amp; 0 \\     0 &amp; 0 &amp; -1 &amp; 0 &amp; 0 &amp; -1 &amp; 3 &amp; -1 \\     0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; -1 &amp; 1 \\\end{bmatrix}\]</span></p><h3 id="谱图理论">2.2 谱图理论</h3><p><em>Spectral Graph Theory</em></p><p>拉普拉斯矩阵可作为<strong>差分算子（differenceoperator）</strong>，即： <span class="math display">\[h = Lf = (D - A)f = Df - Af \in \mathbb{R}^{N \times d}\]</span></p><p><span class="math display">\[h(i) = \sum_{v_j \in \mathcal{N}(v_i)}(f(i) - f(j)) \in \mathbb{R}^d\]</span></p><p>可以理解为节点<spanclass="math inline">\(i\)</span>与邻接节点的一阶距离之和。</p><p><strong>拉普拉斯二次型（Laplacian quadraticform）</strong>可以表达图信号<spanclass="math inline">\(f\)</span>的“平滑程度”（smoothness）或“频率”（frequency）：<span class="math display">\[f^TLf = \frac{1}{2} \sum_{i,j=0}^{N-1} A[i,j] (f(i)-f(j))^2\]</span> &gt; 公式推导可参考：<ahref="https://zhuanlan.zhihu.com/p/81502804">谱聚类方法推导和对拉普拉斯矩阵的理解</a></p><p>可以理解为每对邻接节点之间信号的二阶距离。</p><img src="/posts/GNNs-%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/graph_signal.png" class="" title="Graph Signal"><ul><li>低频和高频图谱信号；</li><li>低频图信号中，每个图节点的信号接近，意味着图信号变化平缓，即周期长，在频域中低频多，高频少；</li><li>高频图信号中，每个图节点的信号相差较大，意味着图信号变化剧烈、频繁，即周期短，在频域中，高频多，低频少。</li></ul><p>拉普拉斯矩阵是一个实对称半正定矩阵（a real symmetric positivesemidefinite matrix），所以拉普拉斯矩阵满足：</p><ul><li>一定有<spanclass="math inline">\(N\)</span>个线性无关的特征向量；</li><li>特征值一定非负；</li><li>特征向量相互正交（特征向量组成的矩阵为正交矩阵）。</li></ul><p>因为特征向量组成的矩阵为正交阵，所以满足：<spanclass="math inline">\(U^T =U^{-1}\)</span>。因此，特征值与特征向量的公式<spanclass="math inline">\(L u_i = \lambda_i u_i\)</span>的矩阵形式 <spanclass="math inline">\(L U = U \Lambda\)</span>可以转换为： <spanclass="math inline">\(L=U \Lambda U^{-1} = U \LambdaU^T\)</span>，即拉普拉斯矩阵的特征分解。</p><p>通过拉普拉斯矩阵的特征分解（Eigen-decomposition of LaplacianMatrix），拉普拉斯矩阵具有一个完整的正交特征向量集合<spanclass="math inline">\(U \in \mathbb{R}^{N \timesN}\)</span>和特征值对角矩阵 <span class="math inline">\(\Lambda \in\mathbb{R}^{N \times N}\)</span> ： <span class="math display">\[L = U \Lambda U^T =\begin{bmatrix}     u_0 &amp; ... &amp; u_{N-1}\end{bmatrix}\begin{bmatrix}     \lambda_0 &amp; &amp; 0 \\     &amp; \ddots \\     0 &amp; &amp; \lambda_{N-1} \\\end{bmatrix}\begin{bmatrix}     u_0^T \\     \vdots \\     u_{N-1}^T\end{bmatrix}\]</span></p><p>拉普拉斯矩阵的<spanclass="math inline">\(N\)</span>个非负实数特征值，满足非递减性质： <spanclass="math display">\[0 = \lambda_0 &lt; \lambda_1 \le ... \lambda_{N-1}\]</span></p><p>拉普拉斯矩阵特征分解的<spanclass="math inline">\(N\)</span>个正交特征向量集合，即可作为该矩阵空间的正交基。每一个特征向量就代表一个基方向上的信号。把这个特征向量代入上述的计算信号频率的拉普拉斯二次型公式，正好可以推得特征向量的”频率“就是该特征向量对应的特征值：<span class="math display">\[f^T L f = u_i^T L u_i = u_i^T \lambda_i u_i = \lambda_i\]</span></p><p>因此，在该特征分解中，特征向量<span class="math inline">\(u_i \in\mathbb{R}^N\)</span>对应的特征值<spanclass="math inline">\(\lambda_i\)</span>被称为 <spanclass="math inline">\(u_i\)</span> 的频率（frequency）。</p><h3 id="图傅里叶分析">2.3 图傅里叶分析</h3><p><em>Graph Fourier Analysis</em></p><h4 id="图信号的傅里叶分解">2.3.1 图信号的傅里叶分解</h4><p>信号<span class="math inline">\(f \in\mathbb{R}^N\)</span>可以通过图傅里叶级数（Fourier series）进行表示：<span class="math display">\[f = \sum_{i=0}^{N-1} \hat{f_i} \cdot u_i = \sum_{i=0}^{N-1} (u_i^T f)u_i\]</span> 其中，<span class="math inline">\(u_i \in\mathbb{R}^N\)</span>表示图傅里叶模式（Fouriermode），在图傅里叶变换中是图谱拉普拉斯矩阵的特征向量；<spanclass="math inline">\(\hat{f_i} \in\mathbb{R}\)</span>表示图傅里叶系数（Fouriercoefficient），通过图傅里叶变换取得。</p><p>图信号的傅里叶分解指的是用<spanclass="math inline">\(N\)</span>个傅里叶模式向量，加权求和，表示图信号。</p><h4 id="图傅里叶变换">2.3.2 图傅里叶变换</h4><img src="/posts/GNNs-%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/graph_fourier_transform.png" class="" title="Graph Fourier Transform, GFT"><p>图傅里叶变换（Graph Fourier Transform,GFT）指的是将图信号从空域（spatial domain）中的空域信号<spanclass="math inline">\(f\)</span>变换到频域（spectraldomain）中的频域信号<span class="math inline">\(\hat{f} \in\mathbb{R}^N\)</span>： <span class="math display">\[\hat{f} = U^T f = [u_0^Tf, u_1^Tf, ... u_{N-1}^Tf]^T\]</span></p><p>其中，<span class="math inline">\(\lambda_l \in\mathbb{R}\)</span>表示频率，<span class="math inline">\(n\in[1,N]\)</span>表示图节点。</p><p>频域信号<spanclass="math inline">\(\hat{f}\)</span>实际上是傅里叶模式的权重，例如：<spanclass="math inline">\(\hat{f_i} \in \mathbb{R}\)</span>是傅里叶模式<spanclass="math inline">\(u_i\)</span>对应的权重，称为傅里叶系数。在此处的公式中，该傅里叶系数的计算原理实际上就是内积距离（相似度），即：<spanclass="math inline">\(\hat{f_i} = u_i^T f\)</span>，傅里叶系数 <spanclass="math inline">\(\hat{f_i}\)</span>实际上是傅里叶模式<spanclass="math inline">\(u_i\)</span>与空域信号<spanclass="math inline">\(f\)</span>之间的相似度。</p><p><strong>小结</strong>：图傅里叶变换将图信号<spanclass="math inline">\(f\)</span>转换为了正交基<spanclass="math inline">\(U=[u_1, u_2, ...u_N]\)</span>上的一组权重系数<spanclass="math inline">\(\hat{f}=[\hat{f_1}, \hat{f_2}, ...\hat{f_N}]\)</span>。</p><h4 id="逆图傅里叶变换">2.3.3 逆图傅里叶变换</h4><p>既然图信号<spanclass="math inline">\(f\)</span>能够通过正交基上的一组权重系数进行表示，那么通过这组系数重新对正交基加权求和，显然可以逆变换回去，还原出空域的图信号<spanclass="math inline">\(f\)</span>。</p><img src="/posts/GNNs-%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/inverse_graph_fourier_transform.png" class="" title="Inverse Graph Fourier Transform, IGFT"><p>逆图傅里叶变换（Inverse Graph Fourier Transform,IGFT）指的是将图信号从频域<spanclass="math inline">\(\hat{f}\)</span>变换回空域<spanclass="math inline">\(f\)</span>： <span class="math display">\[\begin{equation}\begin{split}f &amp; = U\hat{f} \\&amp; =[u_0, u_1, ... u_{N-1}]\begin{bmatrix}     \hat{f_0} \\     \hat{f_1} \\     \vdots \\     \hat{f_{N-1}}\end{bmatrix} \\&amp; = [u_0 \hat{f_0}, u_1 \hat{f_1}, ... u_{N-1} \hat{f_{N-1}}] \\&amp; = \sum_{i=0}^{N-1} u_i \hat{f_i}\end{split}\end{equation}\]</span></p><p><strong>小结</strong>：逆图傅里叶变换以<spanclass="math inline">\(\hat{f}\)</span>作为正交基<spanclass="math inline">\(U\)</span>上的权重系数对正交基向量进行加权求和，变回了原始空域信号<spanclass="math inline">\(f\)</span>。</p><h2 id="模型">3 模型</h2><h3 id="概述">3.1 概述</h3><p>图神经网络的目的在于解决图结构数据上的问题，而图结构数据的研究问题可分为两类：</p><ol type="1"><li>节点级（Node-level）：链路预测、节点分类等；</li><li>图谱级（Graph-level）：图谱分类等。</li></ol><img src="/posts/GNNs-%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/graph_filtering_and_pooling.png" class="" title="Graph Filtering and Pooling"><p>相应地，图神经网络模型中主要包含两类操作：</p><ol type="1"><li>滤波（Filtering）：取得节点表征（NodeRepresentation），用于解决节点级任务；</li><li>池化（Pooling）：降维取得图谱表征（GraphRepresentation），用于解决图谱级任务。</li></ol><p>当然，在神经网络中还需要包含必要的激活（Activation）操作。</p><img src="/posts/GNNs-%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/graph_filtering.png" class="" title="Graph Filtering"><p>图滤波操作不改变图结构和节点数量，而是对图节点的特征向量进行变换，起到优化节点特征的作用。</p><img src="/posts/GNNs-%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/graph_pooling.png" class="" title="Graph Pooling"><p>图池化操作会改变图结构和节点数量，池化操作减少了图中的节点数量，生成了一个更小的图，通常也伴随着特征向量的变换。</p><h3 id="gnn中的滤波">3.2 GNN中的滤波</h3><p>图神经网络模型的研究主要关注于图神经网络中的滤波操作。</p><img src="/posts/GNNs-%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/graph_filtering_studies.png" class="" title="Graph Filtering Studies"><p>图卷积操作主要分为两类：</p><ul><li>频域GNN（<em>Spectral-based GNN</em>)</li><li>空域GNN（<em>Spatial-based GNN</em>）</li></ul><h4 id="频域滤波">3.2.1 频域滤波</h4><p>首先，理解矩阵特征值与特征向量。</p><p>从Interactive Linear Algebra一书中，给出了清晰的可视化解释，</p><img src="/posts/GNNs-%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/eigenvalue_and_eigenvector.png" class="" title="Eigenvalue and eigenvector"><p>不难看出，<span class="math inline">\(Av=\lambdav\)</span>体现的意义是，<span class="math inline">\(Av\)</span>是和<spanclass="math inline">\(v\)</span>的同方向向量，长度是<spanclass="math inline">\(v\)</span>的<spanclass="math inline">\(\lambda\)</span>倍。因此，特征向量<spanclass="math inline">\(v\)</span>是<spanclass="math inline">\(A\)</span>空间中的一个方向分量，而<spanclass="math inline">\(\lambda\)</span>则体现了该方向向量<spanclass="math inline">\(v\)</span>的在变换矩阵<spanclass="math inline">\(A\)</span>中的重要性、权重。</p><p>具体地，在GNN频域滤波的语境中，基于谱图理论中拉普拉斯二次型的计算，特征值<spanclass="math inline">\(\lambda_i\)</span>被解释为相应特征向量<spanclass="math inline">\(v_i\)</span>的“频率”（frequency）。</p><p>因为拉普拉斯矩阵既可以表示图（graph）的特征（包含节点的度和邻接关系），又是实对称矩阵能够具备良好的特征分解性质，因此把图通过拉普拉斯矩阵进行表示。在拉普拉斯矩阵的特征分解<spanclass="math inline">\(L=U\LambdaU^T\)</span>中，取得了特征向量组成的正交基<spanclass="math inline">\(U=[u_1, u_2, ... u_N] \in \mathbb{R}^{N \timesN}\)</span>和特征值组成的对角矩阵<span class="math inline">\(\Lambda =diag(\lambda_1, \lambda_2, ... \lambda_N)\)</span>。</p><p>其中，对应特征值小，即“不重要”/“权重低”的特征向量被解释为“低频分量”，该特征向量表示的信号分量与整体信号相关性小，因此相邻节点之间，该信号分量波动不大，比较平滑，记录的是图中笼统的信息（信号整体的高低）；而对应特征值大，即“重要”/“权重高”的特征向量被解释为“高频分量”，该特征向量表示的信号分量与信号波动的相关性高，因此相邻节点之间，该信号分量波动大，相对也就不平滑，记录的是图中细节的信息（节点之间的信号波动差异）。</p><p>所谓频域滤波，就是根据频率决定是保留还是滤除该分量。例如：高通滤波（high-pass）就是滤除低频分量，通过高频分量；低通滤波（low-pass）就是滤除高频分量，通过低频分量。</p><p>具体地，在GNN的频域滤波语境中，滤波器就可以形式化为： <spanclass="math display">\[\hat{g}(\lambda_i) \in \mathbb{R}\]</span> 表示输入代表频率的特征值<spanclass="math inline">\(\lambda_i\)</span>，根据该输入，输出滤波后的权重。</p><p>例如，高通滤波就可以通过以下示例来表述： <spanclass="math display">\[\hat{g}(\lambda) =\begin{cases}1&amp; \lambda \ge threshold \\0&amp; \lambda &lt; threshold\end{cases}\]</span> 整体来看，对正交基<spanclass="math inline">\(U\)</span>中的特征向量<spanclass="math inline">\(u_i\)</span>，频域滤波的全过程形式化为： <spanclass="math display">\[f_i^{(filtered)} = u_i \hat{g}(\lambda_i) u_i^T f\]</span> 对所有信号<span class="math inline">\(f \in\mathbb{R}^N\)</span>，频域滤波的矩阵形式化为： <spanclass="math display">\[\begin{equation}\begin{split}f^{(filtered)} &amp; = U \hat{g}(\Lambda) U^T f \\&amp; =\begin{bmatrix}     u_0 &amp; ... &amp; u_{N-1}\end{bmatrix}\begin{bmatrix}     \hat{g}(\lambda_0) &amp; &amp; 0 \\     &amp; \ddots \\     0 &amp; &amp; \hat{g}(\lambda_{N-1}) \\\end{bmatrix}\begin{bmatrix}     u_0^T \\     \vdots \\     u_{N-1}^T\end{bmatrix}f \\&amp; =\begin{bmatrix}     u_0 &amp; ... &amp; u_{N-1}\end{bmatrix}\begin{bmatrix}     \hat{g}(\lambda_0) &amp; &amp; 0 \\     &amp; \ddots \\     0 &amp; &amp; \hat{g}(\lambda_{N-1}) \\\end{bmatrix}\begin{bmatrix}     \hat{f_0} \\     \vdots \\     \hat{f}_{N-1}\end{bmatrix} \\&amp; =\begin{bmatrix}     u_0 &amp; ... &amp; u_{N-1}\end{bmatrix}\begin{bmatrix}     \hat{g}(\lambda_0) \hat{f_0} \\     \vdots \\     \hat{g}(\lambda_{N-1}) \hat{f}_{N-1} \\\end{bmatrix} \\&amp; =u_0 \hat{g}(\lambda_0) \hat{f_0} + ... + u_{N-1} \hat{g}(\lambda_{N-1})\hat{f}_{N-1} \\&amp; =\sum_{i=0}^{N-1}u_i \hat{g}(\lambda_i) \hat{f_i}\end{split}\end{equation}\]</span> 输出的滤波后的信号为<span class="math inline">\(f^{(filtered)}\in \mathbb{R}^N\)</span>。</p><p>根据矩阵乘法的计算顺序，从右往左依次为：</p><ol type="1"><li><strong>傅里叶变换</strong>：对信号 <spanclass="math inline">\(f\)</span> 进行傅里叶变换，取得相应于傅里叶模式<span class="math inline">\(u_i\)</span> 的傅里叶系数 <spanclass="math inline">\(\hat{f_i} = u_i^T f\)</span> （或 <spanclass="math inline">\(\hat{f} = U^T f\)</span> ）；</li><li><strong>滤波</strong>：傅里叶变换得到了傅里叶模式 <spanclass="math inline">\(u_i\)</span> 的傅里叶系数 <spanclass="math inline">\(\hat{f_i}\)</span>，那该傅里叶模式（即特征向量）是不是我们想要保留的呢？通过滤波，就可以根据该傅里叶模式（即特征向量）对应的频率（即特征值）进行滤波<span class="math inline">\(\hat{g}(\lambda_i) u_i^T f\)</span>（或<spanclass="math inline">\(\hat{g}(\Lambda) U^T f\)</span>）；</li><li><strong>逆傅里叶变换</strong>：将滤波过的傅里叶系数 <spanclass="math inline">\(\hat{g}(\lambda_i) \hat{f_i}\)</span>乘以对应的傅里叶分量（特征向量）<spanclass="math inline">\(u_i\)</span>，逆傅里叶变换为滤波过的空域信号<spanclass="math inline">\(f_i^{(filtered)}\)</span>（或<spanclass="math inline">\(f^{(filtered)}\)</span>）。</li></ol><img src="/posts/GNNs-%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/graph_spectral_filter_for_multichannel.png" class="" title="Graph Spectral Filter for Multi-channel"><p><strong>推广</strong>：推广到多通道信号的情况，每个节点信号均为<spanclass="math inline">\(d_1\)</span>维向量（通道）的<spanclass="math inline">\(N\)</span>个节点的图谱，即输入的空域图谱信号<spanclass="math inline">\(f \in \mathbb{R}^{N \timesd_1}\)</span>，频域滤波类似地可形式化为： <span class="math display">\[f^{(filtered)} = U\begin{bmatrix}\sum_{i=1}^{d_1} \hat{g_{i,1}}(\Lambda) U^T f_{:,i} &amp; \dots &amp;\sum_{i=1}^{d_1} \hat{g_{i,d_2}}(\Lambda) U^T f_{:,{i}}\end{bmatrix}\]</span> 输出的滤波后的信号为<span class="math inline">\(f^{(filtered)}\in \mathbb{R}^{N \timesd_2}\)</span>。也就是说，频域滤波不仅对信号进行了滤波，还可以调整输出的每个节点的信号维度（<spanclass="math inline">\(\mathbb{R}^{N\times d_1} \to \mathbb{R}^{ N \timesd_2}\)</span>）。</p><p><strong>分析滤波器参数规模</strong>：不难发现，从一个通道到另一个通道的频域滤波（即上图的一个箭头）对应一个滤波器。那么，从<spanclass="math inline">\(d_1\)</span>个通道到<spanclass="math inline">\(d_2\)</span>个通道的滤波变换，就需要有<spanclass="math inline">\(d_1 \times d_2\)</span>个滤波器<spanclass="math inline">\(\hat{g}(\Lambda)\)</span>，每个滤波器为对角阵，包含<spanclass="math inline">\(N\)</span>个参数。因此，该频域滤波的滤波器参数规模为<spanclass="math inline">\(d_1 \times d_2 \times N\)</span>。</p><h4 id="空域滤波">3.2.2 空域滤波</h4><p>空域滤波的概念比较符合人的直觉，就是以节点在空域中的邻接节点作为其邻域，对该邻域做加权求和（卷积）即可。基于邻域的空域滤波可形式化为：<span class="math display">\[f_j^{(filtered)} = \sum_{i=0}^{N-1} F_{i,j} f_i\]</span> 遍历节点<spanclass="math inline">\(j\)</span>的邻域，对领域中的的每一个节点<spanclass="math inline">\(i\)</span>，都通过空域滤波器<spanclass="math inline">\(F \in \mathbb{R}^{N \timesN}\)</span>来对节点<spanclass="math inline">\(i\)</span>的信号进行滤波。通过对邻域内的所有节点信号进行滤波加权平均，取得节点<spanclass="math inline">\(j\)</span>的空域滤波结果。</p><p>对滤波结果，往往通过激活函数进行非线性变换，以及通过池化进行进一步处理，形式化为：<span class="math display">\[f_j^{pooled} = pooling(activation(f_j^{(filtered)}))\]</span></p><h4 id="具体模型">3.2.3 具体模型</h4><h5 id="gnn">3.2.3.1 GNN</h5><p>【空域滤波】</p><blockquote><p>Scarselli F, Tsoi A C, Gori M, et al. Graphical-based learningenvironments for pattern recognition[C]//Joint IAPR InternationalWorkshops on Statistical Techniques in Pattern Recognition (SPR) andStructural and Syntactic Pattern Recognition (SSPR). Springer, Berlin,Heidelberg, 2004: 42-56.</p></blockquote><p>图神经网络的概念最早由Franco Scarselli等人于2004年提出。</p><p>Scarselli等人在后续的论文中又反复研究了图神经网络的理论及应用。</p><blockquote><p>Scarselli F, Yong S L, Gori M, et al. Graph neural networks forranking web pages[C]//The 2005 IEEE/WIC/ACM International Conference onWeb Intelligence (WI'05). IEEE, 2005: 666-672.</p></blockquote><blockquote><p>Scarselli F, Gori M, Tsoi A C, et al. The graph neural networkmodel[J]. IEEE Transactions on Neural Networks, 2008, 20(1): 61-80.</p></blockquote><p>首次提出的GNN将graph映射到一个实数向量，具体分两种： 1.graph-focused: 关注图结构，而无视涉及到的节点属性； 2. node-focused:根据节点属性将图映射到向量。</p><p>最早的GNN的核心思想是，用一个实数向量<spanclass="math inline">\(x_n\)</span>来表示节点<spanclass="math inline">\(n\)</span>的状态（state）。</p><p>该状态向量<spanclass="math inline">\(x_n\)</span>取决于其领域中的信息，包含： 1. <spanclass="math inline">\(n\)</span>的标签； 2. <spanclass="math inline">\(n\)</span>的连接边的标签； 3. <spanclass="math inline">\(n\)</span>的邻居节点的状态向量和标签。</p><p>具体计算公式为： <span class="math display">\[x_n = \sum_{u\in ne[n]} h_w(l_n, x_u, l_u), n\in N.\]</span> 在该式中，节点<spanclass="math inline">\(n\)</span>的状态取决于： 1. <spanclass="math inline">\(l_n\)</span>，节点<spanclass="math inline">\(n\)</span>的标签（Label）； 2. <spanclass="math inline">\(x_u\)</span>，邻居节点<spanclass="math inline">\(u\)</span>的状态； 3. <spanclass="math inline">\(l_u\)</span>，邻居节点<spanclass="math inline">\(u\)</span>的标签。</p><p>显然，节点<spanclass="math inline">\(n\)</span>的状态是通过对节点自身以及邻域节点的信息进行滤波取得的，属于空域滤波。</p><h5 id="spectral-graph-cnn">3.2.3.2 Spectral Graph CNN</h5><p>【频域滤波】</p><blockquote><p>Bruna J, Zaremba W, Szlam A, et al. Spectral networks and locallyconnected networks on graphs[J]. arXiv preprint arXiv:1312.6203,2013.</p></blockquote><p>这篇论文主要研究如何把CNN用到图谱的处理上去。可以理解为这是第一代的GCN。</p><p>可以说是GCN的早期研究。论文给出了两种滤波方式，分别对应空域滤波和频域滤波。</p><p>论文写的在我看来写得比较晦涩，而且公式琢磨着总感觉有小错误，原理可以参考上述3.2.1和3.2.2分别介绍的频域滤波和空域滤波，是一致的。</p><p>在这篇论文中，滤波器就是简单地套上了拉普拉斯矩阵的特征值（加了层非线性变换激活函数），作为初代设计，比较简单粗暴，仅仅使用参数<spanclass="math inline">\(\theta\)</span>来近似滤波器函数： <spanclass="math display">\[\hat{g}(\Lambda) = diag(\hat{g}(\lambda_0), ..., \hat{g}(\lambda_{N-1}))= diag(\theta_0, ..., \theta_{N-1})\]</span> 展开表示，就是： <span class="math display">\[\hat{g}(\Lambda) =\begin{bmatrix}\hat{g}(\lambda_0) &amp; &amp; 0 \\&amp; \ddots &amp; \\0 &amp; &amp; \hat{g}(\lambda_{N-1})\\\end{bmatrix} =\begin{bmatrix}\theta_0 &amp; &amp; 0 \\&amp; \ddots &amp; \\0 &amp; &amp; \theta_{N-1} \\\end{bmatrix}\]</span> 此处的<span class="math inline">\(\theta \in\mathbb{R}^{N}\)</span>是模型的可学习参数。</p><p>这种滤波器设计相当于是为每一个节点都计算一个频域滤波值。</p><p>不难看出，每个滤波器（卷积核）包含<spanclass="math inline">\(N\)</span>个参数<span class="math inline">\(\theta\in \mathbb{R}^N\)</span>，这个<spanclass="math inline">\(N\)</span>取决于数据规模，一旦节点规模很大，滤波器的参数量就会跟着很大。如果要实现输入<spanclass="math inline">\(f_{in} \in \mathbb{R}^{N \timesd_1}\)</span>到<span class="math inline">\(f_{out} \in \mathbb{R}^{N\times d_2}\)</span>的频域滤波，就需要<span class="math inline">\(d_1\times d_2 \times N\)</span>的滤波器参数规模。</p><p><strong>缺陷</strong>：</p><p>1.滤波函数<strong>近似效果差</strong>；</p><p>2.滤波器完全依赖于训练时的图谱，<strong>无法迁移变通</strong>，每一个滤波值都是和对应节点绑定的；</p><p>3.模型<strong>参数规模庞大</strong>，因为一个图谱的节点数量<spanclass="math inline">\(N\)</span>往往是很大的。</p><h5 id="chebnet">3.2.3.3 ChebNet</h5><p>【频域滤波】</p><blockquote><p>Defferrard M, Bresson X, Vandergheynst P. Convolutional neuralnetworks on graphs with fast localized spectral filtering[C]//Advancesin neural information processing systems. 2016: 3844-3852.</p></blockquote><p>这篇论文主要研究在把CNN用到图谱的频域滤波的基础之上，如何改进滤波器的设计。可以理解为这是第二代的GCN。</p><p>ChebNet中，首先定义使用的拉普拉斯矩阵不再是基本的<spanclass="math inline">\(L=D-A\)</span>，而是规格化（normalized）拉普拉斯矩阵，即：<spanclass="math inline">\(L = I_N - D^{-1/2} A D^{-1/2}\)</span>。</p><p><strong>使用多项式函数近似滤波器函数</strong></p><p>所谓多项式（<span class="math inline">\(K\)</span>阶），就是： <spanclass="math display">\[p_k(x) = \sum_{k=0}^K \theta_k x^k= \theta_0 + \theta_1 x + \theta_2 x^2 + \dots + \theta_K x^K\]</span> 通过多项式来近似滤波器，作为滤波器，形式化表示为： <spanclass="math display">\[\hat{g}(\Lambda) =\sum_{k=0}^{K-1} \theta_k \Lambda^k=\begin{bmatrix}\sum_{k=0}^{K-1} \theta_k \lambda_0^k &amp; &amp; 0 \\&amp; \ddots &amp; \\0 &amp; &amp; \sum_{k=0}^{K-1} \theta_k \lambda_{N-1}^k\\\end{bmatrix}\]</span> 由于通过多项式函数来近似滤波器，参数就只有<spanclass="math inline">\(K\)</span>个，即<spanclass="math inline">\([\theta_0, ... ,\theta_{K-1}]\)</span>，在模型训练过程中被优化。这意味着卷积核（滤波器）的参数规模不再受数据规模<spanclass="math inline">\(N\)</span>影响。每个滤波器<spanclass="math inline">\(K\)</span>个参数，意味着从<spanclass="math inline">\(d_1\)</span>个通道到<spanclass="math inline">\(d_2\)</span>个通道的滤波映射，需要<spanclass="math inline">\(d_1 \times d_2 \timesK\)</span>的参数规模。在实践中，相较于<span class="math inline">\(d_1\times d_2 \timesN\)</span>是大大减小了。而且，滤波器参数与节点数量<spanclass="math inline">\(N\)</span>脱钩，还使得训练出的滤波器，使用上不再仅限于当前图谱，而是可适应图谱节点数量、图谱结构的变化。</p><p>而且巧的是，使用这个滤波器来滤波傅里叶变换的频域信号，特征值矩阵和特征向量矩阵相乘，刚好就还原了拉普拉斯矩阵（<spanclass="math inline">\(U \Lambda^k U^T =L^k\)</span>），也就是说——不需要再计算拉普拉斯矩阵特征分解了，一下子减少了计算代价。频域滤波过程推导如下：<span class="math display">\[U \hat{g}(\Lambda) U^T f= U \sum_{k=0}^{K-1} \theta_k \Lambda^k U^T f= \sum_{k=0}^{K-1} \theta_k L^k f\]</span> 解释一下，因为<spanclass="math inline">\(U\)</span>是正交阵，满足<spanclass="math inline">\(U^T = U^{-1}\)</span>，所以此处涉及的数学原理是：<span class="math display">\[U \Lambda^k U^T = (U \Lambda U^T)(U \Lambda U^T)\dots(U \Lambda U^T) =L^k\]</span>可见，对于多项式形式的滤波器，拉普拉斯矩阵的特征分解刚好被还原了，所以只需要计算拉普拉斯矩阵的幂就可以了。</p><p>另外，拉普拉斯矩阵<spanclass="math inline">\(L\)</span>体现的是图节点之间的直接的邻接关系，而<spanclass="math inline">\(L^K\)</span>则体现了图节点之间的<spanclass="math inline">\(K\)</span>跳内的连通关系。因此，<spanclass="math inline">\(\sum_{k=0}^{K-1} \theta_kL^k\)</span>意味着计入了从1跳到K跳的节点间联通关系。这使得多项式参数滤波器能够准确地将滤波作用定位于半径为<spanclass="math inline">\(K\)</span>跳的邻域范围内。</p><p><strong>使用切比雪夫多项式近似滤波器函数</strong></p><p>以上解释了多项式滤波器相较于简单的参数滤波器的好处，ChebNet则是把一般多项式<spanclass="math inline">\(p_K(x) = \sum_{k=0}^{K-1}\theta_kx^k\)</span>替换为了切比雪夫多项式<span class="math inline">\(T_K(x) =\sum_{k=0}^{K-1} \theta_k T_k(x)\)</span>。</p><p>在输入参数上，ChebNet对切比雪夫多项式<spanclass="math inline">\(T_k(x)\)</span>的输入参数<spanclass="math inline">\(x\)</span>进行了缩放（scale）处理。因为当<spanclass="math inline">\(x \in [-1,1]\)</span>时，切比雪夫多项式<spanclass="math inline">\(T_k(x)\)</span>满足三角函数表达式<spanclass="math inline">\(T_k(x) = \cos(k\arccos(x))\)</span>。这个数学性质使得切比雪夫多项式的值域能够稳定在上界为1，下界为-1的区间内，即使得<spanclass="math inline">\(T_k(x) \in [-1,1]\)</span>。</p><blockquote><p>数学参阅：2011 Wavelets on graphs via spectral graph theory</p></blockquote><p>具体地，在ChebNet中，切比雪夫多项式的输入参数<spanclass="math inline">\(\tilde{\Lambda}\)</span>是一个缩放对角阵： <spanclass="math display">\[\tilde{\Lambda} = \frac{2 \Lambda}{\lambda_{max}} - I_N\]</span> 该<spanclass="math inline">\(\tilde{\Lambda}\)</span>是对拉普拉斯特征值对角阵<spanclass="math inline">\(\Lambda\)</span>进行缩放的结果，将特征值从<spanclass="math inline">\([0,\lambda_{max}]\)</span>缩放至<spanclass="math inline">\([-1,1]\)</span>以满足上述性质。</p><p>这样一来，滤波器<spanclass="math inline">\(\hat{g}(\Lambda)\)</span>被修改为<spanclass="math inline">\(\hat{g}(\tilde{\Lambda})\)</span>： <spanclass="math display">\[\hat{g}(\tilde{\Lambda}) =\sum_{k=0}^{K-1} \theta_k T_k(\tilde{\Lambda}) =\begin{bmatrix}\sum_{k=0}^{K-1} \theta_k T_k(\tilde{\lambda}_0) &amp; &amp; 0 \\&amp; \ddots &amp; \\0 &amp; &amp; \sum_{k=0}^{K-1} \theta_k T_k(\tilde{\lambda}_{N-1}) \\\end{bmatrix}\]</span></p><p>其中，<span class="math inline">\(k\)</span>阶切比雪夫多项式<spanclass="math inline">\(T_k(x)\)</span>定义为： <spanclass="math display">\[T_k(x) = 2xT_{k-1}(x) - T_{k-2}(x)\]</span> 切比雪夫多项式是递归定义的多项式，它的初始项<spanclass="math inline">\(T_0 = 1\)</span>，<span class="math inline">\(T_1= x\)</span>。</p><p>同样地，切比雪夫多项式虽然是递归定义的，但代入展开后也是一种多项式，也满足一般多项式所具备的省去矩阵特征分解的计算代价、K跳局部性的特性。</p><p>将该滤波器代入频域滤波函数，可推得： <span class="math display">\[f^{(filtered)} = U \hat{g}(\tilde{\Lambda}) U^T f= U \sum_{k=0}^{K-1}\theta_k T_k(\tilde{\Lambda}) U^T f= \sum_{k=0}^{K-1}\theta_k T_k(\tilde{L}) f= \hat{g}(\tilde{L}) f\]</span> 其中，<spanclass="math inline">\(\tilde{L}\)</span>是对拉普拉斯矩阵的缩放结果：<span class="math display">\[\tilde{L} = \frac{2 L}{\lambda_{max}} - I_N\]</span></p><p><strong>延伸问题：为什么要用切比雪夫多项式呢？</strong></p><p>以下示例参阅：</p><blockquote><p>Hammond D K, Vandergheynst P, Gribonval R. Wavelets on graphs viaspectral graph theory[J]. Applied and Computational Harmonic Analysis,2011, 30(2): 129-150.</p></blockquote><p>数学理论由来参阅：</p><blockquote><p>Geddes K O. Near-minimax polynomial approximation in an ellipticalregion[J]. SIAM Journal on Numerical Analysis, 1978, 15(6):1225-1233.</p></blockquote><p>涉及到数学层面的分析，大概的感性理解是，一般多项式在系数变化时，扰动大，而切比雪夫多项式更加抗扰动。尤其是目标函数变化比较平缓时，切比雪夫多项式要平缓的多，近似误差小得多。</p><p>对<span class="math inline">\(f(x)\)</span>目标函数的<spanclass="math inline">\(n+2\)</span>个采样点<spanclass="math inline">\([x_1, x_2, \dots,x_{n+2}]\)</span>进行近似时，极小极大近似算法（<ahref="https://en.wikipedia.org/wiki/Minimax_approximation_algorithm">minimaxapproximation algorithm</a>），典型代表如：<ahref="https://en.wikipedia.org/wiki/Remez_algorithm"><strong>Remezalgorithm</strong>（<strong>Remez exchangealgorithm</strong>）</a>可以使得<spanclass="math inline">\(n\)</span>阶多项式<spanclass="math inline">\(P_n(x)=a_0 + a_1 x + a_2 x^2 + \dots + a_nx^n\)</span>对目标函数实现minimax近似（最小化最大误差，使<spanclass="math inline">\(n+2\)</span>个采样点的最大误差最小化），形式化为，解线性方程系统：<span class="math display">\[a_0 + a_1 x_i + a_2 x_i^2 + \dots + a_n x_i^n + (-1)^i E =f(x)\qquad(where\quad i=1,2,\dots,n+2)\]</span> 其中<span class="math display">\[a_0, a_1, \dots,a_n\]</span>是多项式<spanclass="math display">\[P_n(x)\]</span>的多项式系数。</p><img src="/posts/GNNs-%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/minimax_and_chebyshev_polynomial.png" class="" title="Minimax Polynomial vs. Truncated Chebyshev polynomial"><p>如图：</p><ul><li>左图(a)中，黑色表示目标函数，为小波核函数<spanclass="math inline">\(g(\lambda)\)</span>，蓝色表示截断切比雪夫展开式（truncatedChebyshev expansion），红色表示minimax多项式近似。</li><li>右图(b)中，表示的是两个近似函数，即截断切比雪夫展开式和minimax多项式，与目标函数的近似误差。</li></ul><p>左图(a)中，近似函数与目标函数看起来“相交”的地方，就是采样点位置，经过近似计算，这些采样点的位置的近似误差很小。而采样点之外的地方，近似函数和目标函数可能高度拟合，也可能出现大幅震荡（参考数值计算中的“龙格现象（Rungephenomenon）”）。</p><p>进一步查看右图(b)不难发现，以2011年这篇论文研究的小波核为例，截断切比雪夫展开式（蓝色）的最大误差只比真正的minimax多项式（红色）略大一点。但是，在目标函数变化比较平滑的部分，截断切比雪夫展开式的近似误差比minimax多项式的近似误差要低得多。因为其近似出的多项式函数更加平滑，不像minimax多项式那样频繁大幅震荡。</p><h5 id="gcn">3.2.3.4 GCN</h5><p>【频域滤波】</p><blockquote><p>Kipf T N, Welling M. Semi-supervised classification with graphconvolutional networks[J]. arXiv preprint arXiv:1609.02907, 2016.</p></blockquote><p><strong>Graph Convolutional Network (GCN)</strong></p><p>本文提出图卷积网络，实际上并不算是第一个图谱上的卷积网络。上述的SpectralGraph CNN和ChebNet等工作都是图卷积网络的研究工作。</p><p>本文的GCN主要是对ChebNet进行了一系列简化和改进。</p><p>简化改进的目的，是为了建立深层的神经网络，即，简化每一层的计算复杂度，从而让深层的图卷积成为可能。</p><p>如上文所述，ChebNet通过切比雪夫多项式来近似滤波器函数<spanclass="math inline">\(\hat{g}(\Lambda)\)</span>，已经推得了： <spanclass="math display">\[f^{(filtered)} = U^T \hat{g}(\tilde{\Lambda}) U f= U^T \sum_{k=0}^{K}\theta_k T_k(\tilde{\Lambda}) U f= \sum_{k=0}^{K}\theta_k T_k(\tilde{L}) f= \hat{g}(\tilde{L}) f\]</span> 其中，<span class="math inline">\(\tilde{\Lambda} = \frac{2\Lambda}{\lambda_{max}} - I_N\)</span>，<spanclass="math inline">\(\tilde{L} = \frac{2 L}{\lambda_{max}} -I_N\)</span>。</p><p>本文的GCN所作出的具体的改变为：</p><p><strong>简化1：一阶切比雪夫多项式及系数约束</strong></p><p>GCN将切比雪夫展开式限制为1阶，即<spanclass="math inline">\(K=1\)</span>，则滤波器函数表示为： <spanclass="math display">\[g(\lambda) = \sum_{k=0}^1 \theta_k T_k(\lambda)= \theta_0 T_0(\lambda) + \theta_1 T_1(\lambda)= \theta_0 + \theta_1 \lambda\]</span> 对于一阶切比雪夫多项式，GCN还增加了限制条件，限定<spanclass="math inline">\(\theta = \theta_0 = -\theta_1\)</span>，使参数只剩<span class="math inline">\(\theta \in\mathbb{R}\)</span>一项。滤波器函数表示为： <spanclass="math display">\[g(\lambda) = \theta - \theta \lambda = \theta(1 - \lambda)\]</span> <strong>简化2：特征值约束</strong></p><p>GCN将特征值的最大值限定为2，即<spanclass="math inline">\(\lambda_{max} = 2\)</span>。</p><p>这样的约束使得缩放拉普拉斯矩阵<spanclass="math inline">\(\tilde{L}\)</span>进一步简化为： <spanclass="math display">\[\tilde{L} = L - I_N = (I_N - D^{-1/2} A D^{-1/2}) - I_N = - D^{-1/2} AD^{-1/2}\]</span></p><p>简化到这一步，基于以上限制条件，完整的滤波函数可推得： <spanclass="math display">\[f^{(filtered)} = \hat{g}(\tilde{L}) f= \theta (I_N - \tilde{L})= \theta (I_N + D^{-1/2} A D^{-1/2}) f\]</span> <strong>简化3：重规格化技巧</strong></p><p>作者提出了一项重规格化技巧（renormalizationtrick），使得滤波计算进一步简化。该技巧形式化为： <spanclass="math display">\[I_N + D^{-1/2} A D^{-1/2} \to \tilde{D}^{-1/2} \tilde{A}\tilde{D}^{-1/2}\]</span> 其中，<span class="math inline">\(\tilde{A} = A +I_N\)</span>，度矩阵基于邻接矩阵计算，也改为<spanclass="math inline">\(\tilde{D}_{ii} = \sum_{j}\tilde{A}_{ij}\)</span>。</p><p>经过该技巧的进一步简化，GCN每层的滤波函数就变为： <spanclass="math display">\[f^{(filtered)} = \hat{g}(\tilde{L}) f= \theta (I_N - \tilde{L})= \theta (I_N + D^{-1/2} A D^{-1/2}) f= \theta (\tilde{D}^{-1/2} \tilde{A} \tilde{D}^{-1/2}) f\]</span> <strong>最终形式</strong></p><p>GCN可以用于多通道的信号处理，对于从<spanclass="math inline">\(d_1\)</span>个通道的输入信号到<spanclass="math inline">\(d_2\)</span>个通道的输出信号的滤波映射，GCN的一层可形式化为以下矩阵形式：<span class="math display">\[Z = \tilde{D}^{-1/2} \tilde{A} \tilde{D}^{-1/2} X \Theta\]</span></p><p>其中：</p><ul><li><span class="math inline">\(X \in \mathbb{R}^{N \timesd_1}\)</span>表示频域滤波前的输入信号；</li><li><span class="math inline">\(\Theta \in \mathbb{R}^{d_1 \timesd_2}\)</span>表示<span class="math inline">\(d_1 \timesd_2\)</span>个滤波的参数；</li><li><span class="math inline">\(Z \in \mathbb{R}^{N \timesd_2}\)</span>表示频域滤波后的输出信号。</li></ul><img src="/posts/GNNs-%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/graph_convolutional_network.png" class="" title="Graph Convolutional Network"><p>由此，就可以建立多层的GCN网络，以2层的GCN网络为例： <spanclass="math display">\[Z = f(X, A) = softmax(\hat{A}\; \mathrm{ReLU}(\hat{A} X W^{(0)})W^{(1)})\]</span> 其中，<span class="math inline">\(\hat{A} = \tilde{D}^{-1/2}\tilde{A} \tilde{D}^{-1/2}\)</span>。</p><p>GCN可以用于实现半监督学习，即，以有标签的节点来计算损失，进行训练。具体的，论文中基于有标签节点计算交叉熵损失：<span class="math display">\[\mathcal{L} = - \sum_{l \in \mathcal{Y}_L} \sum_{f=1}^F Y_{lf} \lnZ_{lf}\]</span> 其中，<spanclass="math inline">\(\mathcal{Y}_L\)</span>是有标签的节点序号集合。</p><p><strong>实验评价</strong></p><img src="/posts/GNNs-%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/GCN_propagation_comparison_table.png" class="" title="Comparison of propagation models"><p>本文设计的GCN做出的简化到底有没有意义呢？从实验结果来看，简化整体上提升了实验效果。</p><img src="/posts/GNNs-%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/GCN_classification_accuracy_summary.png" class="" title="Summary of results in terms of classification accuracy (in percent)"><p>相比其他模型，GCN在几个数据集上的分类准确率结果均为领先，而且速度更快。</p><h5 id="graphsage">3.2.3.5 GraphSage</h5><h5 id="gat">3.2.3.6 GAT</h5><h5 id="mpnn">3.2.3.7 MPNN</h5><h3 id="gnn中的池化">3.3 GNN中的池化</h3><h4 id="gpool">3.3.1 gPool</h4><h4 id="diffpool">3.3.2 DiffPool</h4><h4 id="eigenpooling">3.3.3 Eigenpooling</h4><h3 id="gnn的鲁棒性">3.4 GNN的鲁棒性</h3><p><em>Robustness of GNN</em></p><h3 id="gnn的扩展学习">3.5 GNN的扩展学习</h3><p><em>Scalable Learning for GNN</em></p><h2 id="应用">4 应用</h2><h3 id="医疗保健">4.1 医疗保健</h3><h3 id="自然语言处理">4.2 自然语言处理</h3><h3 id="推荐系统">4.3 推荐系统</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Papers </tag>
            
            <tag> Deep Learning </tag>
            
            <tag> GNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“Windows Defender发现1个威胁”问题解决</title>
      <link href="/posts/%E2%80%9CWindows-Defender%E5%8F%91%E7%8E%B01%E4%B8%AA%E5%A8%81%E8%83%81%E2%80%9D%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/posts/%E2%80%9CWindows-Defender%E5%8F%91%E7%8E%B01%E4%B8%AA%E5%A8%81%E8%83%81%E2%80%9D%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>WindowsDefender快速扫描提示发现1个威胁，但点进去却没有详情，也无法采取任何措施。经查疑似与阿里系软件有关。</p><span id="more"></span><h1 id="windows-defender发现1个威胁问题解决">“WindowsDefender发现1个威胁”问题解决</h1><h2 id="问题描述">1 问题描述</h2><p>WindowsDefender会定期自动进行快速扫描，每次都提示发现1个威胁，但点进去后又不给出任何详细信息，只是显示“当前没有威胁”。在“允许的威胁”和“保护历史记录”中，都没有任何记录。</p><h2 id="解决方案">2 解决方案</h2><p>经过搜索，根据网上的讨论，<strong>普遍反映是阿里系软件造成的</strong>，如：阿里旺旺【<ahref="https://www.zhihu.com/question/326283146/answer/821519204">知乎问答</a>】。实验者安装全新系统并验证WindowsDefender扫描结果无威胁后，安装阿里旺旺，重新扫描后发现出现该问题。</p><p>但我的电脑没有安装过阿里旺旺，之前倒是装过阿里的虾米音乐，但卸载后仍存在问题。</p><p>查阅大量链接后，发现一个<ahref="https://superuser.com/">superuser.com</a>上的讨论：</p><blockquote><p><ahref="https://superuser.com/questions/1431730/windows-defender-found-one-threat-but-wont-allow-me-to-take-action">WindowsDefender found one threat, but won't allow me to take action</a></p></blockquote><p>具体地，可以通过位于<code>C:\Program Files\Windows Defender\MpCmdRun.exe</code>的<code>MpCmdRun</code>来输出日志：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Users</span>\<span class="title">shenj</span>&gt;<span class="title">cd</span> <span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Windows</span> <span class="title">Defender</span>\</span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Program</span> <span class="title">Files</span>\<span class="title">Windows</span> <span class="title">Defender</span>&gt;.\<span class="title">MpCmdRun.exe</span> -<span class="title">Restore</span> -<span class="title">ListAll</span></span></span><br></pre></td></tr></table></figure><p>将会输出WindowsDefender的日志（MPLog），其中有一个注册表项：显示为<code>rootcert</code>的<code>65439929B67973EB192D6FF243E6767ADF0834E4</code>。</p><p>在注册表中删除该注册表项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\SystemCertificates\ROOT\Certificates\65439929B67973EB192D6FF243E6767ADF0834E4</span><br></pre></td></tr></table></figure><p>重新运行WindowsDefender快速扫描，即不会再出现“发现1个威胁”而无详情、无法采取措施的情况了。</p><p>原因据分析为：</p><blockquote><p><a href="https://superuser.com/a/1457410">answer atsuperuser.com</a></p><p>I managed to resolve a similar issue, even I am not sure if this isyour case too. This is caused by installing a software called Aliwangwang which is developed by Alibaba. A lot of Chinese users have thisissue but they don't have a solution. Even uninstalled this software,the problem persists.</p><p>I set up a virtual machine and compared the registries before andafter installing Ali Wangwang. The software made a number ofmodifications to the registry, but I noticed that there are one hashcode which also appeared in the logs of windows defender(MPLog). Iremoved the the key with that hash code and the problem is gone!Computer_LOCAL_MACHINE\65439929B67973EB192D6FF243E6767ADF0834E4</p><p>This seems to be a certificate issued by Symantec, named SysmantecTime Stamping Service Signer. I don't understand why this is causing theproblem, and I am also not sure if I just "skipped" some scan which issupposed to be conducted? If someone knows about it, please share,thanks!</p><p>One thing for sure, there is no registry key like this on another PCor a new setup VM with Windows 10.</p></blockquote><p>一方面，WindowsDefender的软件交互实现堪忧，这种一边报发现威胁，一边却不给用户显示任何详情和措施选项。另一方面，看起来阿里的代码质量还有进步空间。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> Windows </tag>
            
            <tag> Antivirus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch报CUDA error: no kernel image is available for execution on the device问题解决</title>
      <link href="/posts/PyTorch%E6%8A%A5CUDA-error-no-kernel-image-is-available-for-execution-on-the-device%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/posts/PyTorch%E6%8A%A5CUDA-error-no-kernel-image-is-available-for-execution-on-the-device%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>PyTorch 1.3版本，提高了对CUDA设备的ComputeCapability等级的最低要求，导致在较为老旧的GPU型号上，部分计算操作无法执行。</p><span id="more"></span><h1id="pytorch报cuda-error-no-kernel-image-is-available-for-execution-on-the-device问题解决">PyTorch报CUDAerror: no kernel image is available for execution on thedevice问题解决</h1><h2 id="问题描述">1 问题描述</h2><p>排查TensorBoard的问题时，我尝试了更新PyTorch版本，更新到了最新的1.3.1。</p><p>在运行使用了ResNet的代码时，此前一直正常，但这次却出现了CUDAerror的报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RuntimeError: CUDA error: no kernel image is available for execution on the device</span><br></pre></td></tr></table></figure><p>CUDA报错提示没有支持程序在当前设备上执行的内核镜像。</p><p>我写了段最小化测试用例来测试CUDA功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> IPython</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(torch.cuda.is_available())</span><br><span class="line"></span><br><span class="line">image = np.random.random(size=[<span class="number">2</span>, <span class="number">3</span>, <span class="number">224</span>, <span class="number">224</span>])</span><br><span class="line">image.dtype = <span class="string">&#x27;float32&#x27;</span></span><br><span class="line"></span><br><span class="line">image_tensor = torch.from_numpy(image).cuda()</span><br><span class="line"></span><br><span class="line">model = models.resnet50(pretrained=<span class="literal">True</span>)</span><br><span class="line">model = model.cuda()</span><br><span class="line"></span><br><span class="line">out = model(image_tensor)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># IPython.embed()</span></span><br></pre></td></tr></table></figure><p>执行仍旧报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(pytorch) D:\Codes\PyTorchTest&gt;C:/Users/jyshen/Anaconda3/envs/pytorch/python.exe d:/Codes/PyTorchTest/resnet_test.py</span><br><span class="line">True</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;d:/Codes/PyTorchTest/resnet_test.py&quot;, line 18, in &lt;module&gt;</span><br><span class="line">    out = model(image_tensor)</span><br><span class="line">  File &quot;C:\Users\jyshen\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\modules\module.py&quot;, line 541, in __call__</span><br><span class="line">    result = self.forward(*input, **kwargs)</span><br><span class="line">  File &quot;C:\Users\jyshen\Anaconda3\envs\pytorch\lib\site-packages\torchvision\models\resnet.py&quot;, line 197, in forward</span><br><span class="line">    x = self.bn1(x)</span><br><span class="line">  File &quot;C:\Users\jyshen\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\modules\module.py&quot;, line 541, in __call__</span><br><span class="line">    result = self.forward(*input, **kwargs)</span><br><span class="line">  File &quot;C:\Users\jyshen\Anaconda3\envs\pytorch\lib\site-packages\torch\nn\modules\batchnorm.py&quot;, line 72, in forward</span><br><span class="line">    self.num_batches_tracked += 1</span><br><span class="line">RuntimeError: CUDA error: no kernel image is available for execution on the device</span><br></pre></td></tr></table></figure><p>可以看出，在执行ResNet中用到的BatchNorm操作（<code>torch\nn\modules\batchnorm.py</code>）时出现了该<strong>CUDA error: no kernel image is available for execution on thedevice</strong> 错误。</p><h2 id="问题分析">2 问题分析</h2><p>从测试和报错内容可以看出，<code>torch.cuda.is_available()</code>可以正常给出<code>True</code>的结果，表明GPU驱动和Python包一切正常，而<code>*.cuda()</code>操作也是正常也佐证了这一点。</p><p>问题出在CUDA对部分计算操作无法支持，即<code>no kernel image is available for execution on the device</code>的问题。</p><p>经查，issues中存在类似的问题：</p><blockquote><p>GT820M无法满足PyTorch：</p><p><a href="https://github.com/pytorch/pytorch/issues/6529">cuda runtimeerror (48): no kernel image is available for execution on the device#6529</a></p><p>这个版本比较早（2018年4月），还是Python 2.7。</p></blockquote><p>更加新一些的issue：</p><blockquote><p>连专业卡Tesla K40m都无法完整支持PyTorch 1.3了：</p><p><a href="https://github.com/pytorch/pytorch/issues/30532">Version 1.3no longer supporting Tesla K40m? #30532</a></p><p>其中<strong>SsnL</strong>解释：<em>K40m has a compute capability of3.5, which I believe we have dropped support of.</em></p></blockquote><p>PyTorch中不再支持3.5及其以下的compute capability。</p><p>这里就涉及到了NVIDIA GPU CUDA的<strong><em>computecapability</em></strong>，这是一个类似版本的概念。不同型号的GPU的computecapability不同。目前官方列出的清单（<ahref="https://developer.nvidia.com/cuda-gpus#compute">GPU ComputeCapability</a>）上，较低的为2.1，都是较早的GPU型号，如：GT430, GT630,GT730 DDR3 128bit；较高的可达7.5，都是较新的GPU型号，如：RTX 2080, RTX2070等。</p><blockquote><p>NVIDIA开发者网站上的CUDA GPU Compute Capability列表：</p><p><a href="https://developer.nvidia.com/cuda-gpus#compute">GPU ComputeCapability</a></p></blockquote><p>而实验室的台式机是老旧的GT730(GDDR5)显卡，虽然平时只是调试代码用，性能差能接受，不过这ComputeCapability还停留在3.5，已经无法支持今年的PyTorch版本。</p><p>目前来看，需要3.7及以上的GPU的CUDA才能完整地支持PyTorch的功能。</p><h2 id="解决方案">3 解决方案</h2><p>因为是硬件层面的限制，那显然没有完美的解决方案，能做的就是软件层面降级，退到对CUDA要求较低的PyTorch的历史版本，例如：之前能够正常使用的1.1、1.2版本。</p><p>参考命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pytorch=1.2</span><br></pre></td></tr></table></figure><h2 id="参考资料">4 参考资料</h2><p>NVIDIA开发者网站上的CUDA GPU Compute Capability列表：</p><blockquote><p><a href="https://developer.nvidia.com/cuda-gpus#compute">GPU ComputeCapability</a></p></blockquote><p>相关issues：</p><blockquote><p><a href="https://github.com/pytorch/pytorch/issues/6529">cuda runtimeerror (48): no kernel image is available for execution on the device#6529</a></p><p><a href="https://github.com/pytorch/pytorch/issues/30532">Version 1.3no longer supporting Tesla K40m? #30532</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> PyTorch </tag>
            
            <tag> CUDA </tag>
            
            <tag> NVIDIA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorBoard页面一片空白问题解决</title>
      <link href="/posts/TensorBoard%E9%A1%B5%E9%9D%A2%E4%B8%80%E7%89%87%E7%A9%BA%E7%99%BD%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/posts/TensorBoard%E9%A1%B5%E9%9D%A2%E4%B8%80%E7%89%87%E7%A9%BA%E7%99%BD%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>在PyTorch 1.3.1中输出TensorBoard日志，TensorBoard2.1.0在Windows环境下显示页面一篇空白。</p><span id="more"></span><h1id="tensorboard页面一片空白问题解决">TensorBoard页面一片空白问题解决</h1><h2 id="问题描述">1 问题描述</h2><p><ahref="https://www.tensorflow.org/tensorboard">TensorBoard</a>是TensorFlow的一款基于Web的机器学习可视化工具。</p><figure><img src="https://www.tensorflow.org/tensorboard/images/tensorboard.gif"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><ul><li>TensorBoard功能示意</li></ul><p>PyTorch对TensorBoard也进行了兼容，但我使用最新版的PyTorch1.3.1输出日志文件，在TensorBoard2.1.0中却无法显示，页面打开一片空白。</p><blockquote><p>PyTorch官方文档</p><p><ahref="https://pytorch.org/docs/stable/tensorboard.html">torch.utils.tensorboard</a></p></blockquote><p>我使用官方文档中的一个极小测试用例进行功能测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n_iter <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    writer.add_scalar(<span class="string">&#x27;Loss/train&#x27;</span>, np.random.random(), n_iter)</span><br><span class="line">    writer.add_scalar(<span class="string">&#x27;Loss/test&#x27;</span>, np.random.random(), n_iter)</span><br><span class="line">    writer.add_scalar(<span class="string">&#x27;Accuracy/train&#x27;</span>, np.random.random(), n_iter)</span><br><span class="line">    writer.add_scalar(<span class="string">&#x27;Accuracy/test&#x27;</span>, np.random.random(), n_iter)</span><br></pre></td></tr></table></figure><p>按照官方文档的说法，安装<code>tensorboard</code>并运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorboard</span><br><span class="line">tensorboard --logdir=runs</span><br></pre></td></tr></table></figure><p>但结果是默认的 <code>http://localhost:6006/</code>显示的页面一片空白，命令行也没有任何报错提示。</p><h2 id="问题分析">2 问题分析</h2><p>根据网上各类博客和贴文，我测试了修改相对路径为绝对路径、更新PyTorch版本等方法，均无效。</p><p>经测试，Ubuntu服务器上默认安装的TensorBoard最新版本为2.0.2，运行和显示正常。</p><p>我将服务器上一切正常的日志下载到本地来测试，依旧是一片空白，由此锁定问题在本地的TensorBoard上。</p><p><strong>我将Windows上TensorBoard的版本从默认的最新版2.1.0降级至2.0.2后，运行和显示正常。</strong></p><p>推测原因可能和PyTorch生成的日志尚未适配最新版TensorBoard的标准有关。</p><h2 id="解决方案">3 解决方案</h2><p>将Windows上TensorBoard的版本从默认的最新版2.1.0降级至2.0.x。</p><p><strong>2020.3.18更新：</strong></p><p><strong>更新说明：应读者来信，给出详细的操作方法。</strong></p><p>建议通过conda指定版本安装。</p><p>首先，切换到conda环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate &lt;your_env&gt;</span><br></pre></td></tr></table></figure><p>切换后，通过命令指定安装2.0版本的tensorboard（推荐）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install tensorboard=2.0</span><br></pre></td></tr></table></figure><p>如不熟悉conda命令，也可通过pip指定版本安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorboard==2.0</span><br></pre></td></tr></table></figure><p>另外，可以通过<code>conda search</code>命令查询现有可下载的版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">conda search tensorboard</span><br><span class="line"></span><br><span class="line">Loading channels: done</span><br><span class="line"># Name                       Version           Build  Channel</span><br><span class="line">tensorboard                    1.7.0  py35he025d50_1  pkgs/main</span><br><span class="line">tensorboard                    1.7.0  py36he025d50_1  pkgs/main</span><br><span class="line">tensorboard                    1.8.0  py35he025d50_0  pkgs/main</span><br><span class="line">tensorboard                    1.8.0  py36he025d50_0  pkgs/main</span><br><span class="line">tensorboard                    1.9.0  py35he025d50_0  pkgs/main</span><br><span class="line">tensorboard                    1.9.0  py36he025d50_0  pkgs/main</span><br><span class="line">tensorboard                   1.10.0  py35he025d50_0  pkgs/main</span><br><span class="line">tensorboard                   1.10.0  py36he025d50_0  pkgs/main</span><br><span class="line">tensorboard                   1.11.0  py36he025d50_0  pkgs/main</span><br><span class="line">tensorboard                   1.12.0  py36he025d50_0  pkgs/main</span><br><span class="line">tensorboard                   1.12.1  py36h33f27b4_0  pkgs/main</span><br><span class="line">tensorboard                   1.12.2  py36h33f27b4_0  pkgs/main</span><br><span class="line">tensorboard                   1.13.1  py36h33f27b4_0  pkgs/main</span><br><span class="line">tensorboard                   1.13.1  py37h33f27b4_0  pkgs/main</span><br><span class="line">tensorboard                   1.14.0  py36he3c9ec2_0  pkgs/main</span><br><span class="line">tensorboard                   1.14.0  py37he3c9ec2_0  pkgs/main</span><br><span class="line">tensorboard                   1.15.0    pyhb230dea_0  pkgs/main</span><br><span class="line">tensorboard                    2.0.0    pyhb230dea_0  pkgs/main</span><br><span class="line">tensorboard                    2.0.0    pyhb38c66f_1  pkgs/main</span><br><span class="line">tensorboard                    2.1.0           py2_0  pkgs/main</span><br><span class="line">tensorboard                    2.1.0           py3_0  pkgs/main</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> PyTorch </tag>
            
            <tag> TensorBoard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cockpit - 基于Web的Linux服务器管理面板</title>
      <link href="/posts/cockpit-%E5%9F%BA%E4%BA%8EWeb%E7%9A%84Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BF/"/>
      <url>/posts/cockpit-%E5%9F%BA%E4%BA%8EWeb%E7%9A%84Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p><ahref="https://cockpit-project.org/">cockpit</a>是cockpit项目开发的一款基于Web交互的服务器管理面板。已经内置在了较新版本的Linux发行版，如：CentOS8。</p><span id="more"></span><h1 id="cockpit---基于web的linux服务器管理面板">cockpit -基于Web的Linux服务器管理面板</h1><h2 id="概述">1 概述</h2><p><ahref="https://cockpit-project.org/">cockpit</a>是cockpit项目开发的一款基于Web交互的服务器管理面板。</p><p>单词cockpit本身是驾驶座的意思。想必这个命名是指让用户能够像坐在驾驶座一样，方便地浏览面前的控制面板，快速掌握服务器的状态信息。</p><p>通过cockpit，可以对系统状态、日志、存储、网络、账户、服务、软件更新、应用等内容进行可视化的检视和管理。</p><h2 id="效果">2 效果</h2><p>此处引用一些官网效果截图，例如：</p><figure><img src="https://cockpit-project.org/images/site/screenshot-docker.png"alt="Docker screenshot" /><figcaption aria-hidden="true">Docker screenshot</figcaption></figure><ul><li><ahref="https://cockpit-project.org/">cockpit</a>官网图：Docker</li></ul><figure><imgsrc="https://cockpit-project.org/images/site/screenshot-storage.png"alt="Storage screenshot" /><figcaption aria-hidden="true">Storage screenshot</figcaption></figure><ul><li><a href="https://cockpit-project.org/">cockpit</a>官网图：存储</li></ul><figure><imgsrc="https://cockpit-project.org/images/site/screenshot-network.png"alt="Network screenshot" /><figcaption aria-hidden="true">Network screenshot</figcaption></figure><ul><li><a href="https://cockpit-project.org/">cockpit</a>官网图：网络</li></ul><figure><imgsrc="https://cockpit-project.org/images/site/screenshot-dashboard.png"alt="Dashboard screenshot" /><figcaption aria-hidden="true">Dashboard screenshot</figcaption></figure><ul><li><ahref="https://cockpit-project.org/">cockpit</a>官网图：Dashboard</li></ul><h2 id="安装">3 安装</h2><p>安装过程非常简单，cockpit得到了目前主流Linux发行版的普遍支持，基本上不是内置在系统中，就是收入了官方软件包仓库。</p><p>具体参见：<a href="https://cockpit-project.org/running.html">Install- Running Cockpit</a></p><p>安装完成后，启动服务即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start cockpit</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service cockpit start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> cockpit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Transformer到BERT的可视化详解</title>
      <link href="/posts/%E4%BB%8ETransformer%E5%88%B0BERT%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E8%AF%A6%E8%A7%A3/"/>
      <url>/posts/%E4%BB%8ETransformer%E5%88%B0BERT%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><a href="https://jalammar.github.io/">JayAlammar</a>的博客，他制作了非常直观易懂的可视化图片，对Transformer、ELMo及BERT这些近年来自然语言处理领域的语言模型和编码器研究进展进行了详细的解释。</p><span id="more"></span><h1id="从transformer到bert的可视化详解">从Transformer到BERT的可视化详解</h1><h2 id="transformer">1 Transformer</h2><blockquote><p>Vaswani A, Shazeer N, Parmar N, et al. Attention is all youneed[C]//Advances in neural information processing systems. 2017:5998-6008.</p></blockquote><p>Transformer的论文本身对self-attention, Scale-Dot Product(SDP)Attenton, Multi-HeadSDP这些都做了准确具体的定义，但还是没有完整地、连贯地进行形式化表述，所以论文本身看着难以对模型的每一处细节进行准确把握。</p><p>这篇博客对Transformer中的各种机制进行了非常细致入微的可视化解释和推演：</p><blockquote><p><a href="https://jalammar.github.io/illustrated-transformer/">TheIllustrated Transformer</a></p></blockquote><h2 id="bert">2 BERT</h2><blockquote><p>Devlin J, Chang M W, Lee K, et al. BERT: Pre-training of DeepBidirectional Transformers for Language Understanding[C]//Proceedings ofthe 2019 Conference of the North American Chapter of the Association forComputational Linguistics: Human Language Technologies, Volume 1 (Longand Short Papers). 2019: 4171-4186.</p></blockquote><p>BERT可以说是近年来NLP领域影响力最大的研究之一，成功地将CV领域成熟的pretraining+ fine-tuning的paradigm用到了NLP中。</p><p>这篇博客对BERT的原理进行了详细的可视化解释，而且还把ELMo也做了可视化，和BERT做了非常清晰的对比：</p><blockquote><p><a href="https://jalammar.github.io/illustrated-bert/">TheIllustrated BERT, ELMo, and co. (How NLP Cracked TransferLearning)</a></p></blockquote><p>对与如何具体地使用预训练的BERT模型，作者最新的一篇文章也进行了详尽的可视化解读：</p><blockquote><p><ahref="https://jalammar.github.io/a-visual-guide-to-using-bert-for-the-first-time/">AVisual Guide to Using BERT for the First Time</a></p></blockquote><h2 id="其它">3 其它</h2><p>作者还对<ahref="https://jalammar.github.io/illustrated-gpt2/">GPT-2</a>、<ahref="https://jalammar.github.io/illustrated-word2vec/">word2vec</a>等模型，甚至对一些基础的包，如：<ahref="https://jalammar.github.io/visual-numpy/">NumPy</a>都做了非常优质的可视化解读。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> NLP </tag>
            
            <tag> Attention </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rocket.Chat - 基于CentOS8部署私有即时通信服务器</title>
      <link href="/posts/Rocket-Chat-%E5%9F%BA%E4%BA%8ECentOS8%E9%83%A8%E7%BD%B2%E7%A7%81%E6%9C%89%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/posts/Rocket-Chat-%E5%9F%BA%E4%BA%8ECentOS8%E9%83%A8%E7%BD%B2%E7%A7%81%E6%9C%89%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><ahref="https://rocket.chat">Rockst.Chat</a>是一款开源即时通信解决方案，可以自主部署于私有服务器上，支持端到端加密等特性。</p><span id="more"></span><h1 id="rocket.chat---基于centos8部署私有即时通信服务器">Rocket.Chat -基于CentOS8部署私有即时通信服务器</h1><h2 id="简介">1 简介</h2><p><ahref="https://rocket.chat">Rockst.Chat</a>是一款开源即时通信解决方案。</p><blockquote><p><strong>Open Source Team Communication</strong></p><p>Rocket.Chat is free, unlimited and open source. Replace email,HipChat &amp; Slack with the ultimate team chat software solution.</p></blockquote><p>官方在线体验：<a href="https://cloud.rocket.chat/trial/bronze">Startcloud trial</a></p><h2 id="部署">2 部署</h2><p>经测试，官方部署文档可以在最新版的CentOS8上顺利完成部署。</p><blockquote><p>官方部署文档：</p><p><ahref="https://rocket.chat/docs/installation/manual-installation/centos/">Rocket.Chatin CentOS</a></p></blockquote><p>完成安装和部署后，需要配置防火墙和Nginx反向代理。</p><blockquote><p>防火墙配置：</p><p><ahref="https://rocket.chat/docs/installation/manual-installation/optional-configurations">Configurefirewall rule</a></p></blockquote><p>以及Nginx反向代理配置：</p><blockquote><p>反向代理配置：</p><p><ahref="https://rocket.chat/docs/installation/manual-installation/configuring-ssl-reverse-proxy/">Configurea HTTP reverse proxy to access Rocket.Chat server</a></p></blockquote><p>到这一步，整个服务就可以跑通了，如果需要做进一步的配置调整，参考Rocket.Chat的产品配置文档：</p><blockquote><p><ahref="https://rocket.chat/docs/administrator-guides/">AdministratorGuides</a></p></blockquote><h2 id="体验">3 体验</h2><p>初步试用体验来看，</p><p>发现以下优点：</p><ol type="1"><li>具备<strong>端到端加密（End-to-EndEncryption）功能</strong>，需要自主保存密钥；<ol type="1"><li><em>QQ、微信这些主流IM尚不具备E2E加密</em>。</li></ol></li><li>Web版使用体验不错，功能丰富。</li></ol><p>但存在一些缺点：</p><ol type="1"><li>文件传输还需要进一步配置；</li><li>明明让用户设置了显示名，但Web和APP都只显示<code>@xxxx</code>的账户名，而且没找到有什么地方可以改；</li><li>桌面版客户端其实就是个Web版，整体使用体验还是不如商业软件好，如：Skype、QQ和微信之类。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Deploy </tag>
            
            <tag> Linux </tag>
            
            <tag> Rockst.Chat </tag>
            
            <tag> IM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notes from Linux Kernel Development</title>
      <link href="/posts/Notes-from-Linux-Kernel-Development/"/>
      <url>/posts/Notes-from-Linux-Kernel-Development/</url>
      
        <content type="html"><![CDATA[<p>Reading <strong><em>Linux Kernel Development (ThirdEdition)</em></strong> by Robert Love. Some notes from this awesomebook.</p><span id="more"></span><h1 id="notes-from-linux-kernel-development">Notes from Linux KernelDevelopment</h1><h2 id="introduction-to-the-linux-kernel">1 Introduction to the LinuxKernel</h2><h3 id="activities-of-linux-processes">Activities of LinuxProcesses</h3><p>These contexts represent the breadth of the kernel’s activities. Infact, in Linux, we can generalize that each processor is doing exactlyone of three things at any given moment:</p><ul><li>In user-space, executing user code in a process</li><li>In kernel-space, in process context, executing on behalf of aspecific process</li><li>In kernel-space, in interrupt context, not associated with aprocess, handling an interrupt</li></ul><p>This list is inclusive. Even corner cases fit into one of these threeactivities: For example, when idle, it turns out that the kernel isexecuting an <em>idle process</em> in process context in the kernel.</p><h3 id="monolithic-kernel-versus-microkernel-designs">Monolithic KernelVersus Microkernel Designs</h3><p>Linux is a monolithic kernel; that is, the Linux kernel executes in asingle address space entirely in kernel mode. Linux, however, borrowsmuch of the good from microkernels: Linux boasts a modular design, thecapability to preempt itself (called <em>kernel preemption</em>),support for kernel threads, and the capability to dynamically loadseparate binaries (kernel modules) into the kernel image. Conversely,Linux has none of the performance-sapping features that cursemicrokernel design: Everything runs in kernel mode, with direct functioninvocation not message passing—the modus of communication. Nonetheless,Linux is modular, threaded, and the kernel itself is schedulable.Pragmatism wins again.</p><h3 id="linux-versus-classic-unix-kernels">Linux Versus Classic UnixKernels</h3><p>As Linus and other kernel developers contribute to the Linux kernel,they decide how best to advance Linux without neglecting its Unix roots(and, more important, the Unix API). Consequently, because Linux is notbased on any specific Unix variant, Linus and company can pick andchoose the best solution to any given problem—or at times, invent newsolutions! A handful of notable differences exist between the Linuxkernel and classic Unix systems:</p><ul><li><p>Linux supports the <strong>dynamic loading of kernelmodules</strong>. Although the Linux kernel is monolithic, it candynamically load and unload kernel code on demand.</p></li><li><p>Linux has <strong>symmetrical multiprocessor (SMP)support</strong>. Although most commercial variants of Unix now supportSMP, most traditional Unix implementations did not.</p></li><li><p>The Linux kernel is <strong>preemptive</strong>. Unliketraditional Unix variants, the Linux kernel can preempt a task even asit executes in the kernel. Of the other commercial Unix implementations,Solaris and IRIX have preemptive kernels, but most Unix kernels are notpreemptive.</p></li><li><p>Linux takes an interesting approach to thread support: It<strong>does not differentiate between threads and normalprocesses</strong>. To the kernel, all processes are the same— some justhappen to share resources.</p></li><li><p>Linux provides an <strong>object-oriented device model</strong>with device classes, hot-pluggable events, and a user-space devicefilesystem (<code>sysfs</code>).</p></li><li><p>Linux ignores some common Unix features that the kerneldevelopers consider poorly designed, such as STREAMS, or standards thatare impossible to cleanly implement.</p></li><li><p>Linux is <strong>free in every sense of the word</strong>. Thefeature set Linux implements is the result of the freedom of Linux’sopen development model. If a feature is without merit or poorly thoughtout, Linux developers are under no obligation to implement it. To thecontrary, Linux has adopted an elitist attitude toward changes:Modifications must solve a specific real-world problem, derive from aclean design, and have a solid implementation. Consequently, features ofsome other modern Unix variants that are more marketing bullet orone-off requests, such as pageable kernel memory, have received noconsideration.</p></li></ul><p>Despite these differences, however, Linux remains an operating systemwith a strong Unix heritage.</p><h2 id="getting-started-with-the-kernel">2 Getting Started with theKernel</h2><h3 id="the-kernel-source-tree">The Kernel Source Tree</h3><p>Directories in the Root of the Kernel Source Tree</p><table><thead><tr class="header"><th>Directory</th><th>Description</th></tr></thead><tbody><tr class="odd"><td>arch</td><td>Architecture-specific source</td></tr><tr class="even"><td>block</td><td>Block I/O layer</td></tr><tr class="odd"><td>crypto</td><td>Crypto API</td></tr><tr class="even"><td>Documentation</td><td>Kernel source documentation</td></tr><tr class="odd"><td>drivers</td><td>Device drivers</td></tr><tr class="even"><td>firmware</td><td>Device firmware needed to use certain drivers</td></tr><tr class="odd"><td>fs</td><td>The VFS and the individual filesystems</td></tr><tr class="even"><td>include</td><td>Kernel headers</td></tr><tr class="odd"><td>init</td><td>Kernel boot and initialization</td></tr><tr class="even"><td>ipc</td><td>Interprocess communication code</td></tr><tr class="odd"><td>kernel</td><td>Core subsystems, such as the scheduler</td></tr><tr class="even"><td>lib</td><td>Helper routines</td></tr><tr class="odd"><td>mm</td><td>Memory management subsystem and the VM</td></tr><tr class="even"><td>net</td><td>Networking subsystem</td></tr><tr class="odd"><td>samples</td><td>Sample, demonstrative code</td></tr><tr class="even"><td>scripts</td><td>Scripts used to build the kernel</td></tr><tr class="odd"><td>security</td><td>Linux Security Module</td></tr><tr class="even"><td>sound</td><td>Sound subsystem</td></tr><tr class="odd"><td>usr</td><td>Early user-space code (called initramfs)</td></tr><tr class="even"><td>tools</td><td>Tools helpful for developing Linux</td></tr><tr class="odd"><td>virt</td><td>Virtualization infrastructure</td></tr></tbody></table><h3 id="configuring-the-kernel">Configuring the Kernel</h3><p>text-based command-line utility:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make config</span><br></pre></td></tr></table></figure><p>ncurses-based graphical utility:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make menuconfig</span><br></pre></td></tr></table></figure><p>gtk+-based graphical utility: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make gconfig</span><br></pre></td></tr></table></figure></p><h3 id="a-beast-of-a-different-nature">A Beast of a DifferentNature</h3><p>These characteristics make the kernel a beast of a different nature.Some of the usual rules are bent; other rules are entirely new. Althoughsome of the differences are obvious (we all know the kernel can doanything it wants), others are not so obvious. The most important ofthese differences are</p><ul><li>The kernel has access to <strong>neither the C library nor thestandard C headers</strong>.</li><li>The kernel is coded in <strong>GNU C</strong>.</li><li>The kernel <strong>lacks the memory protection</strong> afforded touser-space.</li><li>The kernel <strong>cannot easily execute floating-pointoperations</strong>.</li><li>The kernel has a <strong>small per-process fixed-sizestack</strong>.</li><li>Because the kernel has <strong>asynchronous interrupts</strong>, is<strong>preemptive</strong>, and supports <strong>SMP</strong>,<strong>synchronization and concurrency</strong> are major concernswithin the kernel.</li><li><strong>Portability</strong> is important.</li></ul><h2 id="process-management">3 Process Management</h2><h3 id="the-process">The Process</h3><p><strong>A <em>process</em> is a program (object code stored on somemedia) in the midst of execution.</strong> Processes are, however, morethan just the executing program code (often called the <em>textsection</em> in Unix).They also include a set of resources such as openfiles and pending signals, internal kernel data, processor state, amemory address space with one or more memory mappings, one or more<em>threads of execution</em>, and a <em>data section</em> containingglobal variables. Processes, in effect, are the living result of runningprogram code. The kernel needs to manage all these details efficientlyand transparently.</p><p><strong>Threads of execution, often shortened to <em>threads</em>,are the objects of activity within the process.</strong> Each threadincludes a unique program counter, process stack, and set of processorregisters. <strong>The kernel schedules individual threads, notprocesses.</strong> In traditional Unix systems, each process consistsof one thread. In modern systems, however, multithreaded programs—thosethat consist of more than one thread—are common. As you will see later,Linux has a unique implementation of threads: It does not differentiatebetween threads and processes. <strong>To Linux, a thread is just aspecial kind of process.</strong></p><p>Another name for a process is a <em>task</em>. <strong>The Linuxkernel internally refers to processes as</strong><strong>tasks.</strong></p><h3 id="process-descriptor-and-the-task-structure">Process Descriptorand the Task Structure</h3><p><strong>The kernel stores the list of processes in a circular doublylinked list called the task list.</strong> Each element in the task listis a <em>process descriptor</em> of the type<code>struct task_struct</code>, which is definedin<code>&lt;linux/sched.h&gt;</code>.The process descriptor contains allthe information about a specific process.</p><p>The <code>task_struct</code> is a relatively large data structure, ataround 1.7 kilobytes on a 32-bit machine. This size, however, is quitesmall considering that the structure <strong>contains all theinformation that the kernel has and needs about a process.</strong> Theprocess descriptor contains the data that describes the executingprogram open files, the process’s address space, pending signals, theprocess’s state, and much more (see Figure 3.1).</p><h4 id="allocating-the-process-descriptor">Allocating the ProcessDescriptor</h4><p>The <code>task_struct</code> structure is allocated via the <em>slaballocator</em> to provide object reuse and cache coloring (see Chapter12). Prior to the 2.6 kernel series, <code>struct task_struct</code> wasstored at the end of the kernel stack of each process. This allowedarchitectures with few registers, such as x86, to calculate the locationof the process descriptor via the stack pointer without using an extraregister to store the location. With the process descriptor nowdynamically created via the slab allocator, a new structure,<code>struct thread_info</code>, was created that again lives at thebottom of the stack (for stacks that grow down) and at the top of thestack (for stacks that grow up). See Figure 3.2.</p><p>The <code>thread_info</code> structure is defined on x86 in<code>&lt;asm/thread_info.h&gt;</code> as</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread_info</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">task</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">exec_domain</span> *<span class="title">exec_domain</span>;</span></span><br><span class="line">    __u32 flags;</span><br><span class="line">    __u32 status;</span><br><span class="line">    __u32 cpu;</span><br><span class="line">    <span class="type">int</span> preempt_count;</span><br><span class="line">    <span class="type">mm_segment_t</span> addr_limit;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">restart_block</span> <span class="title">restart_block</span>;</span></span><br><span class="line">    <span class="type">void</span> *sysenter_return;</span><br><span class="line">    <span class="type">int</span> uaccess_err;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Each task’s <code>thread_info</code> structure is allocated at theend of its stack. The task element of the structure is a pointer to thetask’s actual <code>task_struct</code>.</p><h4 id="storing-the-process-descriptor">Storing the ProcessDescriptor</h4><p>The system identifies processes by a <em>unique processidentification</em> value or <em>PID</em>. The PID is a numerical valuerepresented by the opaque type <code>pid_t</code>, which is typically an<code>int</code>. Because of backward compatibility with earlier Unixand Linux versions, however, the default maximum value is only 32,768(that of a <code>short int</code>, although the value optionally can beincreased as high as four million (this is controlled in<code>&lt;linux/threads.h&gt;</code>.The kernel stores this value as<code>pid</code> inside each process descriptor. If the system iswilling to break compatibility with old applications, the administratormay increase the maximum value via<code>/proc/sys/kernel/pid_max</code>.</p><p>current dereferences the task member of <code>thread_info</code> toreturn the <code>task_struct</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">current_thread_info()-&gt;task;</span><br></pre></td></tr></table></figure><h4 id="process-state">Process State</h4><ul><li><code>TASK_RUNNING</code><ul><li>The process is runnable; it is either currently running or on arunqueue waiting to run.</li></ul></li><li><code>ASK_INTERRUPTIBLE</code><ul><li>The process is sleeping (that is, it is blocked), waiting for somecondition to exist. When this condition exists, the kernel sets theprocess’s state to <code>TASK_RUNNING</code>.</li></ul></li><li><code>TASK_UNINTERRUPTIBLE</code><ul><li>This state is identical to <code>TASK_INTERRUPTIBLE</code> exceptthat it does not wake up and become runnable if it receives asignal.</li></ul></li><li><code>__TASK_TRACED</code><ul><li>The process is being <em>traced by</em> another process, such as adebugger, via <em>ptrace</em>.</li></ul></li><li><code>__TASK_STOPPED</code><ul><li>Process execution has stopped; the task is not running nor is iteligible to run. This occurs if the task receives the<code>SIGSTOP</code>, <code>SIGTSTP</code>, <code>SIGTTIN</code>, or<code>SIGTTOU</code> signal or if it receives <em>any</em> signal whileit is being debugged.</li></ul></li></ul><h4 id="manipulating-the-current-process-state">Manipulating the CurrentProcess State</h4><p>Kernel code often needs to change a process’s state. he preferredmechanism is using</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set_task_state(task, state); <span class="comment">/* set task ‘task’ to state ‘state’ */</span></span><br></pre></td></tr></table></figure><p>The method <code>set_current_state(state)</code> is synonymous to<code>set_task_state(current, state)</code>. See<code>&lt;linux/sched.h&gt;</code> for the implementation of these andrelated functions.</p><h4 id="the-process-family-tree">The Process Family Tree</h4><p>All processes are descendants of the <code>init</code> process, whosePID is one. The kernel starts <code>init</code> in the last step of theboot process. The <code>init</code> process, in turn, reads the system<em>initscripts</em> and executes more programs, eventually completingthe boot process.</p><h3 id="process-creation">Process Creation</h3><p>Most operating systems implement a <em>spawn</em> mechanism to createa new process in a new address space, read in an executable, and beginexecuting it. Unix takes the unusual approach of separating these stepsinto two distinct functions: <code>fork()</code>and<code>exec()</code>.</p><p>The first, <code>fork()</code>, creates a child process that is acopy of the current task. It differs from the parent only in its PID(which is unique)</p><p>The second function, <code>exec()</code>, loads a new executable intothe address space and begins executing it.</p><h4 id="copy-on-write">Copy-on-Write</h4><p>In Linux, <code>fork()</code> is implemented through the use of<em>copy-on-write</em> pages.</p><h4 id="forking">Forking</h4><p>Linux implements<code>fork()</code> via the <code>clone()</code>system call.</p><p>This call takes a series of flags that specify which resources, ifany, the parent and child process should share. (See “The LinuxImplementation of Threads” section later in this chapter for more aboutthe flags.) The <code>fork()</code>, <code>vfork()</code>, and<code>__clone()</code> library calls all invoke the <code>clone()</code>system call with the requisite flags. The clone() system call, in turn,calls <code>do_fork()</code>.</p><h4 id="vfork">vfork()</h4><p>The <code>vfork()</code> system call has the same effect as<code>fork()</code>, except that the page table entries of the parentprocess are not copied. Instead, the child executes as the sole threadin the parent’s address space, and the parent is blocked until the childeither calls <code>exec()</code> or exits. The child is <em>not</em>allowed to write to the address space.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现QQ自动对话机器人</title>
      <link href="/posts/%E5%AE%9E%E7%8E%B0QQ%E8%87%AA%E5%8A%A8%E5%AF%B9%E8%AF%9D%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
      <url>/posts/%E5%AE%9E%E7%8E%B0QQ%E8%87%AA%E5%8A%A8%E5%AF%B9%E8%AF%9D%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p>通过<a href="https://cqp.cc/">酷Q</a>和<ahref="https://nonebot.cqp.moe/">nonebot</a>，可以实现QQ自动对话的机器人。</p><span id="more"></span><h1 id="实现qq自动对话机器人">实现QQ自动对话机器人</h1><h2 id="概述">1 概述</h2><p>腾讯的<ahref="https://web2.qq.com/">SmartQQ</a>下线，因此原有的GitHub 3.5kstars的<ahref="https://github.com/pandolia/qqbot">QQBot</a>已经无法使用。网络上大量的资料仍然基于该qqbot实现，本文介绍基于酷Q和NoneBot的QQ自动对话实现方法。</p><h2 id="酷q">2 酷Q</h2><blockquote><p>官网：<a href="https://cqp.cc/">酷Q - 轻快实用的QQ机器人软件</a></p></blockquote><ul><li>下载 <strong>酷Q Air版</strong> 即可，图灵版或小i版均可。</li></ul><h2 id="nonebot">3 NoneBot</h2><blockquote><p>GitHub：<ahref="https://github.com/richardchien/nonebot">nonebot</a></p></blockquote><blockquote><p>文档：<a href="https://nonebot.cqp.moe/">NoneBot - 基于 酷Q 的 Python异步 QQ 机器人框架</a></p></blockquote><figure><imgsrc="https://github.com/richardchien/nonebot/raw/master/diagram.png"alt="NoneBot示意图" /><figcaption aria-hidden="true">NoneBot示意图</figcaption></figure><p>酷Q负责登录QQ，而NoneBot可以通过HTTP或WebSocket协议与酷Q连接，取得QQ中的各种消息、群状态等，并处理、发送信息。</p><p><ahref="https://nonebot.cqp.moe">NoneBot的文档</a>非常易懂，此处不再赘述。</p>]]></content>
      
      
      
        <tags>
            
            <tag> QQ </tag>
            
            <tag> Chatbot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>samba - 基于CentOS8搭建多用户文件共享服务</title>
      <link href="/posts/samba-%E5%9F%BA%E4%BA%8ECentOS8%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%94%A8%E6%88%B7%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1/"/>
      <url>/posts/samba-%E5%9F%BA%E4%BA%8ECentOS8%E6%90%AD%E5%BB%BA%E5%A4%9A%E7%94%A8%E6%88%B7%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>在CentOS8上搭建Samba服务，配置实现多用户之间的文件共享和权限隔离。</p><span id="more"></span><h1 id="samba---基于centos8搭建多用户文件共享服务">samba -基于CentOS8搭建多用户文件共享服务</h1><p>校园网前阵子对公网流量开始5元10G按量计费了，刚好导师给了台不再使用的07年产的老联想。想起了之前在博世实习的时候，公司共享硬盘挺好用的。所以我安装了CentOS8，并部署了samba，这样就可以在校园网内相互之间共享大文件，无需借助公网，既可以节省校园网的公网流量费，而且内网传输可以做到数据保密。另外，实验室的网络是六类线（CAT6），全千兆的网速传输起来非常快（超过了一般的USB3.0）。</p><p>本文介绍如何基于CentOS8搭建samba服务，并配置实现多用户共享，实现用户对自己目录可读可写，用户对他人目录可读不可写的权限隔离。</p><p>另外，CentOS8自带了<ahref="https://cockpit-project.org/">cocopit</a>，挺好用的Web管理平台。本文涉及的SELinux、防火墙、用户管理操作都可以用cocopit实现。</p><h2 id="介绍">1 介绍</h2><blockquote><p>官方网站：<a href="https://www.samba.org/">Samba.org</a></p><p><strong>About Samba</strong></p><p><strong>Samba is the standard Windows interoperability suite ofprograms for Linux and Unix.</strong></p><p>Samba is <a href="https://www.gnu.org/philosophy/free-sw.html">FreeSoftware</a> licensed under the <ahref="https://www.samba.org/samba/docs/GPL.html">GNU General PublicLicense</a>, the Samba project is a member of the <ahref="https://www.sfconservancy.org/">Software FreedomConservancy</a>.</p><p>Since <ahref="https://www.samba.org/samba/docs/10years.html">1992</a>, Samba hasprovided secure, stable and fast file and print services for all clientsusing the SMB/CIFS protocol, such as all versions of DOS and Windows,OS/2, Linux and many others.</p><p>Samba is an important component to seamlessly integrate Linux/UnixServers and Desktops into Active Directory environments. It can functionboth as a domain controller or as a regular domain member.</p></blockquote><h2 id="安装">2 安装</h2><h3 id="yum安装">2.1 yum安装</h3><p>首先，安装samba：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install samba</span><br></pre></td></tr></table></figure><h3 id="systemctl启用">2.2 systemctl启用</h3><p>安装完成后，设置samba为启用（enable），这样samba就可以开机自启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> smb</span><br></pre></td></tr></table></figure><ul><li>samba的服务名为<code>smb</code></li></ul><h2 id="配置">3 配置</h2><h3 id="防火墙">3.1 防火墙</h3><p>安装完成后，需要为samba服务打开防火墙。</p><p>CentOS8采用的不再是<code>iptables</code>，而是<code>firewall</code>。</p><h4 id="检视防火墙规则">3.1.1 检视防火墙规则</h4><p>可以查看samba服务对应的防火墙信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --info-service samba</span><br></pre></td></tr></table></figure><p>显示形如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">samba</span><br><span class="line">  ports: 137/udp 138/udp 139/tcp 445/tcp</span><br><span class="line">  protocols:</span><br><span class="line">  source-ports:</span><br><span class="line">  modules: netbios-ns</span><br><span class="line">  destination:</span><br></pre></td></tr></table></figure><h4 id="防火墙放通服务">3.1.2 防火墙放通服务</h4><p>确认信息后，在防火墙中放通samba服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --add-service=samba</span><br></pre></td></tr></table></figure><h4 id="重新加载防火墙">3.1.3 重新加载防火墙</h4><p>设置为<code>--permanent</code>后，需要重新载入防火墙，使配置生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h4 id="检视防火墙设置结果">3.1.4 检视防火墙设置结果</h4><p>重新载入完成后，可以检视防火墙是否已加入samba服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --list-services</span><br></pre></td></tr></table></figure><p>显示形如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cockpit dhcpv6-client http samba ssh</span><br></pre></td></tr></table></figure><ul><li>包含samba</li></ul><h3 id="配置samba">3.2 配置samba</h3><p>对samba的配置文件进行设置，配置文件位于<code>/etc/samba/smb.conf</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/samba/</span><br></pre></td></tr></table></figure><h4 id="备份原始配置文件">3.2.1 备份原始配置文件</h4><p>首先，备份原始配置文件以便恢复：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">cp</span> smb.conf smb.conf.bkup</span><br></pre></td></tr></table></figure><h4 id="修改配置文件">3.2.2 修改配置文件</h4><p>随后，修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim smb.conf</span><br></pre></td></tr></table></figure><p>我增加了一个名为Share的section，且设置为可读、可浏览、可写，这意味着每个用户登陆后都会看到一个名为Share的文件夹：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Share]</span></span><br><span class="line"><span class="attr">comment</span> = Share (read-and-write for own, read-<span class="literal">on</span>ly for others)</span><br><span class="line"><span class="attr">path</span> = /home/samba/share/</span><br><span class="line"><span class="attr">writable</span> = <span class="literal">yes</span></span><br><span class="line"><span class="attr">browseable</span> = <span class="literal">yes</span></span><br><span class="line"><span class="attr">public</span> = <span class="literal">yes</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改后完整的配置文件如下，供参考：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># See smb.conf.example for a more detailed config file or</span></span><br><span class="line"><span class="comment"># read the smb.conf manpage.</span></span><br><span class="line"><span class="comment"># Run &#x27;testparm&#x27; to verify the config is correct after</span></span><br><span class="line"><span class="comment"># you modified it.</span></span><br><span class="line"></span><br><span class="line"><span class="section">[global]</span></span><br><span class="line"> <span class="attr">workgroup</span> = WORKGROUP</span><br><span class="line"><span class="attr">security</span> = user</span><br><span class="line"></span><br><span class="line">passdb <span class="attr">backend</span> = tdbsam</span><br><span class="line"></span><br><span class="line"><span class="attr">printing</span> = cups</span><br><span class="line">printcap <span class="attr">name</span> = cups</span><br><span class="line">load <span class="attr">printers</span> = <span class="literal">yes</span></span><br><span class="line">cups <span class="attr">options</span> = raw</span><br><span class="line"></span><br><span class="line"><span class="section">[homes]</span></span><br><span class="line"><span class="attr">comment</span> = Home Directories</span><br><span class="line">valid <span class="attr">users</span> = %S, %D%w%S</span><br><span class="line"><span class="attr">browseable</span> = <span class="literal">No</span></span><br><span class="line">read <span class="attr">only</span> = <span class="literal">No</span></span><br><span class="line">inherit <span class="attr">acls</span> = <span class="literal">Yes</span></span><br><span class="line"></span><br><span class="line"><span class="section">[printers]</span></span><br><span class="line"><span class="attr">comment</span> = All Printers</span><br><span class="line"><span class="attr">path</span> = /var/tmp</span><br><span class="line"><span class="attr">printable</span> = <span class="literal">Yes</span></span><br><span class="line">create <span class="attr">mask</span> = <span class="number">0600</span></span><br><span class="line"><span class="attr">browseable</span> = <span class="literal">No</span></span><br><span class="line"></span><br><span class="line"><span class="section">[print$]</span></span><br><span class="line"><span class="attr">comment</span> = Printer Drivers</span><br><span class="line"><span class="attr">path</span> = /var/lib/samba/drivers</span><br><span class="line">write <span class="attr">list</span> = @printadmin root</span><br><span class="line">force <span class="attr">group</span> = @printadmin</span><br><span class="line">create <span class="attr">mask</span> = <span class="number">0664</span></span><br><span class="line">directory <span class="attr">mask</span> = <span class="number">0775</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Share]</span></span><br><span class="line"><span class="attr">comment</span> = Share (read-and-write for own, read-<span class="literal">on</span>ly for others)</span><br><span class="line"><span class="attr">path</span> = /home/samba/share/</span><br><span class="line"><span class="attr">writable</span> = <span class="literal">yes</span></span><br><span class="line"><span class="attr">browseable</span> = <span class="literal">yes</span></span><br><span class="line"><span class="attr">public</span> = <span class="literal">yes</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="重启samba服务">3.2.3 重启samba服务</h4><p>修改完成后，为使配置文件生效，需要重启samba服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart smb</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service smb restart</span><br></pre></td></tr></table></figure><h3 id="存储目录">3.3 存储目录</h3><p>因为Linux的权限管理中，出于安全考虑，每个用户的目录是无法被其它用户读取的，只有用户自己的<code>rwx</code>权限，而因为硬盘挂载的原因，<code>/home</code>目录是独立挂载分区的，容量大，而诸如<code>/var</code>这类公共目录都挂载在<code>/</code>根目录下，容量仅50GB。</p><p>因此，为了实现多用户的共享，且充分利用硬盘空间，我的方案是创建一个公共用户<code>samba</code>用于存储共享目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser samba</span><br></pre></td></tr></table></figure><p>为了共享，需要使samba目录能够被其它用户浏览，需要添加权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 755 /home/samba</span><br></pre></td></tr></table></figure><p>在<code>samba</code>的目录<code>/home/samba</code>下，建立公共的共享目录<code>/home/samba/share</code>，并确保其权限被其他用户可读：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /home/samba/share</span><br><span class="line">sudo <span class="built_in">chmod</span> 755 /home/samba/share</span><br></pre></td></tr></table></figure><p><strong>注意：因为目录在<code>/home</code>下，SELinux有严格的权限控制，会拦截访问，我就采取简单的做法，关闭SELinux。</strong></p><p>当然，也可以对SELinux进行配置，参考：<ahref="https://linuxconfig.org/install-samba-on-redhat-8">How to installand configure samba on RHEL 8 / CentOS 8</a></p><h2 id="多用户">4 多用户</h2><p>samba的多用户基于Linux的用户，因此，首先需要创建Linux用户。</p><h3 id="创建linux用户">4.1 创建Linux用户</h3><p>通过<code>adduser</code>创建Linux用户，如<code>mike</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser mike</span><br></pre></td></tr></table></figure><p>如果不打算给用户私有目录和登陆权限，可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser -M mike -s /sbin/nologin</span><br></pre></td></tr></table></figure><ul><li><code>-M</code>表示<code>--no-create-home</code></li><li><code>-s /sbin/nologin</code> 无登陆权限</li></ul><h3 id="加入samba用户">4.2 加入samba用户</h3><p>随后，把Linux用户<code>mike</code>加入samba用户，并初始化设置密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo smbpasswd -a mike</span><br></pre></td></tr></table></figure><ul><li><code>-a</code>权限表示把用户加入到samba用户列表中。</li></ul><h3 id="创建用户共享目录">4.3 创建用户共享目录</h3><p>在3.3节介绍的<code>/home/samba/share</code>目录中，创建用户目录，如<code>mike</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/samba/share</span><br><span class="line">sudo <span class="built_in">mkdir</span> mike</span><br><span class="line">sudo <span class="built_in">chown</span> -Rf mike:mike mike/</span><br></pre></td></tr></table></figure><ul><li>把用户共享目录的所属用户/组都交给用户，这样可以实现其他用户可读不可写，用户自己可读可写的权限隔离。</li></ul><h3 id="查看所有samba用户">4.4 查看所有samba用户</h3><blockquote><p>pdbedit - manage the SAM database (Database of Samba Users)</p></blockquote><p>通过pdbedit命令可以管理samba用户的数据库，当然也就可以查看samba用户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pdbedit -L</span><br></pre></td></tr></table></figure><ul><li><code>-L</code>与<code>--list</code>相同，表示列出全部用户。</li></ul><h3 id="删除samba用户">4.5 删除samba用户</h3><p>按照创建时的操作，将Linux用户<code>mike</code>从samba用户列表中删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo smbpasswd -x mike</span><br></pre></td></tr></table></figure><ul><li><code>-x</code>表示删除本地samba用户表中的用户。</li></ul><p>删除Linux用户的操作按操作系统提供的命令（如：<code>userdel</code>）或其他管理方式即可，此处不再赘述。</p><h2 id="参考资料">5 参考资料</h2><blockquote><p><a href="https://linuxconfig.org/install-samba-on-redhat-8">How toinstall and configure samba on RHEL 8 / CentOS 8</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Deploy </tag>
            
            <tag> Linux </tag>
            
            <tag> Samba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SEULogin - 适用于东南大学DrCOM网关的Shell认证工具</title>
      <link href="/posts/SEULogin-%E9%80%82%E7%94%A8%E4%BA%8E%E4%B8%9C%E5%8D%97%E5%A4%A7%E5%AD%A6DrCOM%E7%BD%91%E5%85%B3%E7%9A%84Shell%E8%AE%A4%E8%AF%81%E5%B7%A5%E5%85%B7/"/>
      <url>/posts/SEULogin-%E9%80%82%E7%94%A8%E4%BA%8E%E4%B8%9C%E5%8D%97%E5%A4%A7%E5%AD%A6DrCOM%E7%BD%91%E5%85%B3%E7%9A%84Shell%E8%AE%A4%E8%AF%81%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>东南大学新的DrCOM网关认证系统只提供Web登陆，且Web页面是基于Javascript加载的（无法通过<code>w3m</code>之类的浏览器打开），因此无GUI的Linux服务器难以直接登陆。为此我分析了的该认证系统的<ahref="https://heary.cn/posts/东南大学DrCOM网关Web认证报文分析/">登陆认证报文</a>，写了一个小脚本，通过<code>curl</code>即可发送请求，实现Linuxshell环境下登陆。</p><span id="more"></span><h1 id="seulogin---适用于东南大学drcom网关的shell认证工具">SEULogin -适用于东南大学DrCOM网关的Shell认证工具</h1><h2 id="github">1 GitHub</h2><blockquote><p><a href="https://github.com/HearyShen">HearyShen</a> / <ahref="https://github.com/HearyShen/SEULogin">SEULogin</a></p></blockquote><h2 id="使用">2 使用</h2><p>在<code>login.sh</code>脚本中填写自己的账户密码，登陆时执行shell脚本即可。</p><p>具体参见README文档中的使用说明。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SEULogin </tag>
            
            <tag> DrCOM </tag>
            
            <tag> Authentication </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>东南大学DrCOM网关Web认证报文分析</title>
      <link href="/posts/%E4%B8%9C%E5%8D%97%E5%A4%A7%E5%AD%A6DrCOM%E7%BD%91%E5%85%B3Web%E8%AE%A4%E8%AF%81%E6%8A%A5%E6%96%87%E5%88%86%E6%9E%90/"/>
      <url>/posts/%E4%B8%9C%E5%8D%97%E5%A4%A7%E5%AD%A6DrCOM%E7%BD%91%E5%85%B3Web%E8%AE%A4%E8%AF%81%E6%8A%A5%E6%96%87%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>通过开发者工具捕捉登录过程及认证报文内容，用于进行报文分析，开发HTTP协议登陆/退出程序。</p><span id="more"></span><h1id="东南大学drcom网关web认证报文分析">东南大学DrCOM网关Web认证报文分析</h1><h2 id="login">1 Login</h2><h3 id="general">1.1 General</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Request URL: https://w.seu.edu.cn:801/eportal/?c=Portal&amp;a=login&amp;callback=dr1003&amp;login_method=1&amp;user_account=%2C0%2C220184347&amp;user_password=&lt;password_plaintext&gt;&amp;wlan_user_ip=121.248.51.170&amp;wlan_user_ipv6=&amp;wlan_user_mac=000000000000&amp;wlan_ac_ip=&amp;wlan_ac_name=jlh_me60&amp;jsVersion=3.3.2&amp;v=2505</span><br><span class="line">Request Method: GET</span><br><span class="line">Status Code: 200 OK</span><br><span class="line">Remote Address: 202.119.25.2:801</span><br><span class="line">Referrer Policy: no-referrer-when-downgrade</span><br></pre></td></tr></table></figure><h3 id="reponse-headers">1.2 Reponse Headers</h3><h4 id="view-parsed">1.2.1 view parsed</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Sat, 09 Nov 2019 08:11:39 GMT</span><br><span class="line">Expires: Thu, 19 Nov 1981 08:52:00 GMT</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Server: OMPXY/1.4.7</span><br><span class="line">Set-Cookie: _SpLangCookies=zh_CN; expires=Sun, 08-Nov-2020 08:11:39 GMT; path=/; domain=w.seu.edu.cn:801</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">X-Powered-By: PHP/5.4.45</span><br></pre></td></tr></table></figure><h4 id="view-source">1.2.2 view source</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: OMPXY/1.4.7</span><br><span class="line">Date: Sat, 09 Nov 2019 08:11:39 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-Powered-By: PHP/5.4.45</span><br><span class="line">Expires: Thu, 19 Nov 1981 08:52:00 GMT</span><br><span class="line">Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Set-Cookie: _SpLangCookies=zh_CN; expires=Sun, 08-Nov-2020 08:11:39 GMT; path=/; domain=w.seu.edu.cn:801</span><br><span class="line">Content-Encoding: gzip</span><br></pre></td></tr></table></figure><h3 id="request-headers">1.3 Request Headers</h3><h4 id="view-parsed-1">1.3.1 view parsed</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cookie: &lt;private&gt;</span><br><span class="line">DNT: 1</span><br><span class="line">Host: w.seu.edu.cn:801</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Referer: https://w.seu.edu.cn/a79.htm?UserIP=121.248.51.170&amp;wlanacname=jlh_me60</span><br><span class="line">Sec-Fetch-Mode: no-cors</span><br><span class="line">Sec-Fetch-Site: same-site</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36</span><br></pre></td></tr></table></figure><h4 id="view-source-1">1.3.2 view source</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /eportal/?c=Portal&amp;a=login&amp;callback=dr1003&amp;login_method=1&amp;user_account=%2C0%2C220184347&amp;user_password=Sjy626262seu&amp;wlan_user_ip=121.248.51.170&amp;wlan_user_ipv6=&amp;wlan_user_mac=000000000000&amp;wlan_ac_ip=&amp;wlan_ac_name=jlh_me60&amp;jsVersion=3.3.2&amp;v=2505 HTTP/1.1</span><br><span class="line">Host: w.seu.edu.cn:801</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36</span><br><span class="line">DNT: 1</span><br><span class="line">Accept: */*</span><br><span class="line">Sec-Fetch-Site: same-site</span><br><span class="line">Sec-Fetch-Mode: no-cors</span><br><span class="line">Referer: https://w.seu.edu.cn/a79.htm?UserIP=121.248.51.170&amp;wlanacname=jlh_me60</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Cookie: &lt;private&gt;</span><br></pre></td></tr></table></figure><h3 id="query-string-parameters">1.4 Query String Parameters</h3><h4 id="view-parsed-2">1.4.1 view parsed</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">c: Portal</span><br><span class="line">a: login</span><br><span class="line">callback: dr1003</span><br><span class="line">login_method: 1</span><br><span class="line">user_account: ,0,220184347</span><br><span class="line">user_password: &lt;password_plaintext&gt;</span><br><span class="line">wlan_user_ip: 121.248.51.170</span><br><span class="line">wlan_user_ipv6: </span><br><span class="line">wlan_user_mac: 000000000000</span><br><span class="line">wlan_ac_ip: </span><br><span class="line">wlan_ac_name: jlh_me60</span><br><span class="line">jsVersion: 3.3.2</span><br><span class="line">v: 2505</span><br></pre></td></tr></table></figure><h4 id="view-source-2">1.4.2 view source</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=Portal&amp;a=login&amp;callback=dr1003&amp;login_method=1&amp;user_account=%2C0%2C220184347&amp;user_password=&lt;password_plaintext&gt;&amp;wlan_user_ip=121.248.51.170&amp;wlan_user_ipv6=&amp;wlan_user_mac=000000000000&amp;wlan_ac_ip=&amp;wlan_ac_name=jlh_me60&amp;jsVersion=3.3.2&amp;v=2505</span><br></pre></td></tr></table></figure><h2 id="logout">2 Logout</h2><h3 id="general-1">2.1 General</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Request URL: https://w.seu.edu.cn:801/eportal/?c=Portal&amp;a=unbind_mac&amp;callback=dr1003&amp;user_account=220184347&amp;wlan_user_mac=309C23F71373&amp;wlan_user_ip=121.248.49.136&amp;jsVersion=3.3.2&amp;v=2974</span><br><span class="line">Request Method: GET</span><br><span class="line">Status Code: 200 OK</span><br><span class="line">Remote Address: 202.119.25.2:801</span><br><span class="line">Referrer Policy: no-referrer-when-downgrade</span><br></pre></td></tr></table></figure><h3 id="reponse-headers-1">2.2 Reponse Headers</h3><h4 id="view-parsed-3">2.2.1 view parsed</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Sat, 09 Nov 2019 08:02:21 GMT</span><br><span class="line">Expires: Thu, 19 Nov 1981 08:52:00 GMT</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Server: OMPXY/1.4.7</span><br><span class="line">Set-Cookie: _SpLangCookies=zh_CN; expires=Sun, 08-Nov-2020 08:02:21 GMT; path=/; domain=w.seu.edu.cn:801</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">X-Powered-By: PHP/5.4.45</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="view-source-3">2.2.2 view source</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: OMPXY/1.4.7</span><br><span class="line">Date: Sat, 09 Nov 2019 08:02:21 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-Powered-By: PHP/5.4.45</span><br><span class="line">Expires: Thu, 19 Nov 1981 08:52:00 GMT</span><br><span class="line">Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Set-Cookie: _SpLangCookies=zh_CN; expires=Sun, 08-Nov-2020 08:02:21 GMT; path=/; domain=w.seu.edu.cn:801</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="request-headers-1">2.3 Request Headers</h3><h4 id="view-parsed-4">2.3.1 view parsed</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cookie: &lt;private&gt;</span><br><span class="line">DNT: 1</span><br><span class="line">Host: w.seu.edu.cn:801</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Referer: https://w.seu.edu.cn/</span><br><span class="line">Sec-Fetch-Mode: no-cors</span><br><span class="line">Sec-Fetch-Site: same-site</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="view-source-4">2.3.2 view source</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /eportal/?c=Portal&amp;a=unbind_mac&amp;callback=dr1003&amp;user_account=220184347&amp;wlan_user_mac=309C23F71373&amp;wlan_user_ip=121.248.49.136&amp;jsVersion=3.3.2&amp;v=2974 HTTP/1.1</span><br><span class="line">Host: w.seu.edu.cn:801</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36</span><br><span class="line">DNT: 1</span><br><span class="line">Accept: */*</span><br><span class="line">Sec-Fetch-Site: same-site</span><br><span class="line">Sec-Fetch-Mode: no-cors</span><br><span class="line">Referer: https://w.seu.edu.cn/</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Cookie: &lt;private&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="query-string-parameters-1">2.4 Query String Parameters</h3><h4 id="view-parsed-5">2.4.1 view parsed</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">c: Portal</span><br><span class="line">a: unbind_mac</span><br><span class="line">callback: dr1003</span><br><span class="line">user_account: 220184347</span><br><span class="line">wlan_user_mac: 309C23F71373</span><br><span class="line">wlan_user_ip: 121.248.49.136</span><br><span class="line">jsVersion: 3.3.2</span><br><span class="line">v: 2974</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="view-source-5">2.4.2 view source</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=Portal&amp;a=unbind_mac&amp;callback=dr1003&amp;user_account=220184347&amp;wlan_user_mac=309C23F71373&amp;wlan_user_ip=121.248.49.136&amp;jsVersion=3.3.2&amp;v=2974</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> DrCOM </tag>
            
            <tag> Authentication </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python在Linux上获取网卡IP地址</title>
      <link href="/posts/Python%E5%9C%A8Linux%E4%B8%8A%E8%8E%B7%E5%8F%96%E7%BD%91%E5%8D%A1IP%E5%9C%B0%E5%9D%80/"/>
      <url>/posts/Python%E5%9C%A8Linux%E4%B8%8A%E8%8E%B7%E5%8F%96%E7%BD%91%E5%8D%A1IP%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<p>通过Python自带的<code>socket</code>包提取本机IP地址的代码，在Windows上正常，但在Linux上得到的是<code>127.0.1.1</code>。可以通过<code>netifaces</code>包等方法解决。</p><span id="more"></span><h1id="python在linux上获取网卡ip地址">Python在Linux上获取网卡IP地址</h1><h2 id="问题描述">1 问题描述</h2><p>通过Python自带的<code>socket</code>包提取本机IP地址的代码，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">socket.gethostbyname(socket.gethostname())</span><br></pre></td></tr></table></figure><p>这段代码在Windows上正常，但在Linux上得到的是<code>127.0.1.1</code>。</p><h2 id="解决方法">2 解决方法</h2><p>我通过<code>netifaces</code>包解决该问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">os_platform = platform.platform().lower()</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;windows&#x27;</span> <span class="keyword">in</span> os_platform:</span><br><span class="line">    <span class="comment"># get host ip</span></span><br><span class="line">    self.ip = socket.gethostbyname(self.hostname)</span><br><span class="line"><span class="keyword">elif</span> <span class="string">&#x27;linux&#x27;</span> <span class="keyword">in</span> os_platform:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        if_addresses = ni.ifaddresses(<span class="string">&#x27;eth0&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        if_addresses = ni.ifaddresses(<span class="string">&#x27;eno1&#x27;</span>)</span><br><span class="line">        self.ip = if_addresses[ni.AF_INET][<span class="number">0</span>][<span class="string">&#x27;addr&#x27;</span>]</span><br></pre></td></tr></table></figure><ul><li>可以通过<code>import platform</code>来调取当前系统版本；</li><li>大多数Linux机器外网IP的网卡都是<code>eth0</code>，此处<code>eno1</code>是根据遇到的特例加上的处理。<em>（最好通过弄配置文件解决哈，这样多少有点hardcode了）</em></li></ul><h2 id="参考资料">3 参考资料</h2><blockquote><p><strong><ahref="https://stackoverflow.com/questions/24196932/how-can-i-get-the-ip-address-from-nic-in-python">Howcan I get the IP address from NIC in Python? -StackOverflow</a></strong></p><p><strong>Answer: https://stackoverflow.com/a/24196955</strong></p><p>Two methods:</p><p><strong>Method #1 (use external package)</strong></p><p>You need to ask for the IP address that is bound to your<code>eth0</code> interface. This is available from the <ahref="https://pypi.python.org/pypi/netifaces/">netifaces package</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> netifaces <span class="keyword">as</span> ni</span><br><span class="line">ni.ifaddresses(<span class="string">&#x27;eth0&#x27;</span>)</span><br><span class="line">ip = ni.ifaddresses(<span class="string">&#x27;eth0&#x27;</span>)[ni.AF_INET][<span class="number">0</span>][<span class="string">&#x27;addr&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> ip  <span class="comment"># should print &quot;192.168.100.37&quot;</span></span><br></pre></td></tr></table></figure><p>You can also get a list of all available interfaces via</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ni.interfaces()</span><br></pre></td></tr></table></figure><p><strong>Method #2 (no external package)</strong></p><p>Here's a way to get the IP address without using a pythonpackage:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> fcntl</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_ip_address</span>(<span class="params">ifname</span>):</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    <span class="keyword">return</span> socket.inet_ntoa(fcntl.ioctl(</span><br><span class="line">        s.fileno(),</span><br><span class="line">        <span class="number">0x8915</span>,  <span class="comment"># SIOCGIFADDR</span></span><br><span class="line">        struct.pack(<span class="string">&#x27;256s&#x27;</span>, ifname[:<span class="number">15</span>])</span><br><span class="line">    )[<span class="number">20</span>:<span class="number">24</span>])</span><br><span class="line"></span><br><span class="line">get_ip_address(<span class="string">&#x27;eth0&#x27;</span>)  <span class="comment"># &#x27;192.168.0.110&#x27;</span></span><br></pre></td></tr></table></figure><p>Note: detecting the IP address to determine what environment you areusing is quite a hack. Almost all frameworks provide a very simple wayto set/modify an environment variable to indicate the currentenvironment. Try and take a look at your documentation for this. Itshould be as simple as doing</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> app.config[<span class="string">&#x27;ENV&#x27;</span>] == <span class="string">&#x27;production&#x27;</span>:</span><br><span class="line">  <span class="comment">#send production email</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="comment">#send development email</span></span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Violent Delights Have Violent Ends</title>
      <link href="/posts/Violent-Delights-Have-Violent-Ends/"/>
      <url>/posts/Violent-Delights-Have-Violent-Ends/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>"These violent delights have violent ends</em> <em>And in theirtriumph die, like fire and powder,</em> <em>Which as they kiss consume:the sweetest honey</em> <em>Is loathsome in his own deliciousness</em><em>And in the taste confounds the appetite:</em> <em>Therefore lovemoderately; long love doth so;</em> <em>Too swift arrives as tardy astoo slow."</em></p><p><strong><em>- Shakespeare, Romeo and Juliet</em></strong></p></blockquote><span id="more"></span><blockquote><p><ahref="https://www.popsugar.com/entertainment/Westworld-Quote-Violent-Delights-Have-Violent-Ends-42534880">Westworld:The Meaning Behind "These Violent Delights Have Violent Ends"</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Digest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Have You Ever Questioned the Nature of Your Reality</title>
      <link href="/posts/Have-You-Ever-Questioned-the-Nature-of-Your-Reality/"/>
      <url>/posts/Have-You-Ever-Questioned-the-Nature-of-Your-Reality/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>"Have you ever questioned the nature of your reality? Did youever stop to wonder about your actions? The price you'd have to pay ifthere was a reckoning? That reckoning is here."</em></p><p><strong><em>- Westworld</em></strong></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Digest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axel - 多线程加速下载工具</title>
      <link href="/posts/axel-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/"/>
      <url>/posts/axel-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>axel是一款通过多线程加速下载的工具，实测比<code>wget</code>、<code>curl</code>显著更快。</p><span id="more"></span><h1 id="axel---多线程加速下载工具">axel - 多线程加速下载工具</h1><p>在使用PyTorch预训练模型的时候，发现PyTorch的预训练模型需要从<code>https://download.pytorch.org</code>上下载，该站点域名解析到cloudfront家的CDN，是具备全球缓存和分发能力的。不过由于一些众所周知的原因，境内下载时会遇到速度缓慢、连接不稳定、超时报错等问题，为了能够在服务器上正常下载预训练模型，进行fine-tune，我尝试了<code>wget</code>、<code>curl</code>进行手动下载，但速度都非常缓慢。最终我找到了axel，通过多线程顺利下载成功。</p><h1 id="introduction">1 Introduction</h1><blockquote><p><strong><ahref="https://github.com/axel-download-accelerator/axel">axel -GitHub.com</a></strong></p><p>Axel tries to accelerate the download process by using multipleconnections per file, and can also balance the load between differentservers.</p><p>Axel tries to be as light as possible, so it might be useful onbyte-critical systems.</p><p>Axel supports HTTP, HTTPS, FTP and FTPS protocols.</p></blockquote><p>Axel通过建立多个连接来下载同一个文件，而且还具备在不同服务器之间负载均衡的能力。</p><p>Axel非常轻量，可适用于极端小内存设备。</p><p>Axel支持HTTP, HTTPS, FTP和FTPS协议。</p><h1 id="usage">2 Usage</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axel &lt;url&gt;</span><br></pre></td></tr></table></figure><ul><li>即可下载<code>&lt;url&gt;</code>对应的文件</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Tools </tag>
            
            <tag> axel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch CUDA进程在Flask debug模式下死锁原因推测</title>
      <link href="/posts/PyTorch-CUDA%E8%BF%9B%E7%A8%8B%E5%9C%A8Flask-debug%E6%A8%A1%E5%BC%8F%E4%B8%8B%E6%AD%BB%E9%94%81%E5%8E%9F%E5%9B%A0%E6%8E%A8%E6%B5%8B/"/>
      <url>/posts/PyTorch-CUDA%E8%BF%9B%E7%A8%8B%E5%9C%A8Flask-debug%E6%A8%A1%E5%BC%8F%E4%B8%8B%E6%AD%BB%E9%94%81%E5%8E%9F%E5%9B%A0%E6%8E%A8%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p>基于Flask部署的PyTorch模型HTTPAPI在debug模式下偶现死锁问题，无法被<code>kill</code>掉，<code>reboot</code>或<code>shutdown</code>无法正常重启，<code>nvidia-smi</code>无法调出。初步推测可能与<code>debug</code>模式下创建的两套进程有关。</p><span id="more"></span><h1 id="pytorch-cuda进程在flask-debug模式下死锁原因推测">PyTorchCUDA进程在Flask debug模式下死锁原因推测</h1><h2 id="问题描述">1 问题描述</h2><p>我通过Flask开发API，把基于PyTorch深度学习模型实现为HTTP接口。应合作方需求，需要把Flask函数中的一些变量内容输出到Flask日志中供查阅。因此我使用了Flask的logger来进行输出，并开启Flaskapplication的debug模式。</p><p>运行后，出现过一次进程无响应的情况。API无法被调用，<code>ps -aux</code>可以查看进程，但服务器上的<code>kill</code>,<code>kill -9</code>无法杀死进程。<code>nvidia-smi</code>无法掉出NVIDIAGPU检视面板，<code>reboot</code>,<code>shutdown -r now</code>均无法connect到service上，无法重启。</p><p>最终通过<code>reboot -f</code>强制设备重启解决。</p><h2 id="原因推测">2 原因推测</h2><p>通过一系列测试和调试。我发现flask启动debugmode的时候，nvidia-smi里会出现两个进程，进程执行的脚本及参数相同，但PID不同。</p><p>目前推测原因可能与Flask的debug mode有关。开启Flask的debugmode后，Flask在debugmode下会启动相同的两套进程，这两个GPU上的进程可能因争用资源而小概率出现死锁，内核态死锁后导致即使是kill的发出的signal9也无法被进程接收，因此死锁进程无法被系统命令，如<code>kill</code>命令正常关闭，GPU资源被锁导致<code>nvidia-smi</code>无法执行并显示。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> PyTorch </tag>
            
            <tag> CUDA </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linecache - 快速读取文件的指定行</title>
      <link href="/posts/linecache-%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E7%9A%84%E6%8C%87%E5%AE%9A%E8%A1%8C/"/>
      <url>/posts/linecache-%E5%BF%AB%E9%80%9F%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E7%9A%84%E6%8C%87%E5%AE%9A%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>读取文件中的指定行，是经常需要用到的功能。通过Python的linecache模块，可以快速定位、读取文件中的指定行。</p><span id="more"></span><h1 id="linecache---快速读取文件的指定行">linecache -快速读取文件的指定行</h1><h2 id="getline-函数">1 <code>getline</code> 函数</h2><p>函数体：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linecache.getline(filename, lineno[, module_globals])</span><br></pre></td></tr></table></figure><p>例如，在实现PyTorch的Dataset派生类时，需要实现<code>__getitem__(self, idx)</code>类成员函数，可以通过<code>linecache</code>模块读取<code>idx</code>行的文本内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Return current SNLI_VE dataset idx&#x27;s data</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    line = linecache.getline(self.SNLI_VE_filename, idx).strip()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> line</span><br></pre></td></tr></table></figure><h2 id="链接">2 链接</h2><blockquote><p><ahref="https://cloud.tencent.com/developer/section/1367744">linecache(File &amp; Directory Access) - Python 中文开发手册 - 开发者手册 -云+社区 - 腾讯云</a></p></blockquote><blockquote><p><ahref="https://blog.csdn.net/my2010sam/article/details/38022041">详解pythonlinecache模块读取文件的方法</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> linecache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>screen中通过copy mode查看先前输出</title>
      <link href="/posts/screen%E4%B8%AD%E9%80%9A%E8%BF%87copy-mode%E6%9F%A5%E7%9C%8B%E5%85%88%E5%89%8D%E8%BE%93%E5%87%BA/"/>
      <url>/posts/screen%E4%B8%AD%E9%80%9A%E8%BF%87copy-mode%E6%9F%A5%E7%9C%8B%E5%85%88%E5%89%8D%E8%BE%93%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<p>screen是Linux环境下的多窗口管理器，可以管理可后台运行的窗口。问题是，每次进入screen时，窗口就无法滚动查看先前输出的内容了。可以通过copymode解决。</p><span id="more"></span><h1 id="screen中通过copy-mode查看先前输出">screen中通过copymode查看先前输出</h1><h2 id="copy-mode">1 copy mode</h2><p>首先，进入后台运行的screen窗口（名为<code>screen_name</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -R screen_name</span><br></pre></td></tr></table></figure><p>进入后，键盘输入组合键 <code>Ctrl</code> + <code>A</code> +<code>[</code> 即可进入copymode，就可以通过例如方向键向上查看先前输出的内容了。</p><h2 id="链接">2 链接</h2><blockquote><p><ahref="https://www.oschina.net/question/262762_102096?sort=time">Linux使用screen之后terminal就没法往上走看前面的输出内容了</a></p><p><strong>ZYud</strong> 2013/03/21 17:18</p><p>ctrl a+[ 然后使用上下</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Tools </tag>
            
            <tag> screen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Shell或Bat脚本中激活conda环境</title>
      <link href="/posts/%E5%9C%A8Shell%E6%88%96Bat%E8%84%9A%E6%9C%AC%E4%B8%AD%E6%BF%80%E6%B4%BBconda%E7%8E%AF%E5%A2%83/"/>
      <url>/posts/%E5%9C%A8Shell%E6%88%96Bat%E8%84%9A%E6%9C%AC%E4%B8%AD%E6%BF%80%E6%B4%BBconda%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>通过<code>source /YOUR_CONDA_PATH/bin/activate your_env</code>在LinuxShell脚本中激活conda环境；通过<code>call activate your_env</code>在WindowsBat脚本中激活conda环境。</p><span id="more"></span><h1id="在shell或bat脚本中激活conda环境">在Shell或Bat脚本中激活conda环境</h1><h2 id="linux-shell脚本">1 Linux Shell脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">source</span> /YOUR_CONDA_PATH/bin/activate your_env</span><br><span class="line">conda list</span><br><span class="line">python --version</span><br></pre></td></tr></table></figure><ul><li>在Ubuntu 16.04中测试可行</li></ul><blockquote><p>参考链接：</p><p><ahref="https://www.zhihu.com/question/322406344/answer/742158645">怎么用shell脚本激活conda虚拟环境？</a></p></blockquote><h2 id="windows-bat脚本">2 Windows Bat脚本</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> activate your_env</span><br><span class="line">conda list</span><br><span class="line">python --version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Shell </tag>
            
            <tag> Bat </tag>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IPMailAlert - 简易IP地址变动监测及邮件提醒</title>
      <link href="/posts/IPMailAlert-%E7%AE%80%E6%98%93IP%E5%9C%B0%E5%9D%80%E5%8F%98%E5%8A%A8%E7%9B%91%E6%B5%8B%E5%8F%8A%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92/"/>
      <url>/posts/IPMailAlert-%E7%AE%80%E6%98%93IP%E5%9C%B0%E5%9D%80%E5%8F%98%E5%8A%A8%E7%9B%91%E6%B5%8B%E5%8F%8A%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92/</url>
      
        <content type="html"><![CDATA[<p>因为学校的校园网是通过DHCP动态分配IP的，而我又需要通过远程连接来登陆，因此开发了一款简易的IP地址变动检测程序，在检测到IP地址变化时，通过SMTP发送邮件告知我。</p><span id="more"></span><h1 id="ipmailalert---简易ip地址变动监测及邮件提醒">IPMailAlert -简易IP地址变动监测及邮件提醒</h1><h2 id="github">1 GitHub</h2><blockquote><p><a href="https://github.com/HearyShen">HearyShen</a> / <ahref="https://github.com/HearyShen/IPMailAlert">IPMailAlert</a></p></blockquote><h2 id="使用">2 使用</h2><p>Windows平台可以通过Windows的计划任务，设定开机启动时、每隔一小时等的触发器。</p><h2 id="设想">3 设想</h2><p>未来可能增加邮件模板个性化功能。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> SMTP </tag>
            
            <tag> IPMailAlert </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch中使用GloVe预训练词嵌入</title>
      <link href="/posts/PyTorch%E4%B8%AD%E4%BD%BF%E7%94%A8GloVe%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%8D%E5%B5%8C%E5%85%A5/"/>
      <url>/posts/PyTorch%E4%B8%AD%E4%BD%BF%E7%94%A8GloVe%E9%A2%84%E8%AE%AD%E7%BB%83%E8%AF%8D%E5%B5%8C%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>在PyTorch使用GloVe预训练好的词嵌入，一些优质的资料。</p><span id="more"></span><h1id="pytorch中使用glove预训练词嵌入">PyTorch中使用GloVe预训练词嵌入</h1><h2 id="glove">1 GloVe</h2><blockquote><p>GloVe官方网站：</p><p><a href="https://nlp.stanford.edu/projects/glove/">GloVe: GlobalVectors for Word Representation</a></p></blockquote><h2 id="在pytorch中处理和使用glove预训练词嵌入">2在PyTorch中处理和使用GloVe预训练词嵌入</h2><blockquote><p>这篇<ahref="https://medium.com/">medium.com</a>上的博文写的很不错，虽然不是中文资料，但是准确、清晰，非常好：</p><p><ahref="https://medium.com/@martinpella/how-to-use-pre-trained-word-embeddings-in-pytorch-71ca59249f76">Howto use Pre-trained Word Embeddings in PyTorch</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PyTorch </tag>
            
            <tag> GloVe </tag>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu环境下NVIDIA GPU驱动问题笔记</title>
      <link href="/posts/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8BNVIDIA-GPU%E9%A9%B1%E5%8A%A8%E9%97%AE%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/Ubuntu%E7%8E%AF%E5%A2%83%E4%B8%8BNVIDIA-GPU%E9%A9%B1%E5%8A%A8%E9%97%AE%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>在运维实验室GPU服务器的过程中，遇到的NVIDIA驱动问题。连续遇到后，结合网上的资料及与朋友的探讨来看，该问题比较常见，但有条理的、全的文档却没看到，因此我在此处记录踩坑和出坑的经验。</p><span id="more"></span><h1 id="ubuntu环境下nvidia-gpu驱动问题笔记">Ubuntu环境下NVIDIAGPU驱动问题笔记</h1><h2 id="问题描述">1 问题描述</h2><p>GPU服务器安装的是Ubuntu 16.04LTS操作系统，每隔一段时间需要重启、重新开机后（因为停电、维护等），都会发现测试<code>nvidia-smi</code>命令时，提示NVIDIA-SMI无法与NVIDIA驱动通信的报错，具体报错如下：</p><blockquote><p>NVIDIA-SMI has failed because it couldn’t communicate with the NVIDIAdriver. Make sure that the latest NVIDIA driver is installed andrunning.</p></blockquote><p>重新安装驱动后，有时候正常，有时候会出现GUI工作不正常的<strong>循环登录</strong>问题，具体表现为：GUI界面用户登录，输入正确的密码大约3秒钟后，并未进入桌面，而是屏幕一黑，又回到登录界面。不论试多少次，都是反复、重复登录，始终无法进入GUI桌面。</p><h2 id="原因分析">2 原因分析</h2><p>据查，该问题的原因大致是，Ubuntu会自动更新Linux内核，而且Ubuntu对Linux内核的更新还比较频繁，重启后就会换成升级的新版本的Linux内核。而NIVIDIA驱动安装时是针对安装时的内核版本，编译生成驱动的内核模块的。因此，当内核的版本升级时，此前安装的NVIDIA驱动因内核模块无法与新内核版本兼容，而导致NVIDIA驱动无法工作，于是在通过<code>nvidia-smi</code>检视GPU状态时出现无法与NVIDIA驱动正常通信，需要重新安装并运行最新版驱动的提示。</p><p>而GUI出现的循环登录问题，暂时还不理解具体的原因，应该是和GUI渲染与显卡的配置有关。服务器一般有一个显卡用于GUI渲染，和加速计算的GPU性能卡不同。具体原理存疑。</p><h2 id="解决方案">3 解决方案</h2><p>首先，在<ahref="http://www.nvidia.com">NVIDIA官网</a>下载最新版的GPU驱动；</p><p>随后，将驱动的<code>*.run</code>文件权限设置为可执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chomod 764 NVIDIA-Linux-x86_64-xxx.xx.run</span><br></pre></td></tr></table></figure><p>接下来，临时关闭显示服务<code>lightdm</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service lightdm stop</span><br></pre></td></tr></table></figure><p>此时屏幕进入字符模式，但未出现Shell，键盘按键<code>Ctrl+Alt+F1~6</code>调出Shell<em>（F1~6任选一个）</em>；</p><p>接下来需要输入登录的用户名、密码；</p><p>因为接下来装驱动需要以<code>root</code>身份运行，因此这里直接切换到<code>root</code>用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su root</span><br></pre></td></tr></table></figure><p>接下来卸载原驱动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/nvidia-uninstall</span><br></pre></td></tr></table></figure><ul><li><strong>注意：</strong>如果此前是用官方<code>*.run</code>文件安装的，需要通过官方卸载程序卸载；</li></ul><p>或：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge nvidia-*</span><br></pre></td></tr></table></figure><ul><li>如果之前是通过apt安装的，则通过<code>apt-get</code>卸载干净；如果此前是通过<code>*.run</code>文件安装的，该命令无法有效卸载。</li></ul><p>卸载完成后，重新安装新驱动：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./NVIDIA-Linux-x86_64-xxx.xx.run</span><br></pre></td></tr></table></figure><p>一般按照默认选项即可；</p><p><strong>注意：</strong>如果遇到<strong>循环登录</strong>问题，安装驱动时需要加上<code>--no-opengl-files</code>选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./NVIDIA-Linux-x86_64-xxx.xx.run --no-opengl-files</span><br></pre></td></tr></table></figure><blockquote><p>关于这个<code>--no-opengl-files</code>选项在该问题中的作用，暂时找不到可靠的、准确的解释。</p><p><strong>以下解释摘自：<ahref="https://alvinzhu.xyz/2017/10/28/ubuntu-cuda/">Ubuntu16.04CUDA与OpenGL分离的环境配置</a>（侵删）</strong>这样安装的驱动不包含OpenGL部分，也就是不使用NVIDIA的驱动去加速Ubuntu的GUI界面和其它3D应用。OpenGL这部分就有劳Intel的核显了。（你要是还要用Ubuntu玩游戏，那请忽略此文，何必呢，装个Windows双系统呗，或者KVM+GPUPass through，至于KVM怎么弄，有时间再详细写）。</p><p>这样，用核显做显示，性能很够用了，而且驱动很稳定，GUI再也没死过了。AMD的显卡驱动也还不错，插一个低端AMD卡专门做显示也是可以的。NVIDIA的私有驱动就专注于CUDA吧。</p></blockquote><p>安装完成后，启动显示服务即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service lightdm start</span><br></pre></td></tr></table></figure><p>至此，屏幕回到GUI界面，应可正常操作。</p><h2 id="相关链接">4 相关链接</h2><p>我在搜索该问题时，发现这两种问题还是比较常见的，但网上的资料要么是没有针对性，要么是梳理混乱，不全，可读性、可操作性差，以下列举提对要点的几个链接：</p><blockquote><p><ahref="https://blog.csdn.net/wang_ys121/article/details/82881716">Ubuntu安装NVIDIA驱动后，无法登录，循环登录，登录界面进不去，回到登录界面</a></p></blockquote><blockquote><p><ahref="https://blog.csdn.net/hiudawn/article/details/81357029">nvidia-smi报错（重装Nvidia驱动）</a></p></blockquote><blockquote><p><a href="https://alvinzhu.xyz/2017/10/28/ubuntu-cuda/">Ubuntu16.04CUDA与OpenGL分离的环境配置</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> NVIDIA </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib动态刷新显示图像</title>
      <link href="/posts/matplotlib%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%83%8F/"/>
      <url>/posts/matplotlib%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<p>使用<ahref="http://www.matplotlib.org/">matplotlib</a>显示图像，并且能够在窗口内动态刷新（定时/按键）检视数据。</p><span id="more"></span><h1 id="matplotlib动态刷新显示图像">matplotlib动态刷新显示图像</h1><h2 id="定时刷新">1 定时刷新</h2><h3 id="代码示例">1.1 代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> mpimg</span><br><span class="line"></span><br><span class="line">image_root = <span class="string">&quot;/data/image_dir/&quot;</span></span><br><span class="line"></span><br><span class="line">plt.ion()   <span class="comment"># matplotlib interactivate mode</span></span><br><span class="line"><span class="keyword">for</span> content <span class="keyword">in</span> contents:</span><br><span class="line">    text = content.text</span><br><span class="line">    image_filename = content.image</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s\t\t%s&quot;</span> % (text, image_filename))</span><br><span class="line">    </span><br><span class="line">    image = mpimg.imread(os.path.join(image_root, image_filename))<span class="comment"># read image from path</span></span><br><span class="line">    plt.imshow(image)</span><br><span class="line">    plt.title(text)</span><br><span class="line">    plt.pause(<span class="number">1</span>)<span class="comment"># pause 1 second</span></span><br><span class="line">    plt.clf()<span class="comment"># clear the current figure</span></span><br></pre></td></tr></table></figure><h3 id="注意事项">1.2 注意事项</h3><h4 id="plt.ion函数">1.2.1 <code>plt.ion()</code>函数</h4><p>函数<code>plt.ion()</code>是动态刷新的关键，官方函数定义如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ion</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Turn the interactive mode on.&quot;&quot;&quot;</span></span><br><span class="line">    matplotlib.interactive(<span class="literal">True</span>)</span><br><span class="line">    install_repl_displayhook()</span><br></pre></td></tr></table></figure><ul><li><code>ion</code>函数说明为：Turn the interactivate mode on。</li></ul><h4 id="plt.clf函数">1.2.2 <code>plt.clf()</code>函数</h4><p>另外，关于<code>plt.clf()</code>函数：</p><blockquote><p><strong>摘自<ahref="https://blog.csdn.net/nkhgl/article/details/100915763">【matplotlib动态显示图片】</a>的注意事项：</strong></p><p>在动态显示图片的过程当中，发现随着显示图片数增加，画面变得越来越卡。这是因为内存没有释放，导致变卡。</p><p>所以加上<code>plt.clf()</code>这条语句之后能够及时清除figure。</p></blockquote><h2 id="按键刷新">2 按键刷新</h2><h3 id="代码示例-1">2.1 代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> mpimg</span><br><span class="line"></span><br><span class="line">image_root = <span class="string">&quot;/data/image_dir/&quot;</span></span><br><span class="line"></span><br><span class="line">plt.ion()   <span class="comment"># matplotlib interactivate mode</span></span><br><span class="line"><span class="keyword">for</span> content <span class="keyword">in</span> contents:</span><br><span class="line">    text = content.text</span><br><span class="line">    image_filename = content.image</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%s\t\t%s&quot;</span> % (text, image_filename))</span><br><span class="line">    </span><br><span class="line">    image = mpimg.imread(os.path.join(image_root, image_filename))<span class="comment"># read image from path</span></span><br><span class="line">    plt.imshow(image)</span><br><span class="line">    plt.title(text)</span><br><span class="line">    <span class="comment"># plt.pause(0.1)# pause 0.1 second</span></span><br><span class="line">    <span class="built_in">input</span>()</span><br><span class="line">    plt.clf()<span class="comment"># clear the current figure</span></span><br></pre></td></tr></table></figure><h3 id="注意事项-1">2.2 注意事项</h3><h4 id="input函数">2.2.1 <code>input()</code>函数</h4><blockquote><p><ahref="https://blog.csdn.net/baidu_38635190/article/details/81572362">关于python的matplotlib库下实现按键后切换show图片</a></p><p>假如用plt.ion不会卡住，但一定要用plt.pause让窗口保留，然后用input等待键盘输入后才开始下一个循环</p></blockquote><p>网上的做法如上摘录，一般会设置0.01秒pause停留。不过我发现注释掉，不做pause其实也是正常的，没发现什么影响。此处存疑。</p><p><code>input()</code>函数接收按键输入，不输入的话，直接回车Enter结束即可，可实现按Enter键更新下一张图像及文本的效果。</p><h2 id="仅显示">3 仅显示</h2><p>此处另附最基本的形式，即仅显示图文，无动态刷新，作参考。</p><h3 id="代码示例-2">3.1 代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> mpimg</span><br><span class="line"></span><br><span class="line">image_root = <span class="string">&quot;/data/image_dir/&quot;</span></span><br><span class="line"></span><br><span class="line">image_path = os.path.join(image_root, <span class="string">&#x27;demo.jpg&#x27;</span>)</span><br><span class="line">image = mpimg.imread(image_path)</span><br><span class="line">plt.imshow(image)</span><br><span class="line">plt.title(<span class="string">&quot;Image and text&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="参考链接">4 参考链接</h2><p>查阅到的类似情形的相关博客如下：</p><blockquote><p><ahref="https://blog.csdn.net/baidu_38635190/article/details/81572362">关于python的matplotlib库下实现按键后切换show图片</a></p></blockquote><blockquote><p><ahref="https://blog.csdn.net/nkhgl/article/details/100915763">【matplotlib动态显示图片】</a></p></blockquote><blockquote><p><ahref="https://blog.csdn.net/zhanghao3389/article/details/82685072">Python中matplotlib实时画图</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
            <tag> Image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux用户管理简记</title>
      <link href="/posts/Linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E7%AE%80%E8%AE%B0/"/>
      <url>/posts/Linux%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E7%AE%80%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>简单记录常用的Linux环境下管理用户的命令、配置文件等。</p><span id="more"></span><h1 id="linux用户管理简记">Linux用户管理简记</h1><h2 id="cat-etcpasswd">1 cat /etc/passwd</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>可以查看系统内所有用户的信息</p><h2 id="adduser">2 adduser</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser heary</span><br></pre></td></tr></table></figure><p>在Ubuntu环境下会出现交互式对话，输入并检查用户密码、注释信息（全名、房间、电话）等。</p><p>根据我的实际使用体验，如果不是写脚本批量执行，而是注册单个用户的话，推荐用adduser。清楚、容易配置、不会出错。</p><blockquote><p><ahref="https://blog.csdn.net/li_101357/article/details/46778827">useradd与adduser的区别</a></p><p>“useradd是一个linux命令，但是它提供了很多参数在用户使用的时候根据自己的需要进行设置；而adduser是一个perl脚本，在使用的时候会出现类似人机交互的界面，提供选项让用户填写和选择，这个命令比起useradd来说比较简单，也比较傻瓜。”</p></blockquote><h2 id="userdel">3 userdel</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel heary</span><br></pre></td></tr></table></figure><p>删除用户</p><h2 id="usermod">4 usermod</h2><p>修改用户，详见<code>man</code></p><h2 id="chfn">5 chfn</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chfn heary</span><br></pre></td></tr></table></figure><p>服务器上用户多了，有时候只看用户名会搞不清楚谁是谁，添加必要的注释信息是必要的。对于此前创建用户时没有添加备注信息的用户，可以通过<code>chfn</code>命令进行用户注释信息的修改。和<code>adduser</code>一样，<code>chfn</code>命令也有良好的可交互性。</p><h2 id="w">6 w</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w</span><br></pre></td></tr></table></figure><p>查看当前有哪些用户正登陆在服务器上。</p><h2 id="whoami">7 whoami</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p>查询当前登陆用户（自己）的用户名<em>（不过其实用不到吧，bash提示符直接就显示了username@hostname）</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VQA - 近五年视觉问答顶会论文创新点笔记</title>
      <link href="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>简要梳理近五年顶级会议发表的视觉问答（Visual Question Answering,VQA）相关论文的创新点。选取自<ahref="https://papers.nips.cc/">NIPS</a>、<ahref="http://openaccess.thecvf.com">CVPR</a>、<ahref="http://openaccess.thecvf.com">ICCV</a>、<ahref="https://aclweb.org/anthology/">ACL</a>等，已整理86篇。</p><p>2019.10.21修订，新增5篇ACL 2019。</p><span id="more"></span><h1 id="vqa---近五年视觉问答顶会论文创新点笔记">VQA -近五年视觉问答顶会论文创新点笔记</h1><h2id="a-multi-world-approach-to-question-answering-about-real-world-scenes-based-on-uncertain-input">2014A Multi-World Approach to Question Answering about Real-World Scenesbased on Uncertain Input</h2><blockquote><p>Malinowski M, Fritz M. A multi-world approach to question answeringabout real-world scenes based on uncertain input[C]//Advances in neuralinformation processing systems. 2014: 1682-1690.</p></blockquote><p>本文是VQA的概念萌芽作，但此后的文章【2015 VQA Visual QuestionAnswering】认为本文定义的问题把answers限制在了预定义的16种基础颜色和894种目标类别中，只算VQAEfforts，没有真正定义VQA。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2014%20A%20Multi-World%20Approach%20to%20Question%20Answering%20about%20Real-World%20Scenes%20based%20on%20Uncertain%20Input.jpg" class="" title="Figure 1: Overview of our approach to question answering with multiple latent worlds in contrast to single world approach."><p>本文在一个贝叶斯框架中，把对真实世界场景的语义分割和对问题语句的符号推理结合起来，实现自动问答。</p><p>本文给出了一个含1.2万条人工标注问答对的RGBD彩色景深图像数据集。</p><h2id="are-you-talking-to-a-machine-dataset-and-methods-for-multilingual-image-question">2015Are You Talking to a Machine Dataset and Methods for Multilingual ImageQuestion</h2><blockquote><p>Gao H, Mao J, Zhou J, et al. Are you talking to a machine? datasetand methods for multilingual image question[C]//Advances in neuralinformation processing systems. 2015: 2296-2304.</p></blockquote><p>本文提出mQA模型，能够回答有关某个图像内容的问题。回答的答案可以是一个句子、短语或单词。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2015%20Are%20You%20Talking%20to%20a%20Machine%20Dataset%20and%20Methods%20for%20Multilingual%20Image%20Question.jpg" class="" title="Figure 2: Illustration of the mQA model architecture. We input an image and a question about the image (i.e. “What is the cat doing?”) to the model. The model is trained to generate the answer to the question (i.e. “Sitting on the umbrella”). The weight matrix in the word embedding layers of the two LSTMs (one for the question and one for the answer) are shared. In addition, as in [25], this weight matrix is also shared, in a transposed manner, with the weight matrix in the Softmax layer. Different colors in the figure represent different components of the model. (Best viewed in color.)"><p>本文模型含四部分：</p><ol type="1"><li>LSTM提取问题表示；</li><li>CNN提取图像视觉表示；</li><li>LSTM存储一个回答的语言上下文；</li><li>一个融合组件用于结合前三者并生成答案。</li></ol><p>本文提供了一个自由风格多语种图像问答数据集（Freestyle MultilingualImage Question Answering, FM-IQA）。</p><h2id="ask-your-neurons-a-neural-based-approach-to-answering-questions-about-images">2015Ask Your Neurons A Neural-Based Approach to Answering Questions AboutImages</h2><blockquote><p>Malinowski M, Rohrbach M, Fritz M. Ask your neurons: A neural-basedapproach to answering questions about images[C]//Proceedings of the IEEEinternational conference on computer vision. 2015: 1-9.</p></blockquote><p>本文提出Neural-Image-QA模型。原理是encoder-decoder框架，把VQA建模为生成问题，在逐词编码完question句子后，逐词解码输出answer，以预测出<code>&lt;END&gt;</code>为结束符。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2015%20Ask%20Your%20Neurons%20A%20Neural-Based%20Approach%20to%20Answering%20Questions%20About%20Images.jpg" class="" title="Figure 1. Our approach Neural-Image-QA to question answering with a Recurrent Neural Network using Long Short Term Memory (LSTM). To answer a question about an image, we feed in both, the image (CNN features) and the question (green boxes) into the LSTM. After the (variable length) question is encoded, we generate the answers (multiple words, orange boxes). During the answer generation phase the previously predicted answers are fed into the LSTM until the END symbol is predicted."><h2 id="exploring-models-and-data-for-image-question-answering">2015Exploring Models and Data for Image Question Answering</h2><blockquote><p>Ren M, Kiros R, Zemel R. Exploring models and data for image questionanswering[C]//Advances in neural information processing systems. 2015:2953-2961.</p></blockquote><p>本文提出使用神经网络、视觉语义嵌入来预测简单视觉问题的答案，而不加入中间步骤，比如：目标检测、图像分割。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2015%20Exploring%20Models%20and%20Data%20for%20Image%20Question%20Answering.jpg" class="" title="Figure 2: VIS+LSTM Model"><p>也是一个类似encoder-decoderframework的东西，把图像特征和问题句子的各单词以此输入LSTM中进行编码，但没有解码输出句子，而是把编码完成时的向量用来在预定义词汇上做分类，预测答案单词。</p><p>本文还给出了一种问题生成算法，能够把图像描述转换为问题语句。</p><h2 id="visalogy-answering-visual-analogy-questions">2015 VisalogyAnswering Visual Analogy Questions</h2><blockquote><p>Sadeghi F, Zitnick C L, Farhadi A. Visalogy: Answering visual analogyquestions[C]//Advances in Neural Information Processing Systems. 2015:1882-1890.</p></blockquote><p>本文研究视觉类比（VisualAnalogy）问题。图像A对图像B，正如图像C和那个图像？</p><p>本文使用四路暹罗架构（quadruple Siamesearchitecture）的卷积神经网络。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2015%20Visalogy%20Answering%20Visual%20Analogy%20Questions.jpg" class="" title="Figure 2: VISALOGY Network has quadruple Siamese architecture with shared θ parameters. The network is trained with correct analogy quadruples of images [I1, I2, I3, I4] along with wrong analogy quadruples as negative samples. The contrastive loss function pushes (I1; I2) and (I3; I4) of correct analogies close to each other in the embedding space while forcing the distance between (I1; I2) and (I3; I4) in negative samples to be more than margin m."><p>本文的Visalogy网络建立了共享θ参数的四路暹罗架构</p><h2id="viske-visual-knowledge-extraction-and-question-answering-by-visual-verification-of-relation-phrases">2015VisKE Visual Knowledge Extraction and Question Answering by VisualVerification of Relation Phrases</h2><blockquote><p>Sadeghi F, Kumar Divvala S K, Farhadi A. Viske: Visual knowledgeextraction and question answering by visual verification of relationphrases[C]//Proceedings of the IEEE conference on computer vision andpattern recognition. 2015: 1456-1464.</p></blockquote><p>本文主要关注视觉知识抽取，VQA是视觉知识抽取后的应用展示。</p><p>已有的知识抽取研究一般仅仅关注于通过文本驱动的推理来验证关系短语。（无法利用视觉）</p><p>本文首次提出对关系短语的视觉验证的研究问题，并开发了视觉知识抽取系统VisKE（VisualKnowledge Extraction system）</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2015%20VisKE%20Visual%20Knowledge%20Extraction%20and%20Question%20Answering%20by%20Visual%20Verification%20of%20Relation%20Phrases.jpg" class="" title="Figure 2. Approach Overview. Given a relation predicate, such as fish(bear,salmon) VisKE formulates visual verification as the problem of estimating the most probable explanation (MPE) by searching for visual consistencies among the patterns of subject, object and the action being involved."><p>输入的关系谓词：熊(noun, subjective) 捕鱼(verb) 鲑鱼(salmon,objective)。给定一个关系谓词，如：熊捕鱼，VisKE把视觉验证建模为对最可能解释（mostprobable explanation,MPE）的估计问题，通过搜素主语、宾语和动作三者模式之间的视觉一致性（visualconsistencies）实现。</p><h2id="visual-madlibs-fill-in-the-blank-description-generation-and-question-answering">2015Visual Madlibs Fill in the Blank Description Generation and QuestionAnswering</h2><blockquote><p>Yu L, Park E, Berg A C, et al. Visual madlibs: Fill in the blankdescription generation and question answering[C]//Proceedings of theieee international conference on computer vision. 2015: 2461-2469.</p></blockquote><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2015%20Visual%20Madlibs%20Fill%20in%20the%20Blank%20Description%20Generation%20and%20Question%20Answering.jpg" class="" title="Figure 1. An example from the Visual Madlibs Dataset, including a variety of targeted descriptions for people and objects."><p>本文发布VisualMadlibs数据集，通过填空模板生成对人物、目标、外表、活动、互动、场景的描述。</p><h2 id="vqa-visual-question-answering">2015 VQA Visual QuestionAnswering</h2><blockquote><p>Antol S, Agrawal A, Lu J, et al. Vqa: Visual questionanswering[C]//Proceedings of the IEEE international conference oncomputer vision. 2015: 2425-2433.</p></blockquote><p><strong>本文首次提出VQA视觉问答任务。</strong></p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2015%20VQA%20Visual%20Question%20Answering.jpg" class="" title="Figure 1: Examples of free-form, open-ended questions collected for images via Amazon Mechanical Turk. Note that commonsense knowledge is needed along with a visual understanding of the scene to answer many questions."><h2 id="answer-type-prediction-for-visual-question-answering">2016Answer-Type Prediction for Visual Question Answering</h2><blockquote><p>Kafle K, Kanan C. Answer-type prediction for visual questionanswering[C]//Proceedings of the IEEE Conference on Computer Vision andPattern Recognition. 2016: 4976-4984.</p></blockquote><p>本文的核心思想是预测根据问题语句预测问题类型，用于VQA。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2016%20Answer-Type%20Prediction%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 1: In the open-ended VQA problem, an algorithm is given an image and a question, and it must output a string containing the answer. We obtain state-of-the-art results on multiple VQA datasets by adopting a Bayesian approach that incorporates information about the form the answer should take. In this example, the system is given an image of a bear and it is asked about the color of the bear. Our method explicitly infers that this is a “color” question and uses that information in its predictive process."><p>通过预测问题类型，选择针对该问题类型的模型进行VQA回答预测，提高VQA水平。</p><p>本文设计了一款贝叶斯模型。在图像特征x和问题特征q为的条件下，回答k且问题类型为c的概率。</p><h2id="ask-me-anything-free-form-visual-question-answering-based-on-knowledge-from-external-sources">2016Ask Me Anything Free-Form Visual Question Answering Based on Knowledgefrom External Sources</h2><blockquote><p>Wu Q, Wang P, Shen C, et al. Ask me anything: Free-form visualquestion answering based on knowledge from externalsources[C]//Proceedings of the IEEE Conference on Computer Vision andPattern Recognition. 2016: 4622-4630.</p></blockquote><p>本文研究视觉问答，通过把图像内容和外部知识库的信息结合起来，回答宽范围的基于图像的问题。</p><p>本文实际上是把图像信息转换为了属性词和文本描述，转换为了一般的问答问题解决。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2016%20Ask%20Me%20Anything%20Free-Form%20Visual%20Question%20Answering%20Based%20on%20Knowledge%20from%20External%20Sources.jpg" class="" title="Figure 2. Our proposed framework: given an image, a CNN is first applied to produce the attribute-based representation Vatt(I). The internal textual representation is made up of image captions generated based on the image-attributes. The hidden state of the caption-LSTM after it has generated the last word in each caption is used as its vector representation. These vectors are then aggregated as Vcap(I) with average-pooling. The external knowledge is mined from the KB (in this case DBpedia) and the responses encoded by Doc2Vec, which produces a vector Vknow(I). The 3 vectorsV are combined into a single representation of scene content, which is input to the VQA LSTM model which interprets the question and generates an answer."><p>通过image captioning把图像转文本，并向量化为<spanclass="math inline">\(V_{cap}\)</span>；通过imageannotation把图像转单词属性<spanclass="math inline">\(V_{att}\)</span>，检索知识图谱获取文本描述，并向量化为<spanclass="math inline">\(V_{know}\)</span>；然后把以上<spanclass="math inline">\(V_{cap}\)</span>, <spanclass="math inline">\(V_{att}\)</span>, <spanclass="math inline">\(V_{know}\)</span>向量都输入到LSTM解码器中，以query句为逐个step输入来输出回答句。</p><h2id="hierarchical-question-image-co-attention-for-visual-question-answering">2016Hierarchical Question-Image Co-Attention for Visual QuestionAnswering</h2><blockquote><p>Lu J, Yang J, Batra D, et al. Hierarchical question-imageco-attention for visual question answering[C]//Advances In NeuralInformation Processing Systems. 2016: 289-297.</p></blockquote><p>本文提出不仅要建模视觉注意力（看什么位置），还需要建模问题注意力（关注哪些单词）。本文提出VQA协同注意力（Co-Attention）模型，可以对图像、问题注意力联合推理。</p><p>本文的Co-Attention指的是用图像表示来导向问题注意力，用问题表示来导向图像注意力。Co-Attention既能够关注图像中的不同区域，又能够关注问题中的不同块（单词、短语）</p><p>本文对问题文本构建了层次注意力机制（word level, phrase level,question level）。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2016%20Hierarchical%20Question-Image%20Co-Attention%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 1: Flowchart of our proposed hierarchical co-attention model. Given a question, we extract its word level, phrase level and question level embeddings. At each level, we apply co-attention on both the image and question. The final answer prediction is based on all the co-attended image and question features."><p>本文把抽取问题的单词级、短语级和问题整句级嵌入。（对问题文本构建了层次注意力机制）。在每一级都通过co-attention机制来计算图像和问题的注意力。最后基于所有特征预测答案。</p><h2id="image-question-answering-using-convolutional-neural-network-with-dynamic-parameter-prediction">2016Image Question Answering Using Convolutional Neural Network With DynamicParameter Prediction</h2><blockquote><p>Noh H, Hongsuck Seo P, Han B. Image question answering usingconvolutional neural network with dynamic parameterprediction[C]//Proceedings of the IEEE conference on computer vision andpattern recognition. 2016: 30-38.</p></blockquote><p>本文认为，不同的问题，其问题类型、对输入图像的理解层次是不同的。（因此认为CNN要能够根据问题进行动态变化去适应问题需求）。</p><p>本文模型是一个具有动态参数层的CNN，动态参数层的权值能够适应性地由问题语句而定。</p><p>为实现适应性参数预测，本文设计了一个独立的参数预测网络，该网络通过GRU处理输入的问题语句，并通过全连接层来生成一组候选权值作为输出。</p><p>为CNN的全连接层生成大量参数很复杂，本文通过哈希技术来降低复杂性，利用哈希来计算参数预测网络的候选权值一并做出选择。</p><p>本文提出动态参数预测网络（DPPnet）。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2016%20Image%20Question%20Answering%20Using%20Convolutional%20Neural%20Network%20With%20Dynamic%20Parameter%20Prediction.jpg" class="" title="Figure 2. Overall architecture of the proposed Dynamic Parameter Prediction network (DPPnet), which is composed of the classification network and the parameter prediction network. The weights in the dynamic parameter layer are mapped by a hashing trick from the candidate weights obtained from the parameter prediction network."><p>分类网络中的动态参数层的参数，是通过对参数预测网络的候选权值输出做哈希映射取得的。（因为让参数预测网络直接预测全连接层的大量参数太复杂了）</p><h2id="movieqa-understanding-stories-in-movies-through-question-answering">2016MovieQA Understanding Stories in Movies Through Question-Answering</h2><blockquote><p>Tapaswi M, Zhu Y, Stiefelhagen R, et al. Movieqa: Understandingstories in movies through question-answering[C]//Proceedings of the IEEEconference on computer vision and pattern recognition. 2016:4631-4640.</p></blockquote><p>本文发布MovieQA数据集。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2016%20MovieQA%20Understanding%20Stories%20in%20Movies%20Through%20Question-Answering.jpg" class="" title="Figure 1: Our MovieQA dataset contains 14,944 questions about 408 movies. It contains multiple sources of information: plots, subtitles, video clips, scripts, and DVS transcriptions. In this figure we show example QAs from The Matrix and localize them in the timeline."><p>MovieQA数据集是多选题QA，让模型在5个选项中选答案。</p><p>其中有一个DVS的概念，DVS在对话之间插入的对电影场景的描述，是一项面向视障人士的服务。本文借助该服务取得文本描述。</p><p>本文参考了MemN2N模型设计了本文面向QA的Memory Network。</p><h2 id="stacked-attention-networks-for-image-question-answering">2016Stacked Attention Networks for Image Question Answering</h2><blockquote><p>Yang Z, He X, Gao J, et al. Stacked attention networks for imagequestion answering[C]//Proceedings of the IEEE conference on computervision and pattern recognition. 2016: 21-29.</p></blockquote><p>本文提出栈式注意力网络（stacked attention networks, SANs）。</p><p>SANs模型把问题语句表示为语义表示（向量），以此为查询来搜索图像中与答案相关的区域。本文认为VQA需要多步推理，因此设计了一个多层SAN，可以对图像做多次查询，以便渐进地推理出答案。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2016%20Stacked%20Attention%20Networks%20for%20Image%20Question%20Answering.jpg" class="" title="Figure 1: Model architecture and visualization. (b) Visualization of the learned multiple attention layers. The stacked attention network first focuses on all referred concepts, e.g., and objects in the basket (dogs) in bicycle, basket the first attention layer and then further narrows down the focus in the second layer and finds out the answer dog."><p>结合可视化效果来看，多个注意力层实现的是缩小注意力范围的作用。</p><p>所谓的多步推理，其实就是先通过注意力机制找出问题中提及的图像内容，然后再逐步通过注意力在上一步找出的图像内容中进一步找注意区域。几步下来，注意力区域不断缩小，直至最值得注意的区域，即答案。</p><p>具体地，本文把VGGNet的最后一个池化层的结果取出来，得到512×14×14的，保持了原图空间信息矩阵。该矩阵把原图的空间划分为了14×14的网格区域，而每个区域通过一个512维的特征向量作为该区域的表示向量。并以此与问题特征向量计算每个区域的注意力权值。</p><blockquote><p>14×14 is the number of regions in the image and 512 is the dimensionof the feature vector for each region.</p></blockquote><p>本文作者Zichao Yang、Xiaodong He等人恰好是Hierarchical AttentionNetwork,HAN的提出者。我很喜欢他们的论文，对阐明原理非常负责任，总是能用最清晰的思路、最准确的表达来把技术原理讲得清清楚楚。在此致谢！</p><h2id="visual-question-answering-with-question-representation-update-qru">2016Visual Question Answering with Question Representation Update (QRU)</h2><blockquote><p>Li R, Jia J. Visual question answering with question representationupdate (qru)[C]//Advances in Neural Information Processing Systems.2016: 4655-4663.</p></blockquote><p>本文指出要根据图像更新问题表示。本文的方法是，对每一个图像区域进行迭代，每次迭代计算该图像区域与问题的相关性，选出与问题相关的图像区域来对问题表示（questionrepresentation）进行更新，并进一步学习给出正确答案，</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2016%20Visual%20Question%20Answering%20with%20Question%20Representation%20Update%20(QRU).jpg" class="" title="Figure 2: The overall architecture of our model with single reasoning layer for VQA"><p>问题Query0向量和M个图像区域的<span class="math inline">\(Query_{1\sim M}\)</span>向量计算取得M个<span class="math inline">\(Query^{1}_{1\simM}\)</span>向量，由此根据图像的M个区域更新问题表示，即本文的问题表示更新QRU的概念。</p><h2 id="visual7w-grounded-question-answering-in-images">2016 Visual7WGrounded Question Answering in Images</h2><blockquote><p>Zhu Y, Groth O, Bernstein M, et al. Visual7w: Grounded questionanswering in images[C]//Proceedings of the IEEE conference on computervision and pattern recognition. 2016: 4995-5004.</p></blockquote><p>先前的研究工作建立的是QA句子与图像之间的松散的、全局的关联，而本文的研究工作是建立图像中目标级的图像区域与文本描述的语义关联。</p><p>本文发布了Visual7W数据集，包含7万条多选题QA对。</p><p>本文的grounding指的是定位出图像中回答问题时依赖的目标</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2016%20Visual7W%20Grounded%20Question%20Answering%20in%20Images.jpg" class="" title="Figure 1: Deep image understanding relies on detailed knowledge about different image parts. We employ diverse questions to acquire detailed information on images, ground objects mentioned in text with their visual appearances, and provide a multiple-choice setting for evaluating a visual question answering task with both textual and visual answers."><p>Visual7W数据集不仅包含图像、问题及其答案，还标注了答案对应的图像grounding区域。</p><h2 id="where-to-look-focus-regions-for-visual-question-answering">2016Where to Look Focus Regions for Visual Question Answering</h2><blockquote><p>Shih K J, Singh S, Hoiem D. Where to look: Focus regions for visualquestion answering[C]//Proceedings of the IEEE conference on computervision and pattern recognition. 2016: 4613-4621.</p></blockquote><p>本文提出的模型根据查询文本与图像区域之间的相关性来回答视觉问题。</p><p>本文认为模型要能学会根据问题去看图像中的什么地方。</p><p>通过内积计算相关性（查询文本和视觉特征之间）</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2016%20Where%20to%20Look%20Focus%20Regions%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 3. Overview of our network for the example question-answer pairing: “What color is the fire hydrant? Yellow.” Question and answer representations are concatenated, fed through the network, then combined with selectively weighted image region features to produce a score."><ul><li><p>图像区域特征向量 + 文本特征向量 // 此处“+”是连接</p></li><li><p>对每个区域的注意力权重，用于对右侧绿色框中的N个向量做加权平均。</p></li><li><p>dot product,softmax是一次注意力机制，根据文本特征关注图像区域。region向量和text向量映射到公共向量空间中。</p></li></ul><h2id="yin-and-yang-balancing-and-answering-binary-visual-questions">2016Yin and Yang Balancing and Answering Binary Visual Questions</h2><blockquote><p>Zhang P, Goyal Y, Summers-Stay D, et al. Yin and yang: Balancing andanswering binary visual questions[C]//Proceedings of the IEEE Conferenceon Computer Vision and Pattern Recognition. 2016: 5014-5022.</p></blockquote><p>本文关注于抽象场景中的二元VQA。</p><p>本文将二元VQA建模为视觉验证问题来解决，验证图像中是否存在问题中询问的概念。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2016%20Yin%20and%20Yang%20Balancing%20and%20Answering%20Binary%20Visual%20Questions.jpg" class="" title="Figure 1: We address the problem of answering binary questions about images. To eliminate strong language priors that shadow the role of detailed visual understanding in visual question answering (VQA), we use abstract scenes to collect a balanced dataset containing pairs of complementary scenes: the two scenes have opposite answers to the same question, while being visually as similar as possible. We view the task of answering binary questions as a visual verification task: we convert the question into a tuple that concisely summarizes the visual concept, which if present, result in the answer of the question being “yes”, and otherwise “no”. Our approach attends to relevant portions of the image when verifying the presence of the visual concept."><p>本文一个问题配备两个互补的抽象场景，即一个对应yes，一个对应no。</p><p>本文实验使用的模型基于VQA方法。</p><h2id="a-dataset-and-exploration-of-models-for-understanding-video-data-through-fill-in-the-blank-question-answering">2017A Dataset and Exploration of Models for Understanding Video Data ThroughFill-In-The-Blank Question-Answering</h2><blockquote><p>Maharaj T, Ballas N, Rohrbach A, et al. A dataset and exploration ofmodels for understanding video data through fill-in-the-blankquestion-answering[C]//Proceedings of the IEEE Conference on ComputerVision and Pattern Recognition. 2017: 6884-6893.</p></blockquote><p>本文认为视频理解领域缺乏充足的数据。</p><p>本文给出MovieFIB（MovieFill-In-the-Blank）数据集，含30万个样本，基于为视障人士准备的描述性视频注释。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20A%20Dataset%20and%20Exploration%20of%20Models%20for%20Understanding%20Video%20Data%20Through%20Fill-In-The-Blank%20Question-Answering.jpg" class="" title="Figure 1. Two examples from the training set of our fill-in-the-blank dataset."><p>MovieFIB采用填空（Fill-In-the-Blank）QA题型。</p><h2 id="an-analysis-of-visual-question-answering-algorithms">2017 AnAnalysis of Visual Question Answering Algorithms</h2><blockquote><p>Kafle K, Kanan C. An analysis of visual question answeringalgorithms[C]//Proceedings of the IEEE International Conference onComputer Vision. 2017: 1965-1973.</p></blockquote><p>本文主要是给出一个新数据集——任务驱动图像理解挑战（Task Driven ImageUnderstanding Challenge, TDIUC），包含的问题分类12个问题类别。本文使用这个数据集分析现有的VQA算法。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20An%20Analysis%20of%20Visual%20Question%20Answering%20Algorithms.jpg" class="" title="Figure 1: A good VQA benchmark tests a wide range of computer vision tasks in an unbiased manner. In this paper, we propose a new dataset with 12 distinct tasks and evaluation metrics that compensate for bias, so that the strengths and limitations of algorithms can be better measured."><p>另外，本文还加入了<code>absurd</code>问题，训练模型识别没道理、不相干的问题。</p><h2id="an-empirical-evaluation-of-visual-question-answering-for-novel-objects">2017An Empirical Evaluation of Visual Question Answering for NovelObjects</h2><blockquote><p>Ramakrishnan S K, Pal A, Sharma G, et al. An empirical evaluation ofvisual question answering for novel objects[C]//Proceedings of the IEEEConference on Computer Vision and Pattern Recognition. 2017:4392-4401.</p></blockquote><p>本文研究如何让VQA认知新目标。（训练集中没有的东西）。现有的热门VQA方法在遇到新目标时准确率大幅下挫。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20An%20Empirical%20Evaluation%20of%20Visual%20Question%20Answering%20for%20Novel%20Objects.jpg" class="" title="Figure 1: We are interested in answering questions about images containing objects not seen at training."><p>使用外部语料和图片数据： 1. 无标签文本 2. 有标签图片</p><h2id="are-you-smarter-than-a-sixth-grader-textbook-question-answering-for-multimodal-machine-comprehension">2017Are You Smarter Than a Sixth Grader Textbook Question Answering forMultimodal Machine Comprehension</h2><blockquote><p>Kembhavi A, Seo M, Schwenk D, et al. Are you smarter than a sixthgrader? textbook question answering for multimodal machinecomprehension[C]//Proceedings of the IEEE Conference on Computer Visionand Pattern Recognition. 2017: 4999-5007.</p></blockquote><p>本文研究的教科书问答问题属于多模态机器理解（Multi-Modal MachineComprehension,M3C）：给定一个文本、流程图和图像组成的上下文，让机器能够回答多模态问题。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20Are%20You%20Smarter%20Than%20a%20Sixth%20Grader%20Textbook%20Question%20Answering%20for%20Multimodal%20Machine%20Comprehension.jpg" class="" title="Figure 1. An overview of the Multi-modal Machine Comprehension (M3C) paradigm, statistics of the proposed Textbook Question Answering (TQA) dataset and an illustration of a lesson in it. TQA can be downloaded at http:&#x2F;&#x2F;textbookqa.org ."><p>本文发布教科书问答（Textbook Question Answering, TQA）数据集。</p><p>本文的TQA数据集相较于现有的机器阅读理解和VQA研究更有难度，数据集中相当一部分的问题需要对文本、流程图进行复杂的解析和推理。</p><h2id="creativity-generating-diverse-questions-using-variational-autoencoders">2017Creativity Generating Diverse Questions Using VariationalAutoencoders</h2><blockquote><p>Jain U, Zhang Z, Schwing A G. Creativity: Generating diversequestions using variational autoencoders[C]//Proceedings of the IEEEConference on Computer Vision and Pattern Recognition. 2017:6485-6494.</p></blockquote><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20Creativity%20Generating%20Diverse%20Questions%20Using%20Variational%20Autoencoders.jpg" class="" title="Figure 3: High level VAE overview of our approach."><p>本文提出结合变分自编码器（variational autoencoder，VAE）和LSTM来构建一个有创造力的算法，用于解决视觉问题生成问题。</p><h2id="end-to-end-concept-word-detection-for-video-captioning-retrieval-and-question-answering">2017End-To-End Concept Word Detection for Video Captioning, Retrieval, andQuestion Answering</h2><blockquote><p>Yu Y, Ko H, Choi J, et al. End-to-end concept word detection forvideo captioning, retrieval, and question answering[C]//Proceedings ofthe IEEE Conference on Computer Vision and Pattern Recognition. 2017:3165-3173.</p></blockquote><p>本文提出一个高层概念词检测器，能够整合到各种视频转语言的模型中。该检测器根据输入的视频，生成一列概念词（conceptwords），提供给语言生成模型。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20End-To-End%20Concept%20Word%20Detection%20for%20Video%20Captioning,%20Retrieval,%20and%20Question%20Answering%20-%201.jpg" class="" title="Figure 1. The intuition of the proposed concept word detector. Given a video clip, a set of tracing LSTMs extract multiple concept words that consistently appear across frame regions. We then employ semantic attention to combine the detected concepts with text encoding&#x2F;decoding for several video-to-language tasks of LSMDC 2016, such as captioning, retrieval, and question answering."><p>本文的概念词检测器（concept worddetector），输入是视频及其对应的描述语句，训练后能够对每个视频生成一组高层概念词。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20End-To-End%20Concept%20Word%20Detection%20for%20Video%20Captioning,%20Retrieval,%20and%20Question%20Answering%20-%202.jpg" class="" title="Figure 2. The architecture of the concept word detection in a top red box (section 2.2), and our video description model in bottom, which uses semantic attention on the detected concept words (section 3.1)."><p>加入了概念词检测器的encoder-decoder框架。</p><h2id="explicit-knowledge-based-reasoning-for-visual-question-answering">2017Explicit Knowledge-based Reasoning for Visual Question Answering</h2><blockquote><p>Wang P, Wu Q, Shen C, et al. Explicit knowledge-based reasoning forvisual question answering[C]//Proceedings of the 26th InternationalJoint Conference on Artificial Intelligence. AAAI Press, 2017:1290-1296.</p></blockquote><p>本文提出的VQA模型能够基于从大型知识库中抽取的信息对图像进行推理。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20Explicit%20Knowledge-based%20Reasoning%20for%20Visual%20Question%20Answering%20-%201.jpg" class="" title="Figure 1: A real example of the proposed KB-VQA dataset and the results given by Ahab, the proposed VQA approach. Our approach answers questions by extracting several types of visual concepts from an image and aligning them to large-scale structured knowledge bases. Apart from answers, our approach can also provide reasons and explanations for certain types of questions."><p>本文的方法不仅能回答图像语义以外的问题，还能对推理取得答案的过程进行解释。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20Explicit%20Knowledge-based%20Reasoning%20for%20Visual%20Question%20Answering%20-%202.jpg" class="" title="Figure 3: Top: An RDF graph such as might be constructed by Ahab. For simplicity, we only show entities that are relevant to answering the questions in Fig. 1. Each arrow corresponds to one triple in the graph, with circles representing entities and green text reflecting predicate type. The graph of extracted visual concepts (left side) is linked to DBpedia (right side) by mapping object&#x2F;attribute&#x2F;scene to DBpedia entities using the predicate same-concept. Bottom: The question processing pipeline. The input question is parsed using a set of NLP tools to identify the appropriate template. The extracted slot-phrases are then mapped to entities in the KB. Next, KB queries are generated to mine the relevant relationships for the KB-entities. Finally, the answer and reason are generated based on the query results. The predicate category&#x2F;?broader is used to obtain the categories transitively."><p>构建RDF图（Resource Description Framework [Cyganiak et al., 2014](RDF)），拓展知识库，对自然语言进行解析、映射和逻辑查询取得推理过程可解释的答案。</p><h2id="graph-structured-representations-for-visual-question-answering">2017Graph-Structured Representations for Visual Question Answering</h2><blockquote><p>Teney D, Liu L, van den Hengel A. Graph-structured representationsfor visual question answering[C]//Proceedings of the IEEE Conference onComputer Vision and Pattern Recognition. 2017: 1-9.</p></blockquote><p>本文首次提出用图结构表示图像和问题文本，并建立深度学习模型进行处理实现分类。</p><p>本文： 1. 将图片编码为场景图； 2. 把句子表示为句法依存图； 3.训练一个神经网络对场景图和依存图进行推理，并把结果分类为词汇中的一个词。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20Graph-Structured%20Representations%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 2. Architecture of the proposed neural network. The input is provided as a description of the scene (a list of objects with their visual characteristics) and a parsed question (words with their syntactic relations). The scene-graph contains a node with a feature vector for each object, and edge features that represent their spatial relationships. The question-graph reflects the parse tree of the question, with a word embedding for each node, and a vector embedding of types of syntactic dependencies for edges. A recurrent unit (GRU) is associated with each node of both graphs. Over multiple iterations, the GRU updates a representation of each node that integrates context from its neighbours within the graph. Features of all objects and all words are combined (concatenated) pairwise, and they are weighted with a form of attention. That effectively matches elements between the question and the scene. The weighted sum of features is passed through a final classifier that predicts scores over a fixed set of candidate answers."><p>要点： 1.场景图（scene-graph）：一组目标即其视觉特点。具体地，每一个目标对应一个节点。该节点包含一个特征向量；节点之间的边表示他们的空间关系。2.问题图（question-graph）：句法解析后的问题语句。问题图是问题语句的解析树，每个单词对应一个节点。节点包含该单词的词嵌入（wordembedding），节点之间的边包含单词之间句法依存关系的向量嵌入。 3.所有目标和单词的特征向量两两成对组合组合起来，即图2中的Words-Objects矩阵，并通过注意力机制加权求和（Matchingweights矩阵为注意力权重矩阵）。</p><p>局限：本文的scene graph只是包含空间上的相对位置（relativeposition）。</p><h2 id="high-order-attention-models-for-visual-question-answering">2017High-Order Attention Models for Visual Question Answering</h2><blockquote><p>Schwartz I, Schwing A, Hazan T. High-order attention models forvisual question answering[C]//Advances in Neural Information ProcessingSystems. 2017: 3664-3674.</p></blockquote><p>本文提出一种注意力机制的新形式，能够学习不同数据模态之间的高阶相关性。</p><p>针对以往的注意力机制存在对特定任务手工设计因此针对性强、泛化性差的缺点，本文强调：</p><ol type="1"><li>泛化性好（generallyapplicable），能够广泛应用于各种任务的注意力机制。</li><li>高阶相关性（high-ordercorrelation），能够学习不同数据模态之间的高阶相关性。k阶相关性能够建模k种模态之间的相关性。</li></ol><p>本文把目前的决策系统整体分解为三部分：</p><ol type="1"><li>数据嵌入；</li><li>注意力机制；</li><li>决策产生；</li></ol><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20High-Order%20Attention%20Models%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 2: Our state-of-the-art VQA system"><p>本文把注意力机制视为概率模型，注意力机制计算“势”（potentials）。</p><ol type="1"><li>一元势（unary potentials）：<spanclass="math inline">\(\theta_V\)</span>、<spanclass="math inline">\(\theta_Q\)</span>、<spanclass="math inline">\(\theta_A\)</span>，表示视觉输入、问题语句、回答语句中每个元素的重要性。</li><li>成对势（pairwise potentials）：<spanclass="math inline">\(\theta_{V,Q}\)</span>、<spanclass="math inline">\(\theta_{V,A}\)</span>、<spanclass="math inline">\(\theta_{Q,A}\)</span>表示两种模态之间的相关性。</li><li>三元势（ternary potentials）：<spanclass="math inline">\(\theta_{V,Q,A}\)</span>捕捉三种模特之间的依存性。</li></ol><p>本文的决策产生（decision making）阶段使用MCB和MCT池化：</p><ol type="1"><li>MCB池化（Multimodal Compact BilinearPooling）：本文的决策生成阶段使用该双线性池化把成对情况（pairwisesetting）下的两种模态做池化输出。</li><li>MCT池化（Multimodal Compact TrilinearPooling）：本文的决策生成阶段使用该三线性池化把三种模态的数据池化输出。</li></ol><h2id="knowledge-acquisition-for-visual-question-answering-via-iterative-querying">2017Knowledge Acquisition for Visual Question Answering via IterativeQuerying</h2><blockquote><p>Zhu Y, Lim J J, Fei-Fei L. Knowledge acquisition for visual questionanswering via iterative querying[C]//Proceedings of the IEEE Conferenceon Computer Vision and Pattern Recognition. 2017: 1154-1163.</p></blockquote><p>当人无法直接回答一个问题时，人会通过问一些补充性的问题来理解场景，等到能理解到位、能回答了再回答原问题。本文受此启发，提出的动态VQA模型能够提出查询以获取问答任务所需的支撑依据。</p><p>本文的动态VQA模型能迭代式地查询新依据并收集外部源中的相关依据。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20Knowledge%20Acquisition%20for%20Visual%20Question%20Answering%20via%20Iterative%20Querying.jpg" class="" title="Figure 2: (a) An illustration of a standard VQA model. (b) An overview of our iterative model. (c) Detailed flowchart of our model. The model consists of two major components: core network (green) and query generator (blue). The query generator proposes task-driven queries to fetch evidence from external sources. Acquired knowledge is encoded and stored as memories in the core network for answering a question."><p>具体而言，本文的模型通过对知识源（knowledgesources）的一系列查询（queries）获取支撑依据。获取到的依据被编码存储进记忆银行（memorybank）。随后，模型使用刚更新的记忆来提出下一轮的查询，或给出目标问题的答案。</p><h2id="learning-to-disambiguate-by-asking-discriminative-questions">2017Learning to Disambiguate by Asking Discriminative Questions</h2><blockquote><p>Li Y, Huang C, Tang X, et al. Learning to disambiguate by askingdiscriminative questions[C]//Proceedings of the IEEE InternationalConference on Computer Vision. 2017: 3419-3428.</p></blockquote><p>人类能够通过问问题来了解信息，认知世界并消解歧义。本文受此启发，提出一种新研究问题——“如何生成有判别力的问题（discriminativequestions）来帮助消解视觉实例的歧义？”。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20Learning%20to%20Disambiguate%20by%20Asking%20Discriminative%20Questions.jpg" class="" title="Figure 4: Overview of the attribute-conditioned question generation process. Given a pair of ambiguous images, we first extract semantic attributes from the images respectively. The attribute scores are sent into a selection model to select the distinguishing attributes pair, which reflects the most obvious difference between the ambiguous images. Then the visual feature and selected attribute pair are fed into an attribute-conditioned LSTM model to generate discriminative questions."><p>给定一对歧义图片： 1. 分别提取视觉语义属性； 2.属性及其分值通过选择模块选择出最有区别性的属性对，能够反映两张图之间最明显的区别；3. 把视觉特征和选出的属性对输入属性条件LSTM生成问题。</p><h2id="learning-to-reason-end-to-end-module-networks-for-visual-question-answering">2017Learning to Reason End-to-End Module Networks for Visual QuestionAnswering</h2><blockquote><p>Hu R, Andreas J, Rohrbach M, et al. Learning to reason: End-to-endmodule networks for visual question answering[C]//Proceedings of theIEEE International Conference on Computer Vision. 2017: 804-813.</p></blockquote><p>基于近期提出的神经模块网络架构（Neural Module Network architecture,NMN），本文提出端到端模块网络（End-to-End Module Networks,N2NMNs），在不使用NMN中的解析器的情况下，通过预测特定实例网络布局。</p><p>本文的模型能够模仿专家示范，学习生成网络结构，同时根据下游任务损失来学习网络参数。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20Learning%20to%20Reason%20End-to-End%20Module%20Networks%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 2: Model overview. Our approach first computes a deep representation of the question, and uses this as an input to a layout-prediction policy implemented with a recurrent neural network. This policy emits both a sequence of structural actions, specifying a template for a modular neural network in reverse Polish notation, and a sequence of attentive actions, extracting parameters for these neural modules from the input sentence. These two sequences are passed to a network builder, which dynamically instantiates an appropriate neural network and applies it to the input image to obtain an answer."><p>根据问题构建网络——根据问题语句预测出需要做哪些操作，每一个操作都通过一个子网络实现，一串子网络形成模块神经网络，用于解决当前问题所需的任务。具体地：1. 首先计算问题的深度表示； 2.基于RNN实现的布局预测策略根据问题的深度表示，输出一个确定模块神经网络的模板的结构化动作序列，以及一个从输入语句中提取神经网络参数的注意力动作序列；3.网络构建器根据结构化动作序列和注意力动作序列，动态实例化出一个恰当的神经网络，由此根据图像取得答案。</p><h2id="making-the-v-in-vqa-matter-elevating-the-role-of-image-understanding-in-visual-question-answering">2017Making the V in VQA Matter Elevating the Role of Image Understanding inVisual Question Answering</h2><blockquote><p>Goyal Y, Khot T, Summers-Stay D, et al. Making the V in VQA matter:Elevating the role of image understanding in Visual QuestionAnswering[C]//Proceedings of the IEEE Conference on Computer Vision andPattern Recognition. 2017: 6904-6913.</p></blockquote><p>VQA被数据中的天然规律和语言因素带偏了，训练出的VQA模型在根据数据中的统计规律（自然规律、语言规律）作答，而忽视了视觉因素。</p><p>本文强调视觉问答VQA中视觉的重要性。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20Making%20the%20V%20in%20VQA%20Matter%20Elevating%20the%20Role%20of%20Image%20Understanding%20in%20Visual%20Question%20Answering.jpg" class="" title="Figure 1: Examples from our balanced VQA dataset."><p>具体地，本文为每一个问题找一对语义互补的图像，实现正负例平衡（例如：man/woman,yes/no），避免VQA模型受到视觉无关的统计规律影响。本文的全平衡数据集为<ahref="http://visualqa.org">VisualQA</a>数据集。</p><h2 id="marioqa-answering-questions-by-watching-gameplay-videos">2017MarioQA Answering Questions by Watching Gameplay Videos</h2><blockquote><p>Mun J, Hongsuck Seo P, Jung I, et al. Marioqa: Answering questions bywatching gameplay videos[C]//Proceedings of the IEEE InternationalConference on Computer Vision. 2017: 2867-2875.</p></blockquote><p>本文研究视频问答VideoQA问题。本文提出一个视频问答模型的分析框架，该框架通过自动生成的游戏视频构建出合成数据集，用该数据集分析模型不同层面的表现。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20MarioQA%20Answering%20Questions%20by%20Watching%20Gameplay%20Videos.jpg" class="" title="Figure 1: Overall QA generation procedure. Given a gameplay video and event logs shown on the left, (a) target event is selected (marked as a green box), (b) question semantic chunk is generated from the target event, (c) question template is sampled from template pool, and (d) QA pairs are generated by filling the template and the linguistically realizing answer."><p>本文根据超级马里奥兄弟游戏生成了一个合成视频问答数据集。</p><h2id="multi-level-attention-networks-for-visual-question-answering">2017Multi-level Attention Networks for Visual Question Answering</h2><blockquote><p>Yu D, Fu J, Mei T, et al. Multi-level attention networks for visualquestion answering[C]//Proceedings of the IEEE Conference on ComputerVision and Pattern Recognition. 2017: 4709-4717.</p></blockquote><p>本文认为现有方法主要从抽象的低层视觉特征推测答案，而忽视了建模高层图像语义及图中区域的丰富空间上下文语义。</p><p>本文提出一个多层注意力网络，通过语义注意力以及基于视觉注意力的细粒度空间推理来缩小语义鸿沟，解决VQA问题。具体地，1. 从CNN的高层语义生成语义概念（semanticconcepts），并选出与问题相关地概念作为语义注意力（semantic attention）。2.通过双向RNN把基于区域的CNN中层输出编码为空间嵌入表示，并用MLP进一步定位与回答相关的区域作为视觉注意力（visualattention）。 3.联合优化语义注意力、视觉注意力和问题嵌入，通过softmax分类器取得答案。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20Multi-level%20Attention%20Networks%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 2. Overall framework of multi-level attention networks. Our framework consists of three components: (A) semantic attention, (B) context-aware visual attention and (C) joint attention learning. Here, we denote by vq the representation of the question Q, by vimg, vc the representation of image content on the visual and semantic level queried by the question, respectively. vr and pimg c is the activation of the last convolutional layer and the probability layer from the CNN."><p>其中<span class="math inline">\(v_{img}\)</span>和<spanclass="math inline">\(v_{c}\)</span>都是图像表示，但分别由各区域嵌入和各语义概念而来：</p><ul><li><spanclass="math inline">\(v_{img}\)</span>：从CNN中层输出编码为空间嵌入表示（各区域的图像表示），并通过视觉注意力取得的图像表示；</li><li><spanclass="math inline">\(v_{c}\)</span>：从CNN的高层语义生成语义概念（semanticconcepts），并通过语义注意力选择后的图像表示。</li></ul><h2id="multi-modal-factorized-bilinear-pooling-with-co-attention-learning-for-visual-question-answering">2017Multi-modal Factorized Bilinear Pooling with Co-attention Learning forVisual Question Answering</h2><blockquote><p>Yu Z, Yu J, Fan J, et al. Multi-modal factorized bilinear poolingwith co-attention learning for visual question answering[C]//Proceedingsof the IEEE international conference on computer vision. 2017:1821-1830.</p></blockquote><p>本文提出多模态因子分解双线性池化方法（Multi-modal Factorized Bilinear(MFB) poolingapproach），提高<strong>多模态特征融合</strong>能力，以改进VQA。</p><p>图像中的视觉特征和问题中的文本特征尽管都可用特征向量表示，但两者概率分布差异很大，简单的拼接和主元素相加可能不足以融合两种模态的特征。因此，双线性模型被提出以解决该问题。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20Multi-modal%20Factorized%20Bilinear%20Pooling%20with%20Co-attention%20Learning%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 3. MFB with Co-Attention network architecture for VQA. Different from the network of MFB baseline, the images and questions are firstly represented as the fine-grained features respectively. Then, Question Attention and Image Attention modules are jointly modeled in the framework to provide more accurate answer predictions."><p>Multi-modal Compact Bilinear pooling(MCB)对两个特征向量做外积，因二次方膨胀产生了非常高维的特征向量。MLB通过低阶映射矩阵改进了高维问题。</p><p><strong>Multi-modal Low-rank Bilinear Pooling (MLB)：</strong> <spanclass="math display">\[z = MLB(x,y)=(U^Tx)\circ(V^Ty)\]</span></p><ul><li>x通过矩阵U变换为o维向量；</li><li>y通过矩阵V变换为o维向量；</li><li>随后两个o维向量做逐元素相乘，取得o维向量z。</li></ul><p>本文认为MLB又存在收敛缓慢问题，因此提出MFB。</p><p><strong>最简多模态双线性模型：</strong> <span class="math display">\[z_i = x^T W_i y\]</span></p><ul><li><span class="math inline">\(x \in \mathbb{R}^m\)</span>，<spanclass="math inline">\(y \in \mathbb{R}^n\)</span>，<spanclass="math inline">\(W_i \in \mathbb{R}^{m \times n}\)</span></li></ul><p><strong>Multi-modal Factorized Bilinear pooling (MFB)：</strong><span class="math display">\[z_i = x^TU_iV_i^Ty = \sum^k_{d=1}x^Tu_dv_d^Ty = \mathbb{1}^T(U_i^Tx\circ V_i^Ty)\]</span> 或写作： <span class="math display">\[z = \mathrm{SumPooling}(\tilde{U}^Tx \circ \tilde{V}^Ty, k)\]</span></p><h2id="multimodal-learning-and-reasoning-for-visual-question-answering">2017Multimodal Learning and Reasoning for Visual Question Answering</h2><blockquote><p>Ilievski I, Feng J. Multimodal learning and reasoning for visualquestion answering[C]//Advances in Neural Information ProcessingSystems. 2017: 551-562.</p></blockquote><p>本文认为VQA研究现状大多是用LSTM理解问题、用CNN表示图像。这种单个视觉表示能包含的信息有限，且只能表示图像的笼统内容，会制约模型的推理能力。</p><p>本文提出一个模块化神经网络模型ReasonNet，能够学习多模态、多方面（multifaceted）的图像和问题表示。</p><p>本文对VQA问题的形式化定义：</p><blockquote><p>Namely, the VQA problem can be solved by modeling the likelihoodprobability distribution <span class="math inline">\(p_{vqa}\)</span>which for each answer <span class="math inline">\(a\)</span> in theanswer set <span class="math inline">\(\Omega\)</span> outputs theprobability of being the correct answer, given a question <spanclass="math inline">\(Q\)</span> about an image <spanclass="math inline">\(I\)</span>:</p></blockquote><p><span class="math display">\[\hat{a} = \mathop{\arg\max}_{a\in\Omega} p_{vqa}(a|Q,I;\theta)\]</span></p><p>使以<spanclass="math inline">\(\theta\)</span>为参数的模型的似然概率分布 <spanclass="math inline">\(p_{vqa}\)</span> 在输入问题<spanclass="math inline">\(Q\)</span>、图像<spanclass="math inline">\(I\)</span>的条件下，输出正确答案<spanclass="math inline">\(a\)</span>的概率最大。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20Multimodal%20Learning%20and%20Reasoning%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 1: Network architecture diagram of the ReasonNet model applied on the VQA task. Round rectangles  represent attention modules, squared rectangles represent classification modules, small trapezoids represent encoder units (Eq. (3)), thin rectangles represent the learned multimodal representation vectors, x represents the bilinear interaction model (Eq. (4)), and the big trapezoid is a multi-layer perceptron network that classifies the reasoning vector g to an answer a (Eq. (7))"><ul><li>圆角矩形表示注意力模块；</li><li>方角矩形表示分类模块；</li><li>斜方形（trapezoid）表示编码器单元；</li><li>符号<spanclass="math inline">\(\otimes\)</span>表示双线性交互模型（bilinearinteraction model）；</li><li>大斜方形表示多层感知机网络，即最终的答案分类网络。</li></ul><p>ReasonNet通过多个模块（注意力模块、分类模块）对图像和问题做处理，处理结果在编码后做双线性交互（bilinearinteraction），最终取得的各个向量连接为长向量，用于最后的回答分类器做分类。</p><h2id="mutan-multimodal-tucker-fusion-for-visual-question-answering">2017MUTAN Multimodal Tucker Fusion for Visual Question Answering</h2><blockquote><p>Ben-Younes H, Cadene R, Cord M, et al. Mutan: Multimodal tuckerfusion for visual question answering[C]//Proceedings of the IEEEinternational conference on computer vision. 2017: 2612-2620.</p></blockquote><p>本文提出MUTAN，多模态的基于张量的Tucker分解，能够有效参数表示视觉与文本表示之间的双线性交互。</p><p>本文MUTAN的目的在于控制合并模式的复杂度，同时保持对融合关系的优良可解释性。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20MUTAN%20Multimodal%20Tucker%20Fusion%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 2: MUTAN fusion scheme for global Visual QA. The prediction is modeled as a bilinear interaction between visual and linguistic features, parametrized by the tensor T . In MUTAN, we factorise the tensor T using a Tucker decomposition, resulting in an architecture with three intra-modal matrices Wq, Wv and Wo, and a smaller tensor T c. The complexity of T c is controlled via a structured sparsity constraint on the slice matrices of the tensor."><p>Tucker分解：本文的方法基于对协相关张量的Tucker分解，能够表示全双线性互动，同时维持易处理模型的尺寸。</p><h2 id="structured-attentions-for-visual-question-answering">2017Structured Attentions for Visual Question Answering</h2><blockquote><p>Zhu C, Zhao Y, Huang S, et al. Structured attentions for visualquestion answering[C]//Proceedings of the IEEE International Conferenceon Computer Vision. 2017: 1291-1300.</p></blockquote><p>本文认为VQA的问题很可能牵涉到多个图像区域之间的复杂关系，而现在很少有注意力模型能够有效编码跨区域关系（cross-regionrelations）。</p><p>本文通过展示ResNet作用有限的感受野，说明编码区域间关系的重要性。因此，本文提出把图像区域上的视觉注意力建模为网格结构条件随机场（CRF）上的多变量分布。本文解释了如何把迭代推理算法（MeanField和Loopy Belief Propagation）转换为端到端神经网络的循环层。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20Structured%20Attentions%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 2: The whole picture of the proposed model. The inputs to the recurrent inference layers are the unary potential ψi(zi) and pairwise potential ψij(zi, zj), computed with Eq. 8. ψi(zi) can also be used as an additional glimpse, which usually detects the key nouns. In the inference layers, xi represents b(i) for MF and m(i) for LBP. The recurrent inference layers generates a structured glimpse with MF or LBP. The 2 glimpses are used to weight-sum the visual feature vectors. The classifier use both of the attended visual features and the question feature to predict the answer. The demonstration is a real case."><h2id="tgif-qa-toward-spatio-temporal-reasoning-in-visual-question-answering">2017TGIF-QA Toward Spatio-Temporal Reasoning in Visual QuestionAnswering</h2><blockquote><p>Jang Y, Song Y, Yu Y, et al. Tgif-qa: Toward spatio-temporalreasoning in visual question answering[C]//Proceedings of the IEEEConference on Computer Vision and Pattern Recognition. 2017:2758-2766.</p></blockquote><p>本文研究如何把当前主要面向图像的VQA拓展到面向视频。本文认为现有的视频VQA研究仅仅是在图像VQA的基础上对现有内容增加了一些描述动作的动词，或者提高了对理解长文本的要求，没有真正地深入研究推理能力。</p><p>本文主要工作：</p><ol type="1"><li>为视频VQA提出三种新的研究方向，需要从视频到答案的时空推理能力。<ol type="1"><li>重复计数（Repetition count）：回答一个动作发生了多少次；</li><li>重复动作（Repeating action）：回答视频中重复的动作是什么；</li><li>状态转换（Statetransition）：回答例如：表情、动作、地点、目标属性的状态转换情况。</li></ol></li><li>本文给出了一个视频VQA的大型数据集——TGIF-QA。</li><li>本文提出了一个基于双LSTM的方法，包含空间和时间注意力。</li></ol><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20TGIF-QA%20Toward%20Spatio-Temporal%20Reasoning%20in%20Visual%20Question%20Answering.jpg" class="" title="Figure 3. The proposed ST-VQA model for spatio-temporal VQA. See Figure 4 for the structure of spatial and temporal attention modules."><h2id="the-vqa-machine-learning-how-to-use-existing-vision-algorithms-to-answer-new-questions">2017The VQA-Machine Learning How to Use Existing Vision Algorithms to AnswerNew Questions</h2><blockquote><p>Wang P, Wu Q, Shen C, et al. The vqa-machine: Learning how to useexisting vision algorithms to answer new questions[C]//Proceedings ofthe IEEE Conference on Computer Vision and Pattern Recognition. 2017:1173-1182.</p></blockquote><p>实现VQA实际上需要对图像做大量操作，例如：目标检测、计数、分割和重构。本文认为依靠现有的VQA数据量就想要训练一个集各种能力于一身的模型过于贪心，不如把现有的各个方向的已经训练好的模型拿来组合。</p><p>本文提出的模型是一种新的协同注意力（co-attention）模型。本文提出的方法还能够为决策结果生成人类可读的理由，且无需理由的真值也能端到端训练。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20The%20VQA-Machine%20Learning%20How%20to%20Use%20Existing%20Vision%20Algorithms%20to%20Answer%20New%20Questions%20-%201.jpg" class="" title="Figure 2: The proposed VQA model. The input question, facts and image features are weighted at three question-encoding levels. Given the co-weighted features at all levels, a multi-layer perceptron (MLP) classifier is used to predict answers. Then the ranked facts are used to generate reasons."><ul><li><p>模型输入：问题、视觉事实（visual facts）、图像；</p><ul><li>问题经过层次问题编码（Hierarchical QuestionEncoding）表示，包含三层：单词、短语、句子；</li><li>视觉事实通过三元组（subject, relation, object）表示；</li><li>图像划分区域，计算区域注意力。</li></ul></li><li><p>三个输入在问题编码的三个级别（<spanclass="math inline">\(Q^w\)</span>、<spanclass="math inline">\(Q^P\)</span>、<spanclass="math inline">\(Q^q\)</span>）做协同注意力加权。</p></li><li><p>MLP分类器根据协同注意力加权后的特征进行分类，预测答案。</p></li><li><p>模型对输入的视觉事实进行排序，用于生成理由。</p></li></ul><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20The%20VQA-Machine%20Learning%20How%20to%20Use%20Existing%20Vision%20Algorithms%20to%20Answer%20New%20Questions%20-%202.jpg" class="" title="Figure 3: The sequential co-attention module. Given the feature sequences for the question (Q), facts (F) and image (V), this module sequentially generates weighted features (˜v, ˜q,˜f )."><p>本文的顺序协同注意力（SequentialCo-attention）机制指的是每次用其余特征作为导向，生成某个特征的注意力权重。可形式化为：<span class="math display">\[\hat{x} = \mathrm{Atten(X, g_1, g_2)}\]</span> 计算原理为： <span class="math display">\[\mathrm{H}_i =\tanh(\mathrm{W}_x\mathrm{x}_i+\mathrm{W}_{g_1}\mathrm{g}_1+\mathrm{W}_{g_2}\mathrm{g}_2),\\\mathrm{\alpha}_i =\mathrm{softmax}(\mathrm{w^\top}\mathrm{H}_i),    i=1,...,N, \\\mathrm{\hat{x}} = \sum^N_{i=1}\alpha_i\mathrm{x}_i,\]</span> 其中，<spanclass="math inline">\(\mathrm{X}\)</span>是输入序列，比如：问题<spanclass="math inline">\(\mathrm{Q}\)</span>、事实<spanclass="math inline">\(\mathrm{F}\)</span>或图像<spanclass="math inline">\(\mathrm{V}\)</span>，而<spanclass="math inline">\(\mathrm{g_1}, \mathrm{g_2} \in\mathbb{R}^d\)</span>表示先前注意力模块的输出，此处作为注意力导向（guidance）。</p><h2id="video-question-answering-via-hierarchical-spatio-temporal-attention-networks">2017Video Question Answering via Hierarchical Spatio-Temporal AttentionNetworks</h2><blockquote><p>Zhao Z, Yang Q, Cai D, et al. Video question answering viahierarchical spatio-temporal attention networks[C]//Proceedings of the26th International Joint Conference on Artificial Intelligence. AAAIPress, 2017: 3518-3524.</p></blockquote><p>本文认为当前VQA研究着眼于静态图像，现有方法无法有效应对视频问答，因为没有对视频内容中的时间动力学（temporaldynamics）进行建模。</p><p>本文从时空注意力编解码器学习框架（spatio-temporal attentional encoderdecoder learning framework）着手，提出层次时空注意力网络（hierarchicalspatio-temporal attentionnetwork），根据给定问题，学习动态视频内容的联合表示。本文开发了包含多步推理流程的时空注意力网络用于视频问答。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20Video%20Question%20Answering%20via%20Hierarchical%20Spatio-Temporal%20Attention%20Networks.jpg" class="" title="Figure 2: The Overview of Open-Ended Video Question Answering via Hierarchical Spatial-Temporal Attentional Encoder-Decoder Learning Framework (r-STAN in case of r &#x3D; 2). The hierarchical spatio-temporal attentional encoder networks learn the joint representation of multimodal spatio-temporal attentional video and textual question with multiple reasoning steps, and the recurrent decoder network generates the natural language answer for open-ended video question answering."><h2id="vqs-linking-segmentations-to-questions-and-answers-for-supervised-attention-in-vqa-and-question-focused-semantic-segmentation">2017VQS Linking Segmentations to Questions and Answers for SupervisedAttention in VQA and Question-Focused Semantic Segmentation</h2><blockquote><p>Gan C, Li Y, Li H, et al. Vqs: Linking segmentations to questions andanswers for supervised attention in vqa and question-focused semanticsegmentation[C]//Proceedings of the IEEE International Conference onComputer Vision. 2017: 1811-1820.</p></blockquote><p>本文把COCO数据集中的实例分割标注和VQA数据集中的问题和答案标注联系起来，命名为VQS（VisualQuestions and Segmentationanswers）数据集。新的实例分割标注可能有助于开辟新的研究问题和模型。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20VQS%20Linking%20Segmentations%20to%20Questions%20and%20Answers%20for%20Supervised%20Attention%20in%20VQA%20and%20Question-Focused%20Semantic%20Segmentation.jpg" class=""><h2id="whats-in-a-question-using-visual-questions-as-a-form-of-supervision">2017What's in a Question Using Visual Questions as a Form ofSupervision</h2><blockquote><p>Ganju S, Russakovsky O, Gupta A. What's in a question: Using visualquestions as a form of supervision[C]//Proceedings of the IEEEConference on Computer Vision and Pattern Recognition. 2017:241-250.</p></blockquote><p>本文研究弱监督学习。</p><p>本文认为已有研究已经挖掘了很多弱监督学习标注信息，如：弱手工标注、网络搜索结果、时间连续性、显著声音等。本文关注于一项尚未发掘出的若监督学习模式：图像被问到的问题。</p><p>本文认为即使没有答案，图像对应的问题本身其实就已经提供了有关图像的信息。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2017%20What's%20in%20a%20Question%20Using%20Visual%20Questions%20as%20a%20Form%20of%20Supervision.jpg" class="" title="Figure 5: Framework of the iBOWIMG-2x model. The representation consists of three parts: (1) visual image features, (2) text embedding of the target question, and (3) text embedding of the other questions concatenated together. This representation is passed through a learned fully connected layer to predict the answer to the target question."><p>iBOWING-2x模型。输入包含三部分： 1. 视觉图像特征； 2.目标问题的文本嵌入； 3. 其它问题连接起来后的文本嵌入。 //增加了图像的其它问题作为弱监督学习信息</p><h2 id="chain-of-reasoning-for-visual-question-answering">2018 Chain ofReasoning for Visual Question Answering</h2><blockquote><p>Wu C, Liu J, Wang X, et al. Chain of reasoning for visual questionanswering[C]//Advances in Neural Information Processing Systems. 2018:275-285.</p></blockquote><p>本文研究VQA中的推理（reasoning）。</p><p>本文认为回答复杂的VQA问题需要多步且动态的推理，而已有研究只支持单步或静态推理，无法更新关系或生成复合目标。</p><p>本文构造了一个推理链（chain of reasoning,CoR）模型，支持对变化的关系和目标实现多步、动态推理。具体地，关系推理操作形成目标间新的关系，而目标修正操作从关系中生成新的复合目标。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Chain%20of%20Reasoning%20for%20Visual%20Question%20Answering%20-%201.jpg" class=""><p>本文构造的推理链模型中，关系（relation）和复合目标（compoundobjects）都是推理链中的节点。关系的更新使得推理面向更多复合目标，而复合目标又是推理链的阶段性结论，可以有效降低下一步的关系推理的计算复杂度。（关系推理-&gt;复合目标推理-&gt;关系推理-&gt;……）</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Chain%20of%20Reasoning%20for%20Visual%20Question%20Answering%20-%202.jpg" class=""><p>整体模型包含数据嵌入、推理链、决策生成三部分。</p><p>形式化表述上，推理链是由若干条子链（sub-chain）构成的，从<spanclass="math inline">\(t\)</span>时刻的复合目标集合<spanclass="math inline">\(O^{(t)}\)</span>，到推理出<spanclass="math inline">\(t\)</span>时刻的关系集合<spanclass="math inline">\(R^{(t)}\)</span>，再基于关系进一步推理<spanclass="math inline">\(t+1\)</span>时刻的复合目标集合<spanclass="math inline">\(R^{(t+1)}\)</span>。其中，<spanclass="math inline">\(O^{(t)} \in \mathbb{R}^{m \timesd_v}\)</span>，<span class="math inline">\(R^{(t)} \in \mathbb{R}^{m\times m \times d_v}\)</span>，<span class="math inline">\(O^{(t+1)} \in\mathbb{R}^{m \times d_v}\)</span>。</p><p>从<span class="math inline">\(O^{(t)}\)</span>到<spanclass="math inline">\(R^{(t)}\)</span>的关系推理（relationalreasoning）可表述为： <span class="math display">\[G_l = \sigma(relu(QW_{l_1})W_{l_2}),  \\G_r = \sigma(relu(QW_{r_1})W_{r_2}),  \\R_{ij} = (O_i^{(t)} \odot G_l) \oplus (O_j^{(1)} \odot G_r),\]</span></p><ul><li><span class="math inline">\(O^{(t)}\)</span>中的<spanclass="math inline">\(m\)</span>的目标在问题<spanclass="math inline">\(Q\)</span>的指导下与初始目标集<spanclass="math inline">\(O^{(1)}\)</span>中的<spanclass="math inline">\(m\)</span>个目标交互。</li></ul><p>从<span class="math inline">\(R^{(t)}\)</span>到<spanclass="math inline">\(O^{t+1}\)</span>的目标修正可表述为： <spanclass="math display">\[O_j^{t+1} = \sum^m_{i=1}\alpha_i^{(t)}R_{ij}^{(t)}\]</span></p><h2 id="cross-dataset-adaptation-for-visual-question-answering">2018Cross-Dataset Adaptation for Visual Question Answering</h2><blockquote><p>Chao W L, Hu H, Sha F. Cross-dataset adaptation for visual questionanswering[C]//Proceedings of the IEEE Conference on Computer Vision andPattern Recognition. 2018: 5716-5725.</p></blockquote><p>本文研究VQA的跨数据集适配问题。本文希望能够在一个源数据集上训练VQA模型，然后再应用到另一个目标数据集上。//因为目标领域的数据集往往数据量有限。</p><p>本文提出了一款领域适配算法（domain adaptationalgorithm）。该算法通过变换目标数据集中数据的特征表示，来缩小源数据集与目标数据集之间的统计分布差异。另外，该算法还能够使在源数据集上训练的VQA模型在目标数据集上回答正确时似然概率最大。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Cross-Dataset%20Adaptation%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 1. An illustration of the dataset bias in visual question answering. Given the same image, Visual QA datasets like VQA [4] (right) and Visual7W [50] (left) provide different styles of questions, correct answers (red), and candidate answer sets, each can contributes to the bias to prevent cross-dataset generalization."><h2id="customized-image-narrative-generation-via-interactive-visual-question-generation-and-answering">2018Customized Image Narrative Generation via Interactive Visual QuestionGeneration and Answering</h2><blockquote><p>Shin A, Ushiku Y, Harada T. Customized Image Narrative Generation viaInteractive Visual Question Generation and Answering[C]//Proceedings ofthe IEEE Conference on Computer Vision and Pattern Recognition. 2018:8925-8933.</p></blockquote><p>本文认为人在描述图像时，关注的方面时不一样的，因此会给出不同的描述。</p><p>本文提出一个自定义图像叙述生成任务（customized image narrativegeneration task），用户通过回答给出的问题来叙述图像。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Customized%20Image%20Narrative%20Generation%20via%20Interactive%20Visual%20Question%20Generation%20and%20Answering.jpg" class="" title="Figure 4: Questions that allow for multiple responses are generated to reflect user’s interest and corresponding regions proceed to image narrative generation process."><h2 id="differential-attention-for-visual-question-answering">2018Differential Attention for Visual Question Answering</h2><blockquote><p>Patro B, Namboodiri V P. Differential attention for visual questionanswering[C]//Proceedings of the IEEE Conference on Computer Vision andPattern Recognition. 2018: 7680-7688.</p></blockquote><p>已有的注意力研究都是通过关注某一个图像区域来回答问题，而本文认为已有研究的注意力机制关注的区域与人类会关注的图像区域并不相关。</p><p>因此，本文提出通过一或多个支持和反对范例来取得一个微分注意力区域（differentialattention region）。与基于图像的注意力方法比起来，本文计算出的微分注意力更接近人类注意力，因此可以提高回答问题的准确率。</p><p>在认知研究中的范例理论（exexplartheory）里，个体会拿新刺激和记忆中已知的实例作比较，并基于这些范例找到回答。本文的目的就是通过范例模型来取得注意力。本文的前提是，语义最近的范例和远语义范例之间存在差异，这样的差异能够引导注意力关注于一个特定的图像区域。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Differential%20Attention%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 2. Differential Attention Network"><p>原理流程：</p><ol type="1"><li>根据输入图像和问题取得引用注意力嵌入（reference attentionembedding）；</li><li>根据该引用注意力嵌入，在数据库中找出样本，取近样本作为支持范例、远样本作为反对范例；</li><li>支持范例和反对范例用于计算微分注意力向量；</li><li>通过微分注意力网络（differential attention network,DAN）或微分上下文网络（differential contextnetwork）分别可以改进注意力或取得微分上下文特征，这两种方法可以提升注意力与人工注意力的相关性；</li></ol><h2id="dont-just-assume-look-and-answer-overcoming-priors-for-visual-question-answering">2018Don't Just Assume; Look and Answer Overcoming Priors for Visual QuestionAnswering</h2><blockquote><p>Agrawal A, Batra D, Parikh D, et al. Don't just assume; look andanswer: Overcoming priors for visual question answering[C]//Proceedingsof the IEEE Conference on Computer Vision and Pattern Recognition. 2018:4971-4980.</p></blockquote><p>本文认为现有的VQA模型在回答问题时缺乏充足的图像依据。（倾向于依赖语言层面的条件，而非以图像为根据回答问题）</p><p>本文提出通过把训练集和测试集的“回答”的概率分布差异化开来，可以验证VQA模型是否收到了语料数据（问题、回答）概率分布的偏差影响，变得倾向于根据预料中的概率分布来回答问题，而非以图像为依据。</p><p>本文提出视觉根据问答模型（Grounded Visual Question Answering model,GVQA）</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Don't%20Just%20Assume;%20Look%20and%20Answer%20Overcoming%20Priors%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 3: The proposed Grounded Visual Question Answering (GVQA) model."><p>本文的GVQA会对问题语句做出分类，判断其是否是一个“回答yes/no”的问题。视觉概念分类器（Visual Concept Classifier,VCC）在任何情况下都工作，但回答聚类预测器（Answer Cluster Predictor,ACP）和概念抽取器（Concept Extractor, CE）是二选一的。回答预测器（AnswerPredictor, AP）和视觉验证器（Visual Verifier, VV）也是二选一的。</p><p>当给定图像和问题作为输入时：</p><ol type="1"><li>如果不是“yes/no”型问题，那么ACP工作，而CE不工作。ACP从问题语句中预测出的概念据类输入到AP中，给出998预定义回答词的分类结果。</li><li>如果是“yes/no”型问题，那么CE工作，ACP不工作，VCC和CE输入到VV中，给出Yes/No的分类结果。</li></ol><h2id="dvqa-understanding-data-visualizations-via-question-answering">2018DVQA Understanding Data Visualizations via Question Answering</h2><blockquote><p>Kafle K, Price B, Cohen S, et al. DVQA: Understanding datavisualizations via question answering[C]//Proceedings of the IEEEConference on Computer Vision and Pattern Recognition. 2018:5648-5656.</p></blockquote><p>本文提出数据可视化问答（Data Visualizations Question Answering,DVQA），并给出DVQA数据集，包含基于问答框架的对条形图（barcharts）的各种层面的理解。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20DVQA%20Understanding%20Data%20Visualizations%20via%20Question%20Answering.jpg" class="" title="Figure 4: Overview of our Multi-Output Model (MOM) for DVQA. MOM uses two sub-networks: 1) classification sub-network that is responsible for generic answers, and 2) OCR sub-network that is responsible for chart-specific answers."><p>本文的DVQA多输出模型（Multi-Output Model, MOM）包含两个子网络：</p><ol type="1"><li>分类子网络：生成一般回答；</li><li>OCR子网络：生成针对图表的回答。</li></ol><h2 id="embodied-question-answering">2018 Embodied QuestionAnswering</h2><blockquote><p>Das A, Datta S, Gkioxari G, et al. Embodied questionanswering[C]//Proceedings of the IEEE Conference on Computer Vision andPattern Recognition Workshops. 2018: 2054-2063.</p></blockquote><p>本文提出一个新任务——EmbodiedQA，其中的智能体被放置在三维环境中的一个任意地点并且被问一个问题。智能体需要智能导航探索所处环境，通过第一视角找出必要的视觉信息，随后才能找出问题的答案。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Embodied%20Question%20Answering.jpg" class="" title="Figure 1: Embodied Question Answering – EmbodiedQA– tasks agents with navigating rich 3D environments in order to answer questions. These agents must jointly learn language understanding, visual reasoning, and goal-driven navigation to succeed."><blockquote><p>The embodiment hypothesis is the idea that intelligence emerges inthe interaction of an agent with an environment and as a result ofsensorimotor activity.</p><p>-<em>Smith and Gasser</em>, “The development of embodied cognition:six lessons from babies.,” Artificial life, vol. 11, no. 1-2, 2005.</p></blockquote><h2 id="focal-visual-text-attention-for-visual-question-answering">2018Focal Visual-Text Attention for Visual Question Answering</h2><blockquote><p>Liang J, Jiang L, Cao L, et al. Focal visual-text attention forvisual question answering[C]//Proceedings of the IEEE Conference onComputer Vision and Pattern Recognition. 2018: 6135-6143.</p></blockquote><p>本文研究真实生活中的VQA问题，研究一组图片序列或视频（算是VideoVQA），来回答问题，而不是传统的一张静态图片。</p><p>本文提出焦点视觉文本注意力网络（Focal Visual-Text Attention network,FVTA）。本文的FVTA模型解决的是如何关注序列数据中与问题相关部分的问题。FVTA模型不仅能回答问题，还能给出回答的理由。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Focal%20Visual-Text%20Attention%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 2. An overview of Focal Visual-Text Attention (FVTA) model. For visual-text embedding, we use a pre-trained convolutional neural network to embed the photos and pre-trained word vectors to embed the words. We use a bi directional LSTM as the sequence encoder. All hidden states from the question and the context are used to calculate the FVTA tensor. Based on the FVTA attention, both question and the context are summarized into single vectors for the output layer to produce final answer. The output layer is used for multiple choice question classification. The text embedding of the answer choice is also used as the input. This input is not shown in the figure."><h2 id="fvqa-fact-based-visual-question-answering">2018 FVQA Fact-BasedVisual Question Answering</h2><blockquote><p>Wang P, Wu Q, Shen C, et al. Fvqa: Fact-based visual questionanswering[J]. IEEE transactions on pattern analysis and machineintelligence, 2018, 40(10): 2413-2427.</p></blockquote><p>本文认为已有的VQA研究大多直接分析问题和图像，无需外部信息，这使其无法应对需要例如：常识、基本事实知识等信息的问题。</p><p>本文提出基于事实的视觉问答FVQA（Fact-basedVQA）数据集，该数据集包含了需要外部信息才能回答的问题，能够支撑更深层的推理研究。</p><p>每一个支持事实都通过结构化三元组表示，如：<code>&lt;Cat, CapbleOf, ClimbingTrees&gt;</code>。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20FVQA%20Fact-Based%20Visual%20Question%20Answering%20-%201.jpg" class="" title="Fig. 3. An example of the reasoning process of the proposed VQA approach. The visual concepts (objects, scene, attributes) of the input image are extracted using trained models, which are further linked to the corresponding semantic entities in the knowledge base. The input question is first mapped to one of the query types using the LSTM model shown in Section 4.2. The types of key relationships, key visual concept and answer source can be determined accordingly. A specific query (see Section 4.3) is then performed to find all facts meeting the search conditions in KB. These facts are further matched to the keywords extracted from the question sentence. The fact with the highest matching score is selected and the answer is also obtained accordingly."><p>首先，图像和视觉概念的收集方面，本文从微软COCO数据集的验证集和ImageNet的测试集中采样了<strong>2190</strong>张图像。微软COCO数据集中的图像提供更多的上下文信息，而ImageNet中的图像内容更简单，但包含更多的目标类型。（200in ImageNet versus 80 in MicrosoftCOCO）。本文在2190个图像上，通过人工标注建立了5826个问题，含32个问题类型。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20FVQA%20Fact-Based%20Visual%20Question%20Answering%20-%202.jpg" class="" title="The Relationships in Different Knowledge Bases Used for Generating Questions"><p>本文使用的外部结构化知识库来源于：DBpedia、ConceptNet和WebChild。</p><ul><li>DBpedia，通过众包从维基百科中抽取的结构化知识。本文使用其中的视觉概念的类属关系（conceptsare linked to their categories and super-categories based on the SKOSVocabulary）。</li><li>ConceptNet，从Open Mind Common Sense (OMCS)项目中的句子中自动生成。由几种常识关系（commonsenserelations）组成，如：UsedFor, CreatedBy,IsA。本文使用其中的11种常见关系。</li><li>WebChild，从Web中自动抽取生成，一个被忽视（overlooked）的常识事实库，涉及比较关系（comparativerelations），如：Faster, Bigger, Heavier。</li></ul><p>本文提出的FVQA数据集中，“问题”是通过一个标注系统来人工输入的，标注过程分三步：1. 选择概念（SelectingConcept）：给定图像及其中的一些视觉概念（目标、场景和行为），标注者需要从中选出<strong>一项</strong>视觉概念；2. 选择事实（SelectingFact）：特定视觉概念被选定后，系统给出与该视觉概念相关的一些事实。标注人员需要选出<strong>一项</strong>正确的且与图像相关的事实。3. 问问题并给答案（Asking Question and GivingAnswer）：根据选出的视觉概念和事实，标注者需要提出一个问题，并给出答案。提出的问题必须是要同时依靠图像信息和事实信息才能回答的问题，而该问题的答案则必须是选定事实中的两个概念的其中之一，即，答案要么是第一步选出的视觉概念，要么是第二步选出的事实中的相关概念。</p><h2id="improved-fusion-of-visual-and-language-representations-by-dense-symmetric-co-attention-for-visual-question-answering">2018Improved Fusion of Visual and Language Representations by DenseSymmetric Co-attention for Visual Question Answering</h2><blockquote><p>Nguyen D K, Okatani T. Improved fusion of visual and languagerepresentations by dense symmetric co-attention for visual questionanswering[C]//Proceedings of the IEEE Conference on Computer Vision andPattern Recognition. 2018: 6087-6096.</p></blockquote><p>已有研究存在注意力机制和特征融合两条路线分别研究的问题，本文认为更好的注意力机制能够带来更好的融合表示。</p><p>本文发现两种模态之间密集、双向互动的注意力机制能够提高VQA准确率。</p><p>本文提出了一个简单的架构，在该架构中，视觉表示和语言表示完全对称，问题中的每一个单词关注到图像中的区域，图像中的每一个区域关注到问题中的单词。该架构还可以堆成层次结构，用于建模图像-问题对之间的多步互动。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Improved%20Fusion%20of%20Visual%20and%20Language%20Representations%20by%20Dense%20Symmetric%20Co-attention%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 2: The internal structure of a single dense coattention layer of layer index l + 1."><p>本文设计的注意力层称为密集协同注意力层（dense co-attention layer）。给定一个图像和对应的一个问题，本文的密集协同注意力层为问题中的每个单词生成各图像区域的注意力图，同样地，反过来也为图像中的每一个区域生成问题中各单词的注意力图。随后，计算注意力加权的特征，连接多模态表示，以及做后续变换。本文的密集协同注意力层考虑了任意图像区域与任意问题单词之间的每一个交互关系。事实上，形成了两种模态之间的全对称架构，并且还可以堆成层次结构以建模图像与问题之间的多部互动关系。</p><p>另外，本文还提到了对注意力机制的特殊情况：“没什么好注意的”的处理方法，即，为N个问题单词和T个图像区域都增加K个元素。</p><h2 id="iqa-visual-question-answering-in-interactive-environments">2018IQA Visual Question Answering in Interactive Environments</h2><blockquote><p>Gordon D, Kembhavi A, Rastegari M, et al. Iqa: Visual questionanswering in interactive environments[C]//Proceedings of the IEEEConference on Computer Vision and Pattern Recognition. 2018:4089-4098.</p></blockquote><p>本文提出交互问答（Interactive Question Answering,IQA）任务，在该任务中，智能体需要与一个动态的视觉环境交互来回答问题。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20IQA%20Visual%20Question%20Answering%20in%20Interactive%20Environments.jpg" class="" title="Figure 2. An overview of the Hierarchical Interactive Memory Network (HIMN)"><h2 id="ivqa-inverse-visual-question-answering">2018 iVQA Inverse VisualQuestion Answering</h2><blockquote><p>Liu F, Xiang T, Hospedales T M, et al. iVQA: Inverse visual questionanswering[C]//Proceedings of the IEEE Conference on Computer Vision andPattern Recognition. 2018: 8611-8619.</p></blockquote><p>本文首次提出逆视觉问答任务iVQA，作为“视觉-语言”理解的一项指标。</p><p>逆视觉问答iVQA任务是指根据给定的图像和答案，生成对应的问题。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20iVQA%20Inverse%20Visual%20Question%20Answering.jpg" class="" title="Figure 2. Overall architecture of the proposed iVQA model"><h2 id="learning-answer-embeddings-for-visual-question-answering">2018Learning Answer Embeddings for Visual Question Answering</h2><blockquote><p>Hu H, Chao W L, Sha F. Learning answer embeddings for visual questionanswering[C]//Proceedings of the IEEE Conference on Computer Vision andPattern Recognition. 2018: 5428-5436.</p></blockquote><p>本文为VQA提出一款新的概率模型。 核心思想是推测两组嵌入：</p><ol type="1"><li><p>图像和问题的嵌入；</p></li><li><p>回答的嵌入。</p></li></ol><p>学习目标是习得最佳参数，能够使得正确答案在所有可能答案中由最高的似然概率。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Learning%20Answer%20Embeddings%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 1. Conceptual diagram of our approach. We learn two embedding functions to transform image question pair (i, q) and (possible) answer a into a joint embedding space. The distance (by inner products) between the embedded (i, q) and a is then measured and the closest a (in red) would be selected as the output answer."><p>把“图像+问题”和“回答”映射到联合嵌入空间中，对应的图像问题对(i,q)和对应的正确答案a的距离应最短。</p><h2 id="learning-by-asking-questions">2018 Learning by AskingQuestions</h2><blockquote><p>Misra I, Girshick R, Fergus R, et al. Learning by askingquestions[C]//Proceedings of the IEEE Conference on Computer Vision andPattern Recognition. 2018: 11-20.</p></blockquote><p>本文为智能视觉系统提出交互式学习框架，命名为learning-by-asking（LBA）。</p><p>本文在VQA的问题场景下研究LBA。相较于标准VQA在训练过程中学习大量问答，LBA中的学习者（智能体）则需要在/自主问问题来获取它想知道的知识。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Learning%20by%20Asking%20Questions.jpg" class="" title="Figure 3: Our approach to the learning-by-asking setting for VQA. Given an image I, the agent generates a diverse set of questions using a question generator g. It then filters out “irrelevant” questions using a relevance model r to produce a list of question proposals. The agent then answers its own questions using the VQA model v. With these predicted answers and its self-knowledge of past performance, it selects one question from the proposals to be answered by the oracle. The oracle provides answer-level supervision from which the agent learns to ask informative questions in subsequent iterations."><p>给定一个图像<span class="math inline">\(I\)</span>，智能体： 1.问题生成器（Question Generator）<spanclass="math inline">\(g\)</span>根据图像<spanclass="math inline">\(I\)</span>一个问题集合； 2. 问题相关性（QuestionRelevance）<spanclass="math inline">\(r\)</span>则作为筛选依据选出一列问题提议<spanclass="math inline">\(Q_p\)</span>； 3. 问题回答模块（Question AnsweringModule）中，智能体自己的VQA模型<spanclass="math inline">\(v\)</span>负责回答问题提议<spanclass="math inline">\(Q_p\)</span>； 4.根据预测出的答案以及智能体已经取得的自我知识，问题选择模块（QuestionSelection Module）从问题提议<spanclass="math inline">\(Q_p\)</span>中选出一个问题来问先知（Oracle）； 5.先知回答该选出的问题，答案作为监督标记帮助智能体在下一轮提出有意义的问题。</p><h2id="learning-conditioned-graph-structures-for-interpretable-visual-question-answering">2018Learning Conditioned Graph Structures for Interpretable Visual QuestionAnswering</h2><blockquote><p>Norcliffe-Brown W, Vafeias S, Parisot S. Learning conditioned graphstructures for interpretable visual question answering[C]//Advances inNeural Information Processing Systems. 2018: 8334-8343.</p></blockquote><p>现有的研究很少有基于高层图像表示的，很少去捕捉语义和空间关系。现有的VQA研究大多扑在创造新的注意力架构上，而没有去建模场景中的目标之间语义关系。对于现有的典型的场景图生成研究【2017Scene Graph Generation by Iterative MessagePassing】（研究场景图自动生成方法的论文），本文认为场景图通过图结构表示图像，能够显式建模互动关系，例如图像中的目标及其互动关系，由此在近期的VQA研究中很受关注。但另一方面，本文认为现有的场景图研究需要大量工程量，而且是针对特定图像的而不是针对问题，还存在难以从虚拟场景迁移到真实图像、可解释性差的问题。</p><p>本文提出一种基于图的VQA方法，本文的方法加入了一个图学习模块（graphlearner module），能够学习输入图片对特定问题的图表示（question specificgraphrepresentation）。具体地，本文的方法通过图卷积，学习能够捕捉与问题相关的互动信息的图像表示。</p><p>对同一个图像，不同的问题产生了不同的图结构。图结构针对不同问题指向相应的答案。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Learning%20Conditioned%20Graph%20Structures%20for%20Interpretable%20Visual%20Question%20Answering.jpg" class="" title="Figure 2: Overview of the proposed model architecture. We model the VQA problem as a classification problem, where each answer from the training set is a class. The core of our method is the graph learner, which takes as input a question encoding, and a set of object bounding boxes with corresponding image features. The graph learner module learns a graph representation of the image that is conditioned on the question, and models the relevant interactions between objects in the scene. We use this graph representation to learn image features that are influenced by their relevant neighbours using graph convolutions, followed by max-pooling, element-wise product and fully connected layers."><p>本文方法的核心在于图学习器（graph learner）。 输入：</p><ol type="1"><li><p>问题编码；</p></li><li><p>一组目标的边界框及其目标图像特征向量；</p></li></ol><p>输出：以问题为条件的图像的图表示，并建模目标之间的相互关系。</p><p>图学习器的具体原理为：</p><p>本文提出了一种根据问题上下文学习取得的图结构。具体地，该图结构表示中，把目标检测地边界框定义为图节点，而以问题为条件地图边则通过基于注意力机制地模块学习取得。就定义而言，本文的图结构是一种无向图，定义为<spanclass="math inline">\(G = \{ V, ε, A \}\)</span>，包含节点集<spanclass="math inline">\(V\)</span>，待学习的边集<spanclass="math inline">\(\epsilon\)</span>，以及节点之间的邻接矩阵<spanclass="math inline">\(A \in \mathbb{R}^{N×N}\)</span>。邻接矩阵<spanclass="math inline">\(A\)</span>用于表示边<spanclass="math inline">\((i, j, A_{i,j}) \in \epsilon\)</span>，该矩阵<spanclass="math inline">\(A\)</span>的值以问题编码<spanclass="math inline">\(q\)</span>为条件。</p><p>具体地，本文通过把节点的视觉特征<spanclass="math inline">\(v_n\)</span>和问题编码<spanclass="math inline">\(q\)</span>连接起来，记为<spanclass="math inline">\([v_n || q]\)</span>，并通过非线性函数<spanclass="math inline">\(F:\mathbb{R}^{d_v+d_q} \to\mathbb{R}^{d_e}\)</span>映射为联合嵌入<spanclass="math inline">\(e_n\)</span>，形式化为:</p><p><span class="math display">\[e_n = F([v_n||q]),    n = 1,2,...,N\]</span></p><p>接下来，节点<span class="math inline">\(i\)</span>，<spanclass="math inline">\(j\)</span>之间的邻接矩阵值通过<spanclass="math inline">\(A_{i,j}=e_i^Te_j\)</span>，即向量内积求取相似度计算取得，可以通过矩阵运算<spanclass="math inline">\(A=EE^T\)</span>实现。</p><p>邻接矩阵<spanclass="math inline">\(A\)</span>是一个全连接的邻接矩阵，这样的邻接矩阵<spanclass="math inline">\(A\)</span>及由此计算边集$ <spanclass="math inline">\(的定义没有对图的稀疏性（sparsity）做任何约束。这种全连接的密集边集不仅计算量大，而且对VQA没有帮助，因为VQA需要的是关注与问题有关的节点。把邻接矩阵\)</span>A<spanclass="math inline">\(学习到的图结构作为图卷积层（graph convolutionlayers）的backbone，在做图卷积计算之前应该先筛选，关注与VQA任务相关的一部分节点和边，而不需要所有节点之间的关系。因此本文通过\)</span>topm<spanclass="math inline">\(排序\)</span>m<spanclass="math inline">\(个最大\)</span>a<spanclass="math inline">\(值，对邻接矩阵\)</span>A$进行筛选，取得一个稀疏的、保留强关联的边的边集合。此处的形式化表述为：</p><p><span class="math display">\[N(i) = topm(a_i)\]</span></p><h2id="learning-to-specialize-with-knowledge-distillation-for-visual-question-answering">2018Learning to Specialize with Knowledge Distillation for Visual QuestionAnswering</h2><blockquote><p>Mun J, Lee K, Shin J, et al. Learning to specialize with knowledgedistillation for visual question answering[C]//Advances in NeuralInformation Processing Systems. 2018: 8081-8091.</p></blockquote><p>本文研究VQA中的知识蒸馏（Knowledge Distillation）。</p><blockquote><p>Visual Question Answering (VQA) is a notoriously challenging problembecause it involves various heterogeneous tasks defined by questionswithin a unified framework. Learning specialized models for individualtypes of tasks is intuitively attracting but surprisingly difficult; itis not straightforward to outperform naïve independent ensembleapproach. We present a principled algorithm to learn specialized modelswith knowledge distillation under a multiple choice learning (MCL)framework, where training examples are assigned dynamically to a subsetof models for updating network parameters. The assigned and non-assignedmodels are learned to predict ground-truth answers and imitate their ownbase models before specialization, respectively. Our approach alleviatesthe limitation of data deficiency in existing MCL frameworks, and allowseach model to learn its own specialized expertise without forgettinggeneral knowledge. The proposed framework is model-agnostic andapplicable to any tasks other than VQA, e.g., image classification witha large number of labels but few per-class examples, which is known tobe difficult under existing MCL schemes. Our experimental results indeeddemonstrate that our method outperforms other baselines for VQA andimage classification.</p></blockquote><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Learning%20to%20Specialize%20with%20Knowledge%20Distillation%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 2: Overall framework of our multiple choice learning with knowledge distillation"><h2id="learning-visual-knowledge-memory-networks-for-visual-question-answering">2018Learning Visual Knowledge Memory Networks for Visual QuestionAnswering</h2><blockquote><p>Su Z, Zhu C, Dong Y, et al. Learning visual knowledge memory networksfor visual question answering[C]//Proceedings of the IEEE Conference onComputer Vision and Pattern Recognition. 2018: 7736-7745.</p></blockquote><p>本文把VQA数据样本中的目标分为三类：</p><ol type="1"><li>明显目标（apparent objective）：从图像中可以直接回答出来；</li><li>隐约目标（indiscernibleobjective）：视觉识别不清，需要借助常识作为约束；</li><li>不可见目标（invisibleobjective）：无法借助视觉内容回答，需要对外部知识做归纳/推理才行。</li></ol><p>对于隐约目标、不可见目标，VQA需要从结构化的人类知识中进行推理，并根据视觉内容进行确认。</p><p>本文提出视觉知识记忆网络（visual knowledge memory network,VKMN），VKMN能够在端到端学习框架下，把结构化的人类知识和深度视觉特征无缝整合进记忆网络中。</p><p>本文关注点：</p><ol type="1"><li><p>把视觉内容和知识事实做集成的机制。VKMN模型通过把知识三元组(subject,relation,target)和深度视觉特征联合嵌入进视觉知识特征的方式实现该机制。</p></li><li><p>处理从问题和答案对中扩展出的多项知识事实的机制。VKMN模型通过键值对结构在记忆网络中存储联合嵌入，以便处理多条事实。</p></li></ol><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Learning%20Visual%20Knowledge%20Memory%20Networks%20for%20Visual%20Question%20Answering%20-%201.jpg" class="" title="Figure 2: Illustration of VKMN for the VQA task. Note that three replicated memory sub-blocks (different combination of s, r, t as key-part or value-part) are used to handle the ambiguity on which part of the knowledge triple is missing in the query question."><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Learning%20Visual%20Knowledge%20Memory%20Networks%20for%20Visual%20Question%20Answering%20-%202.jpg" class="" title="Figure 3: Diagram of Visual Knowledge Memory Network based VQA system"><h2id="motion-appearance-co-memory-networks-for-video-question-answering">2018Motion-Appearance Co-Memory Networks for Video Question Answering</h2><blockquote><p>Gao J, Ge R, Chen K, et al. Motion-appearance co-memory networks forvideo question answering[C]//Proceedings of the IEEE Conference onComputer Vision and Pattern Recognition. 2018: 6576-6585.</p></blockquote><p>视频VQA和图像VQA的区别： 1.视频VQA需要处理较长的图像序列，其中包含了更加丰富的信息，无论是数量，还是种类，都比图像包含的信息多。2. 运动和出现信息互相关联，能够相互提供有用的注意力线索； 3.不同的问题需要不同数量的视频帧来推测答案。</p><p>基于视频VQA和图像VQA的区别，本文为视频QA提出一个运动-出现协同记忆网络（motion-appearanceco-memory network）。该网络基于动态记忆网络（Dynamic Memory Network,DMN）的概念，并建立了新的机制： 1. 协同记忆注意力机制（co-memoryattention mechanism）：根据运动和出现线索来生成注意力； 2.时间卷积-反卷积网络（temporal conv-deconvnetwork）：生成多层上下文事实； 3. 动态事实集成方法（dynamic factensemble method）：动态构建对不同问题的时间表示。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Motion-Appearance%20Co-Memory%20Networks%20for%20Video%20Question%20Answering.jpg" class="" title="Figure 4. Co-memory attention module extracts useful cues from both appearance and motion memories to generate attention gat&#x2F;gbt for motion and appearance separately. Dynamic fact ensemble takes the multi-layer contextual facts AL&#x2F;BL and the attention scores gat&#x2F;gbt to construct proper facts As&#x2F;h L &#x2F;Bs&#x2F;h L , which are encoded by an attention-based GRU. The final hidden state ct b&#x2F;ct a of the GRU is used to update the memory mt b&#x2F;mt a. The final output memorymh is the concatenation of the motion and appearance memory, and it is used to generate answers."><h2id="neural-symbolic-vqa-disentangling-reasoning-from-vision-and-language-understanding">2018Neural-Symbolic VQA Disentangling Reasoning from Vision and LanguageUnderstanding</h2><blockquote><p>Yi K, Wu J, Gan C, et al. Neural-symbolic vqa: Disentanglingreasoning from vision and language understanding[C]//Advances in NeuralInformation Processing Systems. 2018: 1031-1042.</p></blockquote><p>本文把推理从视觉及语言理解中解脱出来。本文认为不必纠结在构建视觉理解、语言理解的深度表示中做知识推理。本文认为，通过深度表示学习来实现视觉识别和语言理解，通过符号程序的执行来实现推理。本文提出神经-符号视觉问答（neural-symbolicvisual question answering,NS-VQA）系统，首先从图像中构建结构化场景表示，从问题中构建程序跟踪（programtrace）。随后，NS-VQA在场景表示上执行程序进行推理并取得答案。</p><p>结合符号结构先验知识具备三大优势： 1.在符号空间中执行程序比长程序跟踪更稳定；（本文呢在CLEVR数据集上acc达99.8%）2.数据高效和内存高效：只需要少部分训练数据，还能够把图像转换为紧凑表示（如图2中的表格），因此省内存；3.符号程序执行的过程本身具备完全的透明度，因此每一个执行步骤都是可解释、可诊断的。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Neural-Symbolic%20VQA%20Disentangling%20Reasoning%20from%20Vision%20and%20Language%20Understanding.jpg" class="" title="Figure 2: Our model has three components: first, a scene parser (de-renderer) that segments an input image (a-b) and recovers a structural scene representation (c); second, a question parser (program generator) that converts a question in natural language (d) into a program (e); third, a program executor that runs the program on the structural scene representation to obtain the answer."><ul><li>图像--神经网络--&gt;场景表示；</li><li>问题--生成--&gt;程序跟踪；</li><li>通过符号程序执行器，和神经解析器配合，执行程序进行推理取得答案。</li></ul><p>关于推理的实验基本都在CLEVR数据集上做，但CLEVR数据集毕竟是合成的数据集，都是cube,cylinder之类的东西，不同的相对位置、颜色外观等。NS-VQA方法能泛化至realworld的图像么？Minecraftworld可能能够在一定程度上验证其泛化能力。本文利用Minecraft生成了1万个游戏画面场景，每个场景3~6个物体目标。当Programs数量达到500时，Accuracy能达到87.3%。</p><h2id="out-of-the-box-reasoning-with-graph-convolution-nets-for-factual-visual-question-answering">2018Out of the Box Reasoning with Graph Convolution Nets for Factual VisualQuestion Answering</h2><blockquote><p>Narasimhan M, Lazebnik S, Schwing A. Out of the box: Reasoning withgraph convolution nets for factual visual questionanswering[C]//Advances in Neural Information Processing Systems. 2018:2654-2665.</p></blockquote><p>基于事实（fact-based）的VQA旨在促进VQA模型对知识的运用。已有研究通过深度学习技术连续缩小大规模事实集，直到剩下最后一条事实，取该事实中两个实体的其中一个作为答案预测出来。本文观察了这个持续过程，认为每次根据一条事实来形成局部决策是次优（sub-optimal）的。因此，本文开发一种实体图（entitygraph），并使用图卷积神经网络GCN来联合考虑所有节点以推理出正确答案。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Out%20of%20the%20Box%20Reasoning%20with%20Graph%20Convolution%20Nets%20for%20Factual%20Visual%20Question%20Answering.jpg" class="" title="Figure 2: Outline of the proposed approach: Given an image and a question, we use a similarity scoring technique (1) to obtain relevant facts from the fact space. An LSTM (2) predicts the relation from the question to further reduce the set of relevant facts and its entities. An entity embedding is obtained by concatenating the visual concepts embedding of the image (3), the LSTM embedding of the question (4), and the LSTM embedding of the entity (5). Each entity forms a single node in the graph and the relations constitute the edges (6). A GCN followed by an MLP performs joint assessment (7) to predict the answer. Our approach is trained end-to end."><p>本文的方法： 1. 从事实空间（Fact Space）中取得相关事实； 2.通过LSTM预测问题中的关系，并用其进一步减少相关事实及实体集合； 3.通过把图像中视觉概念嵌入（visual conceptsembedding）连接起来获得一个实体嵌入； 4. 通过LSTM计算问题嵌入； 5.通过LSTM计算实体嵌入； 6. 每一个实体作为图中的一个节点，关系则作为边；7. 通过GCN及后接的MLP来做联合评估以预测答案。</p><h2id="overcoming-language-priors-in-visual-question-answering-with-adversarial-regularization">2018Overcoming Language Priors in Visual Question Answering with AdversarialRegularization</h2><blockquote><p>Ramakrishnan S, Agrawal A, Lee S. Overcoming language priors invisual question answering with adversarial regularization[C]//Advancesin Neural Information Processing Systems. 2018: 1541-1551.</p></blockquote><p>本文认为现有的VQA模型过度依赖训练数据中问题和答案之间的表层关联，没有真正以图像视觉信息为根据，无法真正适应真实世界场景。</p><p>本文为VQA提出一种正则化模式（regularizationscheme）。该模式引入一个question-only模型，只取VQA的问题作为输入，该模型必须依赖语言来做预测。该question-only模型继而与VQA模型形成对抗博弈，以此达到让VQA模型在问题编码中避免languagebiases的作用。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Overcoming%20Language%20Priors%20in%20Visual%20Question%20Answering%20with%20Adversarial%20Regularization.jpg" class="" title="Figure 1: Given an arbitrary base VQA model (A), we introduce two regularizers. First, we build a question-only adversary (B) that takes the question embedding qi from the VQA model and is trained to output the correct answer from this information alone. For this network to succeed, qi must capture language biases from the dataset – the same biases that lead the base VQA model to ignore visual content. To reduce these biases, we set the base VQA model and the question-only adversary against each other, with the base VQA network modifying its question embedding to reduce question-only performance (shown here as gradient negation of the question-only model loss) Further, the question-only model allows estimation of the change in answer confidence given image (C), which we maximize explicitly."><h2id="textbook-question-answering-under-instructor-guidance-with-memory-networks">2018Textbook Question Answering Under Instructor Guidance With MemoryNetworks</h2><blockquote><p>Li J, Su H, Zhu J, et al. Textbook question answering underinstructor guidance with memory networks[C]//Proceedings of the IEEEConference on Computer Vision and Pattern Recognition. 2018:3655-3663.</p></blockquote><p>本文研究教科书问答TQA。</p><p>本文认为现有的方法难以对长上下文和图像进行有效推理。</p><p>本文提出使用记忆网络的导师指导（Instructor Guidance with MemoryNetworks,IGMN）方法。IGMN方法通过查找候选答案与对应上下文之间的矛盾来实现TQA任务。</p><p>本文构造矛盾实体关系图（Contradiction Entity-Relationship Graph,CERG）。CERG能够把篇章级多模态矛盾扩展到短文级。机器随后扮演导师的角色，提取短文级矛盾作为指导（Guidance）。随后，通过记忆网络来捕捉指导（Guidance）中的信息，通过注意力机制来对多模态输入的全局特征联合推理。</p><p>全文中的局部特征很难被汇总出来，尤其是还加入了图像信息的时候。本文发现可以用矛盾语义关系来处理这个问题。矛盾关系意味着两种表述不会同时为真。在长文本中，矛盾关系就容易汇总，因为即使加入了调和性的表述，相反的表达仍然是矛盾的。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Textbook%20Question%20Answering%20Under%20Instructor%20Guidance%20With%20Memory%20Networks.jpg" class="" title="Figure 2: Overall architecture of our proposed method, the Instructor Guidance with Memory Networks (IGMN). The lower part of the figure is the module of Instructor-Guided Knowledge Extraction (IGKE), which represents facts in the long essays and images with the Contradiction Entity- Relationship Graphs (CERGs). The upper part is the module of Answer Generation by Joint Reasoning (AGJR), which accesses the Guidance under a memory network and consequently generates answers by reasoning over the integrated latent facts accordingly by the attention mechanisms."><h2id="tips-and-tricks-for-visual-question-answering-learnings-from-the-2017-challenge">2018Tips and Tricks for Visual Question Answering Learnings from the 2017Challenge</h2><blockquote><p>Teney D, Anderson P, He X, et al. Tips and tricks for visual questionanswering: Learnings from the 2017 challenge[C]//Proceedings of the IEEEConference on Computer Vision and Pattern Recognition. 2018:4223-4232.</p></blockquote><p>本文认为研究现状在把VQA模型和流程弄得越来越复杂，各种设计、模块、机制缠在一起，使得这些模型中每一种设计和开发选择到底有多大作用变得难以弄清。这种研究现状把研究方向都带跑偏了，使得开发一个最佳模型不仅仅是科学研究，还成了艺术。</p><p>本文详细研究了VQA模型设计中，各种选择（参数、机制、模型结构）到底有什么影响。</p><p>本文总结出以下发现：</p><ol type="1"><li>使用sigmoid outputs：能够允许对每个问题的多个正确答案；</li><li>使用soft scores作为ground truthtarget：把问题转换为对候选答案的得分回归问题，而不是传统分类；</li><li>使用gated tanh activations：非线性层的激活函数；</li><li>使用image features from buttom-upattention：提供特定区域的特征，而不是对传统的从CNN中取得的特征映射图做网格划分；</li><li>使用pretrained representations of candidateanswers：初始化输出层的权重；</li><li>在随机梯度下降SGD训练中，使用large mini-batches和smartshuffling处理数据。</li></ol><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Tips%20and%20Tricks%20for%20Visual%20Question%20Answering%20Learnings%20from%20the%202017%20Challenge.jpg" class="" title="Figure 2. Overview of the proposed model. A deep neural network implements a joint embedding of the input question and image, followed by a multi-label classifier over a fixed set of candidate answers. Gray numbers indicate the dimensions of the vector representations between layers. Yellow elements use learned parameters. The elements w represent linear layers, and w non-linear layers (gated tanh)."><p>本文的模型基于深度神经网络实现，对输入问题和图像做联合嵌入，对一组候选答案做多标签分类。</p><h2id="two-can-play-this-game-visual-dialog-with-discriminative-question-generation">2018Two can play this Game Visual Dialog with Discriminative QuestionGeneration</h2><blockquote><p>Jain U, Lazebnik S, Schwing A G. Two can play this game: visualdialog with discriminative question generation andanswering[C]//Proceedings of the IEEE Conference on Computer Vision andPattern Recognition. 2018: 5754-5763.</p></blockquote><p>本文主要研究自动对话生成。本文给出一个数据集，并提供一个baseline模型，能够预测回答或预测问题。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Two%20can%20play%20this%20Game%20Visual%20Dialog%20with%20Discriminative%20Question%20Generation.jpg" class="" title="Figure 3: Architecture of our model for selecting the best answer option from a set of 100 candidates. LSTM nets transform all sequential inputs to a fixed size representation. The combined representations of T −1 previous question-answer pairs are concatenated to obtain the final history representation. Multi-class cross-entropy loss is computed by comparing a one-hot ground truth vector (based on the correct option) to output probabilities of the answer options."><h2 id="visual-question-answering-with-memory-augmented-networks">2018Visual Question Answering with Memory-Augmented Networks</h2><blockquote><p>Ma C, Shen C, Dick A, et al. Visual question answering withmemory-augmented networks[C]//Proceedings of the IEEE Conference onComputer Vision and Pattern Recognition. 2018: 6975-6984.</p></blockquote><p>本文研究如何用记忆增强神经网络（memory-augmented neuralnetwork）来实现准确的VQA模型，甚至是在训练集中的极低频答案，也能预测正确。</p><p>记忆神经网络通过结合内部和外部记忆块，选择性地对训练过程中的范例（exemplar）施以注意力。本文发现记忆增强神经网络能够对极其稀有地训练范例维持相对较长的记忆，这种特性能够用于应对VQA场景下“答案”的“长尾”分布问题（少部分答案高频出现，而大量答案的出现概率都很低）。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Visual%20Question%20Answering%20with%20Memory-Augmented%20Networks.jpg" class="" title="Figure 3. Flowchart of the proposed algorithm. We use the last pooling layer of pre-trained CNNs to extract image features that encode spatial layout information. We employ bi-directional LSTMs to generate a fixed-length feature vector for each word. A co-attention mechanism attends to relevant image regions and textual words. We concatenate the attended image and question feature vectors and feed them into a memory-augmented network, which consists of a standard LSTM as controller and an augmented external memory. The controller LSTM determines when to write or read from the external memory. The memory-augmented network plays a key role in maintaining a long-term memory of scarce training data. We take the outputs of the memory-augmented network as final embedding for the image and question pair, and feed this embedding into a classifier to predicts answers."><p>本文提出的算法流程： 1.从预训练CNN的最后池化层提取包含空间布局信息的图像特征； 2.用双向LSTM来生成每个单词的定长特征向量； 3.协同注意力机制注意相关图像区域及文本单词； 4.把注意力加权后的图像与问题特征向量连接起来并输入到记忆增强网络中； 5.在记忆增强网络中，包含一个标准LSTM和一个增强外部记忆；LSTM充当控制器，决定何时读写外部记忆；记忆增强网络维持对罕见训练数据长程记忆。6.把记忆增强网络的输出作为对图像和问题对的最终嵌入向量，把该嵌入向量输入到分类器中用于预测答案。</p><h2id="visual-question-generation-as-dual-task-of-visual-question-answering">2018Visual Question Generation as Dual Task of Visual QuestionAnswering</h2><blockquote><p>Li Y, Duan N, Zhou B, et al. Visual question generation as dual taskof visual question answering[C]//Proceedings of the IEEE Conference onComputer Vision and Pattern Recognition. 2018: 6116-6124.</p></blockquote><p>视觉问答VQA和视觉问题生成VQG都是热门方向，但研究现状是两个方向的研究室彼此分离的，但本文认为其实VQA和VQG之间是具备内在互补关系的。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Visual%20Question%20Generation%20as%20Dual%20Task%20of%20Visual%20Question%20Answering%20-%201.jpg" class="" title="Figure 1. Problem solving schemes of VQA (top) and VQG (bottom), both of which utilize the encoder-fusion-decoder pipeline with Q and A in inverse order. v, q and a respectively denote the encoded features of input image, question, and answer, while ˆa and ˆq represent the predicted answer&#x2F;question features."><p>本文提出一款端到端的可反转问答网络（Invertible Question AnsweringNetwork,iQAN），iQAN把VQA和VQG视为对偶任务。iQAN模型中，本文提出的可反转双线性融合模块（invertiblebilinear fusion module）和参数共享模式（parameter sharingscheme）可以同时实现VQA及对偶任务VQG。训练时，iQAN模型使用本文提出的双正则化器（称为DualTraining）对VQA和VQG任务联合训练。测试时，训练好的iQAN模型在输入answer时就预测输出question，在输入question时就预测输出answer。基于对VQA和VQG的对偶学习，iQAN的模型对图像、问题和回答之间的交互关系理解能力更好。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Visual%20Question%20Generation%20as%20Dual%20Task%20of%20Visual%20Question%20Answering%20-%202.jpg" class="" title="Figure 2. Overview of Invertible Question Answering Network (iQAN), which consists two components for VQA and VQG respectively. The upper component is MUTAN VQA component [3], and the lower component is its dual VQG model. Input questions and answers are encoded respectively by an RNN and a lookup table Ea into fixed-length features. With attention and MUTAN fusion module, predicted features are obtained. The predict features are used for obtaining output (by LSTM andWa for questions and answers respectively). A duality and Q duality are duality regularizers to constrain the similarity between the answer and question representations in both models. Two components share the MUTAN and Attention Modules. (·) ∗ denotes the dual form. Ea also shares parameters withWa."><h2 id="visual-question-reasoning-on-general-dependency-tree">2018Visual Question Reasoning on General Dependency Tree</h2><blockquote><p>Cao Q, Liang X, Li B, et al. Visual question reasoning on generaldependency tree[C]//Proceedings of the IEEE Conference on ComputerVision and Pattern Recognition. 2018: 7249-7257.</p></blockquote><p>本文提出名为对抗组合模块网络（Adversarial Modular Network,ACMN）来实现能够在多样且不受限的情况下，有效对齐图像和语言域全局上下文推理。ACMN模型包含两个协同模块：</p><ol type="1"><li><p>一个对抗注意力模块（adversarial attentionmodule）：提取每一个从问题中解析出的单词的局部视觉依据；</p></li><li><p>一个残差组合模块（residual compositionmodule）：组合已经挖掘出的依据。</p></li></ol><p>给定一个问题的依存解析树，对抗注意力模块通过对抗方式，密集地合并孩子单词节点的区域来逐渐地探索一个单词地显著区域。接着，残差组合模块通过求和池化和残差链接合并任意数量的子节点的隐表示。本文的ACMN模型能够构造一个可解释的VQA系统，能够根据问题驱动的推理路线，逐渐深入发现图像痕迹。ACMN模型通过整合所有注意力模块学习到的知识来实现全局推理。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Visual%20Question%20Reasoning%20on%20General%20Dependency%20Tree%20-%201.jpg" class="" title="Figure 1: Illustration of our Adversarial Composition Module Network (ACMN) that sequentially performs reasoning over a dependency tree parsed from the question. Conditioning on preceding word nodes, our ACMN alternatively mines visual evidence for nodes with modifier relations via an adversarial attention module and integrates features of child nodes of nodes with clausal predicate relation via a residual composition module."><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20Visual%20Question%20Reasoning%20on%20General%20Dependency%20Tree%20-%202.jpg" class="" title="Figure 2: The modules in our ACMN: a) each ACMN module that is composed by an adversarial attention module and residual composition module; b) adversarial attention module; c) residual composition module. The blue arrows indicate the modifier relation and the yellow arrows represent the clausal predicate relation. Each node receives the output attention maps and the hidden features from its children, as well as the image feature and word encoding. The adversarial attention module is employed to generate a new attention map conditioned on image feature, word encoding and previous attended regions given by modifier-dependent children. The residual composition module is learned to evolve higher-level representation by integrating features of its children and local visual evidence."><h2id="vizwiz-grand-challenge-answering-visual-questions-from-blind-people">2018VizWiz Grand Challenge Answering Visual Questions from Blind People</h2><blockquote><p>Gurari D, Li Q, Stangl A J, et al. Vizwiz grand challenge: Answeringvisual questions from blind people[C]//Proceedings of the IEEEConference on Computer Vision and Pattern Recognition. 2018:3608-3617.</p></blockquote><p>本文提出VizWiz数据集，首个目标导向（goal-oriented）的VQA数据集。</p><p>VizWiz数据集时面向盲人问答的数据集，数据集中的图像和问题由盲人用手机拍摄和记录，每个问题包含10个众包答案。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2018%20VizWiz%20Grand%20Challenge%20Answering%20Visual%20Questions%20from%20Blind%20People.jpg" class="" title="Figure 1. Examples of visual questions asked by blind people and corresponding answers agreed upon by crowd workers. The examples include questions that both can be answered from the image (top row) and cannot be answered from the image (bottom row)."><h2id="answer-them-all-toward-universal-visual-question-answering-models">2019Answer Them All! Toward Universal Visual Question Answering Models</h2><blockquote><p>Shrestha R, Kafle K, Kanan C. Answer them all! toward universalvisual question answering models[C]//Proceedings of the IEEE Conferenceon Computer Vision and Pattern Recognition. 2019: 10472-10481.</p></blockquote><p>VQA的研究现状分两个阵营：</p><ol type="1"><li><p>专注于需要现实图像理解的VQA数据集；</p></li><li><p>专注于检验推理能力的合成数据集。</p></li></ol><p>按理说，一个好的VQA模型要能够在这两种情况下都表现很好，具备良好的泛化能力。但实际上，经过本文的实验对比，所有的方法都无法在领域之间做到泛化。</p><p>本文提出一种新的VQA算法，能够匹敌甚至超过这两个领域的最优方法。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20Answer%20Them%20All!%20Toward%20Universal%20Visual%20Question%20Answering%20Models.jpg" class="" title="Figure 2: Our recurrent aggregation of multimodal embeddings network (RAMEN)."><p>本文提出多模态嵌入的循环聚合网络（Recurrent Aggregation of MultimodalEmbeddings Network, RAMEN）。</p><p>本文的RAMEN模型在概念上架构简单，以便适应复杂的现实场景。RAMEN模型对视觉和问题特征的处理分三阶段：1. 视觉和语言特征的早期融合（Early fusion of vision and languagefeatures）：已有研究表明，视觉特征和语言特征的早期融合有助于组合推理。RAMEN模型通过把问题特征与其空间上定位的视觉特征做连接。2. 通过共享投影学习双模态嵌入（Learning bimodal embeddings via sharedprojections）：视觉+问题的连接特征输入到一个共享网络中，生成空间定位的双模态嵌入。该阶段帮助网络学习视觉与文本特征之间的相互关系。3. 循环聚合习得的双模态嵌入（Recurrent aggregation of the learnedbimodalembeddings）：通过双向GRU（bi-GRU）聚合整个场景下的双模态嵌入来捕捉双模态之间的交互。最终的前向和后向状态基本上保留了回答问题所需的所有信息。</p><h2 id="cycle-consistency-for-robust-visual-question-answering">2019Cycle-Consistency for Robust Visual Question Answering</h2><blockquote><p>Shah M, Chen X, Rohrbach M, et al. Cycle-consistency for robustvisual question answering[C]//Proceedings of the IEEE Conference onComputer Vision and Pattern Recognition. 2019: 6649-6658.</p></blockquote><p>本文任务VQA的研究现状存在对鲁棒性关注不足的问题。</p><p>本文给出：</p><ol type="1"><li>新评价协议；</li><li>相应的新数据集VQA-Rephrasings。本文的研究表明目前的VQA模型在问题语句的语言变化时难以保持稳定。</li></ol><p>VQA-Rephrasing数据集从VQAv2.0发展而来，包含4万个图像，对应的4万个问题通过人工改写成了3个表述方式不同的问题语句。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20Cycle-Consistency%20for%20Robust%20Visual%20Question%20Answering.jpg" class="" title="Figure 2. (a) Abstract representation of the proposed cycle-consistent training scheme: Given a triplet of image I, question Q, and ground truth answer A, a VQA model is a transformation F : (Q, I) 7→ A′ used to predict the answer A′. Similarly, a VQG model G : (A′, I) 7→ Q′ is used to generate a rephrasing Q′ of Q. The generated rephrasing Q′ is passed through F to obtain A′′ and consistency is enforced between Q and Q′ and between A′ and A′′. Image I is not shown for clarity. (b) Detailed architecture of our visual question generation module G. The predicted answer A′ and image I are embedded to a lower dimension using task specific encoders and the resulting feature maps are summed up with additive noise and fed to an LSTM to generate questions rephrasings Q′."><p>引入了生成对抗网络中CycleGAN提出的循环一致性（cycle-consistency）原理：</p><ul><li><ol type="a"><li>重新生成的问题和答案应与ground-truth保持一致</li></ol></li><li><ol start="2" type="a"><li>视觉问题生成模块的架构细节</li></ol></li></ul><h2id="deep-modular-co-attention-networks-for-visual-question-answering">2019Deep Modular Co-Attention Networks for Visual Question Answering</h2><blockquote><p>Yu Z, Yu J, Cui Y, et al. Deep Modular Co-Attention Networks forVisual Question Answering[C]//Proceedings of the IEEE Conference onComputer Vision and Pattern Recognition. 2019: 6281-6290.</p></blockquote><p>协同注意力模型对VQA很重要，要把问题中的关键词和图像中的关键目标联系起来。</p><p>本文认为当前成功的协同注意力研究主要基于浅层模型，而深度协同注意力模型鲜有进展。</p><p>本文提出深度模块化协同注意力网络（Modular Co-Attention Network,MCAN），MCAN模型由模块协同注意力（Modular Co-Attention，MCA）层在深度上级联组成。每一个MCA层通过两个基本注意力单元组成的模块，对问题和图像的自注意力、图像的问题导向注意力（question-guided-attention）进行联合建模。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20Deep%20Modular%20Co-Attention%20Networks%20for%20Visual%20Question%20Answering%20-%201.jpg" class="" title="Figure 4: Overall flowchart of the deep Modular Co-Attention Networks (MCAN). In the Deep Co-attention Learning stage, we have two alternative strategies for deep co-attention learning, namely stacking and encoder decoder."><p>密集协同注意力机制（dense co-attentionmechanism）建模了任意图像区域与任意问题单词之间的密集交互关系，解决了跨模态交互不足，无法正确理解图像-问题之间关系以回答问题的难题。目前的密集协同注意力机制模型BAN、DCN都能级联增加深度，但这些模型相较于浅层模型或粗糙协同注意力模型MFH却没有明显的提升。本文认为深层协同注意力模型的瓶颈在于，缺乏对每个模态密集自注意的同时建模，例如：问题中单词与单词之间的关系、图像中区域与区域之间的关系。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20Deep%20Modular%20Co-Attention%20Networks%20for%20Visual%20Question%20Answering%20-%202.jpg" class="" title="Figure 2: Two basic attention units with multi-head attention for different types of inputs. SA takes one group of input features X and output the attended features Z for X; GA takes two groups of input features X and Y and output the attended features Z for X guided by Y ."><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20Deep%20Modular%20Co-Attention%20Networks%20for%20Visual%20Question%20Answering%20-%203.jpg" class="" title="Figure 3: Flowcharts of three MCA variants for VQA. (Y) and (X) denote the question and image features respectively."><p>本文基于Transformer模型，设计了两种通用注意力单元：</p><ol type="1"><li><p>自注意力单元（self-attention,SA）：建模模态内的密集交互（单词与单词、区域与区域）；</p></li><li><p>导向注意力单元（guided-attention,GA）：建模模态间的交互（单词与区域）； 模块协同注意力（ModularCo-Attention,MCA）层则通过组合SA和GA单元实现。MCA层支持深度级联。多个级联的MCA层组成了本文提出的深度MCAN模型。本文在VQA-v2数据集上开展的实验表明，自注意力和导向注意力在协同注意力学习中具备不错的协同增效作用。</p></li></ol><h2id="dynamic-fusion-with-intra--and-inter-modality-attention-flow-for-visual-question-answering">2019Dynamic Fusion With Intra- and Inter-Modality Attention Flow for VisualQuestion Answering</h2><blockquote><p>Gao P, Jiang Z, You H, et al. Dynamic Fusion With Intra-andInter-Modality Attention Flow for Visual QuestionAnswering[C]//Proceedings of the IEEE Conference on Computer Vision andPattern Recognition. 2019: 6639-6648.</p></blockquote><p>学习有效的多模态特征融合特征对VQA至关重要。当前的VQA研究没有在一个框架下对模态间和模态内关系进行联合研究。本文认为对于VQA问题，模态内关系和模态间关系是互补的，而现有的模型却忽视了这一点。比如说，对于图像模态，每一个图像区域不仅应该从对应的单词或短语中获取信息，还应该从相关的图像区域获取信息来推测答案；对于问题模态，可以通过推测其它单词来更好地理解问题。因此，本文为建模模态间和模态内信息流提出了一个统一框架。</p><p>本文提出基于模态内和模态间信息流的多模态特征动态融合方法——模态内和模态间注意力流动态融合（Fusionwith Intra- and Inter-modality Attention Flow,DFAF）框架实现高效的多模态特征融合，以便准确回答视觉问题。该方法能够在视觉模态和语言模态之间传递二者的动态信息。该方法还能稳定捕捉语言域与视觉域之间的高层交互，从而大幅提高VQA能力。本文提出的以其它模态为条件的动态模态内注意力流能够动态调整目标模态的模态内注意力，对多模态特征融合有重要意义。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20Dynamic%20Fusion%20With%20Intra-%20and%20Inter-Modality%20Attention%20Flow%20for%20Visual%20Question%20Answering%20-%201.jpg" class="" title="Figure 1: Illustration of the proposed Dynamic Fusion with Intra- and Inter-modality Attention Flow (DFAF) for visual question answering. Each DFAF module contains one Inter-Modality Attention Flow and one of Intra Modality Attention Flow Module. Stacking several blocks of DFAF can help the network gradually focus on important image regions , question words and the latent alignments."><ul><li>堆叠若干个DFAF块可以帮助模型逐渐关注到重要的图像区域、问题单词和隐含对齐关系。</li></ul><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20Dynamic%20Fusion%20With%20Intra-%20and%20Inter-Modality%20Attention%20Flow%20for%20Visual%20Question%20Answering%20-%202.jpg" class="" title="Figure 2: Illustration of the proposed Dynamic Intra- Modality Attention Flow module. Only intra-modality attention flow within the visual modality conditioned on question are shown. By average pooling over question features, the conditional gating vector can be acquired for controlling the information flows among region features. Attention will focus on question related information flows. Row-wise softmax is applied to obtain the attention weight."><ul><li>动态模态内注意力流（Dynamic Intra-Modality AttentionFlow）模块；</li><li>对问题特征平均池化出的条件门控向量（conditional gatingvector）可以控制区域特征之间流动的信息。，这样一来，注意力机制就会关注于与问题相关的信息流。</li></ul><h2id="explicit-bias-discovery-in-visual-question-answering-models">2019Explicit Bias Discovery in Visual Question Answering Models</h2><blockquote><p>Manjunatha V, Saini N, Davis L S. Explicit Bias Discovery in VisualQuestion Answering Models[C]//Proceedings of the IEEE Conference onComputer Vision and Pattern Recognition. 2019: 9562-9571.</p></blockquote><p>现有的VQA模型过于学习了数据中的统计偏差（statisticalbiases）。根据数据中的统计规律来回答，而非依据视觉内容。</p><p>本文通过简单的规则挖掘（rulemining）算法，发现了一些人类可解释规则，能够给我们对模型的这种行为带来独特的视角。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20Explicit%20Bias%20Discovery%20in%20Visual%20Question%20Answering%20Models.jpg" class="" title="Figure 1. On the left, we show examples of two questions from the VQA dataset of [6, 18] where a model would require a “skill” to answer correctly (such as telling the time, or reading the English language), and a third which can be answered using statistical biases in the data itself. On the right, we show examples of statistical biases for a set of questions containing the phrase “What time?” and various visual elements (antecedents). Note that each row in this figure represents multiple questions in the VQA validation set. The * next to the answer (or consequent) reminds us that it is from the set of answer words. There are several visual words associated with afternoon and night, but we have provided only two for brevity."><ul><li>论文图中的单词拼错了，应该是antecedent；</li><li>VQA数据集的VQA样本示例，表格中展示了统计偏差对回答的影响。</li></ul><h2id="generating-question-relevant-captions-to-aid-visual-question-answering">2019Generating Question Relevant Captions to Aid Visual QuestionAnswering</h2><blockquote><p>JialinWu, Zeyuan Hu, Raymond J. Mooney. Generating Question RelevantCaptions to Aid Visual Question Answering[C]//Proceedings of the 57thAnnual Meeting of the Association for Computational Linguistics. 2019:3585–3594.</p></blockquote><p>本文认为VQA和图像描述研究是相通的，实际上都需要连接语言和视觉的通用知识。基于这样的理解，本文提出在做VQA的同时，联合生成能够对回答视觉问题有帮助的描述，由此提升VQA水平。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20Generating%20Question%20Relevant%20Captions%20to%20Aid%20Visual%20Question%20Answering.jpg" class="" title="Figure 2: Overall structure of our model that generates question-relevant captions to aid VQA. Our model is first trained to generate question-relevant captions as determined in an online fashion in phase 1. Then, the VQA model is fine-tuned with generated captions from the first phase to predict answers. ⌦ denotes element-wise multiplication and denotes element-wise addition. Blue arrows denote fully-connected layers (fc) and yellow arrows denote attention embedding."><p>模型分两阶段训练: 1. 阶段1，模型学习生成问题相关的图像描述。 2.阶段2，用阶段1生成的问题相关描述来fine-tuneVQA模型，并预测输出回答。</p><h2id="improving-visual-question-answering-by-referring-to-generated-paragraph-captions">2019Improving Visual Question Answering by Referring to Generated ParagraphCaptions</h2><blockquote><p>Hyounghun Kim, Mohit Bansal. Improving Visual Question Answering byReferring to Generated Paragraph Captions[C]//Proceedings of the 57thAnnual Meeting of the Association for Computational Linguistics. 2019:3606-3612.</p></blockquote><p>本文认为段落风格的图像描述（paragraph-style imagecaption）比单句描述给出的信息更多。单句描述只是对图像做一个笼统描述，而段落描述则能够描述图像中的不同方面的信息、更抽象的信息、更易于理解的信息、符号表示型的信息，这些信息能够和图像本身所能表达的语义进行互补。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20Improving%20Visual%20Question%20Answering%20by%20Referring%20to%20Generated%20Paragraph%20Captions.jpg" class="" title="Figure 1: VTQA Architecture: Early, Late, and Later Fusion between the Vision and Paragraph Features."><p>本文提出视觉和文本问答（Visual and Textual Question Answering,VTQA）模型。该模型基于图像及其段落描述，给定问题，输出回答。</p><ul><li><p>本文的段落描述模块基于的Melas-Kyriazi等人2018年的研究，使用CIDEr作为reward实现强化学习。</p></li><li><p>早期融合（Early Fusion）：该阶段把视觉特征（VisualFeature）和段落描述（Paragraph Caption）与目标属性（ObjectProperties）特征进行融合。</p></li><li><p>晚期融合（LateFusion）：该阶段把各模块输出的逻辑值整合到一个向量中。</p></li></ul><h2 id="information-maximizing-visual-question-generation">2019Information Maximizing Visual Question Generation</h2><blockquote><p>Krishna R, Bernstein M, Fei-Fei L. Information Maximizing VisualQuestion Generation[C]//Proceedings of the IEEE Conference on ComputerVision and Pattern Recognition. 2019: 2008-2018.</p></blockquote><p>本文主要研究视觉问题生成。本文构建了一个模型，能够最大化图像、预期答案及生成问题之间的互信息。（要生成“好问题”，即与图像内容、预期回答密切相关的问题，而不是非常通用、宽泛的问题，如“图中有什么东西？”）</p><p>自然语言tokens是离散分布的，不可微分，为此本文通过变分连续隐空间来映射预期答案。本文通过一个第二隐空间来正则化这个隐空间，由此确保相似答案能够产生聚类。即使我们不知道预期答案时，第二隐空间也能生成一个目标驱动的问题来提取目标。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20Information%20Maximizing%20Visual%20Question%20Generation%20-%201.jpg" class=""><ul><li>模型的训练过程</li></ul><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20Information%20Maximizing%20Visual%20Question%20Generation%20-%202.jpg" class=""><ul><li>模型的测试/推理过程</li></ul><h2id="multi-grained-attention-with-object-level-grounding-for-visual-question-answering">2019Multi-grained Attention with Object-level Grounding for Visual QuestionAnswering</h2><blockquote><p>Pingping Huang, Jianhui Huang, Yuqing Guo, Min Qiao, Yong Zhu.Multi-grained Attention with Object-level Grounding for Visual QuestionAnswering[C]//Proceedings of the 57th Annual Meeting of the Associationfor Computational Linguistics. 2019: 3595–3600.</p></blockquote><p>本文认为已有研究大多从句子和突破之间的粗粒度关联来训练注意力模型，在小目标或不常见概念上表现很差。</p><p>为了更好应对小目标或不常见概念的问题，本文提出一种多粒度注意力模型。通过两种类型的词级注意力来补充句-图关系，该模型能够学习单词-目标之间的显性对应关系。</p><p>主流的VQA系统就是通过深度神经网络实现端到端训练。把问题和图片分别编码为表示向量，然后把多模态特征融合为统一表示，来预测回答。找出与问题最相关的图像区域很重要！目前主要的方法是通过注意力机制。通过空间注意力分布（spatialattention distribution）来体现视觉上关注的位置。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20Multi-grained%20Attention%20with%20Object-level%20Grounding%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 2: The architecture of our proposed model. The enhanced modules are illustrated in dot lines."><ul><li>Word-Label Attention</li><li>Word-Object Attention</li><li>Sentence-Object Attention</li><li>把WL, WO, SO三种注意力权重加起来，取得Objectfeatures的多粒度注意力权重结果，用这个多粒度注意力去加权平均objectfeatures取得attended objectfeature向量，作为视觉信息表示。最终与Sentenceembedding组合为融合特征，用作VQA答案分类。</li></ul><h2id="murel-multimodal-relational-reasoning-for-visual-question-answering">2019MUREL Multimodal Relational Reasoning for Visual Question Answering</h2><blockquote><p>Cadene R, Ben-Younes H, Cord M, et al. Murel: Multimodal relationalreasoning for visual question answering[C]//Proceedings of the IEEEConference on Computer Vision and Pattern Recognition. 2019:1989-1998.</p></blockquote><p>现有的VQA模型主要基于多模态注意力网络。注意力机制可以关注于与问题相关的视觉内容，但注意力机制总的来讲还是比较简单，不具备推理能力，不足以回答复杂的问题。</p><p>本文提出MuRel模型，一种多模态关系网络，能够端到端学习在真实图像上进行推理。</p><ol type="1"><li>MuRelcell：一个原子化的推理基元，能够通过一个富向量表示来表示问题和图像区域之间的交互，通过成对结合建模区域之间的关系。</li><li>MulRelnetwork：逐步修正视觉和问题交互，比仅使用注意力映射图可以更好定义可视化模式。</li></ol><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20MUREL%20Multimodal%20Relational%20Reasoning%20for%20Visual%20Question%20Answering%20-%201.jpg" class="" title="Figure 2. MuRel cell. In the MuRel cell, the bilinear fusion represents rich and fine-grained interactions between question and region vectors q and si. All the resulting multimodal vectors mi pass through a pairwise modeling block to provide a context-aware embedding xi per region. The cell’s output ˆsi is finally computed as a sum between si and xi, acting as residual function of si."><ul><li>MuRel cell</li><li>MuRel单元中：双线性融合可以表示问题向量<spanclass="math inline">\(q\)</span>和区域向量<spanclass="math inline">\(s_i\)</span>之间的丰富、细粒度的交互。多模态向量<spanclass="math inline">\(m_i\)</span>通过成对关系建模（Pairwise RelationalModeling）块为每个区域生成一个上下文感知嵌入<spanclass="math inline">\(x_i\)</span>。对<spanclass="math inline">\(x_i\)</span>和<spanclass="math inline">\(s_i\)</span>求和获取<spanclass="math inline">\(\hat{s}_i\)</span>，此处<spanclass="math inline">\(s_i\)</span>相当于恒等映射的shortcut，计算过程形成了残差函数。</li></ul><p>MuRel cell的输入是问题向量<spanclass="math inline">\(q\)</span>和<spanclass="math inline">\(N\)</span>个视觉特征<spanclass="math inline">\(s_i \in\mathbb{R}^{d_v}\)</span>（还有对应的bounding box坐标信息<spanclass="math inline">\(b_i\)</span>）。</p><ol type="1"><li>一个高效的双线性融合模块会把问题特征向量和区域特征向量做融合，取得<spanclass="math inline">\(N\)</span>个区域的局部多模态嵌入（local multimodalembedding）；</li><li>一个成对关系建模（Pairwise RelationalModeling）组件会根据每个融合过的区域特征向量<spanclass="math inline">\(m_i\)</span>的空间和视觉上下文，来更新<spanclass="math inline">\(m_i\)</span>为<spanclass="math inline">\(x_i\)</span>。</li></ol><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20MUREL%20Multimodal%20Relational%20Reasoning%20for%20Visual%20Question%20Answering%20-%202.jpg" class="" title="Figure 3. MuRel network. The MuRel network merges the question embedding q into spatially-grounded visual representations {vi} by iterating through a single MuRel cell. This module takes as input a set of localized vectors {si} and updates their representation using a multimodal fusion component. Moreover, it models all the possible pairwise relations between regions by combining spatial and semantic information. To construct the importance map at step t, we count the number of time each region provides the maximal value of maxi{s t i} (over the 2048 dimensions)."><h2id="ok-vqa-a-visual-question-answering-benchmark-requiring-external-knowledge">2019OK-VQA A Visual Question Answering Benchmark Requiring ExternalKnowledge</h2><blockquote><p>Marino K, Rastegari M, Farhadi A, et al. OK-VQA: A Visual QuestionAnswering Benchmark Requiring External Knowledge[C]//Proceedings of theIEEE Conference on Computer Vision and Pattern Recognition. 2019:3195-3204.</p></blockquote><p>目前的VQA评价指标主要关注简单的，如：计数、视觉属性、目标检测等不需要推理或外部知识的问题。</p><p>本文提出一种新的评价指标OK-VQA。在OK-VQA中，图像内容不足以回答问题，因此需要让VQA模型能够集合外部知识资源。</p><p>本文致力于基于知识的VQA并为此提出一种新的评价指标OK-VQA。在OK-VQA中，图像内容不足以回答问题，因此需要让VQA模型能够集合外部知识资源。本文的新数据集包含1万4千条需要外部知识回答的问题。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20OK-VQA%20A%20Visual%20Question%20Answering%20Benchmark%20Requiring%20External%20Knowledge.jpg" class="" title="Figure 2: Dataset examples. Some example questions and their corresponding images and answers have been shown. We show one example question for each knowledge category."><p>OK-VQA数据集的问题包含对所需外部知识分类的标注，把需要用到的外部知识疯了10类，例如：车辆与交通；品牌、公司和产品；……。</p><h2id="psycholinguistics-meets-continual-learning-measuring-catastrophic-forgetting-in-visual-question-answering">2019Psycholinguistics Meets Continual Learning Measuring CatastrophicForgetting in Visual Question Answering</h2><blockquote><p>Claudio Greco, Barbara Plank, Raquel Fernández, Raffaella Bernardi.Psycholinguistics Meets Continual Learning Measuring CatastrophicForgetting in Visual Question Answering[C]//Proceedings of the 57thAnnual Meeting of the Association for Computational Linguistics. 2019:3601-3605.</p></blockquote><p>心理语言学遇到持续学习（Psycholinguistics Meets ContinualLearning）？</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20Psycholinguistics%20Meets%20Continual%20Learning%20Measuring%20Catastrophic%20Forgetting%20in%20Visual%20Question%20Answering.jpg" class="" title="Figure 1: Overview of our linguistically-informed CL setup for VQA."><p>本文具体是评估和分析了VQA中存在的剧烈遗忘（dramaticforgetting）或突变遗忘（catastrophic forgetting）问题。</p><h2id="textbook-question-answering-with-multi-modal-context-graph-understanding-and-self-supervised-open-set-comprehension">2019Textbook Question Answering with Multi-modal Context Graph Understandingand Self-supervised Open-set Comprehension</h2><blockquote><p>Daesik Kim, Seonhoon Kim, Nojun Kwak. Textbook Question Answeringwith Multi-modal Context Graph Understanding and Self-supervisedOpen-set Comprehension[C]//Proceedings of the 57th Annual Meeting of theAssociation for Computational Linguistics. 2019: 3568-3584.</p></blockquote><p>本文主要关注TQA的两大问题： 1.多模态上下文的理解。本文提出f-GCN模型，基于GCN，能够从文本和图像中建立上下文图，有助于从长课程中提取和整合知识特征。2.科学术语的分布（训练集中有，测试集中无）。本文将其视为out-of-domain问题，通过对无标注的开放数据集的自监督学习来处理。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20Textbook%20Question%20Answering%20with%20Multi-modal%20Context%20Graph%20Understanding%20and%20Self-supervised%20Open-set%20Comprehension.jpg" class="" title="Figure 3: Overall framework of our model: (a) The preparation step for the k-th answer among n candidates. The context m is determined by TF-IDF score with the question and the k-th answer. Then, the context m is converted to a context graph m. The question and the k-th answer are also embedded by GloVe and character embedding. This step is repeated for n candidates. (b) The embedding step uses RNNC as a sequence embedding module and f-GCN as a graph embedding module.With attention methods, we can obtain combined features. After concatenation, RNNS and the fully connected module predict final distribution in the solving step."><p>从数据模态角度来看，TQA最为复杂，上下文部分和问题部分需要处理的数据都是Text+Image的多模态数据。</p><p>本文利用UDPnet来抽取课本的图表中的知识信息。</p><h2id="transfer-learning-via-unsupervised-task-discovery-for-visual-question-answering">2019Transfer Learning via Unsupervised Task Discovery for Visual QuestionAnswering</h2><blockquote><p>Noh H, Kim T, Mun J, et al. Transfer Learning via Unsupervised TaskDiscovery for Visual Question Answering[C]//Proceedings of the IEEEConference on Computer Vision and Pattern Recognition. 2019:8385-8394.</p></blockquote><p>本文研究如何用现有的视觉数据、语言数据来应对VQA中回答在答案词汇以外的情况。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20Transfer%20Learning%20via%20Unsupervised%20Task%20Discovery%20for%20Visual%20Question%20Answering.jpg" class="" title="Figure 2. Overview of the proposed algorithm. (a) Unsupervised task discovery samples a task specification for a sampled visual data (a , I , b), where I, b and a are an image, a bounding box and an label (answer), respectively. It leverages linguistic knowledge sources such as visual description d and WordNet. (b) A visual data with a task specification, denoted by (a , I , b , t), is employed to pretrain a task conditional visual classifier. (c) The pretrained task conditional visual classifier is transferred to VQA and the parameters are frozen. Attention layer and question encoder are learned from scratch with VQA dataset. The terms label and answer are used interchangeably."><h2 id="visual-question-answering-as-reading-comprehension">2019 VisualQuestion Answering as Reading Comprehension</h2><blockquote><p>Li H, Wang P, Shen C, et al. Visual Question Answering as ReadingComprehension[C]//Proceedings of the IEEE Conference on Computer Visionand Pattern Recognition. 2019: 6319-6328.</p></blockquote><p>本文认为与其纠结怎么弄多模态特征融合，不让干脆把图像信息转成自然语言文本，这样视觉问答就变成文本问答问题了。</p><p>把VQA转换为全文本处理后，还有助于处理基于知识的VQA，因为基于知识的VQA本身需要挖掘大规模的外部知识库。</p><img src="/posts/VQA-%E8%BF%91%E4%BA%94%E5%B9%B4%E8%A7%86%E8%A7%89%E9%97%AE%E7%AD%94%E9%A1%B6%E4%BC%9A%E8%AE%BA%E6%96%87%E5%88%9B%E6%96%B0%E7%82%B9%E7%AC%94%E8%AE%B0/2019%20Visual%20Question%20Answering%20as%20Reading%20Comprehension.jpg" class="" title="Figure 1 – Comparison between VQA and TQA. Question1 is observation based, which can be inferred from the image itself. Question2 is knowledge based, which has to refer knowledge beyond the image. Extra knowledge commonly appears in text, which is easier to be combined to the context paragraph in TQA."><ul><li>VQA与TQA对比</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Papers </tag>
            
            <tag> CV </tag>
            
            <tag> NLP </tag>
            
            <tag> VQA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Money and Power</title>
      <link href="/posts/Money-and-Power/"/>
      <url>/posts/Money-and-Power/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong><em>Frank Underwood:</em></strong> <em>Such a waste oftalent. He chose money over power, in this town a mistake nearlyeveryone makes. Money is the McMansion in Sarasota that starts fallingapart after ten years, power is the old stone building that stands forcenturies. I can not respect someone who does not see thedifference.</em></p><p><strong><em>-Michael Dobbs, House of Cards</em></strong></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Digest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Pages HTTPS证书自动签发错误解决</title>
      <link href="/posts/GitHub-Pages-HTTPS%E8%AF%81%E4%B9%A6%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
      <url>/posts/GitHub-Pages-HTTPS%E8%AF%81%E4%B9%A6%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>对自定义域名的GitHub Pages站点配置CDN会造成GitHubPages的HTTPS证书无法自动签发。</p><span id="more"></span><h1 id="github-pages-https证书自动签发错误解决">GitHub PagesHTTPS证书自动签发错误解决</h1><h2 id="github-pages与lets-encrypt的https证书服务">1 GitHub Pages与Let'sEncrypt的HTTPS证书服务</h2><p>自2016年起，<a href="https://pages.github.com/">GitHubPages</a>提供对自定义域名（custom domain）的HTTPS传输服务。</p><p><a href="https://github.com/">GitHub</a>与<ahref="https://letsencrypt.org/">Let's Encrypt</a>合作，为GitHubPages站点的自定义域名自动签发Let'sEncrypt的HTTPS证书。该证书有效期90天，正常情况下，GitHub对其到期自动更新。</p><h2 id="问题描述">2 问题描述</h2><p>部署在GitHub Pages上的自定义域名站点出现证书错误问题。</p><figure><imgsrc="https://www.cloudflare.com/resources/images/slt3lc6tev37/13hJjEZmQGA6ukiIw2iIEA/ea5b30e43d76ceed34a79e25837f76c9/full-ssl-strict.svg"alt="Full SSL" /><figcaption aria-hidden="true">Full SSL</figcaption></figure><p>我在CloudFlare上部署了本站点（heary.cn）的CDN，并启用了<ahref="https://www.cloudflare.com/ssl/">全程SSL Full(Strict)</a>，表示从客户机到CDN服务器以及从CDN服务器到源站，均要求SSL并只接受可信CA颁发的HTTPS证书。</p><p>8月17日晚间发现访问主页（heary.cn）时出现CloudFlare报错页面，提示访问源站时遭遇证书错误（CDN到源站的请求）。</p><p>经查，该项目仓库的设置中（Settings-&gt;GitHub Pages的EnforceHTTPS项）提示以下内容：</p><blockquote><p>Enforce HTTPS — Not yet available for your site because thecertificate has not finished being issued. Please allow 24 hours forthis process to complete.</p></blockquote><p>也就是说，GitHub Pages本应自动更新的证书实际上过期了也没有更新。</p><h2 id="问题原因">3 问题原因</h2><p>通过搜索和查阅文档，可确定其原因与自定义域名的DNS解析记录有关。</p><blockquote><p><strong><ahref="https://help.github.com/en/articles/troubleshooting-custom-domains#https-errors">HTTPSerrors</a></strong></p><p>GitHub Pages sites using custom domains that are correctly configuredwith <code>CNAME</code>, <code>ALIAS</code>, <code>ANAME</code>, or<code>A</code> DNS records can be accessed over HTTPS. For moreinformation, see "<ahref="https://help.github.com/en/articles/securing-your-github-pages-site-with-https">Securingyour GitHub Pages site with HTTPS</a>."</p><p>It can take up to an hour for your GitHub Pages site to becomeavailable over HTTPS after you add and correctly configure your customdomain. After updating existing DNS settings, you may need to remove andre-add your custom domain to your GitHub account to trigger the processof enabling HTTPS. For more information, see "<ahref="https://help.github.com/en/articles/using-a-custom-domain-with-github-pages">Usinga custom domain with GitHub Pages</a>."</p><p>If you've chosen to use Certification Authority Authorization (CAA)records, at least one CAA record must exist with the value<code>letsencrypt.org</code> for your GitHub Pages site to be accessibleover HTTPS. For more information, see "<ahref="https://letsencrypt.org/docs/caa/">Certificate AuthorityAuthorization (CAA)</a>" in the Let's Encrypt documentation.</p><p><strong><ahref="https://help.github.com/en/articles/troubleshooting-custom-domains#custom-domains-configured-with-a-records">Customdomains configured with <code>A</code> records</a></strong></p><p>If you configured your custom domain using an <code>A</code> record,your <code>A</code> record must point to one of the following IPaddresses for HTTPS to work:</p><ul><li>185.199.108.153</li><li>185.199.109.153</li><li>185.199.110.153</li><li>185.199.111.153</li></ul><p>After updating any <code>A</code> record IP addresses, you mustremove and re-add your custom domain to the repository you’re using topublish your Pages site to trigger the process of enabling HTTPS. Formore information, see "Configuring <code>A</code> records with your DNSprovider" in "<ahref="https://help.github.com/en/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-provider">Settingup an apex domain</a>."</p></blockquote><p>在GitHub提供的针对自定义域名的<ahref="https://help.github.com/en/articles/troubleshooting-custom-domains#https-errors">TroubleShooting</a>文档中，可以看到，GitHubPages要求启用HTTPS的自定义域名必须把DNS解析到以下4个IP地址上：</p><ul><li>185.199.108.153</li><li>185.199.109.153</li><li>185.199.110.153</li><li>185.199.111.153</li></ul><p>而使用CDN时，域名显然时解析到CDN的代理服务器上的。</p><h2 id="解决方案">4 解决方案</h2><h3 id="取消cdn代理">4.1 取消CDN代理</h3><p>因此，如需正常使用GitHubPages提供的自定义域名HTTPS服务（证书签发、自动更新），不可以使用第三方CDN服务。</p><p>在取消CDN服务后，确保新的DNS记录已经更新（通常需要稍等一段时间，如：10分钟，取决于DNS解析记录的TTL值）。</p><p>通过<strong>nslookup</strong>命令即可查询：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\jyshen&gt;nslookup heary.cn</span><br><span class="line">服务器:  voidc8.seu.edu.cn</span><br><span class="line">Address:  <span class="number">121.248</span>.<span class="number">60.8</span></span><br><span class="line"></span><br><span class="line">非权威应答:</span><br><span class="line">名称:    heary.cn</span><br><span class="line">Addresses:  <span class="number">185.199</span>.<span class="number">108.153</span></span><br><span class="line">          <span class="number">185.199</span>.<span class="number">109.153</span></span><br><span class="line">          <span class="number">185.199</span>.<span class="number">110.153</span></span><br><span class="line">          <span class="number">185.199</span>.<span class="number">111.153</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>DNS解析记录已经更新到GitHub指定IP上。</li><li><em>实际上，如果多次反复查询，会发现解析结果中4个IP的次序随机的，不会集中解析到一个IP上，DNS以此实现对该域名源站服务器的负载均衡。</em></li></ul><h3 id="手动调起证书签发">4.2 手动调起证书签发</h3><p>DNS解析记录生效后，可以通过以下方法手动更新GitHubPages的HTTPS证书：</p><ol type="1"><li>在GitHub Pages站点设置中，删除Customdomain并点击Save以取消自定义域名；</li><li>重新设置Custom domain并Save以重新启用自定义域名。</li></ol><p>随后，GitHubPages会对自定义域名申请新HTTPS证书。几分钟左右重新验证该自定义域名即可正常访问。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> GitHub </tag>
            
            <tag> Certificate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个有趣的消息轰炸VBS小脚本</title>
      <link href="/posts/%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E6%B6%88%E6%81%AF%E8%BD%B0%E7%82%B8VBS%E5%B0%8F%E8%84%9A%E6%9C%AC/"/>
      <url>/posts/%E4%B8%80%E4%B8%AA%E6%9C%89%E8%B6%A3%E7%9A%84%E6%B6%88%E6%81%AF%E8%BD%B0%E7%82%B8VBS%E5%B0%8F%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>看到了一个有趣的可以实现QQ、微信等软件消息轰炸的小脚本，基于VBS模拟按键实现。逗朋友们玩了一下，效果不错。另附常见BUG解决。</p><span id="more"></span><h1 id="一个有趣的消息轰炸vbs小脚本">一个有趣的消息轰炸VBS小脚本</h1><p>VBS指的是<em>Visual Basic Script</em>。</p><p>Windows平台通过VBS写脚本可以实现模拟按键点击等操作，达到复制、发送消息的目的。</p><h2 id="vbs消息轰炸小脚本">1 VBS消息轰炸小脚本</h2><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> WshShell= WScript.<span class="built_in">CreateObject</span>(<span class="string">&quot;WScript.Shell&quot;</span>)</span><br><span class="line">WshShell.AppActivate <span class="string">&quot;群名（窗口名）&quot;</span></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span> <span class="keyword">to</span> <span class="number">40</span></span><br><span class="line">WScript.Sleep <span class="number">100</span></span><br><span class="line">WshShell.SendKeys <span class="string">&quot;^v&quot;</span></span><br><span class="line">WshShell.SendKeys i</span><br><span class="line">WshShell.SendKeys <span class="string">&quot;%s&quot;</span></span><br><span class="line"><span class="keyword">Next</span></span><br></pre></td></tr></table></figure><ul><li>修改第3行循环数值可以调整执行次数；</li><li>修改第4行<code>WScript.Sleep</code>数值可以调整发送间隔。</li></ul><h2 id="使用方法">2 使用方法</h2><ol type="1"><li>复制这段代码，保存为<code>*.vbs</code>后缀的VBS脚本；</li><li>将第2行的名字改为目标窗口名；</li><li>打开特定聊天窗口（<strong>注意：窗口名与脚本第2行的<code>WshShell.AppActivate</code>参数名一致</strong>）；</li><li>把想要输入的内容复制在剪切板中；</li><li>双击该脚本即可。</li></ol><h2 id="常见问题">3 常见问题</h2><h3 id="未结束的字符串常量报错">3.1 “未结束的字符串常量”报错</h3><p>在我用的Windows10平台上，默认创建的记事本文件是UTF-8编码，将其改为ANSI编码即可。</p><p>用记事本（或其他文本编辑器）打开<code>*.vbs</code>文件，选择另存为，将编码选项改成ANSI编码再保存，即可运行正常。</p>]]></content>
      
      
      
        <tags>
            
            <tag> VBS </tag>
            
            <tag> Message Bomb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitalk - 在Hexo Next中实现基于GitHub Issues的博客评论</title>
      <link href="/posts/Gitalk-%E5%9C%A8Hexo-Next%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8EGitHub-Issues%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA/"/>
      <url>/posts/Gitalk-%E5%9C%A8Hexo-Next%E4%B8%AD%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8EGitHub-Issues%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<p>此前我使用<a href="https://leancloud.cn">Leancloud</a>提供的<ahref="https://valine.js.org">Valine</a>实现Hexo博客的评论系统，但Valine存在一系列问题，例如：缺乏通知、服务不稳定、以及近期麻烦的实名制手续。我尝试了Gitment，但这东西自己一堆BUG（objectProgressEvent）都没解决。最终使用了Gitalk，HexoNext7.1.2有集成，部署简单。</p><span id="more"></span><h1 id="gitalk---在hexo-next中实现基于github-issues的博客评论">Gitalk -在Hexo Next中实现基于GitHub Issues的博客评论</h1><h2 id="github-oauth-apps">1 GitHub OAuth Apps</h2><p>首先，新建一个GitHub OAuth App。</p><p>依次进入GitHub =&gt; Settings =&gt; OAuth Apps =&gt; New OAuthApp，</p><p>在Register a new OAuth application页面，填写：</p><ul><li><p>Application name：Gitalk</p></li><li><p>Homepage URL：https://heary.cn</p></li><li><p>Application description：Blog comment system.</p></li><li><p>Authorization callback URL：https://heary.cn</p></li></ul><h2 id="gitalk-comments-repo">2 gitalk-comments repo</h2><p>随后，新建一个repository，命名为gitalk-comments，用于让Gitalk利用该repo的issues功能实现评论功能。</p><h2 id="hexo-next-config">3 Hexo Next config</h2><p>修改<code>theme\next\_config.yml</code>配置文件中的Gitalk项目：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># Demo: https://gitalk.github.io</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">github_id:</span> <span class="string">&lt;Github</span> <span class="string">UserName&gt;</span> <span class="comment"># Github repo owner</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">gitalk-comments</span> <span class="comment"># Repository name to store issues</span></span><br><span class="line">  <span class="attr">client_id:</span> <span class="string">&lt;OAuth_APP_client_id&gt;</span> <span class="comment"># Github Application Client ID</span></span><br><span class="line">  <span class="attr">client_secret:</span> <span class="string">&lt;OAuth_APP_client_secret&gt;</span> <span class="comment"># Github Application Client Secret</span></span><br><span class="line">  <span class="attr">admin_user:</span> <span class="string">&lt;Github</span> <span class="string">username&gt;</span> <span class="comment"># GitHub repo owner and collaborators, only these guys can initialize github issues</span></span><br><span class="line">  <span class="attr">distraction_free_mode:</span> <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en, es-ES, fr, ru, zh-CN, zh-TW</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>repo</code>填写的不是URL，而是刚刚创建的repo名，即<code>gitalk-comments</code>；</li><li><code>distraction_free_mode</code>可以实现出那种类似于“关灯模式”的效果。</li></ul><h2 id="初始化issue">4 初始化issue</h2><p>随后就可以验证Gitalk是否设置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>验证通过即可部署查看实际效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>每一篇post都需要管理员登陆点击，才能初始化comment，原理是通过管理员登陆来在repogitalk-comments中创建出post文章对应的issue页提供评论。</p><h2 id="相关链接">5 相关链接</h2><blockquote><p><strong>Gitalk</strong></p><p><a href="https://github.com/gitalk/gitalk">GitHub</a> <ahref="https://gitalk.github.io/">Demo</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Gitalk </tag>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
            <tag> Comment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chaos is a Ladder</title>
      <link href="/posts/Chaos-is-a-Ladder/"/>
      <url>/posts/Chaos-is-a-Ladder/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>"<strong>Petyr 'Littlefinger' Baelish</strong></em>: <em>Therealm. Do you know what the realm is? It's the thousand blades ofAegon's enemies, a story we agree to tell each other over and over,until we forget that it's a lie.</em></p><p><strong><em>Lord Varys</em></strong>:<em>But what do we have left,once we abandon the lie? Chaos? A gaping pit waiting to swallow usall.</em></p><p><strong><em>Petyr 'Littlefinger' Baelish</em></strong>: <em>Chaosisn't a pit. Chaos is a ladder. Many who try to climb it fail and neverget to try again. The fall breaks them. And some, are given a chance toclimb. They refuse, they cling to the realm or the gods or love.Illusions. Only the ladder is real. The climb is all there is.”</em></p><p><strong><em>― George R.R. Martin, A Game of Thrones</em></strong></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Digest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL - Windows Subsystem for Linux</title>
      <link href="/posts/WSL-Windows-Subsystem-for-Linux/"/>
      <url>/posts/WSL-Windows-Subsystem-for-Linux/</url>
      
        <content type="html"><![CDATA[<p><strong>WSL</strong> <em>(Windows Subsystem forLinux)</em>是Windows实现的Linux子系统环境，微软在Windows中实现了能够原生运行Linux二进制可执行文件（ELF格式）的兼容层。无需在双系统之间切换，也无需安装虚拟机，WSL提供了Windows开发环境可用的更方便、更高效的Linux环境。</p><span id="more"></span><h1 id="wsl---windows-subsystem-for-linux">WSL - Windows Subsystem forLinux</h1><h2 id="链接">0 链接</h2><p>微软官方文档：</p><blockquote><p>Windows Subsystem for Linux Documentation</p><p><a href="https://docs.microsoft.com/en-us/windows/wsl/about">Aboutthe Windows Subsystem for Linux</a></p></blockquote><p>知乎专栏（侵删）：</p><blockquote><p><ahref="https://zhuanlan.zhihu.com/WindowsSubsystemForLinux">WSL——Win10的Linux子系统</a></p><p>包含入门、安装配置、设置端口、安装GUI等图文介绍</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Tools </tag>
            
            <tag> WSL </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tampermonkey - 浏览器脚本管理器</title>
      <link href="/posts/tampermonkey-%E6%B5%8F%E8%A7%88%E5%99%A8%E8%84%9A%E6%9C%AC%E7%AE%A1%E7%90%86%E5%99%A8/"/>
      <url>/posts/tampermonkey-%E6%B5%8F%E8%A7%88%E5%99%A8%E8%84%9A%E6%9C%AC%E7%AE%A1%E7%90%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><ahref="https://www.tampermonkey.net/">Tampermonkey</a>实现了一种可以在浏览器中插入脚本的方式，可以通过Javascript脚本来控制浏览器的渲染的前端内容，例如：改造出一个清净可用的微博、优化搜索引擎展示结果、实现网盘资源直链下载等等……</p><span id="more"></span><h1 id="tampermonkey---浏览器脚本管理器">Tampermonkey -浏览器脚本管理器</h1><h2 id="tampermonkey">1 Tampermonkey</h2><h3 id="安装">1.1 安装</h3><blockquote><p><a href="https://www.tampermonkey.net/">Tampermonkey</a></p><p>官方网站</p><p><strong>Tampermonkey</strong>是一款免费的浏览器扩展和最为流行的用户脚本管理器，它适用于 <ahref="https://www.tampermonkey.net/#"><strong>Chrome</strong></a>, <ahref="https://www.tampermonkey.net/#"><strong>MicrosoftEdge</strong></a>, <ahref="https://www.tampermonkey.net/#"><strong>Safari</strong></a>, <ahref="https://www.tampermonkey.net/#"><strong>Opera Next</strong></a>,和 <ahref="https://www.tampermonkey.net/#"><strong>Firefox</strong></a>。</p></blockquote><p>按照官方网站的安装链接进行安装即可。</p><p>（Chrome用户需要科学上网以便访问谷歌Chrome浏览器的应用商店）</p><h3 id="脚本仓库">1.2 脚本仓库</h3><blockquote><p><a href="https://www.tampermonkey.net/scripts.php">Tampermonkey用户脚本源</a></p></blockquote><p>其中我推荐<a href="https://greasyfork.org/">GreasyFork</a>。</p><blockquote><p><a href="https://greasyfork.org/">GreasyFork</a></p><p>安全、实用的用户脚本大全</p></blockquote><h2 id="脚本">2 脚本</h2><h3 id="yet-another-weibo-filter-看真正想看的微博">2.1 Yet Another WeiboFilter 看真正想看的微博</h3><blockquote><p><ahref="https://greasyfork.org/zh-CN/scripts/3249-yet-another-weibo-filter">YetAnother Weibo Filter 看真正想看的微博</a></p><p>GreasyFork链接</p></blockquote><p>需要自己设置，可以实现非常干净的微博。</p><blockquote><h4 id="主要功能">主要功能</h4><ul><li>根据关键字、作者、来源等隐藏、折叠或高亮微博；使用拖拽轻松定义过滤规则；</li><li>屏蔽推广、粉丝头条、投票、好友赞过、抢红包、爱问医生等各种微博；防刷屏、版聊；</li><li>自动加载和过滤新微博，白名单新微博桌面提示；禁用首页下方的延迟加载；</li><li>清理版面上的各种模块、图标、小红点，去广告；过滤热门话题；使用方形头像；</li><li>合并左右边栏的双栏模式，加宽加大的微博宽度和微博字号，自定义微博字体；</li><li>去除微博间的空白，缩小微博下操作按钮距离，重新安排他们的顺序；</li><li>自动检查首页上是否遗漏了特定用户的最新微博，不错过他的任何一条消息；</li><li>展开左栏消息分组；让各种浮动的模块回到原位；统一各种页面的边栏位置；</li><li>查看原图，展开 t.cn短网址；清除发布框默认话题，禁止自动关注话题主持人；</li><li>微博作者和正文不拆行；按字数自动展开或隐藏长篇幅的微博，禁用微博换行；</li><li>设置网页模板，自定义半透明背景色，深色导航栏，经典导航栏布局；</li><li>方便的新功能更新提醒；设置备份，以及在导入时提示设置最新功能；</li><li>使用本机时区显示微博上的各种时间（针对非东八区用户）；</li><li>正常大小的微博缩略图尺寸，显示在微博下面的发布时间和来源（针对2016新版）；</li></ul></blockquote><h3 id="ac-baidu">2.2 AC-baidu</h3><blockquote><p><ahref="https://greasyfork.org/zh-CN/scripts/14178-ac-baidu-重定向优化百度搜狗谷歌搜索-去广告-favicon-双列">AC-baidu:重定向优化百度搜狗谷歌搜索_去广告_favicon_双列</a></p><p>GreasyFork链接</p></blockquote><p>建议把自定义样式设置为原始模式，否则例如谷歌的右边栏知识名片排版会错乱。</p><blockquote><p>脚本功能：本脚本功能和标题描述是一致的，就是：</p><ul><li>去掉百度、搜狗、谷歌搜索结果的重定向，回归为网站的原始网址---附带有去除百度的广告包括百度顶部和底部的垃圾广告-百家号</li><li>默认移除百度百家号的内容--应广大群众的需求</li><li>添加百度、搜狗、谷歌搜索结果中Favicon显示效果</li><li>搜索高亮用这个：<ahref="https://greasyfork.org/zh-CN/scripts/368418">搜索高亮脚本</a></li><li>百度和谷歌搜索页面可以设置为单列、双列模式</li><li>添加标记数量，标记当前的id，界面更好看</li><li>请求是异步请求，并不会出现一个链接没有反馈回来，其余等待的情况，每个链接的请求都是独立的，互不影响，对于网络的影响几乎没有</li><li>如果想要自动翻页脚本的，或者自动翻页出问题的：<ahref="https://greasyfork.org/zh-CN/scripts/33522"class="uri">https://greasyfork.org/zh-CN/scripts/33522</a></li><li>更多好用的脚本<ahref="https://greasyfork.org/zh-CN/scripts?set=324019"class="uri">https://greasyfork.org/zh-CN/scripts?set=324019</a></li></ul></blockquote><h3 id="百度网盘直链下载助手">2.3 百度网盘直链下载助手</h3><blockquote><p><ahref="https://greasyfork.org/zh-CN/scripts/39504-百度网盘直链下载助手">百度网盘直链下载助手</a></p><p>GreasyFork链接</p></blockquote><p>对于百度网盘的外链分享，无须调用本地安装的百度网盘，可以直接解析出直链直接下载。</p><blockquote><p>本脚本适用于多平台支持安装 Tampermonkey 或暴力猴扩展的浏览器，如Chrome，360，QQ，UC等。</p><p>支持百度网盘PC端网页获取分享链接下载地址和我的网盘下载地址。安装后会在对应界面出现【下载助手】按钮,配合多线程下载工具达到提速的效果。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Tampermonkey </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV 中文路径问题</title>
      <link href="/posts/OpenCV-%E4%B8%AD%E6%96%87%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
      <url>/posts/OpenCV-%E4%B8%AD%E6%96%87%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在使用Python3 +OpenCV时，遇到读取/写出中文路径的图片，在使用时会遇到报错的问题。通过一个小函数即可解决，转载自<ahref="https://www.zhihu.com/question/67157462/answer/251754530">知乎冰不语 的回答</a>，侵删。</p><span id="more"></span><h1 id="opencv-中文路径问题">OpenCV 中文路径问题</h1><h2 id="问题描述">1 问题描述</h2><p>我在Python3环境下使用OpenCV（cv2）处理图片，通过<code>imread</code>读取并通过<code>imshow</code>显示时，会出现报错，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread(curimg_path)</span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;image&#x27;</span>,cv2.WINDOW_NORMAL)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;image&#x27;</span>,img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>执行时，提示<strong>Assertion failed</strong>的报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  File <span class="string">&quot;d:\Codes\ForestrySecurity\DataPreprocessing\insects500.py&quot;</span>, line 28, <span class="keyword">in</span> main</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;image&#x27;</span>,img)</span><br><span class="line">cv2.error: OpenCV(3.4.2) C:\Miniconda3\conda-bld\opencv-suite_1534379934306\work\modules\highgui\src\window.cpp:356: error: (-215:Assertion failed) size.width&gt;0 &amp;&amp; size.height&gt;0 <span class="keyword">in</span> <span class="keyword">function</span> <span class="string">&#x27;cv::imshow&#x27;</span></span><br></pre></td></tr></table></figure><p>那<code>img</code>的<code>size</code>的宽、高到底有没有问题呢？</p><p>事实上，我尝试输出图片尺寸<code>img.shape</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;image shape: shape&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(img.shape))</span><br></pre></td></tr></table></figure><p>结果还是报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  File <span class="string">&quot;d:\Codes\ForestrySecurity\DataPreprocessing\insects500.py&quot;</span>, line 26, <span class="keyword">in</span> main</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;image shape: shape&#123;0&#125;&quot;</span>.format(img.shape))</span><br><span class="line">AttributeError: <span class="string">&#x27;NoneType&#x27;</span> object has no attribute <span class="string">&#x27;shape&#x27;</span></span><br></pre></td></tr></table></figure><p>报错信息显示，<code>img</code>对象成了<code>NoneType</code>目标，显然，<code>img</code>对象的读取出现了问题，即，问题定位在<code>imread</code>环节。</p><h2 id="解决方案">2 解决方案</h2><h3 id="imread">2.1 imread</h3><p>经过搜索和调试验证，我发现通过一个小函数即可解决，转载自<ahref="https://www.zhihu.com/question/67157462/answer/251754530">知乎冰不语 的回答</a>，侵删。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cv_imread</span>(<span class="params">file_path</span>):</span><br><span class="line">    cv_img = cv2.imdecode(np.fromfile(file_path, dtype=np.uint8), -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> cv_img</span><br></pre></td></tr></table></figure><p>通过<strong>numpy</strong>读取文件，再编码为cv2的图片对象，避免了OpenCV不支持中文路径的问题。</p><p>调用时，替换<code>cv2.imread</code>即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># img = cv2.imread(curimg_path)</span></span><br><span class="line">img = cv_imread(curimg_path)</span><br></pre></td></tr></table></figure><h3 id="imwrite">2.2 imwrite</h3><p>同样地，图片输出到含有中文的路径也需要使用一个小函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cv_imwrite</span>(<span class="params">img, path</span>):</span><br><span class="line">    suffix = os.path.splitext(path)[-<span class="number">1</span>]</span><br><span class="line">    cv2.imencode(suffix, img)[<span class="number">1</span>].tofile(path)</span><br></pre></td></tr></table></figure><p>调用时，替换<code>cv2.imwrite</code>即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cv2.imwrite(path, img)</span></span><br><span class="line">cv2_imwrite(img, path)</span><br></pre></td></tr></table></figure><h2 id="链接">3 链接</h2><p>关于该问题的知乎讨论：</p><blockquote><p><a href="https://www.zhihu.com/question/67157462">Python 3.x 使用opencv 无法读取中文路径如何解决？</a></p></blockquote><p>OpenCV官方文档：</p><blockquote><p><a href="https://docs.opencv.org/">OpenCV documentation index</a></p></blockquote><p>Python版OpenCV的中文教程，方便易读：</p><blockquote><p><a href="https://www.kancloud.cn/aollo/aolloopencv/262768">OpenCVPython中文教程</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> CV </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask API - 部署PyTorch模型</title>
      <link href="/posts/Flask-API-%E9%83%A8%E7%BD%B2PyTorch%E6%A8%A1%E5%9E%8B/"/>
      <url>/posts/Flask-API-%E9%83%A8%E7%BD%B2PyTorch%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>通过Flask开发RESTAPI部署PyTorch模型，主要实现PyTorch模型冷启动（初次参数载入）后常驻内存的功能点。</p><span id="more"></span><h1 id="flask-api---部署pytorch模型">Flask API - 部署PyTorch模型</h1><h2 id="链接">0 链接</h2><p>PyTorch官方文档关于REST API部署的介绍（英文）</p><blockquote><p><ahref="https://pytorch.org/tutorials/intermediate/flask_rest_api_tutorial.html">DeployingPyTorch in Python via a REST API with Flask</a></p></blockquote><p>知乎专栏（转载，侵删）：</p><blockquote><p><ahref="https://zhuanlan.zhihu.com/p/35879835">如何用flask部署pytorch模型</a></p></blockquote><p>GitHub代码示例（转载，侵删）：</p><blockquote><p><ahref="https://github.com/L1aoXingyu/deploy-pytorch-model">deploy-pytorch-model</a></p></blockquote><p>REST API：</p><blockquote><p><a href="https://restfulapi.net/">REST API Tutorial</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Deploy </tag>
            
            <tag> Python </tag>
            
            <tag> PyTorch </tag>
            
            <tag> Flask </tag>
            
            <tag> API </tag>
            
            <tag> REST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ImageNet training in PyTorch</title>
      <link href="/posts/ImageNet-training-in-PyTorch/"/>
      <url>/posts/ImageNet-training-in-PyTorch/</url>
      
        <content type="html"><![CDATA[<p>在阅读PyTorch的<code>torchvision.models</code>的文档时，发现了PyTorch官方的一份优质<ahref="https://github.com/pytorch/examples/blob/42e5b996718797e45c46a25c55b031e6768f8440/imagenet/main.py#L89-L101">example</a>。但我发现该example链接仍为PyTorch早期版本的，文档尚未更新链接到PyTorch1.0新版example。</p><span id="more"></span><h1 id="imagenet-training-in-pytorch">ImageNet training in PyTorch</h1><h2 id="links">0 Links</h2><p>PyTorch <code>torchvision.models</code>文档链接：</p><blockquote><p><strong><ahref="https://pytorch.org/docs/stable/torchvision/models.html?highlight=torchvision%20models">torchvision.models| PyTorch Docs</a></strong></p><p>The models subpackage contains definitions for the following modelarchitectures:</p><ul><li><a href="https://arxiv.org/abs/1404.5997">AlexNet</a></li><li><a href="https://arxiv.org/abs/1409.1556">VGG</a></li><li><a href="https://arxiv.org/abs/1512.03385">ResNet</a></li><li><a href="https://arxiv.org/abs/1602.07360">SqueezeNet</a></li><li><a href="https://arxiv.org/abs/1608.06993">DenseNet</a></li><li><a href="https://arxiv.org/abs/1512.00567">Inception</a> v3</li><li><a href="https://arxiv.org/abs/1409.4842">GoogLeNet</a></li></ul></blockquote><p>Example链接：</p><blockquote><p><strong><ahref="https://github.com/pytorch/examples/tree/master/imagenet">ImageNettraining in PyTorch</a></strong></p><p>This implements training of popular model architectures, such asResNet, AlexNet, and VGG on the ImageNet dataset.</p></blockquote><h2 id="main.py">1 <code>main.py</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.parallel</span><br><span class="line"><span class="keyword">import</span> torch.backends.cudnn <span class="keyword">as</span> cudnn</span><br><span class="line"><span class="keyword">import</span> torch.distributed <span class="keyword">as</span> dist</span><br><span class="line"><span class="keyword">import</span> torch.optim</span><br><span class="line"><span class="keyword">import</span> torch.multiprocessing <span class="keyword">as</span> mp</span><br><span class="line"><span class="keyword">import</span> torch.utils.data</span><br><span class="line"><span class="keyword">import</span> torch.utils.data.distributed</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> torchvision.datasets <span class="keyword">as</span> datasets</span><br><span class="line"><span class="keyword">import</span> torchvision.models <span class="keyword">as</span> models</span><br><span class="line"></span><br><span class="line">model_names = <span class="built_in">sorted</span>(name <span class="keyword">for</span> name <span class="keyword">in</span> models.__dict__</span><br><span class="line">    <span class="keyword">if</span> name.islower() <span class="keyword">and</span> <span class="keyword">not</span> name.startswith(<span class="string">&quot;__&quot;</span>)</span><br><span class="line">    <span class="keyword">and</span> <span class="built_in">callable</span>(models.__dict__[name]))</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;PyTorch ImageNet Training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;data&#x27;</span>, metavar=<span class="string">&#x27;DIR&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;path to dataset&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-a&#x27;</span>, <span class="string">&#x27;--arch&#x27;</span>, metavar=<span class="string">&#x27;ARCH&#x27;</span>, default=<span class="string">&#x27;resnet18&#x27;</span>,</span><br><span class="line">                    choices=model_names,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;model architecture: &#x27;</span> +</span><br><span class="line">                        <span class="string">&#x27; | &#x27;</span>.join(model_names) +</span><br><span class="line">                        <span class="string">&#x27; (default: resnet18)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-j&#x27;</span>, <span class="string">&#x27;--workers&#x27;</span>, default=<span class="number">4</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;number of data loading workers (default: 4)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--epochs&#x27;</span>, default=<span class="number">90</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;number of total epochs to run&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--start-epoch&#x27;</span>, default=<span class="number">0</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;manual epoch number (useful on restarts)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-b&#x27;</span>, <span class="string">&#x27;--batch-size&#x27;</span>, default=<span class="number">256</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;mini-batch size (default: 256), this is the total &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;batch size of all GPUs on the current node when &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;using Data Parallel or Distributed Data Parallel&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--lr&#x27;</span>, <span class="string">&#x27;--learning-rate&#x27;</span>, default=<span class="number">0.1</span>, <span class="built_in">type</span>=<span class="built_in">float</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;LR&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;initial learning rate&#x27;</span>, dest=<span class="string">&#x27;lr&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--momentum&#x27;</span>, default=<span class="number">0.9</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, metavar=<span class="string">&#x27;M&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;momentum&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--wd&#x27;</span>, <span class="string">&#x27;--weight-decay&#x27;</span>, default=<span class="number">1e-4</span>, <span class="built_in">type</span>=<span class="built_in">float</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;W&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;weight decay (default: 1e-4)&#x27;</span>,</span><br><span class="line">                    dest=<span class="string">&#x27;weight_decay&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="string">&#x27;--print-freq&#x27;</span>, default=<span class="number">10</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;N&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;print frequency (default: 10)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--resume&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&#x27;PATH&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;path to latest checkpoint (default: none)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-e&#x27;</span>, <span class="string">&#x27;--evaluate&#x27;</span>, dest=<span class="string">&#x27;evaluate&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;evaluate model on validation set&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--pretrained&#x27;</span>, dest=<span class="string">&#x27;pretrained&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;use pre-trained model&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--world-size&#x27;</span>, default=-<span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;number of nodes for distributed training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--rank&#x27;</span>, default=-<span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;node rank for distributed training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--dist-url&#x27;</span>, default=<span class="string">&#x27;tcp://224.66.41.62:23456&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;url used to set up distributed training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--dist-backend&#x27;</span>, default=<span class="string">&#x27;nccl&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;distributed backend&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--seed&#x27;</span>, default=<span class="literal">None</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;seed for initializing training. &#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--gpu&#x27;</span>, default=<span class="literal">None</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;GPU id to use.&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--multiprocessing-distributed&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;Use multi-processing distributed training to launch &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;N processes per node, which has N GPUs. This is the &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;fastest way to use PyTorch for either single node or &#x27;</span></span><br><span class="line">                         <span class="string">&#x27;multi node data parallel training&#x27;</span>)</span><br><span class="line"></span><br><span class="line">best_acc1 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.seed <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        random.seed(args.seed)</span><br><span class="line">        torch.manual_seed(args.seed)</span><br><span class="line">        cudnn.deterministic = <span class="literal">True</span></span><br><span class="line">        warnings.warn(<span class="string">&#x27;You have chosen to seed training. &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;This will turn on the CUDNN deterministic setting, &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;which can slow down your training considerably! &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;You may see unexpected behavior when restarting &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;from checkpoints.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        warnings.warn(<span class="string">&#x27;You have chosen a specific GPU. This will completely &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;disable data parallelism.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.dist_url == <span class="string">&quot;env://&quot;</span> <span class="keyword">and</span> args.world_size == -<span class="number">1</span>:</span><br><span class="line">        args.world_size = <span class="built_in">int</span>(os.environ[<span class="string">&quot;WORLD_SIZE&quot;</span>])</span><br><span class="line"></span><br><span class="line">    args.distributed = args.world_size &gt; <span class="number">1</span> <span class="keyword">or</span> args.multiprocessing_distributed</span><br><span class="line"></span><br><span class="line">    ngpus_per_node = torch.cuda.device_count()</span><br><span class="line">    <span class="keyword">if</span> args.multiprocessing_distributed:</span><br><span class="line">        <span class="comment"># Since we have ngpus_per_node processes per node, the total world_size</span></span><br><span class="line">        <span class="comment"># needs to be adjusted accordingly</span></span><br><span class="line">        args.world_size = ngpus_per_node * args.world_size</span><br><span class="line">        <span class="comment"># Use torch.multiprocessing.spawn to launch distributed processes: the</span></span><br><span class="line">        <span class="comment"># main_worker process function</span></span><br><span class="line">        mp.spawn(main_worker, nprocs=ngpus_per_node, args=(ngpus_per_node, args))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># Simply call main_worker function</span></span><br><span class="line">        main_worker(args.gpu, ngpus_per_node, args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main_worker</span>(<span class="params">gpu, ngpus_per_node, args</span>):</span><br><span class="line">    <span class="keyword">global</span> best_acc1</span><br><span class="line">    args.gpu = gpu</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Use GPU: &#123;&#125; for training&quot;</span>.<span class="built_in">format</span>(args.gpu))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.distributed:</span><br><span class="line">        <span class="keyword">if</span> args.dist_url == <span class="string">&quot;env://&quot;</span> <span class="keyword">and</span> args.rank == -<span class="number">1</span>:</span><br><span class="line">            args.rank = <span class="built_in">int</span>(os.environ[<span class="string">&quot;RANK&quot;</span>])</span><br><span class="line">        <span class="keyword">if</span> args.multiprocessing_distributed:</span><br><span class="line">            <span class="comment"># For multiprocessing distributed training, rank needs to be the</span></span><br><span class="line">            <span class="comment"># global rank among all the processes</span></span><br><span class="line">            args.rank = args.rank * ngpus_per_node + gpu</span><br><span class="line">        dist.init_process_group(backend=args.dist_backend, init_method=args.dist_url,</span><br><span class="line">                                world_size=args.world_size, rank=args.rank)</span><br><span class="line">    <span class="comment"># create model</span></span><br><span class="line">    <span class="keyword">if</span> args.pretrained:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&gt; using pre-trained model &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.arch))</span><br><span class="line">        model = models.__dict__[args.arch](pretrained=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&gt; creating model &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.arch))</span><br><span class="line">        model = models.__dict__[args.arch]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.distributed:</span><br><span class="line">        <span class="comment"># For multiprocessing distributed, DistributedDataParallel constructor</span></span><br><span class="line">        <span class="comment"># should always set the single device scope, otherwise,</span></span><br><span class="line">        <span class="comment"># DistributedDataParallel will use all available devices.</span></span><br><span class="line">        <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            torch.cuda.set_device(args.gpu)</span><br><span class="line">            model.cuda(args.gpu)</span><br><span class="line">            <span class="comment"># When using a single GPU per process and per</span></span><br><span class="line">            <span class="comment"># DistributedDataParallel, we need to divide the batch size</span></span><br><span class="line">            <span class="comment"># ourselves based on the total number of GPUs we have</span></span><br><span class="line">            args.batch_size = <span class="built_in">int</span>(args.batch_size / ngpus_per_node)</span><br><span class="line">            args.workers = <span class="built_in">int</span>(args.workers / ngpus_per_node)</span><br><span class="line">            model = torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            model.cuda()</span><br><span class="line">            <span class="comment"># DistributedDataParallel will divide and allocate batch_size to all</span></span><br><span class="line">            <span class="comment"># available GPUs if device_ids are not set</span></span><br><span class="line">            model = torch.nn.parallel.DistributedDataParallel(model)</span><br><span class="line">    <span class="keyword">elif</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        torch.cuda.set_device(args.gpu)</span><br><span class="line">        model = model.cuda(args.gpu)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># DataParallel will divide and allocate batch_size to all available GPUs</span></span><br><span class="line">        <span class="keyword">if</span> args.arch.startswith(<span class="string">&#x27;alexnet&#x27;</span>) <span class="keyword">or</span> args.arch.startswith(<span class="string">&#x27;vgg&#x27;</span>):</span><br><span class="line">            model.features = torch.nn.DataParallel(model.features)</span><br><span class="line">            model.cuda()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            model = torch.nn.DataParallel(model).cuda()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># define loss function (criterion) and optimizer</span></span><br><span class="line">    criterion = nn.CrossEntropyLoss().cuda(args.gpu)</span><br><span class="line"></span><br><span class="line">    optimizer = torch.optim.SGD(model.parameters(), args.lr,</span><br><span class="line">                                momentum=args.momentum,</span><br><span class="line">                                weight_decay=args.weight_decay)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># optionally resume from a checkpoint</span></span><br><span class="line">    <span class="keyword">if</span> args.resume:</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(args.resume):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;=&gt; loading checkpoint &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.resume))</span><br><span class="line">            checkpoint = torch.load(args.resume)</span><br><span class="line">            args.start_epoch = checkpoint[<span class="string">&#x27;epoch&#x27;</span>]</span><br><span class="line">            best_acc1 = checkpoint[<span class="string">&#x27;best_acc1&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="comment"># best_acc1 may be from a checkpoint from a different GPU</span></span><br><span class="line">                best_acc1 = best_acc1.to(args.gpu)</span><br><span class="line">            model.load_state_dict(checkpoint[<span class="string">&#x27;state_dict&#x27;</span>])</span><br><span class="line">            optimizer.load_state_dict(checkpoint[<span class="string">&#x27;optimizer&#x27;</span>])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;=&gt; loaded checkpoint &#x27;&#123;&#125;&#x27; (epoch &#123;&#125;)&quot;</span></span><br><span class="line">                  .<span class="built_in">format</span>(args.resume, checkpoint[<span class="string">&#x27;epoch&#x27;</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;=&gt; no checkpoint found at &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.resume))</span><br><span class="line"></span><br><span class="line">    cudnn.benchmark = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Data loading code</span></span><br><span class="line">    traindir = os.path.join(args.data, <span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">    valdir = os.path.join(args.data, <span class="string">&#x27;val&#x27;</span>)</span><br><span class="line">    normalize = transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>],</span><br><span class="line">                                     std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line"></span><br><span class="line">    train_dataset = datasets.ImageFolder(</span><br><span class="line">        traindir,</span><br><span class="line">        transforms.Compose([</span><br><span class="line">            transforms.RandomResizedCrop(<span class="number">224</span>),</span><br><span class="line">            transforms.RandomHorizontalFlip(),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            normalize,</span><br><span class="line">        ]))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.distributed:</span><br><span class="line">        train_sampler = torch.utils.data.distributed.DistributedSampler(train_dataset)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        train_sampler = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(</span><br><span class="line">        train_dataset, batch_size=args.batch_size, shuffle=(train_sampler <span class="keyword">is</span> <span class="literal">None</span>),</span><br><span class="line">        num_workers=args.workers, pin_memory=<span class="literal">True</span>, sampler=train_sampler)</span><br><span class="line"></span><br><span class="line">    val_loader = torch.utils.data.DataLoader(</span><br><span class="line">        datasets.ImageFolder(valdir, transforms.Compose([</span><br><span class="line">            transforms.Resize(<span class="number">256</span>),</span><br><span class="line">            transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            normalize,</span><br><span class="line">        ])),</span><br><span class="line">        batch_size=args.batch_size, shuffle=<span class="literal">False</span>,</span><br><span class="line">        num_workers=args.workers, pin_memory=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.evaluate:</span><br><span class="line">        validate(val_loader, model, criterion, args)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(args.start_epoch, args.epochs):</span><br><span class="line">        <span class="keyword">if</span> args.distributed:</span><br><span class="line">            train_sampler.set_epoch(epoch)</span><br><span class="line">        adjust_learning_rate(optimizer, epoch, args)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># train for one epoch</span></span><br><span class="line">        train(train_loader, model, criterion, optimizer, epoch, args)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># evaluate on validation set</span></span><br><span class="line">        acc1 = validate(val_loader, model, criterion, args)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># remember best acc@1 and save checkpoint</span></span><br><span class="line">        is_best = acc1 &gt; best_acc1</span><br><span class="line">        best_acc1 = <span class="built_in">max</span>(acc1, best_acc1)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> args.multiprocessing_distributed <span class="keyword">or</span> (args.multiprocessing_distributed</span><br><span class="line">                <span class="keyword">and</span> args.rank % ngpus_per_node == <span class="number">0</span>):</span><br><span class="line">            save_checkpoint(&#123;</span><br><span class="line">                <span class="string">&#x27;epoch&#x27;</span>: epoch + <span class="number">1</span>,</span><br><span class="line">                <span class="string">&#x27;arch&#x27;</span>: args.arch,</span><br><span class="line">                <span class="string">&#x27;state_dict&#x27;</span>: model.state_dict(),</span><br><span class="line">                <span class="string">&#x27;best_acc1&#x27;</span>: best_acc1,</span><br><span class="line">                <span class="string">&#x27;optimizer&#x27;</span> : optimizer.state_dict(),</span><br><span class="line">            &#125;, is_best)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">train_loader, model, criterion, optimizer, epoch, args</span>):</span><br><span class="line">    batch_time = AverageMeter(<span class="string">&#x27;Time&#x27;</span>, <span class="string">&#x27;:6.3f&#x27;</span>)</span><br><span class="line">    data_time = AverageMeter(<span class="string">&#x27;Data&#x27;</span>, <span class="string">&#x27;:6.3f&#x27;</span>)</span><br><span class="line">    losses = AverageMeter(<span class="string">&#x27;Loss&#x27;</span>, <span class="string">&#x27;:.4e&#x27;</span>)</span><br><span class="line">    top1 = AverageMeter(<span class="string">&#x27;Acc@1&#x27;</span>, <span class="string">&#x27;:6.2f&#x27;</span>)</span><br><span class="line">    top5 = AverageMeter(<span class="string">&#x27;Acc@5&#x27;</span>, <span class="string">&#x27;:6.2f&#x27;</span>)</span><br><span class="line">    progress = ProgressMeter(<span class="built_in">len</span>(train_loader), batch_time, data_time, losses, top1,</span><br><span class="line">                             top5, prefix=<span class="string">&quot;Epoch: [&#123;&#125;]&quot;</span>.<span class="built_in">format</span>(epoch))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># switch to train mode</span></span><br><span class="line">    model.train()</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="keyword">for</span> i, (<span class="built_in">input</span>, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        <span class="comment"># measure data loading time</span></span><br><span class="line">        data_time.update(time.time() - end)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">input</span> = <span class="built_in">input</span>.cuda(args.gpu, non_blocking=<span class="literal">True</span>)</span><br><span class="line">        target = target.cuda(args.gpu, non_blocking=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute output</span></span><br><span class="line">        output = model(<span class="built_in">input</span>)</span><br><span class="line">        loss = criterion(output, target)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># measure accuracy and record loss</span></span><br><span class="line">        acc1, acc5 = accuracy(output, target, topk=(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">        losses.update(loss.item(), <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line">        top1.update(acc1[<span class="number">0</span>], <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line">        top5.update(acc5[<span class="number">0</span>], <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute gradient and do SGD step</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># measure elapsed time</span></span><br><span class="line">        batch_time.update(time.time() - end)</span><br><span class="line">        end = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i % args.print_freq == <span class="number">0</span>:</span><br><span class="line">            progress.<span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">val_loader, model, criterion, args</span>):</span><br><span class="line">    batch_time = AverageMeter(<span class="string">&#x27;Time&#x27;</span>, <span class="string">&#x27;:6.3f&#x27;</span>)</span><br><span class="line">    losses = AverageMeter(<span class="string">&#x27;Loss&#x27;</span>, <span class="string">&#x27;:.4e&#x27;</span>)</span><br><span class="line">    top1 = AverageMeter(<span class="string">&#x27;Acc@1&#x27;</span>, <span class="string">&#x27;:6.2f&#x27;</span>)</span><br><span class="line">    top5 = AverageMeter(<span class="string">&#x27;Acc@5&#x27;</span>, <span class="string">&#x27;:6.2f&#x27;</span>)</span><br><span class="line">    progress = ProgressMeter(<span class="built_in">len</span>(val_loader), batch_time, losses, top1, top5,</span><br><span class="line">                             prefix=<span class="string">&#x27;Test: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># switch to evaluate mode</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="keyword">for</span> i, (<span class="built_in">input</span>, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(val_loader):</span><br><span class="line">            <span class="keyword">if</span> args.gpu <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">input</span> = <span class="built_in">input</span>.cuda(args.gpu, non_blocking=<span class="literal">True</span>)</span><br><span class="line">            target = target.cuda(args.gpu, non_blocking=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># compute output</span></span><br><span class="line">            output = model(<span class="built_in">input</span>)</span><br><span class="line">            loss = criterion(output, target)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># measure accuracy and record loss</span></span><br><span class="line">            acc1, acc5 = accuracy(output, target, topk=(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">            losses.update(loss.item(), <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line">            top1.update(acc1[<span class="number">0</span>], <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line">            top5.update(acc5[<span class="number">0</span>], <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># measure elapsed time</span></span><br><span class="line">            batch_time.update(time.time() - end)</span><br><span class="line">            end = time.time()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i % args.print_freq == <span class="number">0</span>:</span><br><span class="line">                progress.<span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span> this should also be done with the ProgressMeter</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; * Acc@1 &#123;top1.avg:.3f&#125; Acc@5 &#123;top5.avg:.3f&#125;&#x27;</span></span><br><span class="line">              .<span class="built_in">format</span>(top1=top1, top5=top5))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> top1.avg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_checkpoint</span>(<span class="params">state, is_best, filename=<span class="string">&#x27;checkpoint.pth.tar&#x27;</span></span>):</span><br><span class="line">    torch.save(state, filename)</span><br><span class="line">    <span class="keyword">if</span> is_best:</span><br><span class="line">        shutil.copyfile(filename, <span class="string">&#x27;model_best.pth.tar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AverageMeter</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Computes and stores the average and current value&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, fmt=<span class="string">&#x27;:f&#x27;</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.fmt = fmt</span><br><span class="line">        self.reset()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self</span>):</span><br><span class="line">        self.val = <span class="number">0</span></span><br><span class="line">        self.avg = <span class="number">0</span></span><br><span class="line">        self.<span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, val, n=<span class="number">1</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">sum</span> += val * n</span><br><span class="line">        self.count += n</span><br><span class="line">        self.avg = self.<span class="built_in">sum</span> / self.count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        fmtstr = <span class="string">&#x27;&#123;name&#125; &#123;val&#x27;</span> + self.fmt + <span class="string">&#x27;&#125; (&#123;avg&#x27;</span> + self.fmt + <span class="string">&#x27;&#125;)&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> fmtstr.<span class="built_in">format</span>(**self.__dict__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProgressMeter</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_batches, *meters, prefix=<span class="string">&quot;&quot;</span></span>):</span><br><span class="line">        self.batch_fmtstr = self._get_batch_fmtstr(num_batches)</span><br><span class="line">        self.meters = meters</span><br><span class="line">        self.prefix = prefix</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print</span>(<span class="params">self, batch</span>):</span><br><span class="line">        entries = [self.prefix + self.batch_fmtstr.<span class="built_in">format</span>(batch)]</span><br><span class="line">        entries += [<span class="built_in">str</span>(meter) <span class="keyword">for</span> meter <span class="keyword">in</span> self.meters]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\t&#x27;</span>.join(entries))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_batch_fmtstr</span>(<span class="params">self, num_batches</span>):</span><br><span class="line">        num_digits = <span class="built_in">len</span>(<span class="built_in">str</span>(num_batches // <span class="number">1</span>))</span><br><span class="line">        fmt = <span class="string">&#x27;&#123;:&#x27;</span> + <span class="built_in">str</span>(num_digits) + <span class="string">&#x27;d&#125;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;[&#x27;</span> + fmt + <span class="string">&#x27;/&#x27;</span> + fmt.<span class="built_in">format</span>(num_batches) + <span class="string">&#x27;]&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adjust_learning_rate</span>(<span class="params">optimizer, epoch, args</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sets the learning rate to the initial LR decayed by 10 every 30 epochs&quot;&quot;&quot;</span></span><br><span class="line">    lr = args.lr * (<span class="number">0.1</span> ** (epoch // <span class="number">30</span>))</span><br><span class="line">    <span class="keyword">for</span> param_group <span class="keyword">in</span> optimizer.param_groups:</span><br><span class="line">        param_group[<span class="string">&#x27;lr&#x27;</span>] = lr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">accuracy</span>(<span class="params">output, target, topk=(<span class="params"><span class="number">1</span>,</span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Computes the accuracy over the k top predictions for the specified values of k&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        maxk = <span class="built_in">max</span>(topk)</span><br><span class="line">        batch_size = target.size(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        _, pred = output.topk(maxk, <span class="number">1</span>, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">        pred = pred.t()</span><br><span class="line">        correct = pred.eq(target.view(<span class="number">1</span>, -<span class="number">1</span>).expand_as(pred))</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> topk:</span><br><span class="line">            correct_k = correct[:k].view(-<span class="number">1</span>).<span class="built_in">float</span>().<span class="built_in">sum</span>(<span class="number">0</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">            res.append(correct_k.mul_(<span class="number">100.0</span> / batch_size))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="main.py旧版">2 <code>main.py</code>（旧版）</h2><p>文档中链接的旧版本<ahref="https://github.com/pytorch/examples/blob/42e5b996718797e45c46a25c55b031e6768f8440/imagenet/main.py#L89-L101">example</a>虽然已不能直接兼容PyTorch1.0版本，但其实只需要做简单一些修改即可。该旧版代码相对新版本更简单易学，可以阅读该版本作为上手理解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.parallel</span><br><span class="line"><span class="keyword">import</span> torch.backends.cudnn <span class="keyword">as</span> cudnn</span><br><span class="line"><span class="keyword">import</span> torch.optim</span><br><span class="line"><span class="keyword">import</span> torch.utils.data</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> torchvision.datasets <span class="keyword">as</span> datasets</span><br><span class="line"><span class="keyword">import</span> torchvision.models <span class="keyword">as</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model_names = <span class="built_in">sorted</span>(name <span class="keyword">for</span> name <span class="keyword">in</span> models.__dict__</span><br><span class="line">    <span class="keyword">if</span> name.islower() <span class="keyword">and</span> <span class="keyword">not</span> name.startswith(<span class="string">&quot;__&quot;</span>)</span><br><span class="line">    <span class="keyword">and</span> <span class="built_in">callable</span>(models.__dict__[name]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;PyTorch ImageNet Training&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;data&#x27;</span>, metavar=<span class="string">&#x27;DIR&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;path to dataset&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--arch&#x27;</span>, <span class="string">&#x27;-a&#x27;</span>, metavar=<span class="string">&#x27;ARCH&#x27;</span>, default=<span class="string">&#x27;resnet18&#x27;</span>,</span><br><span class="line">                    choices=model_names,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;model architecture: &#x27;</span> +</span><br><span class="line">                        <span class="string">&#x27; | &#x27;</span>.join(model_names) +</span><br><span class="line">                        <span class="string">&#x27; (default: resnet18)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-j&#x27;</span>, <span class="string">&#x27;--workers&#x27;</span>, default=<span class="number">4</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;number of data loading workers (default: 4)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--epochs&#x27;</span>, default=<span class="number">90</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;number of total epochs to run&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--start-epoch&#x27;</span>, default=<span class="number">0</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, metavar=<span class="string">&#x27;N&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;manual epoch number (useful on restarts)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-b&#x27;</span>, <span class="string">&#x27;--batch-size&#x27;</span>, default=<span class="number">256</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;N&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;mini-batch size (default: 256)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--lr&#x27;</span>, <span class="string">&#x27;--learning-rate&#x27;</span>, default=<span class="number">0.1</span>, <span class="built_in">type</span>=<span class="built_in">float</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;LR&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;initial learning rate&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--momentum&#x27;</span>, default=<span class="number">0.9</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, metavar=<span class="string">&#x27;M&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;momentum&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--weight-decay&#x27;</span>, <span class="string">&#x27;--wd&#x27;</span>, default=<span class="number">1e-4</span>, <span class="built_in">type</span>=<span class="built_in">float</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;W&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;weight decay (default: 1e-4)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--print-freq&#x27;</span>, <span class="string">&#x27;-p&#x27;</span>, default=<span class="number">10</span>, <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">                    metavar=<span class="string">&#x27;N&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;print frequency (default: 10)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--resume&#x27;</span>, default=<span class="string">&#x27;&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&#x27;PATH&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;path to latest checkpoint (default: none)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-e&#x27;</span>, <span class="string">&#x27;--evaluate&#x27;</span>, dest=<span class="string">&#x27;evaluate&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;evaluate model on validation set&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--pretrained&#x27;</span>, dest=<span class="string">&#x27;pretrained&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;use pre-trained model&#x27;</span>)</span><br><span class="line"></span><br><span class="line">best_prec1 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">global</span> args, best_prec1</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create model</span></span><br><span class="line">    <span class="keyword">if</span> args.pretrained:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&gt; using pre-trained model &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.arch))</span><br><span class="line">        model = models.__dict__[args.arch](pretrained=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&gt; creating model &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.arch))</span><br><span class="line">        model = models.__dict__[args.arch]()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.arch.startswith(<span class="string">&#x27;alexnet&#x27;</span>) <span class="keyword">or</span> args.arch.startswith(<span class="string">&#x27;vgg&#x27;</span>):</span><br><span class="line">        model.features = torch.nn.DataParallel(model.features)</span><br><span class="line">        model.cuda()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        model = torch.nn.DataParallel(model).cuda()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># optionally resume from a checkpoint</span></span><br><span class="line">    <span class="keyword">if</span> args.resume:</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(args.resume):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;=&gt; loading checkpoint &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.resume))</span><br><span class="line">            checkpoint = torch.load(args.resume)</span><br><span class="line">            args.start_epoch = checkpoint[<span class="string">&#x27;epoch&#x27;</span>]</span><br><span class="line">            best_prec1 = checkpoint[<span class="string">&#x27;best_prec1&#x27;</span>]</span><br><span class="line">            model.load_state_dict(checkpoint[<span class="string">&#x27;state_dict&#x27;</span>])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;=&gt; loaded checkpoint &#x27;&#123;&#125;&#x27; (epoch &#123;&#125;)&quot;</span></span><br><span class="line">                  .<span class="built_in">format</span>(args.resume, checkpoint[<span class="string">&#x27;epoch&#x27;</span>]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;=&gt; no checkpoint found at &#x27;&#123;&#125;&#x27;&quot;</span>.<span class="built_in">format</span>(args.resume))</span><br><span class="line"></span><br><span class="line">    cudnn.benchmark = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Data loading code</span></span><br><span class="line">    traindir = os.path.join(args.data, <span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">    valdir = os.path.join(args.data, <span class="string">&#x27;val&#x27;</span>)</span><br><span class="line">    normalize = transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>],</span><br><span class="line">                                     std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(</span><br><span class="line">        datasets.ImageFolder(traindir, transforms.Compose([</span><br><span class="line">            transforms.RandomSizedCrop(<span class="number">224</span>),</span><br><span class="line">            transforms.RandomHorizontalFlip(),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            normalize,</span><br><span class="line">        ])),</span><br><span class="line">        batch_size=args.batch_size, shuffle=<span class="literal">True</span>,</span><br><span class="line">        num_workers=args.workers, pin_memory=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    val_loader = torch.utils.data.DataLoader(</span><br><span class="line">        datasets.ImageFolder(valdir, transforms.Compose([</span><br><span class="line">            transforms.Scale(<span class="number">256</span>),</span><br><span class="line">            transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            normalize,</span><br><span class="line">        ])),</span><br><span class="line">        batch_size=args.batch_size, shuffle=<span class="literal">False</span>,</span><br><span class="line">        num_workers=args.workers, pin_memory=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># define loss function (criterion) and pptimizer</span></span><br><span class="line">    criterion = nn.CrossEntropyLoss().cuda()</span><br><span class="line"></span><br><span class="line">    optimizer = torch.optim.SGD(model.parameters(), args.lr,</span><br><span class="line">                                momentum=args.momentum,</span><br><span class="line">                                weight_decay=args.weight_decay)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.evaluate:</span><br><span class="line">        validate(val_loader, model, criterion)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(args.start_epoch, args.epochs):</span><br><span class="line">        adjust_learning_rate(optimizer, epoch)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># train for one epoch</span></span><br><span class="line">        train(train_loader, model, criterion, optimizer, epoch)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># evaluate on validation set</span></span><br><span class="line">        prec1 = validate(val_loader, model, criterion)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># remember best prec@1 and save checkpoint</span></span><br><span class="line">        is_best = prec1 &gt; best_prec1</span><br><span class="line">        best_prec1 = <span class="built_in">max</span>(prec1, best_prec1)</span><br><span class="line">        save_checkpoint(&#123;</span><br><span class="line">            <span class="string">&#x27;epoch&#x27;</span>: epoch + <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;arch&#x27;</span>: args.arch,</span><br><span class="line">            <span class="string">&#x27;state_dict&#x27;</span>: model.state_dict(),</span><br><span class="line">            <span class="string">&#x27;best_prec1&#x27;</span>: best_prec1,</span><br><span class="line">        &#125;, is_best)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">train_loader, model, criterion, optimizer, epoch</span>):</span><br><span class="line">    batch_time = AverageMeter()</span><br><span class="line">    data_time = AverageMeter()</span><br><span class="line">    losses = AverageMeter()</span><br><span class="line">    top1 = AverageMeter()</span><br><span class="line">    top5 = AverageMeter()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># switch to train mode</span></span><br><span class="line">    model.train()</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="keyword">for</span> i, (<span class="built_in">input</span>, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        <span class="comment"># measure data loading time</span></span><br><span class="line">        data_time.update(time.time() - end)</span><br><span class="line"></span><br><span class="line">        target = target.cuda(<span class="keyword">async</span>=<span class="literal">True</span>)</span><br><span class="line">        input_var = torch.autograd.Variable(<span class="built_in">input</span>)</span><br><span class="line">        target_var = torch.autograd.Variable(target)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute output</span></span><br><span class="line">        output = model(input_var)</span><br><span class="line">        loss = criterion(output, target_var)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># measure accuracy and record loss</span></span><br><span class="line">        prec1, prec5 = accuracy(output.data, target, topk=(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">        losses.update(loss.data[<span class="number">0</span>], <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line">        top1.update(prec1[<span class="number">0</span>], <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line">        top5.update(prec5[<span class="number">0</span>], <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute gradient and do SGD step</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># measure elapsed time</span></span><br><span class="line">        batch_time.update(time.time() - end)</span><br><span class="line">        end = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i % args.print_freq == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Epoch: [&#123;0&#125;][&#123;1&#125;/&#123;2&#125;]\t&#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Time &#123;batch_time.val:.3f&#125; (&#123;batch_time.avg:.3f&#125;)\t&#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Data &#123;data_time.val:.3f&#125; (&#123;data_time.avg:.3f&#125;)\t&#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Loss &#123;loss.val:.4f&#125; (&#123;loss.avg:.4f&#125;)\t&#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Prec@1 &#123;top1.val:.3f&#125; (&#123;top1.avg:.3f&#125;)\t&#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Prec@5 &#123;top5.val:.3f&#125; (&#123;top5.avg:.3f&#125;)&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                   epoch, i, <span class="built_in">len</span>(train_loader), batch_time=batch_time,</span><br><span class="line">                   data_time=data_time, loss=losses, top1=top1, top5=top5))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">val_loader, model, criterion</span>):</span><br><span class="line">    batch_time = AverageMeter()</span><br><span class="line">    losses = AverageMeter()</span><br><span class="line">    top1 = AverageMeter()</span><br><span class="line">    top5 = AverageMeter()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># switch to evaluate mode</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="keyword">for</span> i, (<span class="built_in">input</span>, target) <span class="keyword">in</span> <span class="built_in">enumerate</span>(val_loader):</span><br><span class="line">        target = target.cuda(<span class="keyword">async</span>=<span class="literal">True</span>)</span><br><span class="line">        input_var = torch.autograd.Variable(<span class="built_in">input</span>, volatile=<span class="literal">True</span>)</span><br><span class="line">        target_var = torch.autograd.Variable(target, volatile=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute output</span></span><br><span class="line">        output = model(input_var)</span><br><span class="line">        loss = criterion(output, target_var)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># measure accuracy and record loss</span></span><br><span class="line">        prec1, prec5 = accuracy(output.data, target, topk=(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">        losses.update(loss.data[<span class="number">0</span>], <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line">        top1.update(prec1[<span class="number">0</span>], <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line">        top5.update(prec5[<span class="number">0</span>], <span class="built_in">input</span>.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># measure elapsed time</span></span><br><span class="line">        batch_time.update(time.time() - end)</span><br><span class="line">        end = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> i % args.print_freq == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Test: [&#123;0&#125;/&#123;1&#125;]\t&#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Time &#123;batch_time.val:.3f&#125; (&#123;batch_time.avg:.3f&#125;)\t&#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Loss &#123;loss.val:.4f&#125; (&#123;loss.avg:.4f&#125;)\t&#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Prec@1 &#123;top1.val:.3f&#125; (&#123;top1.avg:.3f&#125;)\t&#x27;</span></span><br><span class="line">                  <span class="string">&#x27;Prec@5 &#123;top5.val:.3f&#125; (&#123;top5.avg:.3f&#125;)&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                   i, <span class="built_in">len</span>(val_loader), batch_time=batch_time, loss=losses,</span><br><span class="line">                   top1=top1, top5=top5))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; * Prec@1 &#123;top1.avg:.3f&#125; Prec@5 &#123;top5.avg:.3f&#125;&#x27;</span></span><br><span class="line">          .<span class="built_in">format</span>(top1=top1, top5=top5))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> top1.avg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_checkpoint</span>(<span class="params">state, is_best, filename=<span class="string">&#x27;checkpoint.pth.tar&#x27;</span></span>):</span><br><span class="line">    torch.save(state, filename)</span><br><span class="line">    <span class="keyword">if</span> is_best:</span><br><span class="line">        shutil.copyfile(filename, <span class="string">&#x27;model_best.pth.tar&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AverageMeter</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Computes and stores the average and current value&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.reset()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self</span>):</span><br><span class="line">        self.val = <span class="number">0</span></span><br><span class="line">        self.avg = <span class="number">0</span></span><br><span class="line">        self.<span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, val, n=<span class="number">1</span></span>):</span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">sum</span> += val * n</span><br><span class="line">        self.count += n</span><br><span class="line">        self.avg = self.<span class="built_in">sum</span> / self.count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adjust_learning_rate</span>(<span class="params">optimizer, epoch</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Sets the learning rate to the initial LR decayed by 10 every 30 epochs&quot;&quot;&quot;</span></span><br><span class="line">    lr = args.lr * (<span class="number">0.1</span> ** (epoch // <span class="number">30</span>))</span><br><span class="line">    <span class="keyword">for</span> param_group <span class="keyword">in</span> optimizer.param_groups:</span><br><span class="line">        param_group[<span class="string">&#x27;lr&#x27;</span>] = lr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">accuracy</span>(<span class="params">output, target, topk=(<span class="params"><span class="number">1</span>,</span>)</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Computes the precision@k for the specified values of k&quot;&quot;&quot;</span></span><br><span class="line">    maxk = <span class="built_in">max</span>(topk)</span><br><span class="line">    batch_size = target.size(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    _, pred = output.topk(maxk, <span class="number">1</span>, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">    pred = pred.t()</span><br><span class="line">    correct = pred.eq(target.view(<span class="number">1</span>, -<span class="number">1</span>).expand_as(pred))</span><br><span class="line"></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> topk:</span><br><span class="line">        correct_k = correct[:k].view(-<span class="number">1</span>).<span class="built_in">float</span>().<span class="built_in">sum</span>(<span class="number">0</span>)</span><br><span class="line">        res.append(correct_k.mul_(<span class="number">100.0</span> / batch_size))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
            <tag> Deep Learning </tag>
            
            <tag> Image Classification </tag>
            
            <tag> CNN </tag>
            
            <tag> ImageNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MathJax - Hexo Next渲染LaTex数学公式</title>
      <link href="/posts/MathJax-Hexo-Next%E6%B8%B2%E6%9F%93LaTex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
      <url>/posts/MathJax-Hexo-Next%E6%B8%B2%E6%9F%93LaTex%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><ahref="https://www.mathjax.org/">MathJax</a>是一个JavaScript插件，可以在前端实现对LaTex数学公式的解析渲染。</p><span id="more"></span><h1 id="mathjax---hexo-next渲染latex数学公式">MathJax - HexoNext渲染LaTex数学公式</h1><h2 id="mathjax">0 MathJax</h2><blockquote><p><a href="https://www.mathjax.org/">MathJax | Beautiful math in allbrowsers</a></p><p><strong>Beautiful math in all browsers</strong></p><p>A JavaScript display engine for mathematics that works in allbrowsers. No more setup for readers. It just works.</p></blockquote><p>MathJax是一个JavaScript显示引擎，可以在浏览器端渲染数学公式。</p><h2 id="next的配置文件">1 Next的配置文件</h2><p>我采用的Hexo静态Web框架，Hexo主题功能完善，包含了MathJax配置选项。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Third Party Services Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Math Equations Render Support</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front Matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">engine:</span> <span class="string">mathjax</span></span><br><span class="line">  <span class="comment">#engine: katex</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-rendering-pandoc (or hexo-renderer-kramed) needed to full MathJax support.</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="comment"># Use 2.7.1 as default, jsdelivr as default CDN, works everywhere even in China</span></span><br><span class="line">    <span class="attr">cdn:</span> <span class="string">//cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span></span><br><span class="line">    <span class="comment"># For direct link to MathJax.js with CloudFlare CDN (cdnjs.cloudflare.com)</span></span><br><span class="line">    <span class="comment">#cdn: //cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    <span class="comment">#mhchem: //cdn.jsdelivr.net/npm/mathjax-mhchem@3</span></span><br><span class="line">    <span class="comment">#mhchem: //cdnjs.cloudflare.com/ajax/libs/mathjax-mhchem/3.3.0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) needed to full Katex support.</span></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="comment"># Use 0.7.1 as default, jsdelivr as default CDN, works everywhere even in China</span></span><br><span class="line">    <span class="attr">cdn:</span> <span class="string">//cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css</span></span><br><span class="line">    <span class="comment"># CDNJS, provided by cloudflare, maybe the best CDN, but not works in China</span></span><br><span class="line">    <span class="comment">#cdn: //cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.css</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">copy_tex:</span></span><br><span class="line">      <span class="comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">copy_tex_js:</span> <span class="string">//cdn.jsdelivr.net/npm/katex@0/dist/contrib/copy-tex.min.js</span></span><br><span class="line">      <span class="attr">copy_tex_css:</span> <span class="string">//cdn.jsdelivr.net/npm/katex@0/dist/contrib/copy-tex.min.css</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol type="1"><li>启用<code>math</code>渲染支持<code>enable: true</code>；</li><li>默认渲染模式是<code>per_page: true</code>，表示渲染每一个<code>front-matter</code>中包含<code>mathjax: true</code>的页面；</li><li>默认引擎是<code>mathjax</code>，也可以选用<code>katex</code>引擎；</li><li>CDN选项采用默认配置即可。</li></ol><h2 id="更换markdown渲染引擎">2 更换MarkDown渲染引擎</h2><p>Hexo默认的MarkDown引擎<code>marked</code>不支持MathJax。</p><p>在渲染生成静态页面时，<code>marked</code>没有跳过MathJax段（使用<code>%% ... %%</code>或<code>% ... %</code>标记），而是会对<code>MathJax</code>段内的内容进行MarkDown解析，例如：<code>%% &lt;math exprs&gt;_&lt;math exprs&gt;_&lt;math exprs&gt;</code>中，成对小下划线<code>_ _</code>被解析为MarkDown格式符，被渲染为<code>&lt;em&gt;&lt;math exprs&gt;&lt;/em&gt;</code>的HTML标签，在前端会显示为斜体。这就意味着，前端加载MathJax再解析的时候，公式内容已经被替换修改过了，不再是<code>LaTex</code>公式。</p><p>在以下公式中，成对的小下划线会被错误解析为MarkDown的斜体：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">&#123;<span class="keyword">\mathcal</span> L&#125;<span class="built_in">_</span>&#123;cyc&#125;(G,F)=&#123;<span class="keyword">\mathbb</span> E&#125;<span class="built_in">_</span>&#123;x <span class="keyword">\sim</span> p<span class="built_in">_</span>&#123;data&#125;(x)&#125;[&#123;<span class="keyword">\|</span>F(G(x))-x<span class="keyword">\|</span>&#125;<span class="built_in">_</span>&#123;1&#125;]+&#123;<span class="keyword">\mathbb</span> E&#125;<span class="built_in">_</span>&#123;y <span class="keyword">\sim</span> p<span class="built_in">_</span>&#123;data&#125;(y)&#125;[&#123;<span class="keyword">\|</span>G(F(y))-y<span class="keyword">\|</span>&#125;<span class="built_in">_</span>&#123;1&#125;]</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure><p>通过在博客目录下执行以下命令更换MarkDown渲染引擎即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><ol type="1"><li>卸载默认的<code>marked</code>渲染引擎；</li><li>安装支持<code>MathJax</code>的<code>kramed</code>渲染引擎。</li></ol><p>重新生成Hexo站点后，即可看到正常渲染的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><span class="math display">\[{\mathcal L}_{cyc}(G,F)={\mathbb E}_{x \simp_{data}(x)}[{\|F(G(x))-x\|}_{1}]+{\mathbb E}_{y \simp_{data}(y)}[{\|G(F(y))-y\|}_{1}]\]</span></p><p>确认无误后再进行部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h2 id="常见问题">3 常见问题</h2><h3 id="跨平台同步修改后的hexo环境">3.1跨平台同步修改后的hexo环境？</h3><p>通过GitHub对项目源代码进行同步，在新环境执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>即可自动部署完成所需NPM包组件。</p><p>可以在Hexo的站点目录下查看<code>package.json</code>获悉该站点的主要包：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.8.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-deployer-git&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-baidu-sitemap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-searchdb&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-sitemap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-kramed&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-pug&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.3&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对站点NPM包的安装、卸载、升级更新都会自动修改该记录文件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next </tag>
            
            <tag> MathJax </tag>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GANs - 生成对抗网络系列论文学习笔记</title>
      <link href="/posts/GANs-%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%E7%B3%BB%E5%88%97%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/GANs-%E7%94%9F%E6%88%90%E5%AF%B9%E6%8A%97%E7%BD%91%E7%BB%9C%E7%B3%BB%E5%88%97%E8%AE%BA%E6%96%87%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>最近对生成对抗网络（GANs, <em>Generative AdversarialNetworks</em>）相关研究感兴趣，阅读了一些论文。</p><span id="more"></span><h1 id="gans---生成对抗网络系列论文学习笔记">GANs -生成对抗网络系列论文学习笔记</h1><p>本文主要按照论文发表的时间顺序概览生成对抗网络领域的主要研究。</p><h2 id="背景">0 背景</h2><p>相关资料：</p><blockquote><p>新智元介绍文章：<ahref="https://mp.weixin.qq.com/s/gH6b5zgvWArOSfKBSIG1Ww">必读！生成对抗网络GAN论文TOP10</a></p></blockquote><blockquote><p>GitHub相关专题：<a href="https://github.com/nightrome">nightrome</a>/ <ahref="https://github.com/nightrome/really-awesome-gan"><strong>really-awesome-gan</strong></a></p></blockquote><h2 id="gans">1 GANs</h2><blockquote><p>Goodfellow I, Pouget-Abadie J, Mirza M, et al. Generative adversarialnets[C]//Advances in neural information processing systems. 2014:2672-2680.</p></blockquote><p><strong>生成对抗网络</strong>（<strong>GANs</strong>, <em>GenerativeAdversarial Networks</em>）由<em>IanGoodfellow</em>等人于2014年提出。</p><p>已有研究主要关注概率分布函数的参数估计，通过参数方法实现生成器。但似然函数难以处理，需要大量近似。例如：深层波兹曼机依赖似然函数。因此需要生成模型，避免依赖形式明确的似然函数。</p><p>GANs通过同时对抗训练两个模型：生成模型<spanclass="math inline">\(G\)</span>（<em>Generativemodel</em>）和判别模型<spanclass="math inline">\(D\)</span>（<em>Discriminativemodel</em>）来取得高质量的生成模型。</p><p>生成模型<spanclass="math inline">\(G\)</span>的目的在于捕捉数据分布信息。生成模型的输入是噪声，通过传递输入噪声生成拟合训练集样本概率分布的生成样本。</p><p>判别模型<spanclass="math inline">\(D​\)</span>的目的在于估测样本来自于训练集（真实样本，而非生成模型伪造的生成样本）的概率。判别模型的输入是高维的、丰富的信息，输出是类型标记。</p><p>对抗网络框架（<em>adversarial nets</em>framework），包含：生成模型<spanclass="math inline">\(G\)</span>和判别模型<spanclass="math inline">\(D\)</span>，它们通过对抗来决定样本究竟来自模型分布还是数据分布。对抗生成网络基于最小最大化博弈（<em>minimaxgame</em>），生成模型和判别模型作为博弈的双方，训练过程中的目标分别是最小化和最大化价值函数（<em>valuefunction</em>）。训练最后的结果就是判别模型无法分辨真实数据和生成数据，此时它的概率分布，例如：就是恒为<spanclass="math inline">\(\frac{1}{2}\)</span>。</p><p><span class="math display">\[\min\limits_G\max\limits_D{V(D, G)} = \mathbb E_{x \simp_{data}(x)}[\log D(x)] + \mathbb E_{z \sim p_{z}(z)}[\log (1 -D(G(z)))]\]</span></p><p>以造假币者（<em>counterfeiters</em>）为例：造假币者即生成模型，而分辨和调查假币的警察就是判别模型。造假币者和警察互相对抗，在对抗中，造假币者不得不制造更加逼近真币的假币，而警察也会在持续的对抗中提升自己的判别能力。总而言之，对抗带来的训练会提高判别模型和生成模型各自的能力。</p><p>该论文中的生成模型和判别模型均通过多层感知机实现。</p><h2 id="conditional-gans">2 Conditional GANs</h2><blockquote><p>Mirza M, Osindero S. Conditional generative adversarial nets[J].arXiv preprint arXiv:1411.1784, 2014.</p></blockquote><p><strong>条件生成对抗网络</strong>（ConditionalGANs(在一些论文亦中称为cGANs), <em>Conditional Generative AdversarialNets</em>）由<em>Mehdi Mirza</em>和<em>SimonOsindero</em>在2014年提出。</p><p>ConditionalGANs是在GANs的基础上发展出的新模型，其主要特点是可以对生成器和判别器施加条件。</p><p>GANs为无条件生成模型，无法控制数据生成模式。GAN的值函数（<em>valuefunc</em>）的<span class="math inline">\(x​\)</span>是无条件的，<spanclass="math inline">\(x​\)</span>均来自训练样本，无类别分类。仅需额外的辅助数据<spanclass="math inline">\(y​\)</span>就可以将GAN拓展为ConditionalGAN。辅助数据<spanclass="math inline">\(y​\)</span>可以是类别标签、也可以是来自其他模态的数据（例如：<spanclass="math inline">\(x​\)</span>图<spanclass="math inline">\(y​\)</span>文）。添加一个输入层（<em>inputlayer</em>）即可增加条件输入<spanclass="math inline">\(y​\)</span>（<spanclass="math inline">\(x​\)</span>或<spanclass="math inline">\(z​\)</span>和<spanclass="math inline">\(y​\)</span>并行输入）。生成器：通过联合隐层表示来结合<spanclass="math inline">\(z​\)</span>和<spanclass="math inline">\(y​\)</span>。</p><p>相较于GAN中的值函数中的<spanclass="math inline">\(D(x)\)</span>和<spanclass="math inline">\(G(z)\)</span>，ConditionalGAN的目标函数（<em>object func</em>）的区别就在于<spanclass="math inline">\(D(x|y)\)</span>和<spanclass="math inline">\(G(z|y)\)</span>都增加了条件<spanclass="math inline">\(y​\)</span>。</p><p><span class="math display">\[\min\limits_G\max\limits_D{V(D, G)} = \mathbb E_{x \simp_{data}(x)}[\log D(x|y)] + \mathbb E_{z \sim p_{z}(z)}[\log (1 -D(G(z|y)))]\]</span></p><p>作者在MNIST手写字符数据集上做了单模态（<em>unimodal</em>）实验，以真实手写字符样本为x，对应数字为y，训练ConditionalGANs来生成指定类别（数字0~9）所对应的手写字符图像。作者在Flickr的图文数据上开展了多模态（<em>multimodal</em>）实验，以图片为x，用户生成元数据（UGM,<em>user-generated metadata</em>）为y，训练ConditionalGANs来生成tag-vectors。评价方法：为每个图片生成100个样本，其中每个样本计算top-20近义词，统计以上100×20个词，取其中top-10最频繁词作为图片的生成标记（<em>generatedtags</em>）</p><h2 id="dcgans">3 DCGANs</h2><blockquote><p>Radford A, Metz L, Chintala S. Unsupervised representation learningwith deep convolutional generative adversarial networks[J]. arXivpreprint arXiv:1511.06434, 2015.</p></blockquote><p>深度卷积生成对抗网络（ DCGANs, deep convolutional generativeadversarial networks）由Alec Radford、Luke Metz和SoumithChintala在2015年提出。</p><p>DCGANs可以学习从目标部分到场景的多层表示（图像特征提取），利用GANs结构来学习大量无标记数据得到可复用的特征表示继而用于有监督学习任务。</p><p>论文主要包含以下四点内容：</p><ol type="1"><li>DCGAN：提出并评价了一系列限制条件，主要用于解决GANs训练不稳定问题。详细参阅论文第3节<strong>APPROACHAND MODEL ARCHITECTURE</strong>的论述和Architecture guidelines forstable Deep Convolutional GANs总结框。</li><li>指出判别器在图像分类任务上相较于其它无监督学习算法有优势。</li><li>指出GANs习得的过滤器可以学会描绘特定目标。</li><li>指出生成器的向量算术属性可以便捷地操纵生成样本的语义质量。</li></ol><p>该论文在的典型实验，通过尝试控制输入噪声，继而完全移除生成模型生成图像中的窗户，说明了生成模型通过训练学习到了场景中的物体特征。</p><h2 id="improved-techniques-for-training-gans">4 Improved Techniques forTraining GANs</h2><blockquote><p>Salimans T, Goodfellow I, Zaremba W, et al. Improved techniques fortraining gans[C]//Advances in neural information processing systems.2016: 2234-2242.</p></blockquote><p>本文由Tim Salimans等人于2016年发表。</p><p>本文提出了一系列对GANs模型的训练的改进方法以实现收敛的GANs，改进技术包含：</p><ol type="1"><li>Feature matching</li><li>Minibatch discrimination</li><li>Historical averaging</li><li>One-sided label smoothing</li><li>Virtual batch normalization</li></ol><p>没细看，不展开写。</p><h2 id="pix2pix">5 pix2pix</h2><blockquote><p>Isola P, Zhu J Y, Zhou T, et al. Image-to-image translation withconditional adversarial networks[C]//Proceedings of the IEEE conferenceon computer vision and pattern recognition. 2017: 1125-1134.</p></blockquote><p>本文由Phillip Isola等人于2017年发表于ICCV。</p><p>本文主要研究图到图变换（image-to-image translation）问题。</p><p>cGANs不仅学习图到图之间的映射，还学习实际任务的损失函数。</p><p>已有研究存在问题：</p><ol type="1"><li>需要人工设计有效的损失函数</li><li>设计有效的损失函数十分困难</li></ol><p>思路：可否寻找更高层面上的目标取代因具体任务而人工设计的损失函数？</p><p>cGANs模型非常适合实现图到图变换问题： 1.GANs通过对抗（最小最大化博弈）来训练生成器和判别器，无须人工设计指定任务的损失函数；2. cGANs可输入条件控制输出，适合用于实现可控的图到图翻译。</p><p>本文主要贡献：</p><ol type="1"><li>阐述cGANs在广泛的图到图变换任务上的有效性；</li><li>提出一个简单且效果不错的框架，并分析架构选择细节</li></ol><p>本文框架特点： 1. 生成器基于U-Net架构； 2.判别器基于卷积PatchGAN分类器。</p><p>本文生成器的目标： 1. 既要骗过判别器； 2.又要输出接近真值的图像。</p><p>因此增加L2/L1惩罚项，以减小生成图像与真值图像的差异。使用L1相较于L2可减少生成图像模糊。本文的生成器通过dropout机制引入并控制GANs的噪声</p><p>本文于项目<ahref="https://github.com/phillipi/pix2pix">pix2pix</a>关联，各个社群的人们把pix2pix应用到了各不相同的图到图变换任务上。</p><h2 id="stackgan">6 StackGAN</h2><blockquote><p>Zhang H, Xu T, Li H, et al. Stackgan: Text to photo-realistic imagesynthesis with stacked generative adversarial networks[C]//Proceedingsof the IEEE International Conference on Computer Vision. 2017:5907-5915.</p></blockquote><p>StackGAN由Han Zhang等人于2017年发表于ICCV。</p><p>StackGAN实现的功能基于自然语言文本描述，生成256×256的仿真照片级图像（<em>photo-realisticimages</em>）。</p><p>基于GANs生成高分辨率图像主要难题：真实自然图像的分布与应用模型的分布在高维像素空间中难以重叠。已有研究类似于本文Stage-ⅠGAN的工作，只能生成粗略的低分辨率图像。</p><p>StackGAN设计思路： 模仿人类绘画，将高清图像生成分解为两个子问题：</p><ol type="1"><li>从无到有：从文本到低分辨率粗略图；</li><li>从有到精：从低分辨率粗略图+文本到高分辨率精细图。</li></ol><p>StackGAN模型结构：</p><ol type="1"><li><p>Stage-ⅠGAN：输入时文本描述，输出是仅含形状和色彩的初步生成图像。</p></li><li><p>Stage-Ⅱ GAN：输入时Stage-ⅠGAN输出的初步图像和文本描述，输出是高清的、逼真摄影细节的图像</p></li></ol><p>本文还提出了条件增强（<em>ConditioningAugmentation</em>）技术。相较于以往研究把文本嵌入（<em>textembedding</em>）<spanclass="math inline">\(\varphi_t​\)</span>直接作为cGANs的条件变量，直接输入生成模型。本文认为，文本嵌入所在的隐空间（<em>latentspace</em>）是相当高维的（通常高达100维以上），相较于高维的文本嵌入隐空间，实际的文本图片对的数据量会显得很少，相对少量的文本嵌入在隐空间中会出现隐数据簇（<em>latentdatamanifold</em>）不连续（<em>discontinuity</em>）的问题。这种隐数据簇不连续问题会对生成模型的训练和学习带来很不利的影响，例如：会造成生成器模型对隐空间中的训练数据（数据量小）过拟合。</p><p>条件增强技术的方案是从独立高斯分布<spanclass="math inline">\(\mathcal{N}(\mu(\varphi_t),\Sigma(\varphi_t))​\)</span>中随机采样取得隐变量<spanclass="math inline">\(\hat{c}​\)</span>作为生成模型的条件输入。条件增强技术使得生成模型的输入不再只依赖有限的真实样本作为训练输入，而是通过建立独立高斯分布，取得无限多的生成模型条件输入来训练生成模型。这使得生成模型对样本扰动具备更好的鲁棒性（<em>robustness</em>）。为了保障在条件簇（<em>conditioningmanifold</em>）上的平滑度，且避免过拟合，为生成模型训练的目标函数中增加正则化项：<span class="math display">\[D_{KL}(\mathcal{N}(\mu(\varphi_t), \Sigma(\varphi_t)) || \mathcal{N}(0,I))\]</span></p><blockquote><p>Kullback-Leibler divergence (KL divergence)：</p><p>相对熵（relativeentropy），又称为KL散度，信息散度，信息增益。衡量两个概率分布之间的差异度。</p></blockquote><p>通过将该项作为正则化项，在训练生成模型时，梯度下降最小化生成模型目标函数（包含该正则化项），可以减小独立高斯分布<spanclass="math inline">\(\mathcal{N}(\mu(\varphi_t),\Sigma(\varphi_t))\)</span>与<span class="math inline">\(\mathcal{N}(0,I)​\)</span>的差异性。</p><p>本文使用了Inception score来计算评价矩阵（<em>evaluationmetrics</em>）来评价生成模型。 <span class="math display">\[I = \exp(\mathbb E_xD_{KL}(p(y|x)||p(y)))\]</span> Inception score基于KL散度，生成模型越好，则<spanclass="math inline">\(p(y|x)\)</span>和<spanclass="math inline">\(p(y)\)</span>之间的KL散度会更大。简单地来说，条件<spanclass="math inline">\(x​\)</span>输入到生成模型后，概率分布是有明显不同的。</p><h2 id="cyclegan">7 CycleGAN</h2><blockquote><p>Zhu J Y, Park T, Isola P, et al. Unpaired image-to-image translationusing cycle-consistent adversarial networks[C]//Proceedings of the IEEEinternational conference on computer vision. 2017: 2223-2232.</p></blockquote><p>CycleGAN由Jun-Yan Zhu等人于2017年发表于ICCV。</p><p>CycleGAN主要研究的是如何在<strong>没有成对样本</strong>的情况下，学习把图像从领域X转换到领域Y？（成对训练数据难以获得）</p><p>本文提出了循环一致性损失（<em>cycle consistencyloss</em>）来应对这种高度欠约束的映射学习。</p><p>思路是，在没有成对数据的情况下，通过学习两个图片集各自特征，实现相互转换。</p><p>初步思想：</p><ol type="1"><li>生成模型：<span class="math inline">\(G: X→Y​\)</span>，<spanclass="math inline">\(\hat y = G(x)​\)</span>，根据<spanclass="math inline">\(X​\)</span>中的样本生成类<spanclass="math inline">\(Y​\)</span>样本；</li><li>判别模型：判别<span class="math inline">\(\hat y\)</span>（或<spanclass="math inline">\(y\)</span>）是生成样本还是真实的<spanclass="math inline">\(Y\)</span>中样本。</li></ol><p>根据初步思想建立的对抗网络模型会遇到问题，因为<spanclass="math inline">\(G: X→Y\)</span>不意味着<spanclass="math inline">\(x→y\)</span>是有意义的对应关系。实际的实验中，会遭遇模式溃缩（<em>modecollapse</em>）难题——所有的输入图片都映射到了同一个输出图片。</p><p>为了应对mode collapse难题，作者提出模型必须是循环一致的（<em>cycleconsistent</em>）。<span class="math inline">\(G: X→Y\)</span>和<spanclass="math inline">\(F: Y→X\)</span>，<spanclass="math inline">\(G\)</span>和<spanclass="math inline">\(F\)</span>映射必须是逆序后一致的。例如：英语句子<spanclass="math inline">\(x\)</span>转换为法语句子<spanclass="math inline">\(y\)</span>，法语句子<spanclass="math inline">\(y\)</span>转换为英语后应该与原始英语句子<spanclass="math inline">\(x\)</span>尽可能一致。为了保证循环一致，本文提出了循环一致性损失：把循环一致性损失加入到对抗生成网络的损失中，争取<spanclass="math inline">\(F(G(x))≈x\)</span>和<spanclass="math inline">\(G(F(y))≈y​\)</span>的循环一致性。</p><p>循环一致性损失包含：</p><ol type="1"><li><p>正向（forward）循环一致性：从x到G(x)，再通过F(G(x))逆向变换回去须接近原始x。</p></li><li><p>反向（backward）循环一致性：从y到F(y)，再通过G(F(y))逆向变换回去须接近原始y。</p></li></ol><p><span class="math display">\[{\mathcal L}_{cyc}(G,F)={\mathbb E}_{x \simp_{data}(x)}[{\|F(G(x))-x\|}_{1}]+{\mathbb E}_{y \simp_{data}(y)}[{\|G(F(y))-y\|}_{1}]\]</span></p><p>循环一致性损失计入了正向一致性损失（从x开始变换）和反向一致性损失（从y开始变换）。损失通过计算L1范数距离取得。</p><p>完整的目标损失：计入<span class="math inline">\(X→Y\)</span>的<spanclass="math inline">\(G\)</span>和<spanclass="math inline">\(D_Y\)</span>损失、<spanclass="math inline">\(Y→X\)</span>的<spanclass="math inline">\(F\)</span>和<spanclass="math inline">\(D_X\)</span>损失以及<spanclass="math inline">\(X\)</span>与<spanclass="math inline">\(Y\)</span>互转的循环一致性损失。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Papers </tag>
            
            <tag> GAN </tag>
            
            <tag> Deep Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博弈论笔记</title>
      <link href="/posts/%E5%8D%9A%E5%BC%88%E8%AE%BA%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/%E5%8D%9A%E5%BC%88%E8%AE%BA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>图书馆借阅了张维迎的《博弈论与信息经济学》来系统性地入门博弈论，简单记些笔记。持续更新。</p><span id="more"></span><h1 id="博弈论笔记">博弈论笔记</h1><blockquote><p>注：</p><ol type="1"><li>实在不喜欢书中把<em>strategy</em>译为“战略”的说法，此处均称为“策略”。</li><li>更加不喜欢书中把<em>payoff</em>译为“支付”的说法，此处均称为“收益”</li></ol></blockquote><h2 id="导论">0 导论</h2><h3 id="经济学相关概念">0.1 经济学相关概念</h3><h4 id="经济学">0.1.1 经济学</h4><p>传统观点：经济学是研究稀缺资源的有效配置的。</p><p>现代观点：经济学是研究人的行为（<em>human behavior</em>）的。</p><h4 id="理性人">0.1.2 理性人</h4><p>经济学假定人是理性的。</p><p>理性人：理性人是指有一个很好定义的偏好，在面临给定的约束条件下最大化自己的偏好。</p><p>理性人的假设使得经济学得以运用数学工具描述人的行为。</p><p>注意，理性人与自私人不同。理性人可能是利己主义者，也可能是利他主义者。</p><h4 id="合作冲突与价格制度">0.1.3 合作、冲突与价格制度</h4><p>理性人在最大化偏好时，需要相互合作（<em>cooperation</em>），而合作中又存在着冲突（<em>conflict</em>）。</p><p>价格制度（或称市场制度）是人类为达到合作和解决冲突所发明的最重要的制度之一。</p><h4 id="新古典经济学">0.1.4 新古典经济学</h4><p>传统的新古典经济学（<em>neo-classiceconomics</em>）就是以价格制度为研究对象的，故又称价格理论。</p><p>新古典经济学的两个基本假定：</p><ol type="1"><li>市场参与者的数量足够多从而市场是竞争性的；</li><li>参与人之间不存在信息不对称问题。</li></ol><h4 id="博弈论与信息经济学">0.1.5 博弈论与信息经济学</h4><p>但这两个假设在现实中一般无法满足。</p><p>首先，现实中买卖双方人数有限，因此市场不可能是完全竞争的。在不完全竞争中，人们之间的行为是直接影响的，人在决策时必须考虑对方的反应，这就是博弈论要研究的问题。</p><p>其次，现实中市场参与者之间的信息一般是不对称的，卖家对产品质量的了解通常比买家多。当参与人之间存在信息不对称时，任何一种有效的制度安排必须满足“激励相容”（<em>incentivecompatible</em>）或“自选择”（<em>self-selection</em>）条件，这是信息经济学研究的问题。</p><h3 id="博弈论相关概念">0.2 博弈论相关概念</h3><h4 id="博弈论">0.2.1 博弈论</h4><p>博弈论（<em>gametheory</em>），是研究决策主体的行为发生直接相互作用的时候的决策以及这种决策的均衡问题的。</p><p>也就是说，当一个主体，好比说一个人或一个企业的选择受到其他人、其他企业选择的影响，而且反过来影响到其他人、其他企业选择时的决策问题和均衡问题。</p><table><colgroup><col style="width: 9%" /><col style="width: 46%" /><col style="width: 44%" /></colgroup><thead><tr class="header"><th style="text-align: center;"></th><th style="text-align: center;">传统微观经济学</th><th style="text-align: center;">博弈论</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">个人效用函数</td><tdstyle="text-align: center;">个人效用函数只依赖于他自己的选择，而不依赖其他人的选择。</td><tdstyle="text-align: center;">个人效用函数不仅依赖于他自己的选择，而且依赖于他人的选择。</td></tr><tr class="even"><td style="text-align: center;">理解</td><tdstyle="text-align: center;">给定价格参数和收入条件，最大化他的效用。对单个人而言，所有其他人的行为都被总结在了价格参数中。不直接面临其它决策主体。</td><td style="text-align: center;">个人的最优选择是其他人选择的函数。</td></tr></tbody></table><p>博弈论研究的是在相互外部经济条件下的个人选择问题。</p><h4 id="合作博弈与非合作博弈">0.2.2 合作博弈与非合作博弈</h4><p>博弈论可分为合作博弈（<em>cooperativegame</em>）和非合作博弈（<em>non-cooperative game</em>）。</p><p>通常说的博弈论一般指非合作博弈。</p><p>合作博弈与非合作博弈之间的区别主要在于人们的行为相互作用时，当事人能否达到一个具有约束力的协议，这就是说，有没有一个<em>bindingagreement</em>。如果有，就是合作协议；反之，则是非合作协议。</p><table><colgroup><col style="width: 6%" /><col style="width: 50%" /><col style="width: 42%" /></colgroup><thead><tr class="header"><th style="text-align: center;"></th><th style="text-align: center;">合作博弈</th><th style="text-align: center;">非合作博弈</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">约束协议</td><td style="text-align: center;">有</td><td style="text-align: center;">无</td></tr><tr class="even"><td style="text-align: center;">理性</td><td style="text-align: center;">团队理性（<em>collectiverationality</em>）</td><td style="text-align: center;">个人理性</td></tr><tr class="odd"><td style="text-align: center;">目标</td><tdstyle="text-align: center;">效率（<em>efficiency</em>）、公正（<em>fairness</em>）、公平（<em>equality</em>）</td><tdstyle="text-align: center;">个人最优决策，可能是有效率的，也可难可能是无效率的</td></tr></tbody></table><h4 id="静态博弈与动态博弈">0.2.3 静态博弈与动态博弈</h4><p>博弈论按参与人行动的先后顺序，可以分为静态博弈（<em>staticgame</em>）和动态博弈（<em>dynamic game</em>）。</p><p>静态博弈：博弈中参与人同时选择行动，或虽非同时但后行动者并不知道先行动者采取了什么具体行动；</p><p>动态博弈：参与人的行动有先后顺序，且后行动者能够观察到先行动者所选择的行动。</p><h4 id="完全信息博弈与非完全信息博弈">0.2.4完全信息博弈与非完全信息博弈</h4><p>博弈论按参与人对有关其他参与人的特征、策略空间及支付函数的知识，可以分为完全信息博弈和不完全信息博弈。</p><p>完全信息博弈指的是每一个参与人对其他参与人的特征、策略空间及支付函数有准确的知识；否则，就是不完全信息博弈。</p><h4 id="博弈论的分类">0.2.5 博弈论的分类</h4><table><colgroup><col style="width: 7%" /><col style="width: 46%" /><col style="width: 46%" /></colgroup><thead><tr class="header"><th style="text-align: center;"></th><th style="text-align: center;">静态博弈</th><th style="text-align: center;">动态博弈</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">完全信息</td><td style="text-align: center;">完全信息静态博弈；纳什均衡（<em>Nashequilibrium</em>）；代表人物：纳什（<em>1950, 1951</em>）</td><tdstyle="text-align: center;">完全信息动态博弈；子博弈精炼纳什均衡（<em>subgameperfect Nash equilibrium</em>）；代表人物：泽尔腾（<em>1965</em>）</td></tr><tr class="even"><td style="text-align: center;">不完全信息</td><tdstyle="text-align: center;">不完全信息静态博弈；贝叶斯纳什均衡（<em>BayesianNash equilibrium</em>）；代表人物：海萨尼（<em>1967-1968</em>）</td><tdstyle="text-align: center;">不完全信息动态博弈；精炼贝叶斯纳什均衡（<em>perfectBayesian Nashequilibrium</em>）；代表人物：泽尔腾（<em>1975</em>）、科瑞普斯和威尔逊（<em>1982</em>）、弗登博格和泰勒尔（<em>1991</em>）</td></tr></tbody></table><h4 id="博弈论基本概念">0.2.6 博弈论基本概念</h4><p>博弈论的基本概念包含：</p><ol type="1"><li>参与人（<em>player</em>）</li><li>行动（<em>action or move</em>）</li><li>信息（<em>information</em>）</li><li>策略（<em>strategy</em>）</li><li>收益（<em>payoff</em>）</li><li>结果（<em>outcome</em>）</li><li>均衡（<em>equilibrium</em>）</li></ol><h5 id="参与人player">0.2.6.1 参与人（<em>player</em>）</h5><p>参与人指的是一个博弈中的决策主体。</p><p>参与人的目的是通过选择行动（或策略）来最大化自己的收益（效用）水平。</p><p>参与人可以是自然人，也可以是团体。决定外生的随机变量的概率分布的机制称为“自然”（<em>nature</em>），作为“伪参与人”（<em>pseudo-player</em>）处理。<em>（此处pseudo译为“伪”，书本原文称为“虚拟”）。</em>例如，在房地产开发商之间的博弈中，开发商是博弈的参与人，而购房需求方则是伪参与人（或自然），通过决定市场需求来影响到博弈。</p><p>重要的是，每个参与人必须有可供选择的行动和一个很好定义的偏好函数。那些不作决策的被动主体只当作环境参数来处理。</p><p>一般地，用<span class="math inline">\(i=1, \cdots,n\)</span>代表参与人，<spanclass="math inline">\(N\)</span>代表“自然”。</p><h5 id="行动action-or-move">0.2.6.2 行动（<em>action or move</em>）</h5><p>行动是参与人在博弈中的某个时间点的决策变量。</p><p>一般地，用<span class="math inline">\(a_i\)</span>表示第<spanclass="math inline">\(i\)</span>个参与人的一个特定行动，<spanclass="math inline">\(A_i=\lbrace a_i \rbrace\)</span>表示包含可供<spanclass="math inline">\(i\)</span>选择的所有行动的行动集（<em>actionset</em>）。行动可以是离散的，也可以是连续的，例如：开发或不开发（<spanclass="math inline">\(A_i = \lbrace 开发, 不开发\rbrace\)</span>），产量<span class="math inline">\(q_i\)</span>（<spanclass="math inline">\(A_i = \lbrace q_i | q_i \ge 0, q_i \in R\rbrace\)</span>）。</p><p>在<span class="math inline">\(n\)</span>人博弈中，<spanclass="math inline">\(n\)</span>个参与人的行动的有序集<spanclass="math inline">\(a=(a_1, \cdots, a_i, \cdots,a_n)\)</span>称为“行动组合”（<em>action profile</em>），其中的第<spanclass="math inline">\(i\)</span>个元素<spanclass="math inline">\(a_i\)</span>是第<spanclass="math inline">\(i\)</span>个参与人的行动。</p><p>与行动相关的一个重要问题是行动顺序（<em>order ofplay</em>），行动顺序对于博弈的结果是非常重要的。静态博弈和动态博弈的区分就是基于行动的顺序作出的。</p><h5 id="信息information">0.2.6.3 信息（<em>information</em>）</h5><p><strong><em><span class="citation"data-cites="todo">@todo</span></em></strong></p><h5 id="策略strategy">0.2.6.4 策略（<em>strategy</em>）</h5><h5 id="收益payoff">0.2.6.5 收益（<em>payoff</em>）</h5><h5 id="结果outcome">0.2.6.6 结果（<em>outcome</em>）</h5><h5 id="均衡equilibrium">0.2.6.7 均衡（<em>equilibrium</em>）</h5><h2 id="完全信息静态博弈">1 完全信息静态博弈</h2><h2 id="完全信息动态博弈">2 完全信息动态博弈</h2><h2 id="不完全信息静态博弈">3 不完全信息静态博弈</h2><h2 id="不完全信息动态博弈">4 不完全信息动态博弈</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Game Theory </tag>
            
            <tag> Economy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mmdetection - 基于PyTorch的开源目标检测系统</title>
      <link href="/posts/mmdetection-%E5%9F%BA%E4%BA%8EPyTorch%E7%9A%84%E5%BC%80%E6%BA%90%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/"/>
      <url>/posts/mmdetection-%E5%9F%BA%E4%BA%8EPyTorch%E7%9A%84%E5%BC%80%E6%BA%90%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p><ahref="https://github.com/open-mmlab/mmdetection">mmdetection</a>是一款优秀的基于PyTorch的开源目标检测系统，由<ahref="http://mmlab.ie.cuhk.edu.hk/">香港中文大学多媒体实验室</a>开发，遵循Apache-2.0开源协议。由于该框架只有README文件说明，而没有文档，源代码注释也寥寥，因此为了理解该框架，我读了几天源代码，以下做一点整理记录。</p><span id="more"></span><h1 id="mmdetection---基于pytorch的开源目标检测系统">mmdetection -基于PyTorch的开源目标检测系统</h1><h2 id="开始">0 开始</h2><blockquote><p><ahref="https://github.com/open-mmlab/mmdetection">open-mmlab/mmdetection</a></p></blockquote><ul><li>mmdetection的GitHub主页</li></ul><blockquote><p><ahref="https://github.com/open-mmlab/mmdetection/blob/master/INSTALL.md">mmdetection/INSTALL.md</a></p></blockquote><ul><li>mmdetection的安装说明</li><li>mmdetection只支持Linux环境。经测试，在Windows10系统下即使解决了sh脚本执行问题，也会在编译环节遭遇错误。</li></ul><blockquote><p><a href="https://github.com/open-mmlab/mmcv">open-mmlab/mmcv</a></p></blockquote><ul><li>mmcv是mmdetection依赖的重要计算机视觉库</li></ul><h2 id="toolstrain.py训练解析">1<code>tools/train.py</code>训练解析</h2><h3 id="使用说明">1.1 使用说明</h3><h4 id="toolstrain.py训练">1.1.1 <code>tools/train.py</code>训练</h4><p>在GPU 3上训练一个backbone为ResNet-50的Cascade R-CNN模型：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CUDA_VISIBLE_DEVICES=3 python tools/train.py configs/xray_cascade_rcnn_r50_fpn_1x.py</span><br></pre></td></tr></table></figure><p>其它常用选项：</p><ul><li><code>--work_dir</code>是模型checkpoint文件的输出目录，可以在<code>configs/*.py</code>中配置；</li><li><code>--resume_from</code>是指定在某个checkpoint的基础上继续训练，可以在<code>configs/*.py</code>中配置；</li><li><code>--validate</code>是指是否在训练中建立checkpoint的时候对该checkpoint进行评估（evaluate）；</li><li><code>--gpus</code>是指使用的GPU<strong>数量</strong>，默认值为1颗；</li><li><code>--launcher</code>是指分布式训练的任务启动器（joblauncher），默认值为<code>none</code>表示不进行分布式训练；</li></ul><h4 id="toolsdist_train.sh分布式训练">1.1.2<code>tools/dist_train.sh</code>分布式训练</h4><p>也可以使用分布式训练，在单台或多台机器上进行分布式训练：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./tools/dist_train.sh &lt;CONFIG_FILE&gt; &lt;GPU_NUM&gt; [optional arguments]</span><br></pre></td></tr></table></figure><p>实质上<code>/tools/dist_train.sh</code>很简单，就是调用<code>tools/train.py</code>并配置<code>--launcher</code>选项为<code>pytorch</code>以便启动分布式训练。<code>/tools/dist_train.sh</code>脚本实现如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">PYTHON=<span class="variable">$&#123;PYTHON:-&quot;python&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$PYTHON</span> -m torch.distributed.launch --nproc_per_node=<span class="variable">$2</span> $(<span class="built_in">dirname</span> <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)/train.py <span class="variable">$1</span> --launcher pytorch <span class="variable">$&#123;@:3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="源代码参考">1.2 源代码参考</h3><p><code>tools/train.py</code>负责训练指定模型。源代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> mmcv <span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mmdet <span class="keyword">import</span> __version__</span><br><span class="line"><span class="keyword">from</span> mmdet.datasets <span class="keyword">import</span> get_dataset</span><br><span class="line"><span class="keyword">from</span> mmdet.apis <span class="keyword">import</span> (train_detector, init_dist, get_root_logger,</span><br><span class="line">                        set_random_seed)</span><br><span class="line"><span class="keyword">from</span> mmdet.models <span class="keyword">import</span> build_detector</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_args</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;Train a detector&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;config&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;train config file path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--work_dir&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;the dir to save logs and models&#x27;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;--resume_from&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;the checkpoint file to resume from&#x27;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;--validate&#x27;</span>,</span><br><span class="line">        action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&#x27;whether to evaluate the checkpoint during training&#x27;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;--gpus&#x27;</span>,</span><br><span class="line">        <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">        default=<span class="number">1</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&#x27;number of gpus to use &#x27;</span></span><br><span class="line">        <span class="string">&#x27;(only applicable to non-distributed training)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--seed&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="literal">None</span>, <span class="built_in">help</span>=<span class="string">&#x27;random seed&#x27;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;--launcher&#x27;</span>,</span><br><span class="line">        choices=[<span class="string">&#x27;none&#x27;</span>, <span class="string">&#x27;pytorch&#x27;</span>, <span class="string">&#x27;slurm&#x27;</span>, <span class="string">&#x27;mpi&#x27;</span>],</span><br><span class="line">        default=<span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&#x27;job launcher&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--local_rank&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    args = parse_args()</span><br><span class="line"></span><br><span class="line">    cfg = Config.fromfile(args.config)</span><br><span class="line">    <span class="comment"># set cudnn_benchmark</span></span><br><span class="line">    <span class="keyword">if</span> cfg.get(<span class="string">&#x27;cudnn_benchmark&#x27;</span>, <span class="literal">False</span>):</span><br><span class="line">        torch.backends.cudnn.benchmark = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># update configs according to CLI args</span></span><br><span class="line">    <span class="keyword">if</span> args.work_dir <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        cfg.work_dir = args.work_dir</span><br><span class="line">    <span class="keyword">if</span> args.resume_from <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        cfg.resume_from = args.resume_from</span><br><span class="line">    cfg.gpus = args.gpus</span><br><span class="line">    <span class="keyword">if</span> cfg.checkpoint_config <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># save mmdet version in checkpoints as meta data</span></span><br><span class="line">        cfg.checkpoint_config.meta = <span class="built_in">dict</span>(</span><br><span class="line">            mmdet_version=__version__, config=cfg.text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># init distributed env first, since logger depends on the dist info.</span></span><br><span class="line">    <span class="keyword">if</span> args.launcher == <span class="string">&#x27;none&#x27;</span>:</span><br><span class="line">        distributed = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        distributed = <span class="literal">True</span></span><br><span class="line">        init_dist(args.launcher, **cfg.dist_params)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># init logger before other steps</span></span><br><span class="line">    logger = get_root_logger(cfg.log_level)</span><br><span class="line">    logger.info(<span class="string">&#x27;Distributed training: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(distributed))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set random seeds</span></span><br><span class="line">    <span class="keyword">if</span> args.seed <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        logger.info(<span class="string">&#x27;Set random seed to &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(args.seed))</span><br><span class="line">        set_random_seed(args.seed)</span><br><span class="line"></span><br><span class="line">    model = build_detector(</span><br><span class="line">        cfg.model, train_cfg=cfg.train_cfg, test_cfg=cfg.test_cfg)</span><br><span class="line"></span><br><span class="line">    train_dataset = get_dataset(cfg.data.train)</span><br><span class="line">    train_detector(</span><br><span class="line">        model,</span><br><span class="line">        train_dataset,</span><br><span class="line">        cfg,</span><br><span class="line">        distributed=distributed,</span><br><span class="line">        validate=args.validate,</span><br><span class="line">        logger=logger)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="原理解析">1.3 原理解析</h3><h4 id="主要原理">1.3.1 主要原理</h4><p>本节对<code>tools/train.py</code>源代码执行的主要过程进行解释。对配置文件配置项和命令行参数的判断和设置略去。</p><p>首先，读取<code>config</code>文件（<code>configs\*.py</code>）并建立<code>mmcv.Config</code>对象以便后续解析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfg = Config.fromfile(args.config)</span><br></pre></td></tr></table></figure><p>随后，调用<code>mmdet.models.build_detector</code>方法，输入配置信息，以建立模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = build_detector(cfg.model, train_cfg=cfg.train_cfg, test_cfg=cfg.test_cfg)</span><br></pre></td></tr></table></figure><p>随后，调用<code>mmdet.datasets.get_dataset</code>方法，根据配置文件中写的训练集信息，建立训练集的数据集对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_dataset = get_dataset(cfg.data.train)</span><br></pre></td></tr></table></figure><p>最后，调用<code>mmdet.apis.train_detector</code>方法，输入已经构建好的模型<code>model</code>、训练集<code>train_dataset</code>、配置<code>config</code>对象以及其它参数，在训练集上训练该模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">train_detector(</span><br><span class="line">        model,</span><br><span class="line">        train_dataset,</span><br><span class="line">        cfg,</span><br><span class="line">        distributed=distributed,</span><br><span class="line">        validate=args.validate,</span><br><span class="line">        logger=logger)</span><br></pre></td></tr></table></figure><p>如果使用是分布式训练，且设置了<code>--validate</code>，会在训练中建立checkpoint的时候对该checkpoint进行评估。（未采用分布式训练时，<code>--validate</code>无效，因为<code>train_detector</code>中调用的<code>mmdet.apis._non_dist_train</code>函数未对<code>validate</code>参数做任何处理）。详情见以下1.3.2节。</p><h4 id="mmdet.api.train解析">1.3.2 <code>mmdet.api.train</code>解析</h4><p><code>mmdet.apis.train.py</code>源代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> mmcv.runner <span class="keyword">import</span> Runner, DistSamplerSeedHook</span><br><span class="line"><span class="keyword">from</span> mmcv.parallel <span class="keyword">import</span> MMDataParallel, MMDistributedDataParallel</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mmdet.core <span class="keyword">import</span> (DistOptimizerHook, DistEvalmAPHook,</span><br><span class="line">                        CocoDistEvalRecallHook, CocoDistEvalmAPHook)</span><br><span class="line"><span class="keyword">from</span> mmdet.datasets <span class="keyword">import</span> build_dataloader</span><br><span class="line"><span class="keyword">from</span> mmdet.models <span class="keyword">import</span> RPN</span><br><span class="line"><span class="keyword">from</span> .env <span class="keyword">import</span> get_root_logger</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_losses</span>(<span class="params">losses</span>):</span><br><span class="line">    log_vars = OrderedDict()</span><br><span class="line">    <span class="keyword">for</span> loss_name, loss_value <span class="keyword">in</span> losses.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(loss_value, torch.Tensor):</span><br><span class="line">            log_vars[loss_name] = loss_value.mean()</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(loss_value, <span class="built_in">list</span>):</span><br><span class="line">            log_vars[loss_name] = <span class="built_in">sum</span>(_loss.mean() <span class="keyword">for</span> _loss <span class="keyword">in</span> loss_value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(</span><br><span class="line">                <span class="string">&#x27;&#123;&#125; is not a tensor or list of tensors&#x27;</span>.<span class="built_in">format</span>(loss_name))</span><br><span class="line"></span><br><span class="line">    loss = <span class="built_in">sum</span>(_value <span class="keyword">for</span> _key, _value <span class="keyword">in</span> log_vars.items() <span class="keyword">if</span> <span class="string">&#x27;loss&#x27;</span> <span class="keyword">in</span> _key)</span><br><span class="line"></span><br><span class="line">    log_vars[<span class="string">&#x27;loss&#x27;</span>] = loss</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> log_vars:</span><br><span class="line">        log_vars[name] = log_vars[name].item()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loss, log_vars</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">batch_processor</span>(<span class="params">model, data, train_mode</span>):</span><br><span class="line">    losses = model(**data)</span><br><span class="line">    loss, log_vars = parse_losses(losses)</span><br><span class="line"></span><br><span class="line">    outputs = <span class="built_in">dict</span>(</span><br><span class="line">        loss=loss, log_vars=log_vars, num_samples=<span class="built_in">len</span>(data[<span class="string">&#x27;img&#x27;</span>].data))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_detector</span>(<span class="params">model,</span></span><br><span class="line"><span class="params">                   dataset,</span></span><br><span class="line"><span class="params">                   cfg,</span></span><br><span class="line"><span class="params">                   distributed=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">                   validate=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">                   logger=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> logger <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        logger = get_root_logger(cfg.log_level)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># start training</span></span><br><span class="line">    <span class="keyword">if</span> distributed:</span><br><span class="line">        _dist_train(model, dataset, cfg, validate=validate)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        _non_dist_train(model, dataset, cfg, validate=validate)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_dist_train</span>(<span class="params">model, dataset, cfg, validate=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="comment"># prepare data loaders</span></span><br><span class="line">    data_loaders = [</span><br><span class="line">        build_dataloader(</span><br><span class="line">            dataset,</span><br><span class="line">            cfg.data.imgs_per_gpu,</span><br><span class="line">            cfg.data.workers_per_gpu,</span><br><span class="line">            dist=<span class="literal">True</span>)</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># put model on gpus</span></span><br><span class="line">    model = MMDistributedDataParallel(model.cuda())</span><br><span class="line">    <span class="comment"># build runner</span></span><br><span class="line">    runner = Runner(model, batch_processor, cfg.optimizer, cfg.work_dir,</span><br><span class="line">                    cfg.log_level)</span><br><span class="line">    <span class="comment"># register hooks</span></span><br><span class="line">    optimizer_config = DistOptimizerHook(**cfg.optimizer_config)</span><br><span class="line">    runner.register_training_hooks(cfg.lr_config, optimizer_config,</span><br><span class="line">                                   cfg.checkpoint_config, cfg.log_config)</span><br><span class="line">    runner.register_hook(DistSamplerSeedHook())</span><br><span class="line">    <span class="comment"># register eval hooks</span></span><br><span class="line">    <span class="keyword">if</span> validate:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(model.module, RPN):</span><br><span class="line">            <span class="comment"># <span class="doctag">TODO:</span> implement recall hooks for other datasets</span></span><br><span class="line">            runner.register_hook(CocoDistEvalRecallHook(cfg.data.val))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> cfg.data.val.<span class="built_in">type</span> == <span class="string">&#x27;CocoDataset&#x27;</span>:</span><br><span class="line">                runner.register_hook(CocoDistEvalmAPHook(cfg.data.val))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                runner.register_hook(DistEvalmAPHook(cfg.data.val))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cfg.resume_from:</span><br><span class="line">        runner.resume(cfg.resume_from)</span><br><span class="line">    <span class="keyword">elif</span> cfg.load_from:</span><br><span class="line">        runner.load_checkpoint(cfg.load_from)</span><br><span class="line">    runner.run(data_loaders, cfg.workflow, cfg.total_epochs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_non_dist_train</span>(<span class="params">model, dataset, cfg, validate=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="comment"># prepare data loaders</span></span><br><span class="line">    data_loaders = [</span><br><span class="line">        build_dataloader(</span><br><span class="line">            dataset,</span><br><span class="line">            cfg.data.imgs_per_gpu,</span><br><span class="line">            cfg.data.workers_per_gpu,</span><br><span class="line">            cfg.gpus,</span><br><span class="line">            dist=<span class="literal">False</span>)</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># put model on gpus</span></span><br><span class="line">    model = MMDataParallel(model, device_ids=<span class="built_in">range</span>(cfg.gpus)).cuda()</span><br><span class="line">    <span class="comment"># build runner</span></span><br><span class="line">    runner = Runner(model, batch_processor, cfg.optimizer, cfg.work_dir,</span><br><span class="line">                    cfg.log_level)</span><br><span class="line">    runner.register_training_hooks(cfg.lr_config, cfg.optimizer_config,</span><br><span class="line">                                   cfg.checkpoint_config, cfg.log_config)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cfg.resume_from:</span><br><span class="line">        runner.resume(cfg.resume_from)</span><br><span class="line">    <span class="keyword">elif</span> cfg.load_from:</span><br><span class="line">        runner.load_checkpoint(cfg.load_from)</span><br><span class="line">    runner.run(data_loaders, cfg.workflow, cfg.total_epochs)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>train_detector</code>方法非常简短，通过是否分布式训练作为分支判断，分别调用：</p><ul><li><code>_dist_train</code>方法</li><li><code>_non_dist_train</code>方法</li></ul><p>均在同文件中实现。</p><h2 id="toolstest.py测试解析">2 <code>tools/test.py</code>测试解析</h2><p><code>tools/test.py</code>负责对训练好的模型进行测试评估。</p><h3 id="使用说明-1">2.1 使用说明</h3><h4 id="输出到文件">2.1.1 输出到文件</h4><p>在数据集上对训练好的模型进行测试，把模型的输出保存到文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tools/test.py &lt;CONFIG_FILE&gt; &lt;CHECKPOINT_FILE&gt; --gpus &lt;GPU_NUM&gt; --out &lt;OUT_FILE&gt;</span><br></pre></td></tr></table></figure><h4 id="评估bbox等预测指标">2.1.2 评估<code>bbox</code>等预测指标</h4><p>使用8颗GPU对训练好的MaskR-CNN模型进行测试，把模型输出保存到<code>results.pkl</code>并评估bbox和segm的测试结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tools/test.py configs/mask_rcnn_r50_fpn_1x.py &lt;CHECKPOINT_FILE&gt; --gpus 8 --out results.pkl --<span class="built_in">eval</span> bbox segm</span><br></pre></td></tr></table></figure><p>我训练了一个简单的backbone为ResNet-50的CascadeR-CNN模型，并使用以下命令进行测试评价：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CUDA_VISIBLE_DEVICES=0 python tools/test.py configs/xray_cascade_rcnn_r50_fpn_1x.py work_dirs/xray/cascade_rcnn_r50_fpn_1x/latest.pth --out xray.pkl --<span class="built_in">eval</span> bbox</span><br></pre></td></tr></table></figure><p>显示结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">(mmdetection) sjy@cjx:~/mmdetection$ CUDA_VISIBLE_DEVICES=0 python tools/test.py configs/xray_cascade_rcnn_r50_fpn_1x.py work_dirs/xray/cascade_rcnn_r50_fpn_1x/latest.pth --out xray.pkl --<span class="built_in">eval</span> bbox</span><br><span class="line">loading annotations into memory...</span><br><span class="line">Done (t=0.02s)</span><br><span class="line">creating index...</span><br><span class="line">index created!</span><br><span class="line">&#123;1: 1, 2: 2, 3: 3, 4: 4, 5: 5&#125;</span><br><span class="line">[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;] 178/178, 6.9 task/s, elapsed: 26s, ETA:     0swriting results to xray.pkl</span><br><span class="line">Starting evaluate bbox</span><br><span class="line">Loading and preparing results...</span><br><span class="line">DONE (t=0.06s)</span><br><span class="line">creating index...</span><br><span class="line">index created!</span><br><span class="line">Running per image evaluation...</span><br><span class="line">Evaluate annotation <span class="built_in">type</span> *bbox*</span><br><span class="line">DONE (t=0.53s).</span><br><span class="line">Accumulating evaluation results...</span><br><span class="line">DONE (t=0.08s).</span><br><span class="line"> Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.546</span><br><span class="line"> Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=100 ] = 0.843</span><br><span class="line"> Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=100 ] = 0.589</span><br><span class="line"> Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.605</span><br><span class="line"> Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000</span><br><span class="line"> Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = -1.000</span><br><span class="line"> Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=  1 ] = 0.350</span><br><span class="line"> Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets= 10 ] = 0.607</span><br><span class="line"> Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.614</span><br><span class="line"> Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = 0.614</span><br><span class="line"> Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000</span><br><span class="line"> Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = -1.000</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此处的格式化输出称为检测评价矩阵（<em>detection evaluationmetrics</em>）。</p><p>在底层实现上是在<code>mmdet.core.evaluation.coco_utils.py</code>中，<code>coco_eval</code>方法通过调用微软的COCOAPI中的<code>pycocotools</code>包实现的。</p><p>以下节选<code>mmdet.core.evaluation.coco_utils.py</code>中<code>coco_eval</code>方法的实现代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pycocotools.coco <span class="keyword">import</span> COCO</span><br><span class="line"><span class="keyword">from</span> pycocotools.cocoeval <span class="keyword">import</span> COCOeval</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .recall <span class="keyword">import</span> eval_recalls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coco_eval</span>(<span class="params">result_file, result_types, coco, max_dets=(<span class="params"><span class="number">100</span>, <span class="number">300</span>, <span class="number">1000</span></span>)</span>):</span><br><span class="line">    <span class="keyword">for</span> res_type <span class="keyword">in</span> result_types:</span><br><span class="line">        <span class="keyword">assert</span> res_type <span class="keyword">in</span> [</span><br><span class="line">            <span class="string">&#x27;proposal&#x27;</span>, <span class="string">&#x27;proposal_fast&#x27;</span>, <span class="string">&#x27;bbox&#x27;</span>, <span class="string">&#x27;segm&#x27;</span>, <span class="string">&#x27;keypoints&#x27;</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> mmcv.is_str(coco):</span><br><span class="line">        coco = COCO(coco)</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">isinstance</span>(coco, COCO)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result_types == [<span class="string">&#x27;proposal_fast&#x27;</span>]:</span><br><span class="line">        ar = fast_eval_recall(result_file, coco, np.array(max_dets))</span><br><span class="line">        <span class="keyword">for</span> i, num <span class="keyword">in</span> <span class="built_in">enumerate</span>(max_dets):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;AR@&#123;&#125;\t= &#123;:.4f&#125;&#x27;</span>.<span class="built_in">format</span>(num, ar[i]))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> result_file.endswith(<span class="string">&#x27;.json&#x27;</span>)</span><br><span class="line">    coco_dets = coco.loadRes(result_file)</span><br><span class="line"></span><br><span class="line">    img_ids = coco.getImgIds()</span><br><span class="line">    <span class="keyword">for</span> res_type <span class="keyword">in</span> result_types:</span><br><span class="line">        iou_type = <span class="string">&#x27;bbox&#x27;</span> <span class="keyword">if</span> res_type == <span class="string">&#x27;proposal&#x27;</span> <span class="keyword">else</span> res_type</span><br><span class="line">        cocoEval = COCOeval(coco, coco_dets, iou_type)</span><br><span class="line">        cocoEval.params.imgIds = img_ids</span><br><span class="line">        <span class="keyword">if</span> res_type == <span class="string">&#x27;proposal&#x27;</span>:</span><br><span class="line">            cocoEval.params.useCats = <span class="number">0</span></span><br><span class="line">            cocoEval.params.maxDets = <span class="built_in">list</span>(max_dets)</span><br><span class="line">        cocoEval.evaluate()</span><br><span class="line">        cocoEval.accumulate()</span><br><span class="line">        cocoEval.summarize()</span><br></pre></td></tr></table></figure><ul><li>通过构造COCOeval对象，配置参数，并依次调用<code>evaluate</code>、<code>accumulate</code>、<code>summarize</code>方法实现对数据集的测试评价。</li></ul><p>此处摘录COCO数据集文档中对该评价矩阵的简要说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Average Precision (AP):</span><br><span class="line">AP% AP at IoU=.50:.05:.95 (primary challenge metric) </span><br><span class="line">APIoU=.50% AP at IoU=.50 (PASCAL VOC metric) </span><br><span class="line">APIoU=.75% AP at IoU=.75 (strict metric)</span><br><span class="line">AP Across Scales:</span><br><span class="line">APsmall% AP for small objects: area &lt; 322 </span><br><span class="line">APmedium% AP for medium objects: 322 &lt; area &lt; 962 </span><br><span class="line">APlarge% AP for large objects: area &gt; 962</span><br><span class="line">Average Recall (AR):</span><br><span class="line">ARmax=1% AR given 1 detection per image </span><br><span class="line">ARmax=10% AR given 10 detections per image </span><br><span class="line">ARmax=100% AR given 100 detections per image</span><br><span class="line">AR Across Scales:</span><br><span class="line">ARsmall% AR for small objects: area &lt; 322 </span><br><span class="line">ARmedium% AR for medium objects: 322 &lt; area &lt; 962 </span><br><span class="line">ARlarge% AR for large objects: area &gt; 962</span><br></pre></td></tr></table></figure><p>对该矩阵的详细说明可参阅官方文档：</p><blockquote><p><a href="http://cocodataset.org/#detection-eval">COCO DetectionEvaluation</a></p></blockquote><h4 id="可视化预测结果">2.1.3 可视化预测结果</h4><p>如果支持XServer，可以显示图形界面，则可以通过<code>--show</code>选项对测试图片进行显示输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python tools/test.py &lt;CONFIG_FILE&gt; &lt;CHECKPOINT_FILE&gt; --show</span><br></pre></td></tr></table></figure><p>可以通过安装MobaXterm在Windows上SSH连接Linux服务器并实现XServer的远程图形显示功能。</p><blockquote><p><a href="https://mobaxterm.mobatek.net">MobaXterm</a></p><p>Enhanced terminal for Windows with X11 server, tabbed SSH client,network tools and much more</p></blockquote><h3 id="源代码参考-1">2.2 源代码参考</h3><p><code>tools/test.py</code>源代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> mmcv</span><br><span class="line"><span class="keyword">from</span> mmcv.runner <span class="keyword">import</span> load_checkpoint, parallel_test, obj_from_dict</span><br><span class="line"><span class="keyword">from</span> mmcv.parallel <span class="keyword">import</span> scatter, collate, MMDataParallel</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mmdet <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> mmdet.core <span class="keyword">import</span> results2json, coco_eval</span><br><span class="line"><span class="keyword">from</span> mmdet.datasets <span class="keyword">import</span> build_dataloader</span><br><span class="line"><span class="keyword">from</span> mmdet.models <span class="keyword">import</span> build_detector, detectors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">single_test</span>(<span class="params">model, data_loader, show=<span class="literal">False</span></span>):</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    results = []</span><br><span class="line">    dataset = data_loader.dataset</span><br><span class="line">    prog_bar = mmcv.ProgressBar(<span class="built_in">len</span>(dataset))</span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_loader):</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            result = model(return_loss=<span class="literal">False</span>, rescale=<span class="keyword">not</span> show, **data)</span><br><span class="line">        results.append(result)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> show:</span><br><span class="line">            model.module.show_result(data, result, dataset.img_norm_cfg,</span><br><span class="line">                                     dataset=dataset.CLASSES)</span><br><span class="line"></span><br><span class="line">        batch_size = data[<span class="string">&#x27;img&#x27;</span>][<span class="number">0</span>].size(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(batch_size):</span><br><span class="line">            prog_bar.update()</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_data_func</span>(<span class="params">data, device_id</span>):</span><br><span class="line">    data = scatter(collate([data], samples_per_gpu=<span class="number">1</span>), [device_id])[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(return_loss=<span class="literal">False</span>, rescale=<span class="literal">True</span>, **data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_args</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;MMDet test detector&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;config&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;test config file path&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;checkpoint&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;checkpoint file&#x27;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;--gpus&#x27;</span>, default=<span class="number">1</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, <span class="built_in">help</span>=<span class="string">&#x27;GPU number used for testing&#x27;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;--proc_per_gpu&#x27;</span>,</span><br><span class="line">        default=<span class="number">1</span>,</span><br><span class="line">        <span class="built_in">type</span>=<span class="built_in">int</span>,</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&#x27;Number of processes per GPU&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--out&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;output result file&#x27;</span>)</span><br><span class="line">    parser.add_argument(</span><br><span class="line">        <span class="string">&#x27;--eval&#x27;</span>,</span><br><span class="line">        <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">        nargs=<span class="string">&#x27;+&#x27;</span>,</span><br><span class="line">        choices=[<span class="string">&#x27;proposal&#x27;</span>, <span class="string">&#x27;proposal_fast&#x27;</span>, <span class="string">&#x27;bbox&#x27;</span>, <span class="string">&#x27;segm&#x27;</span>, <span class="string">&#x27;keypoints&#x27;</span>],</span><br><span class="line">        <span class="built_in">help</span>=<span class="string">&#x27;eval types&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--show&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;show results&#x27;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    args = parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.out <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> args.out.endswith((<span class="string">&#x27;.pkl&#x27;</span>, <span class="string">&#x27;.pickle&#x27;</span>)):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&#x27;The output file must be a pkl file.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    cfg = mmcv.Config.fromfile(args.config)</span><br><span class="line">    <span class="comment"># set cudnn_benchmark</span></span><br><span class="line">    <span class="keyword">if</span> cfg.get(<span class="string">&#x27;cudnn_benchmark&#x27;</span>, <span class="literal">False</span>):</span><br><span class="line">        torch.backends.cudnn.benchmark = <span class="literal">True</span></span><br><span class="line">    cfg.model.pretrained = <span class="literal">None</span></span><br><span class="line">    cfg.data.test.test_mode = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    dataset = obj_from_dict(cfg.data.test, datasets, <span class="built_in">dict</span>(test_mode=<span class="literal">True</span>))</span><br><span class="line">    <span class="keyword">if</span> args.gpus == <span class="number">1</span>:</span><br><span class="line">        model = build_detector(</span><br><span class="line">            cfg.model, train_cfg=<span class="literal">None</span>, test_cfg=cfg.test_cfg)</span><br><span class="line">        load_checkpoint(model, args.checkpoint)</span><br><span class="line">        model = MMDataParallel(model, device_ids=[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        data_loader = build_dataloader(</span><br><span class="line">            dataset,</span><br><span class="line">            imgs_per_gpu=<span class="number">1</span>,</span><br><span class="line">            workers_per_gpu=cfg.data.workers_per_gpu,</span><br><span class="line">            num_gpus=<span class="number">1</span>,</span><br><span class="line">            dist=<span class="literal">False</span>,</span><br><span class="line">            shuffle=<span class="literal">False</span>)</span><br><span class="line">        outputs = single_test(model, data_loader, args.show)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        model_args = cfg.model.copy()</span><br><span class="line">        model_args.update(train_cfg=<span class="literal">None</span>, test_cfg=cfg.test_cfg)</span><br><span class="line">        model_type = <span class="built_in">getattr</span>(detectors, model_args.pop(<span class="string">&#x27;type&#x27;</span>))</span><br><span class="line">        outputs = parallel_test(</span><br><span class="line">            model_type,</span><br><span class="line">            model_args,</span><br><span class="line">            args.checkpoint,</span><br><span class="line">            dataset,</span><br><span class="line">            _data_func,</span><br><span class="line">            <span class="built_in">range</span>(args.gpus),</span><br><span class="line">            workers_per_gpu=args.proc_per_gpu)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.out:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;writing results to &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(args.out))</span><br><span class="line">        mmcv.dump(outputs, args.out)</span><br><span class="line">        eval_types = args.<span class="built_in">eval</span></span><br><span class="line">        <span class="keyword">if</span> eval_types:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Starting evaluate &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27; and &#x27;</span>.join(eval_types)))</span><br><span class="line">            <span class="keyword">if</span> eval_types == [<span class="string">&#x27;proposal_fast&#x27;</span>]:</span><br><span class="line">                result_file = args.out</span><br><span class="line">                coco_eval(result_file, eval_types, dataset.coco)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(outputs[<span class="number">0</span>], <span class="built_in">dict</span>):</span><br><span class="line">                    result_file = args.out + <span class="string">&#x27;.json&#x27;</span></span><br><span class="line">                    results2json(dataset, outputs, result_file)</span><br><span class="line">                    coco_eval(result_file, eval_types, dataset.coco)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">for</span> name <span class="keyword">in</span> outputs[<span class="number">0</span>]:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">&#x27;\nEvaluating &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">                        outputs_ = [out[name] <span class="keyword">for</span> out <span class="keyword">in</span> outputs]</span><br><span class="line">                        result_file = args.out + <span class="string">&#x27;.&#123;&#125;.json&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line">                        results2json(dataset, outputs_, result_file)</span><br><span class="line">                        coco_eval(result_file, eval_types, dataset.coco)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="原理解析-1">2.3 原理解析</h3><h4 id="主要原理-1">2.3.1 主要原理</h4><p>首先，读取配置文件，构造<code>Config</code>类对象<code>cfg</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfg = mmcv.Config.fromfile(args.config)</span><br></pre></td></tr></table></figure><p>随后，通过<code>mmcv.runner.obj_from_dict</code>方法读取配置文件中关于测试集的配置，构建数据集对象<code>dataset</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataset = obj_from_dict(cfg.data.test, datasets, <span class="built_in">dict</span>(test_mode=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p>随后，以单颗GPU的情况（<code>args.gpus == 1</code>）为例，将通过<code>mmdet.models.build_detector</code>方法，读取模型配置，设置训练配置为<code>None</code>，并传入测试配置，构造待测试模型<code>model</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = build_detector(cfg.model, train_cfg=<span class="literal">None</span>, test_cfg=cfg.test_cfg)</span><br></pre></td></tr></table></figure><p>随后，通过<code>mmcv.runner.load_checkpoint</code>方法，读取模型训练取得的checkpoint以配置模型中的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load_checkpoint(model, args.checkpoint)</span><br></pre></td></tr></table></figure><p>随后，通过<code>mmcv.parallel.MMDataParallel</code>方法，在设备上构建非分布式计算的模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = MMDataParallel(model, device_ids=[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><blockquote><p>mmdetection implements distributed training and non-distributedtraining, which uses <code>MMDistributedDataParallel</code> and<code>MMDataParallel</code> respectively.</p><p>(README.md)</p></blockquote><p>随后，通过<code>mmdet.datasets.build_dataloader</code>方法，根据数据集对象<code>dataset</code>构造数据加载器对象<code>data_loader</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data_loader = build_dataloader(</span><br><span class="line">            dataset,</span><br><span class="line">            imgs_per_gpu=<span class="number">1</span>,</span><br><span class="line">            workers_per_gpu=cfg.data.workers_per_gpu,</span><br><span class="line">            num_gpus=<span class="number">1</span>,</span><br><span class="line">            dist=<span class="literal">False</span>,</span><br><span class="line">            shuffle=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>最后，通过调用同文件中定义的<code>single_test</code>方法，输入模型对象<code>model</code>、数据加载器<code>data_loader</code>等配置实现单GPU设备上对模型的测试输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">outputs = single_test(model, data_loader, args.show)</span><br></pre></td></tr></table></figure><h4 id="single_test单设备测试">2.3.2<code>single_test</code>单设备测试</h4><p>在该<code>single_test</code>方法中，实际通过以下的几个主要步骤对模型进行测试输出。</p><p>首先，通过<code>torch.nn.Module.eval</code>方法，将该模型设置进入评价模式（<em>evaluationmode</em>）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.<span class="built_in">eval</span>()</span><br></pre></td></tr></table></figure><p>随后，通过遍历数据加载器<code>data_loader</code>读取数据，按照PyTorch的标准流程，取消梯度计算，输入数据运行模型，并取得模型输出（同时处理好XServer中图片目标检测结果可视化和Shell中进度条刷新事宜）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(data_loader):</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        result = model(return_loss=<span class="literal">False</span>, rescale=<span class="keyword">not</span> show, **data)</span><br><span class="line">    results.append(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> show:</span><br><span class="line">        model.module.show_result(data, result, dataset.img_norm_cfg,</span><br><span class="line">                                    dataset=dataset.CLASSES)</span><br><span class="line"></span><br><span class="line">    batch_size = data[<span class="string">&#x27;img&#x27;</span>][<span class="number">0</span>].size(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(batch_size):</span><br><span class="line">        prog_bar.update()</span><br></pre></td></tr></table></figure><h2 id="models模型实现解析">3 <code>models</code>模型实现解析</h2><blockquote><p>以下内容摘选自：<ahref="https://github.com/open-mmlab/mmdetection/blob/master/TECHNICAL_DETAILS.md">mmdetection/ <strong>TECHNICAL_DETAILS.md</strong></a></p><p><strong>Model</strong></p><p>In mmdetection, model components are basically categorized as 4types.</p><ul><li>backbone: usually a FCN network to extract feature maps, e.g.,ResNet.</li><li>neck: the part between backbones and heads, e.g., FPN, ASPP.</li><li>head: the part for specific tasks, e.g., bbox prediction and maskprediction.</li><li>roi extractor: the part for extracting features from feature maps,e.g., RoI Align.</li></ul><p>We also write implement some general detection pipelines with theabove components, such as <code>SingleStageDetector</code> and<code>TwoStageDetector</code>.</p></blockquote><p>在mmdetection中，模型基本上分为四个部分，形象地称为：</p><ul><li>骨干（<em>backbone</em>）：通常通过全连接网络来提取特征映射图，例如：ResNet。</li><li>脖颈（<em>neck</em>）：连接骨干和头的部分，例如：FPN、ASPP。</li><li>头（<em>head</em>）：用于特定任务，例如：候选框的预测、掩膜的预测。</li><li>兴趣区域提取器（<em>RoIextractor</em>）：该部分组件用于在特征映射图上提取特征，例如：RoIAlign。</li></ul><p>在官方的技术细节说明中，我们可以从<code>SingleStageDetector</code>和<code>TwoStageDetector</code>这两个类的实现中来阅读代码理解mmdetection框架中，基本目标检测模型的实现原理。</p><p><code>SingleStageDetector</code>和<code>TwoStageDetector</code>均位于<code>mmdet.models.detectors</code>中，分别在<code>single_stage.py</code>和<code>two_stage.py</code>中实现。</p><h3 id="single_stage.py解析">3.1 <code>single_stage.py</code>解析</h3><h4 id="源代码参考-2">3.1.1 源代码参考</h4><p><code>mmdet/models/detectors/single_stage.py</code>实现了一个通用的基础单Stage目标检测模型，源代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .base <span class="keyword">import</span> BaseDetector</span><br><span class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> builder</span><br><span class="line"><span class="keyword">from</span> ..registry <span class="keyword">import</span> DETECTORS</span><br><span class="line"><span class="keyword">from</span> mmdet.core <span class="keyword">import</span> bbox2result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@DETECTORS.register_module</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleStageDetector</span>(<span class="title class_ inherited__">BaseDetector</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                 backbone,</span></span><br><span class="line"><span class="params">                 neck=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 bbox_head=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 train_cfg=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 test_cfg=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 pretrained=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(SingleStageDetector, self).__init__()</span><br><span class="line">        self.backbone = builder.build_backbone(backbone)</span><br><span class="line">        <span class="keyword">if</span> neck <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.neck = builder.build_neck(neck)</span><br><span class="line">        self.bbox_head = builder.build_head(bbox_head)</span><br><span class="line">        self.train_cfg = train_cfg</span><br><span class="line">        self.test_cfg = test_cfg</span><br><span class="line">        self.init_weights(pretrained=pretrained)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_weights</span>(<span class="params">self, pretrained=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(SingleStageDetector, self).init_weights(pretrained)</span><br><span class="line">        self.backbone.init_weights(pretrained=pretrained)</span><br><span class="line">        <span class="keyword">if</span> self.with_neck:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(self.neck, nn.Sequential):</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> self.neck:</span><br><span class="line">                    m.init_weights()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.neck.init_weights()</span><br><span class="line">        self.bbox_head.init_weights()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_feat</span>(<span class="params">self, img</span>):</span><br><span class="line">        x = self.backbone(img)</span><br><span class="line">        <span class="keyword">if</span> self.with_neck:</span><br><span class="line">            x = self.neck(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward_train</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                      img,</span></span><br><span class="line"><span class="params">                      img_metas,</span></span><br><span class="line"><span class="params">                      gt_bboxes,</span></span><br><span class="line"><span class="params">                      gt_labels,</span></span><br><span class="line"><span class="params">                      gt_bboxes_ignore=<span class="literal">None</span></span>):</span><br><span class="line">        x = self.extract_feat(img)</span><br><span class="line">        outs = self.bbox_head(x)</span><br><span class="line">        loss_inputs = outs + (gt_bboxes, gt_labels, img_metas, self.train_cfg)</span><br><span class="line">        losses = self.bbox_head.loss(</span><br><span class="line">            *loss_inputs, gt_bboxes_ignore=gt_bboxes_ignore)</span><br><span class="line">        <span class="keyword">return</span> losses</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">simple_test</span>(<span class="params">self, img, img_meta, rescale=<span class="literal">False</span></span>):</span><br><span class="line">        x = self.extract_feat(img)</span><br><span class="line">        outs = self.bbox_head(x)</span><br><span class="line">        bbox_inputs = outs + (img_meta, self.test_cfg, rescale)</span><br><span class="line">        bbox_list = self.bbox_head.get_bboxes(*bbox_inputs)</span><br><span class="line">        bbox_results = [</span><br><span class="line">            bbox2result(det_bboxes, det_labels, self.bbox_head.num_classes)</span><br><span class="line">            <span class="keyword">for</span> det_bboxes, det_labels <span class="keyword">in</span> bbox_list</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">return</span> bbox_results[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">aug_test</span>(<span class="params">self, imgs, img_metas, rescale=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="原理解析-2">3.1.2 原理解析</h4><p>可以看到，对于<code>SingleStageDetector</code>通过继承基础类<code>BaseDetector</code>来实现单Stage的目标检测模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DETECTORS.register_module</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleStageDetector</span>(<span class="title class_ inherited__">BaseDetector</span>):</span><br></pre></td></tr></table></figure><p>函数<code>__init__</code>定义模型的数据结构和数据初始化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">             backbone,</span></span><br><span class="line"><span class="params">             neck=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">             bbox_head=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">             train_cfg=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">             test_cfg=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">             pretrained=<span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure><p>函数<code>forward_train</code>定义模型的前向传播训练，输出为训练时的损失<code>losses</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">forward_train</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                  img,</span></span><br><span class="line"><span class="params">                  img_metas,</span></span><br><span class="line"><span class="params">                  gt_bboxes,</span></span><br><span class="line"><span class="params">                  gt_labels,</span></span><br><span class="line"><span class="params">                  gt_bboxes_ignore=<span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure><p>函数<code>simple_test</code>定义模型的测试评价所需要执行的内容，输出为模型预测的边界框结果<code>bbox_results</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">simple_test</span>(<span class="params">self, img, img_meta, rescale=<span class="literal">False</span></span>):</span><br><span class="line">    x = self.extract_feat(img)</span><br><span class="line">    outs = self.bbox_head(x)</span><br><span class="line">    bbox_inputs = outs + (img_meta, self.test_cfg, rescale)</span><br><span class="line">    bbox_list = self.bbox_head.get_bboxes(*bbox_inputs)</span><br><span class="line">    bbox_results = [</span><br><span class="line">        bbox2result(det_bboxes, det_labels, self.bbox_head.num_classes)</span><br><span class="line">        <span class="keyword">for</span> det_bboxes, det_labels <span class="keyword">in</span> bbox_list</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> bbox_results[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>根据代码实现，可以看到：<code>bbox_results</code>是通过Python的列表推导式，遍历数据并调用<code>bbox2result</code>函数，根据该函数的返回值填充出的。</p><p><code>bbox_results</code>中包含以下信息：</p><ul><li>模型目标检测输出的边界框<code>det_bboxes</code></li><li>各框的预测标记信息结合出的结果<code>det_labels</code></li></ul><h3 id="two_stage.py解析">3.2 <code>two_stage.py</code>解析</h3><h4 id="源代码参考-3">3.2.1 源代码参考</h4><p><code>mmdet/models/detectors/two_stage.py</code>实现了一个通用的基础双Stage目标检测模型。相较于单Stage模型，双Stage模型增加了目标实例（<em>instance</em>）的掩膜（<em>mask</em>）输出，即增加了实例分割（<em>instancesegmentation</em>）的功能。</p><p>源代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .base <span class="keyword">import</span> BaseDetector</span><br><span class="line"><span class="keyword">from</span> .test_mixins <span class="keyword">import</span> RPNTestMixin, BBoxTestMixin, MaskTestMixin</span><br><span class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> builder</span><br><span class="line"><span class="keyword">from</span> ..registry <span class="keyword">import</span> DETECTORS</span><br><span class="line"><span class="keyword">from</span> mmdet.core <span class="keyword">import</span> bbox2roi, bbox2result, build_assigner, build_sampler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@DETECTORS.register_module</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TwoStageDetector</span>(BaseDetector, RPNTestMixin, BBoxTestMixin,</span><br><span class="line">                       MaskTestMixin):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                 backbone,</span></span><br><span class="line"><span class="params">                 neck=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 rpn_head=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 bbox_roi_extractor=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 bbox_head=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 mask_roi_extractor=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 mask_head=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 train_cfg=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 test_cfg=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                 pretrained=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(TwoStageDetector, self).__init__()</span><br><span class="line">        self.backbone = builder.build_backbone(backbone)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> neck <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.neck = builder.build_neck(neck)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> rpn_head <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.rpn_head = builder.build_head(rpn_head)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> bbox_head <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.bbox_roi_extractor = builder.build_roi_extractor(</span><br><span class="line">                bbox_roi_extractor)</span><br><span class="line">            self.bbox_head = builder.build_head(bbox_head)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> mask_head <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.mask_roi_extractor = builder.build_roi_extractor(</span><br><span class="line">                mask_roi_extractor)</span><br><span class="line">            self.mask_head = builder.build_head(mask_head)</span><br><span class="line"></span><br><span class="line">        self.train_cfg = train_cfg</span><br><span class="line">        self.test_cfg = test_cfg</span><br><span class="line"></span><br><span class="line">        self.init_weights(pretrained=pretrained)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">with_rpn</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;rpn_head&#x27;</span>) <span class="keyword">and</span> self.rpn_head <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_weights</span>(<span class="params">self, pretrained=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(TwoStageDetector, self).init_weights(pretrained)</span><br><span class="line">        self.backbone.init_weights(pretrained=pretrained)</span><br><span class="line">        <span class="keyword">if</span> self.with_neck:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(self.neck, nn.Sequential):</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> self.neck:</span><br><span class="line">                    m.init_weights()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.neck.init_weights()</span><br><span class="line">        <span class="keyword">if</span> self.with_rpn:</span><br><span class="line">            self.rpn_head.init_weights()</span><br><span class="line">        <span class="keyword">if</span> self.with_bbox:</span><br><span class="line">            self.bbox_roi_extractor.init_weights()</span><br><span class="line">            self.bbox_head.init_weights()</span><br><span class="line">        <span class="keyword">if</span> self.with_mask:</span><br><span class="line">            self.mask_roi_extractor.init_weights()</span><br><span class="line">            self.mask_head.init_weights()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_feat</span>(<span class="params">self, img</span>):</span><br><span class="line">        x = self.backbone(img)</span><br><span class="line">        <span class="keyword">if</span> self.with_neck:</span><br><span class="line">            x = self.neck(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward_train</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                      img,</span></span><br><span class="line"><span class="params">                      img_meta,</span></span><br><span class="line"><span class="params">                      gt_bboxes,</span></span><br><span class="line"><span class="params">                      gt_labels,</span></span><br><span class="line"><span class="params">                      gt_bboxes_ignore=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                      gt_masks=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                      proposals=<span class="literal">None</span></span>):</span><br><span class="line">        x = self.extract_feat(img)</span><br><span class="line"></span><br><span class="line">        losses = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># RPN forward and loss</span></span><br><span class="line">        <span class="keyword">if</span> self.with_rpn:</span><br><span class="line">            rpn_outs = self.rpn_head(x)</span><br><span class="line">            rpn_loss_inputs = rpn_outs + (gt_bboxes, img_meta,</span><br><span class="line">                                          self.train_cfg.rpn)</span><br><span class="line">            rpn_losses = self.rpn_head.loss(</span><br><span class="line">                *rpn_loss_inputs, gt_bboxes_ignore=gt_bboxes_ignore)</span><br><span class="line">            losses.update(rpn_losses)</span><br><span class="line"></span><br><span class="line">            proposal_inputs = rpn_outs + (img_meta, self.test_cfg.rpn)</span><br><span class="line">            proposal_list = self.rpn_head.get_bboxes(*proposal_inputs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            proposal_list = proposals</span><br><span class="line"></span><br><span class="line">        <span class="comment"># assign gts and sample proposals</span></span><br><span class="line">        <span class="keyword">if</span> self.with_bbox <span class="keyword">or</span> self.with_mask:</span><br><span class="line">            bbox_assigner = build_assigner(self.train_cfg.rcnn.assigner)</span><br><span class="line">            bbox_sampler = build_sampler(</span><br><span class="line">                self.train_cfg.rcnn.sampler, context=self)</span><br><span class="line">            num_imgs = img.size(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> gt_bboxes_ignore <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                gt_bboxes_ignore = [<span class="literal">None</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_imgs)]</span><br><span class="line">            sampling_results = []</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_imgs):</span><br><span class="line">                assign_result = bbox_assigner.assign(</span><br><span class="line">                    proposal_list[i], gt_bboxes[i], gt_bboxes_ignore[i],</span><br><span class="line">                    gt_labels[i])</span><br><span class="line">                sampling_result = bbox_sampler.sample(</span><br><span class="line">                    assign_result,</span><br><span class="line">                    proposal_list[i],</span><br><span class="line">                    gt_bboxes[i],</span><br><span class="line">                    gt_labels[i],</span><br><span class="line">                    feats=[lvl_feat[i][<span class="literal">None</span>] <span class="keyword">for</span> lvl_feat <span class="keyword">in</span> x])</span><br><span class="line">                sampling_results.append(sampling_result)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># bbox head forward and loss</span></span><br><span class="line">        <span class="keyword">if</span> self.with_bbox:</span><br><span class="line">            rois = bbox2roi([res.bboxes <span class="keyword">for</span> res <span class="keyword">in</span> sampling_results])</span><br><span class="line">            <span class="comment"># <span class="doctag">TODO:</span> a more flexible way to decide which feature maps to use</span></span><br><span class="line">            bbox_feats = self.bbox_roi_extractor(</span><br><span class="line">                x[:self.bbox_roi_extractor.num_inputs], rois)</span><br><span class="line">            cls_score, bbox_pred = self.bbox_head(bbox_feats)</span><br><span class="line"></span><br><span class="line">            bbox_targets = self.bbox_head.get_target(</span><br><span class="line">                sampling_results, gt_bboxes, gt_labels, self.train_cfg.rcnn)</span><br><span class="line">            loss_bbox = self.bbox_head.loss(cls_score, bbox_pred,</span><br><span class="line">                                            *bbox_targets)</span><br><span class="line">            losses.update(loss_bbox)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># mask head forward and loss</span></span><br><span class="line">        <span class="keyword">if</span> self.with_mask:</span><br><span class="line">            pos_rois = bbox2roi([res.pos_bboxes <span class="keyword">for</span> res <span class="keyword">in</span> sampling_results])</span><br><span class="line">            mask_feats = self.mask_roi_extractor(</span><br><span class="line">                x[:self.mask_roi_extractor.num_inputs], pos_rois)</span><br><span class="line">            mask_pred = self.mask_head(mask_feats)</span><br><span class="line"></span><br><span class="line">            mask_targets = self.mask_head.get_target(</span><br><span class="line">                sampling_results, gt_masks, self.train_cfg.rcnn)</span><br><span class="line">            pos_labels = torch.cat(</span><br><span class="line">                [res.pos_gt_labels <span class="keyword">for</span> res <span class="keyword">in</span> sampling_results])</span><br><span class="line">            loss_mask = self.mask_head.loss(mask_pred, mask_targets,</span><br><span class="line">                                            pos_labels)</span><br><span class="line">            losses.update(loss_mask)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> losses</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">simple_test</span>(<span class="params">self, img, img_meta, proposals=<span class="literal">None</span>, rescale=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Test without augmentation.&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">assert</span> self.with_bbox, <span class="string">&quot;Bbox head must be implemented.&quot;</span></span><br><span class="line"></span><br><span class="line">        x = self.extract_feat(img)</span><br><span class="line"></span><br><span class="line">        proposal_list = self.simple_test_rpn(</span><br><span class="line">            x, img_meta, self.test_cfg.rpn) <span class="keyword">if</span> proposals <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> proposals</span><br><span class="line"></span><br><span class="line">        det_bboxes, det_labels = self.simple_test_bboxes(</span><br><span class="line">            x, img_meta, proposal_list, self.test_cfg.rcnn, rescale=rescale)</span><br><span class="line">        bbox_results = bbox2result(det_bboxes, det_labels,</span><br><span class="line">                                   self.bbox_head.num_classes)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.with_mask:</span><br><span class="line">            <span class="keyword">return</span> bbox_results</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            segm_results = self.simple_test_mask(</span><br><span class="line">                x, img_meta, det_bboxes, det_labels, rescale=rescale)</span><br><span class="line">            <span class="keyword">return</span> bbox_results, segm_results</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">aug_test</span>(<span class="params">self, imgs, img_metas, rescale=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Test with augmentations.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If rescale is False, then returned bboxes and masks will fit the scale</span></span><br><span class="line"><span class="string">        of imgs[0].</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># recompute feats to save memory</span></span><br><span class="line">        proposal_list = self.aug_test_rpn(</span><br><span class="line">            self.extract_feats(imgs), img_metas, self.test_cfg.rpn)</span><br><span class="line">        det_bboxes, det_labels = self.aug_test_bboxes(</span><br><span class="line">            self.extract_feats(imgs), img_metas, proposal_list,</span><br><span class="line">            self.test_cfg.rcnn)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> rescale:</span><br><span class="line">            _det_bboxes = det_bboxes</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            _det_bboxes = det_bboxes.clone()</span><br><span class="line">            _det_bboxes[:, :<span class="number">4</span>] *= img_metas[<span class="number">0</span>][<span class="number">0</span>][<span class="string">&#x27;scale_factor&#x27;</span>]</span><br><span class="line">        bbox_results = bbox2result(_det_bboxes, det_labels,</span><br><span class="line">                                   self.bbox_head.num_classes)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># det_bboxes always keep the original scale</span></span><br><span class="line">        <span class="keyword">if</span> self.with_mask:</span><br><span class="line">            segm_results = self.aug_test_mask(</span><br><span class="line">                self.extract_feats(imgs), img_metas, det_bboxes, det_labels)</span><br><span class="line">            <span class="keyword">return</span> bbox_results, segm_results</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> bbox_results</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="原理解析-3">3.2.2 原理解析</h4><p>可以看到，<code>TwoStageDetector</code>通过继承基础类<code>BaseDetector</code>以及RPN等类来实现双Stage的目标检测模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DETECTORS.register_module</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TwoStageDetector</span>(BaseDetector, RPNTestMixin, BBoxTestMixin,</span><br><span class="line">                       MaskTestMixin):</span><br></pre></td></tr></table></figure><p>函数<code>__init__</code>定义模型的数据结构和数据初始化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">             backbone,</span></span><br><span class="line"><span class="params">             neck=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">             rpn_head=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">             bbox_roi_extractor=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">             bbox_head=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">             mask_roi_extractor=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">             mask_head=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">             train_cfg=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">             test_cfg=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">             pretrained=<span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure><p>函数<code>forward_train</code>定义模型的前向传播训练，输出为训练时的损失<code>losses</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">forward_train</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                  img,</span></span><br><span class="line"><span class="params">                  img_meta,</span></span><br><span class="line"><span class="params">                  gt_bboxes,</span></span><br><span class="line"><span class="params">                  gt_labels,</span></span><br><span class="line"><span class="params">                  gt_bboxes_ignore=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                  gt_masks=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">                  proposals=<span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure><p>函数<code>simple_test</code>定义模型的测试评价所需要执行的内容，输出为模型预测的边界框结果<code>bbox_results</code>和<code>segm_results</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">simple_test</span>(<span class="params">self, img, img_meta, proposals=<span class="literal">None</span>, rescale=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Test without augmentation.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">assert</span> self.with_bbox, <span class="string">&quot;Bbox head must be implemented.&quot;</span></span><br><span class="line"></span><br><span class="line">    x = self.extract_feat(img)</span><br><span class="line"></span><br><span class="line">    proposal_list = self.simple_test_rpn(</span><br><span class="line">        x, img_meta, self.test_cfg.rpn) <span class="keyword">if</span> proposals <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> proposals</span><br><span class="line"></span><br><span class="line">    det_bboxes, det_labels = self.simple_test_bboxes(</span><br><span class="line">        x, img_meta, proposal_list, self.test_cfg.rcnn, rescale=rescale)</span><br><span class="line">    bbox_results = bbox2result(det_bboxes, det_labels,</span><br><span class="line">                               self.bbox_head.num_classes)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.with_mask:</span><br><span class="line">        <span class="keyword">return</span> bbox_results</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        segm_results = self.simple_test_mask(</span><br><span class="line">            x, img_meta, det_bboxes, det_labels, rescale=rescale)</span><br><span class="line">        <span class="keyword">return</span> bbox_results, segm_results</span><br></pre></td></tr></table></figure><p>根据代码实现，可以看到：<code>bbox_results</code>是通过Python的列表推导式，遍历数据并调用<code>bbox2result</code>函数，根据该函数的返回值填充出的。</p><p><code>bbox_results</code>中包含以下信息：</p><ul><li>模型目标检测输出的边界框<code>det_bboxes</code></li><li>各框的预测标记信息结合出的结果<code>det_labels</code></li></ul><p>另外，双Stage模型还输出了目标实例的掩膜预测结果<code>segm_results</code>。</p><h2 id="自定义数据集解析">4 自定义数据集解析</h2><h3 id="coco.py解析">4.1 <code>coco.py</code>解析</h3><h4 id="源代码参考-4">4.1.1 源代码参考</h4><p><code>coco.py</code>位于<code>mmdet.datasets</code>中，实现<code>CocoDataset</code>类，并实现了一系列对COCO数据集读取解析的类成员方法。<code>coco.py</code>源代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pycocotools.coco <span class="keyword">import</span> COCO</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .custom <span class="keyword">import</span> CustomDataset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CocoDataset</span>(<span class="title class_ inherited__">CustomDataset</span>):</span><br><span class="line"></span><br><span class="line">    CLASSES = (<span class="string">&#x27;person&#x27;</span>, <span class="string">&#x27;bicycle&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;motorcycle&#x27;</span>, <span class="string">&#x27;airplane&#x27;</span>, <span class="string">&#x27;bus&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;train&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>, <span class="string">&#x27;boat&#x27;</span>, <span class="string">&#x27;traffic_light&#x27;</span>, <span class="string">&#x27;fire_hydrant&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;stop_sign&#x27;</span>, <span class="string">&#x27;parking_meter&#x27;</span>, <span class="string">&#x27;bench&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;sheep&#x27;</span>, <span class="string">&#x27;cow&#x27;</span>, <span class="string">&#x27;elephant&#x27;</span>, <span class="string">&#x27;bear&#x27;</span>, <span class="string">&#x27;zebra&#x27;</span>, <span class="string">&#x27;giraffe&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;backpack&#x27;</span>, <span class="string">&#x27;umbrella&#x27;</span>, <span class="string">&#x27;handbag&#x27;</span>, <span class="string">&#x27;tie&#x27;</span>, <span class="string">&#x27;suitcase&#x27;</span>, <span class="string">&#x27;frisbee&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;skis&#x27;</span>, <span class="string">&#x27;snowboard&#x27;</span>, <span class="string">&#x27;sports_ball&#x27;</span>, <span class="string">&#x27;kite&#x27;</span>, <span class="string">&#x27;baseball_bat&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;baseball_glove&#x27;</span>, <span class="string">&#x27;skateboard&#x27;</span>, <span class="string">&#x27;surfboard&#x27;</span>, <span class="string">&#x27;tennis_racket&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;bottle&#x27;</span>, <span class="string">&#x27;wine_glass&#x27;</span>, <span class="string">&#x27;cup&#x27;</span>, <span class="string">&#x27;fork&#x27;</span>, <span class="string">&#x27;knife&#x27;</span>, <span class="string">&#x27;spoon&#x27;</span>, <span class="string">&#x27;bowl&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;sandwich&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;broccoli&#x27;</span>, <span class="string">&#x27;carrot&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;hot_dog&#x27;</span>, <span class="string">&#x27;pizza&#x27;</span>, <span class="string">&#x27;donut&#x27;</span>, <span class="string">&#x27;cake&#x27;</span>, <span class="string">&#x27;chair&#x27;</span>, <span class="string">&#x27;couch&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;potted_plant&#x27;</span>, <span class="string">&#x27;bed&#x27;</span>, <span class="string">&#x27;dining_table&#x27;</span>, <span class="string">&#x27;toilet&#x27;</span>, <span class="string">&#x27;tv&#x27;</span>, <span class="string">&#x27;laptop&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;mouse&#x27;</span>, <span class="string">&#x27;remote&#x27;</span>, <span class="string">&#x27;keyboard&#x27;</span>, <span class="string">&#x27;cell_phone&#x27;</span>, <span class="string">&#x27;microwave&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;oven&#x27;</span>, <span class="string">&#x27;toaster&#x27;</span>, <span class="string">&#x27;sink&#x27;</span>, <span class="string">&#x27;refrigerator&#x27;</span>, <span class="string">&#x27;book&#x27;</span>, <span class="string">&#x27;clock&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;vase&#x27;</span>, <span class="string">&#x27;scissors&#x27;</span>, <span class="string">&#x27;teddy_bear&#x27;</span>, <span class="string">&#x27;hair_drier&#x27;</span>, <span class="string">&#x27;toothbrush&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_annotations</span>(<span class="params">self, ann_file</span>):</span><br><span class="line">        self.coco = COCO(ann_file)</span><br><span class="line">        self.cat_ids = self.coco.getCatIds()</span><br><span class="line">        self.cat2label = &#123;</span><br><span class="line">            cat_id: i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> i, cat_id <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.cat_ids)</span><br><span class="line">        &#125;</span><br><span class="line">        self.img_ids = self.coco.getImgIds()</span><br><span class="line">        img_infos = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.img_ids:</span><br><span class="line">            info = self.coco.loadImgs([i])[<span class="number">0</span>]</span><br><span class="line">            info[<span class="string">&#x27;filename&#x27;</span>] = info[<span class="string">&#x27;file_name&#x27;</span>]</span><br><span class="line">            img_infos.append(info)</span><br><span class="line">        <span class="keyword">return</span> img_infos</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_ann_info</span>(<span class="params">self, idx</span>):</span><br><span class="line">        img_id = self.img_infos[idx][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">        ann_ids = self.coco.getAnnIds(imgIds=[img_id])</span><br><span class="line">        ann_info = self.coco.loadAnns(ann_ids)</span><br><span class="line">        <span class="keyword">return</span> self._parse_ann_info(ann_info, self.with_mask)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_filter_imgs</span>(<span class="params">self, min_size=<span class="number">32</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Filter images too small or without ground truths.&quot;&quot;&quot;</span></span><br><span class="line">        valid_inds = []</span><br><span class="line">        ids_with_ann = <span class="built_in">set</span>(_[<span class="string">&#x27;image_id&#x27;</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> self.coco.anns.values())</span><br><span class="line">        <span class="keyword">for</span> i, img_info <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.img_infos):</span><br><span class="line">            <span class="keyword">if</span> self.img_ids[i] <span class="keyword">not</span> <span class="keyword">in</span> ids_with_ann:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">min</span>(img_info[<span class="string">&#x27;width&#x27;</span>], img_info[<span class="string">&#x27;height&#x27;</span>]) &gt;= min_size:</span><br><span class="line">                valid_inds.append(i)</span><br><span class="line">        <span class="keyword">return</span> valid_inds</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parse_ann_info</span>(<span class="params">self, ann_info, with_mask=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;Parse bbox and mask annotation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            ann_info (list[dict]): Annotation info of an image.</span></span><br><span class="line"><span class="string">            with_mask (bool): Whether to parse mask annotations.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            dict: A dict containing the following keys: bboxes, bboxes_ignore,</span></span><br><span class="line"><span class="string">                labels, masks, mask_polys, poly_lens.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        gt_bboxes = []</span><br><span class="line">        gt_labels = []</span><br><span class="line">        gt_bboxes_ignore = []</span><br><span class="line">        <span class="comment"># Two formats are provided.</span></span><br><span class="line">        <span class="comment"># 1. mask: a binary map of the same size of the image.</span></span><br><span class="line">        <span class="comment"># 2. polys: each mask consists of one or several polys, each poly is a</span></span><br><span class="line">        <span class="comment"># list of float.</span></span><br><span class="line">        <span class="keyword">if</span> with_mask:</span><br><span class="line">            gt_masks = []</span><br><span class="line">            gt_mask_polys = []</span><br><span class="line">            gt_poly_lens = []</span><br><span class="line">        <span class="keyword">for</span> i, ann <span class="keyword">in</span> <span class="built_in">enumerate</span>(ann_info):</span><br><span class="line">            <span class="keyword">if</span> ann.get(<span class="string">&#x27;ignore&#x27;</span>, <span class="literal">False</span>):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            x1, y1, w, h = ann[<span class="string">&#x27;bbox&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> ann[<span class="string">&#x27;area&#x27;</span>] &lt;= <span class="number">0</span> <span class="keyword">or</span> w &lt; <span class="number">1</span> <span class="keyword">or</span> h &lt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            bbox = [x1, y1, x1 + w - <span class="number">1</span>, y1 + h - <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> ann[<span class="string">&#x27;iscrowd&#x27;</span>]:</span><br><span class="line">                gt_bboxes_ignore.append(bbox)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                gt_bboxes.append(bbox)</span><br><span class="line">                gt_labels.append(self.cat2label[ann[<span class="string">&#x27;category_id&#x27;</span>]])</span><br><span class="line">            <span class="keyword">if</span> with_mask:</span><br><span class="line">                gt_masks.append(self.coco.annToMask(ann))</span><br><span class="line">                mask_polys = [</span><br><span class="line">                    p <span class="keyword">for</span> p <span class="keyword">in</span> ann[<span class="string">&#x27;segmentation&#x27;</span>] <span class="keyword">if</span> <span class="built_in">len</span>(p) &gt;= <span class="number">6</span></span><br><span class="line">                ]  <span class="comment"># valid polygons have &gt;= 3 points (6 coordinates)</span></span><br><span class="line">                poly_lens = [<span class="built_in">len</span>(p) <span class="keyword">for</span> p <span class="keyword">in</span> mask_polys]</span><br><span class="line">                gt_mask_polys.append(mask_polys)</span><br><span class="line">                gt_poly_lens.extend(poly_lens)</span><br><span class="line">        <span class="keyword">if</span> gt_bboxes:</span><br><span class="line">            gt_bboxes = np.array(gt_bboxes, dtype=np.float32)</span><br><span class="line">            gt_labels = np.array(gt_labels, dtype=np.int64)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gt_bboxes = np.zeros((<span class="number">0</span>, <span class="number">4</span>), dtype=np.float32)</span><br><span class="line">            gt_labels = np.array([], dtype=np.int64)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> gt_bboxes_ignore:</span><br><span class="line">            gt_bboxes_ignore = np.array(gt_bboxes_ignore, dtype=np.float32)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            gt_bboxes_ignore = np.zeros((<span class="number">0</span>, <span class="number">4</span>), dtype=np.float32)</span><br><span class="line"></span><br><span class="line">        ann = <span class="built_in">dict</span>(</span><br><span class="line">            bboxes=gt_bboxes, labels=gt_labels, bboxes_ignore=gt_bboxes_ignore)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> with_mask:</span><br><span class="line">            ann[<span class="string">&#x27;masks&#x27;</span>] = gt_masks</span><br><span class="line">            <span class="comment"># poly format is not used in the current implementation</span></span><br><span class="line">            ann[<span class="string">&#x27;mask_polys&#x27;</span>] = gt_mask_polys</span><br><span class="line">            ann[<span class="string">&#x27;poly_lens&#x27;</span>] = gt_poly_lens</span><br><span class="line">        <span class="keyword">return</span> ann</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="原理解析-4">4.1.2 原理解析</h4><blockquote><p>以下内容摘选自：<ahref="https://github.com/open-mmlab/mmdetection/blob/master/README.md">mmdetection/ <strong>README.md</strong></a></p><p><strong>Train on custom datasets</strong></p><p>We define a simple annotation format.</p><p>The annotation of a dataset is a list of dict, each dict correspondsto an image. There are 3 field <code>filename</code> (relative path),<code>width</code>, <code>height</code> for testing, and an additionalfield <code>ann</code> for training. <code>ann</code> is also a dictcontaining at least 2 fields: <code>bboxes</code> and<code>labels</code>, both of which are numpy arrays. Some datasets mayprovide annotations like crowd/difficult/ignored bboxes, we use<code>bboxes_ignore</code> and <code>labels_ignore</code> to coverthem.</p><p>Here is an example.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line">  &#x27;filename&#x27;: &#x27;a.jpg&#x27;,</span><br><span class="line">  &#x27;width&#x27;: 1280,</span><br><span class="line">  &#x27;height&#x27;: 720,</span><br><span class="line">  &#x27;ann&#x27;: &#123;</span><br><span class="line">      &#x27;bboxes&#x27;: &lt;np.ndarray&gt; (n, 4),</span><br><span class="line">      &#x27;labels&#x27;: &lt;np.ndarray&gt; (n, ),</span><br><span class="line">      &#x27;bboxes_ignore&#x27;: &lt;np.ndarray&gt; (k, 4),</span><br><span class="line">      &#x27;labels_ignore&#x27;: &lt;np.ndarray&gt; (k, ) (optional field)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>There are two ways to work with custom datasets.</p><ul><li><strong>online conversion</strong></li></ul><p><strong>You can write a new Dataset class inherited from<code>CustomDataset</code>, and overwrite two methods<code>load_annotations(self, ann_file)</code> and<code>get_ann_info(self, idx)</code>, like <ahref="https://github.com/open-mmlab/mmdetection/blob/master/mmdet/datasets/coco.py">CocoDataset</a>and <ahref="https://github.com/open-mmlab/mmdetection/blob/master/mmdet/datasets/voc.py">VOCDataset</a>.</strong></p><ul><li>offline conversion</li></ul><p>You can convert the annotation format to the expected format aboveand save it to a pickle or json file, like <ahref="https://github.com/open-mmlab/mmdetection/blob/master/tools/convert_datasets/pascal_voc.py">pascal_voc.py</a>.Then you can simply use <code>CustomDataset</code>.</p></blockquote><p>正如<ahref="https://github.com/open-mmlab/mmdetection/blob/master/README.md">mmdetection/<strong>README.md</strong></a>中所述，<code>coco.py</code>定义的<code>CocoDataset</code>，属于onlineconversion，通过继承<code>CustomDataset</code>基础类并重载实现<code>load_annotations(self, ann_file)</code>和<code>get_ann_info(self, idx)</code>两个成员函数实现一个自定义的数据集类型加入mmdetection框架，这两个函数是对外调用的接口。</p><p><code>load_annotations(self, ann_file)</code>用于加载标注文件到内存中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_annotations</span>(<span class="params">self, ann_file</span>):</span><br><span class="line">    self.coco = COCO(ann_file)</span><br><span class="line">    self.cat_ids = self.coco.getCatIds()</span><br><span class="line">    self.cat2label = &#123;</span><br><span class="line">        cat_id: i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i, cat_id <span class="keyword">in</span> <span class="built_in">enumerate</span>(self.cat_ids)</span><br><span class="line">    &#125;</span><br><span class="line">    self.img_ids = self.coco.getImgIds()</span><br><span class="line">    img_infos = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> self.img_ids:</span><br><span class="line">        info = self.coco.loadImgs([i])[<span class="number">0</span>]</span><br><span class="line">        info[<span class="string">&#x27;filename&#x27;</span>] = info[<span class="string">&#x27;file_name&#x27;</span>]</span><br><span class="line">        img_infos.append(info)</span><br><span class="line">        <span class="keyword">return</span> img_infos</span><br></pre></td></tr></table></figure><p><code>get_ann_info(self, idx)</code>用于提取指定<code>image idx</code>的某个image的标注信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_ann_info</span>(<span class="params">self, idx</span>):</span><br><span class="line">    img_id = self.img_infos[idx][<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">    ann_ids = self.coco.getAnnIds(imgIds=[img_id])</span><br><span class="line">    ann_info = self.coco.loadAnns(ann_ids)</span><br><span class="line">    <span class="keyword">return</span> self._parse_ann_info(ann_info, self.with_mask)</span><br></pre></td></tr></table></figure><h2 id="bbox数据结构解析">5 <code>bbox</code>数据结构解析</h2><p>作为目标检测系统，候选框是目标检测模型的基本输出。bbox数据结构是处理模型输出结果所必须的掌握的数据结构。</p><h3 id="coco数据集的bbox数据结构">5.1 COCO数据集的bbox数据结构</h3><p>COCO数据集的标注中，目标检测标注内容的JSON数据结构如下：</p><blockquote><p>以下内容摘选自：<a href="http://cocodataset.org/#format-data">COCODataFormat</a></p><p><strong>1. Object Detection</strong></p><p>Each object instance annotation contains a series of fields,including the category id and segmentation mask of the object. Thesegmentation format depends on whether the instance represents a singleobject (iscrowd=0 in which case polygons are used) or a collection ofobjects (iscrowd=1 in which case RLE is used). Note that a single object(iscrowd=0) may require multiple polygons, for example if occluded.Crowd annotations (iscrowd=1) are used to label large groups of objects(e.g. a crowd of people). <strong>In addition, an enclosing bounding boxis provided for each object (box coordinates are measured from the topleft image corner and are 0-indexed).</strong></p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">annotation<span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span> <span class="punctuation">:</span> int<span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;image_id&quot;</span> <span class="punctuation">:</span> int<span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;category_id&quot;</span> <span class="punctuation">:</span> int<span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;segmentation&quot;</span> <span class="punctuation">:</span> RLE or <span class="punctuation">[</span>polygon<span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;area&quot;</span> <span class="punctuation">:</span> float<span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;bbox&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span>x<span class="punctuation">,</span>y<span class="punctuation">,</span>width<span class="punctuation">,</span>height<span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;iscrowd&quot;</span> <span class="punctuation">:</span> <span class="number">0</span> or <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>详细文档可参阅：</p><blockquote><p><a href="http://cocodataset.org/#format-data">COCO DataFormat</a></p></blockquote><p>在COCO数据集遵循的标注规范中，边界框（<strong><em>bbox</em></strong>,<em>bounding box</em>）的数据结构是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;bbox&quot; : [x,y,width,height], </span><br></pre></td></tr></table></figure><p>目标物体通过边界框来标注，边界框则通过其左上角坐标<em>(x,y)</em>以及边界框的宽度<em>width</em>和高度<em>height</em>来确定。单位均为像素。</p><h3 id="mmdetection中的bbox数据结构">5.2mmdetection中的bbox数据结构</h3><h4 id="cocodataset对bbox的解析转换">5.2.1<code>CocoDataset</code>对bbox的解析转换</h4><p><code>CocoDataset</code>定义于4.1节中提到的<code>coco.py</code>。</p><p><code>CocoDataset</code>负责将外部的COCO数据集读取解析并转换为mmdetection框架实际处理使用的数据结构。</p><p>类内部成员函数<code>_parse_ann_info(ann_info, with_mask)</code>封装了解析单个图片标注信息的流程，<code>get_ann_info(self, idx)</code>在函数堆栈返回时通过调用该解析函数实现对当前图片标注信息的解析。在<code>_parse_ann_info(ann_info, with_mask)</code>函数中，对COCO数据集的<code>"bbox" : [x,y,width,height]</code>候选框数据格式进行了解析和数据结构的转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, ann <span class="keyword">in</span> <span class="built_in">enumerate</span>(ann_info):</span><br><span class="line">    <span class="keyword">if</span> ann.get(<span class="string">&#x27;ignore&#x27;</span>, <span class="literal">False</span>):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    x1, y1, w, h = ann[<span class="string">&#x27;bbox&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> ann[<span class="string">&#x27;area&#x27;</span>] &lt;= <span class="number">0</span> <span class="keyword">or</span> w &lt; <span class="number">1</span> <span class="keyword">or</span> h &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    bbox = [x1, y1, x1 + w - <span class="number">1</span>, y1 + h - <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>在<code>_parse_ann_info(ann_info, with_mask)</code>的这段实现中，通过循环遍历标注信息容器<code>ann_info</code>，将COCO数据集中的左上角坐标<code>(x1, y1)</code>、宽<code>w</code>、高<code>h</code>读出。并转换为左上角坐标<code>(x1,y1)</code>和右下角坐标<code>(x1+w-1, y1+h-1)</code>，将这四个坐标值依次写入<code>bbox</code>结构供mmdetection框架处理。</p><p>也就是说，mmdetection中的bbox数据结构是通过候选框的<strong>左上角坐标</strong>和<strong>右下角坐标</strong>来标记候选框的。</p><h4 id="bbox2result解析">5.2.2 <code>bbox2result</code>解析</h4><p>在mmdetection中模型对bbox的实际调用方面，两个基本的目标检测通用模型<code>SingleStageDetector</code>和<code>TwoStageDetector</code>在测试输出时都是通过调用<code>bbox2result</code>函数来将模型输出的结果转换到一个list型的result作为模型最终的返回结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">simple_test</span>(<span class="params">self, img, img_meta, rescale=<span class="literal">False</span></span>):</span><br><span class="line">    x = self.extract_feat(img)</span><br><span class="line">    outs = self.bbox_head(x)</span><br><span class="line">    bbox_inputs = outs + (img_meta, self.test_cfg, rescale)</span><br><span class="line">    bbox_list = self.bbox_head.get_bboxes(*bbox_inputs)</span><br><span class="line">    bbox_results = [</span><br><span class="line">        bbox2result(det_bboxes, det_labels, self.bbox_head.num_classes)</span><br><span class="line">        <span class="keyword">for</span> det_bboxes, det_labels <span class="keyword">in</span> bbox_list</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> bbox_results[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>以<code>SingleStageDetector</code>为例，返回值是通过调用<code>bbox2result</code>取得的。</p><h5 id="源代码参考-5">5.2.2.1 源代码参考</h5><p><code>bbox2result</code>函数在<code>mmdet\core\bbox\transforms.py</code>中实现，源代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bbox2result</span>(<span class="params">bboxes, labels, num_classes</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Convert detection results to a list of numpy arrays.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        bboxes (Tensor): shape (n, 5)</span></span><br><span class="line"><span class="string">        labels (Tensor): shape (n, )</span></span><br><span class="line"><span class="string">        num_classes (int): class number, including background class</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        list(ndarray): bbox results of each class</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> bboxes.shape[<span class="number">0</span>] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            np.zeros((<span class="number">0</span>, <span class="number">5</span>), dtype=np.float32) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_classes - <span class="number">1</span>)</span><br><span class="line">        ]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bboxes = bboxes.cpu().numpy()</span><br><span class="line">        labels = labels.cpu().numpy()</span><br><span class="line">        <span class="keyword">return</span> [bboxes[labels == i, :] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_classes - <span class="number">1</span>)]</span><br></pre></td></tr></table></figure><h5 id="原理解析-5">5.2.2.2 原理解析</h5><p>根据函数实现内的块注释，可以知道，传入参数bboxes和labels都是PyTorch中的张量类型数据。</p><p>在注释中，可以看到<code>bboxes (Tensor): shape (n, 5)</code>表示bboxes是n×5维的矩阵，而<code>labels (Tensor): shape (n, )</code>表示labels包含n条记录。当然，n是对当前图片目标检测后，输出的候选框个数。</p><p><strong>一个bbox应该包含4个坐标值来框选目标区域，那么第5个数值是什么呢？</strong></p><h4 id="anchorhead.get_boxes解析">5.2.3<code>AnchorHead.get_boxes</code>解析</h4><p>可以看到，在<code>simple_test</code>函数中，是通过调用<code>bbox_head.get_boxes</code>函数取得的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bbox_list = self.bbox_head.get_bboxes(*bbox_inputs)</span><br></pre></td></tr></table></figure><h5 id="get_boxes解析">5.2.3.1 <code>get_boxes</code>解析</h5><p><code>get_boxes</code>函数在<code>mmdet\models\anchor_heads\anchor_head.py</code>中定义，是<code>AnchorHead</code>的类成员函数。源代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_bboxes</span>(<span class="params">self, cls_scores, bbox_preds, img_metas, cfg,</span></span><br><span class="line"><span class="params">                rescale=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(cls_scores) == <span class="built_in">len</span>(bbox_preds)</span><br><span class="line">    num_levels = <span class="built_in">len</span>(cls_scores)</span><br><span class="line"></span><br><span class="line">    mlvl_anchors = [</span><br><span class="line">        self.anchor_generators[i].grid_anchors(cls_scores[i].size()[-<span class="number">2</span>:],</span><br><span class="line">                                                self.anchor_strides[i])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_levels)</span><br><span class="line">    ]</span><br><span class="line">    result_list = []</span><br><span class="line">    <span class="keyword">for</span> img_id <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(img_metas)):</span><br><span class="line">        cls_score_list = [</span><br><span class="line">            cls_scores[i][img_id].detach() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_levels)</span><br><span class="line">        ]</span><br><span class="line">        bbox_pred_list = [</span><br><span class="line">            bbox_preds[i][img_id].detach() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_levels)</span><br><span class="line">        ]</span><br><span class="line">        img_shape = img_metas[img_id][<span class="string">&#x27;img_shape&#x27;</span>]</span><br><span class="line">        scale_factor = img_metas[img_id][<span class="string">&#x27;scale_factor&#x27;</span>]</span><br><span class="line">        proposals = self.get_bboxes_single(cls_score_list, bbox_pred_list,</span><br><span class="line">                                            mlvl_anchors, img_shape,</span><br><span class="line">                                            scale_factor, cfg, rescale)</span><br><span class="line">        result_list.append(proposals)</span><br><span class="line">    <span class="keyword">return</span> result_list</span><br></pre></td></tr></table></figure><p><code>get_boxes</code>函数支持对输入的一批图片批量提取区域<em>proposals</em>，并输出分值<em>score</em>和边界框<em>bbox</em>。</p><p>在<code>get_boxes</code>函数中，通过for循环遍历img_id并每次调用同为类成员函数的<code>get_boxes_single</code>来对当前img_id提取区域<em>proposals</em>，并将<em>proposals</em>加入容器<em>result_list</em>以便最后遍历完成后返回结果。</p><h5 id="get_boxes_single解析">5.2.3.2<code>get_boxes_single</code>解析</h5><p><code>get_boxes</code>函数也在<code>mmdet\models\anchor_heads\anchor_head.py</code>中定义，同为<code>AnchorHead</code>的类成员函数。源代码实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_bboxes_single</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">                        cls_scores,</span></span><br><span class="line"><span class="params">                        bbox_preds,</span></span><br><span class="line"><span class="params">                        mlvl_anchors,</span></span><br><span class="line"><span class="params">                        img_shape,</span></span><br><span class="line"><span class="params">                        scale_factor,</span></span><br><span class="line"><span class="params">                        cfg,</span></span><br><span class="line"><span class="params">                        rescale=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(cls_scores) == <span class="built_in">len</span>(bbox_preds) == <span class="built_in">len</span>(mlvl_anchors)</span><br><span class="line">    mlvl_bboxes = []</span><br><span class="line">    mlvl_scores = []</span><br><span class="line">    <span class="keyword">for</span> cls_score, bbox_pred, anchors <span class="keyword">in</span> <span class="built_in">zip</span>(cls_scores, bbox_preds,</span><br><span class="line">                                                mlvl_anchors):</span><br><span class="line">        <span class="keyword">assert</span> cls_score.size()[-<span class="number">2</span>:] == bbox_pred.size()[-<span class="number">2</span>:]</span><br><span class="line">        cls_score = cls_score.permute(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>).reshape(</span><br><span class="line">            -<span class="number">1</span>, self.cls_out_channels)</span><br><span class="line">        <span class="keyword">if</span> self.use_sigmoid_cls:</span><br><span class="line">            scores = cls_score.sigmoid()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            scores = cls_score.softmax(-<span class="number">1</span>)</span><br><span class="line">        bbox_pred = bbox_pred.permute(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>).reshape(-<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">        nms_pre = cfg.get(<span class="string">&#x27;nms_pre&#x27;</span>, -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> nms_pre &gt; <span class="number">0</span> <span class="keyword">and</span> scores.shape[<span class="number">0</span>] &gt; nms_pre:</span><br><span class="line">            <span class="keyword">if</span> self.use_sigmoid_cls:</span><br><span class="line">                max_scores, _ = scores.<span class="built_in">max</span>(dim=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                max_scores, _ = scores[:, <span class="number">1</span>:].<span class="built_in">max</span>(dim=<span class="number">1</span>)</span><br><span class="line">            _, topk_inds = max_scores.topk(nms_pre)</span><br><span class="line">            anchors = anchors[topk_inds, :]</span><br><span class="line">            bbox_pred = bbox_pred[topk_inds, :]</span><br><span class="line">            scores = scores[topk_inds, :]</span><br><span class="line">        bboxes = delta2bbox(anchors, bbox_pred, self.target_means,</span><br><span class="line">                            self.target_stds, img_shape)</span><br><span class="line">        mlvl_bboxes.append(bboxes)</span><br><span class="line">        mlvl_scores.append(scores)</span><br><span class="line">    mlvl_bboxes = torch.cat(mlvl_bboxes)</span><br><span class="line">    <span class="keyword">if</span> rescale:</span><br><span class="line">        mlvl_bboxes /= mlvl_bboxes.new_tensor(scale_factor)</span><br><span class="line">    mlvl_scores = torch.cat(mlvl_scores)</span><br><span class="line">    <span class="keyword">if</span> self.use_sigmoid_cls:</span><br><span class="line">        padding = mlvl_scores.new_zeros(mlvl_scores.shape[<span class="number">0</span>], <span class="number">1</span>)</span><br><span class="line">        mlvl_scores = torch.cat([padding, mlvl_scores], dim=<span class="number">1</span>)</span><br><span class="line">    det_bboxes, det_labels = multiclass_nms(</span><br><span class="line">        mlvl_bboxes, mlvl_scores, cfg.score_thr, cfg.nms, cfg.max_per_img)</span><br><span class="line">    <span class="keyword">return</span> det_bboxes, det_labels</span><br></pre></td></tr></table></figure><p>在这份代码中，返回输出的是<code>det_bboxes</code>以及<code>det_labels</code>，分别对应调用<code>bbox2result</code>时的输入参数<code>bboxes</code>和<code>labels</code>。</p><p>而<code>get_boxes_single</code>函数的返回值又是通过调用<code>multiclass_nms</code>函数取得的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">det_bboxes, det_labels = multiclass_nms(</span><br><span class="line">    mlvl_bboxes, mlvl_scores, cfg.score_thr, cfg.nms, cfg.max_per_img)</span><br><span class="line"><span class="keyword">return</span> det_bboxes, det_labels</span><br></pre></td></tr></table></figure><h4 id="multiclass_nms解析">5.2.4 <code>multiclass_nms</code>解析</h4><h5 id="源代码参考-6">5.2.4.1 源代码参考</h5><p><code>multiclass_nms</code>函数在<code>mmdet\core\post_processing\bbox_nms.py</code>中定义。该文件中只包含这一个函数的定义实现，源代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mmdet.ops.nms <span class="keyword">import</span> nms_wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiclass_nms</span>(<span class="params">multi_bboxes, multi_scores, score_thr, nms_cfg, max_num=-<span class="number">1</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;NMS for multi-class bboxes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        multi_bboxes (Tensor): shape (n, #class*4) or (n, 4)</span></span><br><span class="line"><span class="string">        multi_scores (Tensor): shape (n, #class)</span></span><br><span class="line"><span class="string">        score_thr (float): bbox threshold, bboxes with scores lower than it</span></span><br><span class="line"><span class="string">            will not be considered.</span></span><br><span class="line"><span class="string">        nms_thr (float): NMS IoU threshold</span></span><br><span class="line"><span class="string">        max_num (int): if there are more than max_num bboxes after NMS,</span></span><br><span class="line"><span class="string">            only top max_num will be kept.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (bboxes, labels), tensors of shape (k, 5) and (k, 1). Labels</span></span><br><span class="line"><span class="string">            are 0-based.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    num_classes = multi_scores.shape[<span class="number">1</span>]</span><br><span class="line">    bboxes, labels = [], []</span><br><span class="line">    nms_cfg_ = nms_cfg.copy()</span><br><span class="line">    nms_type = nms_cfg_.pop(<span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;nms&#x27;</span>)</span><br><span class="line">    nms_op = <span class="built_in">getattr</span>(nms_wrapper, nms_type)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, num_classes):</span><br><span class="line">        cls_inds = multi_scores[:, i] &gt; score_thr</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls_inds.<span class="built_in">any</span>():</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># get bboxes and scores of this class</span></span><br><span class="line">        <span class="keyword">if</span> multi_bboxes.shape[<span class="number">1</span>] == <span class="number">4</span>:</span><br><span class="line">            _bboxes = multi_bboxes[cls_inds, :]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            _bboxes = multi_bboxes[cls_inds, i * <span class="number">4</span>:(i + <span class="number">1</span>) * <span class="number">4</span>]</span><br><span class="line">        _scores = multi_scores[cls_inds, i]</span><br><span class="line">        cls_dets = torch.cat([_bboxes, _scores[:, <span class="literal">None</span>]], dim=<span class="number">1</span>)</span><br><span class="line">        cls_dets, _ = nms_op(cls_dets, **nms_cfg_)</span><br><span class="line">        cls_labels = multi_bboxes.new_full(</span><br><span class="line">            (cls_dets.shape[<span class="number">0</span>], ), i - <span class="number">1</span>, dtype=torch.long)</span><br><span class="line">        bboxes.append(cls_dets)</span><br><span class="line">        labels.append(cls_labels)</span><br><span class="line">    <span class="keyword">if</span> bboxes:</span><br><span class="line">        bboxes = torch.cat(bboxes)</span><br><span class="line">        labels = torch.cat(labels)</span><br><span class="line">        <span class="keyword">if</span> bboxes.shape[<span class="number">0</span>] &gt; max_num:</span><br><span class="line">            _, inds = bboxes[:, -<span class="number">1</span>].sort(descending=<span class="literal">True</span>)</span><br><span class="line">            inds = inds[:max_num]</span><br><span class="line">            bboxes = bboxes[inds]</span><br><span class="line">            labels = labels[inds]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bboxes = multi_bboxes.new_zeros((<span class="number">0</span>, <span class="number">5</span>))</span><br><span class="line">        labels = multi_bboxes.new_zeros((<span class="number">0</span>, ), dtype=torch.long)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bboxes, labels</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="原理解析-6">5.2.4.2 原理解析</h5><p>由函数的块注释可以得知，这是一段实现候选框NMS功能的代码。NMS就是<strong>非极大值抑制（Non-MaximumSuppression，NMS）</strong>，指的就是对重叠候选框，抑制非极大的候选框，而选出分数<em>score</em>为极大值的候选框。</p><blockquote><p><strong>非极大值抑制（Non-MaximumSuppression，NMS）</strong>，顾名思义就是抑制不是极大值的元素，可以理解为局部最大搜索。这个局部代表的是一个邻域，邻域有两个参数可变，一是邻域的维数，二是邻域的大小。这里不讨论通用的NMS算法(参考论文《<ahref="https://pdfs.semanticscholar.org/52ca/4ed04d1d9dba3e6ae30717898276735e0b79.pdf">EfficientNon-MaximumSuppression</a>》对1维和2维数据的NMS实现)，而是用于目标检测中提取分数最高的窗口的。例如在行人检测中，滑动窗口经提取特征，经分类器分类识别后，每个窗口都会得到一个分数。但是滑动窗口会导致很多窗口与其他窗口存在包含或者大部分交叉的情况。这时就需要用到NMS来选取那些邻域里分数最高（是行人的概率最大），并且抑制那些分数低的窗口。NMS在计算机视觉领域有着非常重要的应用，如视频目标跟踪、数据挖掘、3D重建、目标识别以及纹理分析等。</p><hr /><p><em>著作权归作者所有。商业转载请联系作者获得授权,非商业转载请注明出处。</em><em>原文: <a href="https://www.cnblogs.com/makefile/p/nms.html"class="uri">https://www.cnblogs.com/makefile/p/nms.html</a> © <ahref="http://www.cnblogs.com/makefile">康行天下</a></em></p></blockquote><p>结合函数的注释，可以知道在该函数的输入中，主要的四个输入参数为：</p><ul><li><code>multi_bboxes</code>：输入的n×4维矩阵。n个候选框，每个候选框4个坐标值。<ul><li>对多类（multiclass），可以是n×#class*4维，即在该目标位置，对每类预测不同的候选框形状。</li></ul></li><li><code>multi_scores</code>：输入的n维向量。n个<em>score</em>分值，n个候选框对应的分值。</li><li><code>score_thr</code>：候选框的分值阈值，低于该阈值的候选框须滤除。</li><li><code>nms_cfg</code>：NMS的交并比IoU阈值，达到该阈值的才作为NMS局部最大搜索的邻域。</li></ul><p>在函数实现中，通过for循环遍历各个类，对每个类，判断哪些行（候选框）的第i类的score高于score阈值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cls_inds = multi_scores[:, i] &gt; score_thr</span><br></pre></td></tr></table></figure><p>此处的<code>cls_inds</code>为n维的Bool型向量。</p><p>接下来，通过<code>cls_inds</code>Bool向量将当前第i类（亦第i列）的，高于阈值（cls_inds[row_id]）为True的行筛选出来，取得这些<em>score</em>高于阈值的<em>bboxes</em>和<em>scores</em>，存放在<code>_bboxes</code>和<code>_scores</code>中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get bboxes and scores of this class</span></span><br><span class="line"><span class="keyword">if</span> multi_bboxes.shape[<span class="number">1</span>] == <span class="number">4</span>:</span><br><span class="line">    _bboxes = multi_bboxes[cls_inds, :]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    _bboxes = multi_bboxes[cls_inds, i * <span class="number">4</span>:(i + <span class="number">1</span>) * <span class="number">4</span>]</span><br><span class="line">_scores = multi_scores[cls_inds, i]</span><br></pre></td></tr></table></figure><p>随后，将<code>_bboxes</code>和<code>_scores</code>做结构转换以便维度和谐，并进行拼接，输出该类的检测结果<code>cls_dets</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cls_dets = torch.cat([_bboxes, _scores[:, <span class="literal">None</span>]], dim=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>然后，调用<code>nms_op</code>函数对<code>cls_dets</code>做NMS操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cls_dets, _ = nms_op(cls_dets, **nms_cfg_)</span><br></pre></td></tr></table></figure><p><code>cls_dets</code>此后被加入<code>bboxes</code>中，作为最终函数返回的数据结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bboxes.append(cls_dets)</span><br></pre></td></tr></table></figure><p>到这里，可以真正理解：<strong><code>bboxes</code>中的数据结构实际上是候选框的坐标信息（<code>_bboxes</code>，即每个bbox的左上角坐标x1,y1和右下角坐标x1+w-1,y2+h-1，共4维）和候选框对应的分值（<code>_scores</code>，即每个bbox的score，共1维）。</strong>因此每一个bbox在mmdetection的模型的预测输出中是一个5维张量。</p><p>本节所述的<code>multiclass_nms</code>函数通过返回值，将该数据结构的<code>bboxes</code>返回给以上所述的<code>get_boxes_single</code>，继而返回给<code>get_boxes</code>，再返回给<code>bbox2result</code>，最终成为模型测试<code>simple_test</code>函数输出的结果<code>bbox_results</code>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Object Detection </tag>
            
            <tag> CV </tag>
            
            <tag> PyTorch </tag>
            
            <tag> mmdetection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch学习笔记</title>
      <link href="/posts/PyTorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/PyTorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>在实验机器上配置好了CUDA、cuDNN和PyTorch，开始上手PyTorch。持续更新。</p><span id="more"></span><h1 id="pytorch学习笔记">PyTorch学习笔记</h1><h2 id="学习资源">0 学习资源</h2><blockquote><p><a href="https://github.com/zergtant/pytorch-handbook">PyTorch中文手册（pytorch handbook）</a></p></blockquote><p>该教程内容简洁易读，且支持最新的PyTorch1.0正式版。以下是我学习及梳理的笔记。</p><blockquote><p><a href="https://pytorch.org/docs/stable/torch.html">PyTorch masterdocumentation</a></p></blockquote><p>PyTorch官方文档</p><h2 id="背景">1 背景</h2><h3 id="jupyter-notebook">1.1 Jupyter Notebook</h3><p>上述的学习资源中包含大量的Jupyter Notebook示例，需要安装JupyterNotebook运行。</p><p>我安装了流行的科学计算包管理平台Anaconda3，即自带安装了JupyterNotebook。</p><p>git clone 该教程后，在该教程根目录运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><p>即可在弹出的窗口中看到当前教程文件夹内的目录结构，点击打开各个ipynb即可。</p><h3 id="pytorch">1.2 PyTorch</h3><p>PyTorch实际上就是基于Python的科学计算包，服务于以下两种场景:</p><ul><li>作为NumPy的替代品，可以使用GPU的强大计算能力（GPU加速的张量计算）</li><li>提供最大的灵活性和高速的深度学习研究平台（包含自动求导系统的深度神经网络）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先要引入相关的包</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#打印一下版本</span></span><br><span class="line">torch.__version__</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#x27;1.0.1&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="与torch-lua的关系">1.2.1 与Torch, Lua的关系</h4><p>Torch是一个与Numpy类似的张量（Tensor）操作库，与Numpy不同的是Torch对GPU支持的很好。</p><p>Lua是Torch的上层包装。</p><p>PyTorch和Torch使用包含所有相同性能的C库：TH, THC, THNN,THCUNN，并且它们将继续共享这些库。PyTorch和Torch都使用的是相同的底层，只是使用了不同的上层包装语言。</p><p>注：LUA虽然快，但是太小众了，所以才会有PyTorch的出现。</p><h2 id="张量">2 张量</h2><p><strong>张量(Tensor)</strong>是PyTorch里面基础的运算单位,与Numpy的ndarray相同都表示的是一个多维的矩阵。与ndarray的最大区别就是，PyTorch的Tensor可以在 GPU 上运行，而 numpy 的ndarray 只能在 CPU 上运行，在GPU上运行大大加快了运算速度。</p><p>第零阶张量 （r = 0） 为标量 （Scalar），第一阶张量 （r = 1） 为向量（Vector）， 第二阶张量 （r = 2） 则成为矩阵（Matrix），第三阶以上的统称为多维张量。</p><h3 id="构建张量">2.1 构建张量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x = torch.empty(<span class="number">5</span>, <span class="number">3</span>)<span class="comment"># 5行3列矩阵tensor，未初始化为任何值</span></span><br><span class="line"><span class="comment"># tensor([[3.5573e-09, 6.2618e+22, 4.7428e+30],</span></span><br><span class="line"><span class="comment">#        [5.0778e+31, 1.8936e+23, 7.7151e+31],</span></span><br><span class="line"><span class="comment">#        [2.9514e+29, 5.0850e+31, 7.5338e+28],</span></span><br><span class="line"><span class="comment">#        [1.3556e-19, 1.8037e+28, 1.4229e-08],</span></span><br><span class="line"><span class="comment">#        [6.2618e+22, 4.7428e+30, 5.0778e+31]])</span></span><br><span class="line"></span><br><span class="line">x = torch.rand(<span class="number">5</span>, <span class="number">3</span>)<span class="comment"># 5行3列矩阵tensor，填充值为[0,1)间随机浮点数</span></span><br><span class="line"><span class="comment"># tensor([[0.9764, 0.2893, 0.7636],</span></span><br><span class="line"><span class="comment">#        [0.4031, 0.1581, 0.9893],</span></span><br><span class="line"><span class="comment">#        [0.0134, 0.0472, 0.5166],</span></span><br><span class="line"><span class="comment">#        [0.6273, 0.5841, 0.0128],</span></span><br><span class="line"><span class="comment">#        [0.3264, 0.5328, 0.0250]])</span></span><br><span class="line"></span><br><span class="line">x = torch.zeros(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># tensor([[0., 0., 0.],</span></span><br><span class="line"><span class="comment">#        [0., 0., 0.],</span></span><br><span class="line"><span class="comment">#        [0., 0., 0.],</span></span><br><span class="line"><span class="comment">#        [0., 0., 0.],</span></span><br><span class="line"><span class="comment">#        [0., 0., 0.]])</span></span><br><span class="line">x = torch.zeros(<span class="number">5</span>, <span class="number">3</span>, dtype=torch.long)<span class="comment"># 5行3列矩阵tensor，填充值为长整型数0</span></span><br><span class="line"><span class="comment"># tensor([[0, 0, 0],</span></span><br><span class="line"><span class="comment">#        [0, 0, 0],</span></span><br><span class="line"><span class="comment">#        [0, 0, 0],</span></span><br><span class="line"><span class="comment">#        [0, 0, 0],</span></span><br><span class="line"><span class="comment">#        [0, 0, 0]])</span></span><br><span class="line"></span><br><span class="line">x = torch.tensor([<span class="number">5.5</span>, <span class="number">3</span>])<span class="comment"># 根据给定数据创建并初始化张量</span></span><br><span class="line"><span class="comment"># tensor([5.5000, 3.0000])</span></span><br><span class="line"></span><br><span class="line">one = torch.ones(<span class="number">2</span>, <span class="number">2</span>)<span class="comment"># 全1矩阵</span></span><br><span class="line"><span class="comment"># tensor([[1., 1.],</span></span><br><span class="line"><span class="comment">#         [1., 1.]])</span></span><br><span class="line"></span><br><span class="line">eye=torch.eye(<span class="number">2</span>,<span class="number">2</span>)<span class="comment"># 单位矩阵（主对角线元素全1，其余全0）</span></span><br><span class="line"><span class="comment"># tensor([[1., 0.],</span></span><br><span class="line"><span class="comment">#         [0., 1.]])</span></span><br><span class="line"></span><br><span class="line">x = x.new_ones(<span class="number">5</span>, <span class="number">3</span>, dtype=torch.double)<span class="comment"># new_*方法创建对象</span></span><br><span class="line">x = torch.randn_like(x, dtype=torch.<span class="built_in">float</span>)<span class="comment"># 仍为5行3列的tensor对象，但值和类型发生了变化</span></span><br><span class="line"><span class="comment"># tensor([[1., 1., 1.],</span></span><br><span class="line"><span class="comment">#        [1., 1., 1.],</span></span><br><span class="line"><span class="comment">#        [1., 1., 1.],</span></span><br><span class="line"><span class="comment">#        [1., 1., 1.],</span></span><br><span class="line"><span class="comment">#        [1., 1., 1.]], dtype=torch.float64)</span></span><br><span class="line"><span class="comment"># tensor([[ 0.2814,  1.2299,  1.4216],</span></span><br><span class="line"><span class="comment">#        [-0.2575, -1.0438, -1.2800],</span></span><br><span class="line"><span class="comment">#        [ 1.0894, -0.2307, -1.5454],</span></span><br><span class="line"><span class="comment">#        [-0.1985, -0.7991,  1.7902],</span></span><br><span class="line"><span class="comment">#        [ 0.1705,  0.2637, -0.1507]])</span></span><br><span class="line"></span><br><span class="line">x.size()<span class="comment"># 输出tensor尺寸</span></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">x.shape<span class="comment"># 与size()结果一致</span></span><br><span class="line"><span class="comment"># torch.Size([5, 3])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多维张量</span></span><br><span class="line">y = torch.rand(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(y.size())<span class="comment"># torch.Size([2, 3, 4, 5])</span></span><br><span class="line">y</span><br><span class="line"><span class="comment"># tensor([[[[0.9071, 0.0616, 0.0006, 0.6031, 0.0714],</span></span><br><span class="line"><span class="comment">#           [0.6592, 0.9700, 0.0253, 0.0726, 0.5360],</span></span><br><span class="line"><span class="comment">#           [0.5416, 0.1138, 0.9592, 0.6779, 0.6501],</span></span><br><span class="line"><span class="comment">#           [0.0546, 0.8287, 0.7748, 0.4352, 0.9232]],</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#          [[0.0730, 0.4228, 0.7407, 0.4099, 0.1482],</span></span><br><span class="line"><span class="comment">#           [0.5408, 0.9156, 0.6554, 0.5787, 0.9775],</span></span><br><span class="line"><span class="comment">#           [0.4262, 0.3644, 0.1993, 0.4143, 0.5757],</span></span><br><span class="line"><span class="comment">#           [0.9307, 0.8839, 0.8462, 0.0933, 0.6688]],</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#          [[0.4447, 0.0929, 0.9882, 0.5392, 0.1159],</span></span><br><span class="line"><span class="comment">#           [0.4790, 0.5115, 0.4005, 0.9486, 0.0054],</span></span><br><span class="line"><span class="comment">#           [0.8955, 0.8097, 0.1227, 0.2250, 0.5830],</span></span><br><span class="line"><span class="comment">#           [0.8483, 0.2070, 0.1067, 0.4727, 0.5095]]],</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#         [[[0.9438, 0.2601, 0.2885, 0.5457, 0.7528],</span></span><br><span class="line"><span class="comment">#           [0.2971, 0.2171, 0.3910, 0.1924, 0.2570],</span></span><br><span class="line"><span class="comment">#           [0.7491, 0.9749, 0.2703, 0.2198, 0.9472],</span></span><br><span class="line"><span class="comment">#           [0.1216, 0.6647, 0.8809, 0.0125, 0.5513]],</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#          [[0.0870, 0.6622, 0.7252, 0.4783, 0.0160],</span></span><br><span class="line"><span class="comment">#           [0.7832, 0.6050, 0.7469, 0.7947, 0.8052],</span></span><br><span class="line"><span class="comment">#           [0.1755, 0.4489, 0.0602, 0.8073, 0.3028],</span></span><br><span class="line"><span class="comment">#           [0.9937, 0.6780, 0.9425, 0.0059, 0.0451]],</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment">#          [[0.3851, 0.8742, 0.5932, 0.4899, 0.8354],</span></span><br><span class="line"><span class="comment">#           [0.8577, 0.3705, 0.0229, 0.7097, 0.7557],</span></span><br><span class="line"><span class="comment">#           [0.1505, 0.3527, 0.0843, 0.0088, 0.8741],</span></span><br><span class="line"><span class="comment">#           [0.6041, 0.8797, 0.6189, 0.9495, 0.1479]]]])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标量</span></span><br><span class="line">scalar = torch.tensor(<span class="number">3.1415926</span>)</span><br><span class="line"><span class="built_in">print</span>(scalar)<span class="comment"># tensor(3.1416)</span></span><br><span class="line">scalar.size()<span class="comment"># torch.Size([])</span></span><br><span class="line">scalar.item()<span class="comment"># 3.141592502593994</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>torch.rand</code>方法是随机化[0,1)区间内的服从均匀分布的浮点数。</li><li><code>torch.randn</code>方法是随机化输出零均值、单位方差的服从正态分布的浮点数。</li></ul><h3 id="数据类型">2.2 数据类型</h3><p>Tensor的基本数据类型有五种：</p><ul><li>32位浮点型：torch.FloatTensor (默认)</li><li>64位整型：torch.LongTensor</li><li>32位整型：torch.IntTensor</li><li>16位整型：torch.ShortTensor</li><li>64位浮点型：torch.DoubleTensor</li></ul><p>除以上数字类型外，还有 byte和char型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tensor = torch.tensor([<span class="number">3.1415926</span>]) </span><br><span class="line"><span class="built_in">print</span>(tensor)<span class="comment"># tensor([3.1416])</span></span><br><span class="line">tensor.size()<span class="comment"># torch.Size([1])</span></span><br><span class="line">tensor.item()<span class="comment"># 3.141592502593994</span></span><br><span class="line"></span><br><span class="line">tensor.long()<span class="comment"># tensor([3])</span></span><br><span class="line">tensor.half()<span class="comment"># tensor([3.1406], dtype=torch.float16)</span></span><br><span class="line">tensor.<span class="built_in">int</span>()<span class="comment"># tensor([3], dtype=torch.int32)</span></span><br><span class="line">tensor.<span class="built_in">float</span>()<span class="comment"># tensor([3.1416])</span></span><br><span class="line">tensor.short()<span class="comment"># tensor([3], dtype=torch.int16)</span></span><br><span class="line">tensor.char()<span class="comment"># tensor([3], dtype=torch.int8)</span></span><br><span class="line">tensor.byte()<span class="comment"># tensor([3], dtype=torch.uint8)</span></span><br></pre></td></tr></table></figure><h3 id="基本运算">2.3 基本运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">y = torch.rand(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法</span></span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br><span class="line"><span class="built_in">print</span>(torch.add(x, y))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法：提供tensor作为add的参数</span></span><br><span class="line">result = torch.empty(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">torch.add(x, y, out=result)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法：v.xxx_(...)会改变原变量v</span></span><br><span class="line">y.add_(x)</span><br><span class="line">x.copy_(y)<span class="comment"># 复制，会改变x</span></span><br><span class="line">x.t_()<span class="comment"># 转置，会改变x</span></span><br></pre></td></tr></table></figure><h3 id="基本操作">2.4 基本操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选取</span></span><br><span class="line">x[:,<span class="number">1</span>]<span class="comment"># 表示矩阵tensor的第1列中所有行元素（从0计数）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换尺寸</span></span><br><span class="line">x = torch.randn(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">y = x.view(<span class="number">16</span>)<span class="comment"># 类似NumPy的reshape</span></span><br><span class="line">z = x.view(-<span class="number">1</span>, <span class="number">8</span>)   <span class="comment"># size -1 从其他维度推断</span></span><br><span class="line"><span class="built_in">print</span>(x.size(), y.size(), z.size())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取数值 Tensor.item函数</span></span><br><span class="line">x = torch.randn(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(x)<span class="comment"># tensor([-0.2368])</span></span><br><span class="line"><span class="built_in">print</span>(x.item())<span class="comment"># -0.23680149018764496</span></span><br><span class="line">x = torch.randn(<span class="number">5</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>,<span class="number">0</span>])<span class="comment"># tensor(0.4259)</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">0</span>,<span class="number">0</span>].item())<span class="comment"># 0.42591235041618347</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求最大值</span></span><br><span class="line">max_value, max_idx = torch.<span class="built_in">max</span>(x, dim=<span class="number">1</span>)<span class="comment"># 沿着行取最大值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求和</span></span><br><span class="line">sum_x = torch.<span class="built_in">sum</span>(x, dim=<span class="number">1</span>)<span class="comment"># 沿着行求和</span></span><br></pre></td></tr></table></figure><h3 id="与numpy互转">2.5 与NumPy互转</h3><p>注意：<strong>Tensor和numpy对象共享内存</strong>，所以他们之间的转换很快，而且几乎不会消耗什么资源。但这也意味着，如果其中一个变了，另外一个也会随之改变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Torch Tensor转NumPy Array</span></span><br><span class="line">a = torch.ones(<span class="number">5</span>)<span class="comment"># tensor([1., 1., 1., 1., 1.])</span></span><br><span class="line">b = a.numpy()<span class="comment"># [1. 1. 1. 1. 1.]</span></span><br><span class="line"><span class="comment"># 注意！b与a保持绑定关系，如：</span></span><br><span class="line">a.add_(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment"># tensor([2., 2., 2., 2., 2.])</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment"># [2. 2. 2. 2. 2.]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NumPy Array转Torch Tensor</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.ones(<span class="number">5</span>)</span><br><span class="line">b = torch.from_numpy(a)</span><br><span class="line"><span class="comment"># 注意！b与a保持绑定关系，如：</span></span><br><span class="line">np.add(a, <span class="number">1</span>, out=a)</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment"># [2. 2. 2. 2. 2.]</span></span><br><span class="line"><span class="built_in">print</span>(b)<span class="comment"># tensor([2., 2., 2., 2., 2.], dtype=torch.float64)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有的 Tensor 类型默认都是基于CPU， CharTensor 类型不支持到 NumPy 的转换.</span></span><br></pre></td></tr></table></figure><h3 id="cuda-tensor">2.6 CUDA Tensor</h3><p>在支持CUDA的NVIDIA GPU设备上，可以在GPU上建立Tensor进行运算。</p><h4 id="cuda和.cpu方法">2.6.1 .cuda和.cpu方法</h4><p>一般情况下可以使用<code>.cuda</code>方法将tensor移动到GPU，这步操作需要CUDA设备支持。</p><p>使用<code>.cpu</code>方法可以把tensor移动到CPU。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cpu_a=torch.rand(<span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line">cpu_a.<span class="built_in">type</span>()<span class="comment"># &#x27;torch.FloatTensor&#x27;</span></span><br><span class="line"></span><br><span class="line">gpu_a=cpu_a.cuda()<span class="comment"># .cuda方法移动tensor到GPU</span></span><br><span class="line">gpu_a.<span class="built_in">type</span>()<span class="comment"># &#x27;torch.cuda.FloatTensor&#x27;</span></span><br><span class="line"></span><br><span class="line">cpu_b=gpu_a.cpu()<span class="comment"># .cpu方法移动tensor到CPU</span></span><br><span class="line">cpu_b.<span class="built_in">type</span>()<span class="comment"># &#x27;torch.FloatTensor&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="to方法">2.6.2 .to方法</h4><p>使用<code>.to</code> 方法 可以将Tensor移动到任何设备中。</p><p>例1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># is_available 函数判断是否有cuda可以使用</span></span><br><span class="line"><span class="comment"># ``torch.device``将张量移动到指定的设备中</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    device = torch.device(<span class="string">&quot;cuda&quot;</span>)          <span class="comment"># a CUDA 设备对象</span></span><br><span class="line">    y = torch.ones_like(x, device=device)  <span class="comment"># 直接在GPU上创建张量y</span></span><br><span class="line">    x = x.to(device)                       <span class="comment"># 或者直接使用``.to(&quot;cuda&quot;)``将张量x移动到cuda中</span></span><br><span class="line">    z = x + y</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line">    <span class="built_in">print</span>(z.to(<span class="string">&quot;cpu&quot;</span>, torch.double))       <span class="comment"># ``.to`` 也会对变量的类型做更改</span></span><br><span class="line">    <span class="comment"># tensor([0.6132], device=&#x27;cuda:0&#x27;)</span></span><br><span class="line"><span class="comment"># tensor([0.6132], dtype=torch.float64)</span></span><br></pre></td></tr></table></figure><p>例2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用torch.cuda.is_available()来确定是否有cuda设备</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(device)<span class="comment"># cuda</span></span><br><span class="line"><span class="comment">#将tensor传送到设备</span></span><br><span class="line">gpu_b = cpu_b.to(device)</span><br><span class="line">gpu_b.<span class="built_in">type</span>()<span class="comment"># &#x27;torch.cuda.FloatTensor&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="autograd自动求导">3 Autograd自动求导</h2><p>深度学习的算法本质上是通过反向传播求导数，而PyTorch的autograd模块则实现了此功能。在Tensor上的所有操作，autograd都能为它们自动提供微分，避免了手动计算导数的复杂过程。</p><h3 id="标量">3.1 标量</h3><p>我读了教程和官方文档，发现还是有个例子会更快理解。</p><blockquote><p><ahref="https://www.jianshu.com/p/cbce2dd60120">超简单！pytorch入门教程（二）：Autograd</a></p></blockquote><p>这篇简书文章的例子有助于快速理解，值得一读。有趣的是，该文的例子中，函数值y和y对x在x1=1时的偏导均为4根号2，即5.6569。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.autograd <span class="keyword">import</span> Variable</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">x = Variable(torch.ones(<span class="number">2</span>), requires_grad = <span class="literal">True</span>) <span class="comment"># Variable是tensor的一个外包装</span></span><br><span class="line">z = <span class="number">4</span>*x*x</span><br><span class="line">y = z.norm()<span class="comment"># y最终为标量</span></span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="comment"># Variable containing:</span></span><br><span class="line"><span class="comment"># 5.6569</span></span><br><span class="line"><span class="comment"># [torch.FloatTensor of size 1]</span></span><br><span class="line"></span><br><span class="line">y.backward()    <span class="comment"># backward()函数表示backprop</span></span><br><span class="line"><span class="built_in">print</span>(x.grad)   <span class="comment"># 返回y关于x的梯度向量</span></span><br><span class="line"><span class="comment"># Variable containing:</span></span><br><span class="line"><span class="comment"># 5.6569</span></span><br><span class="line"><span class="comment"># 5.6569</span></span><br><span class="line"><span class="comment"># [torch.FloatTensor of size 2]</span></span><br></pre></td></tr></table></figure><p>在这个例子中，可以看到，当我们需要运行反向传播（BackPropagation）算法时，直接调取<code>Variable.grad</code>即可得知其梯度值。这就是PyTorch的Autograd机制自动求导的结果。</p><p>注：从0.4起, Variable 正式合并入Tensor, Variable本来实现的自动微分功能，Tensor就能支持。读者还是可以使用<code>Variable(tensor)</code>,但是这个操作其实什么都没做。所以，以后的代码建议直接使用Tensor，因为官方文档中已经将Variable设置成过期模块要想使得Tensor使用autograd功能，只需要设置<code>tensor.requries_grad=True</code>。</p><h3 id="向量">3.2 向量</h3><p>上述的例子中，因为y是标量（scalar），所以<code>y.backward()</code>相当于<code>y.backward(torch.tensor(1))</code>。但如果<code>y</code>是向量时，<code>y.backward()</code>需要输入参数<code>grad_tensors</code>表示下降梯度向量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x = torch.randn(<span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = x * <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> y.data.norm() &lt; <span class="number">1000</span>:</span><br><span class="line">    y = y * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(y)<span class="comment"># tensor([  491.3611,   545.1010, -1226.0724], grad_fn=&lt;MulBackward0&gt;)</span></span><br><span class="line"></span><br><span class="line">gradients = torch.tensor([<span class="number">0.1</span>, <span class="number">1.0</span>, <span class="number">0.0001</span>], dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">y.backward(gradients)<span class="comment"># y是3维向量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 另可：我们的返回值不是一个scalar，所以需要输入一个大小相同的张量作为参数，这里我们用ones_like函数根据x生成一个张量</span></span><br><span class="line"><span class="comment"># y.backward(torch.ones_like(x))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x.grad)<span class="comment"># tensor([1.0240e+02, 1.0240e+03, 1.0240e-01])</span></span><br></pre></td></tr></table></figure><p>这篇文章做了详细的向量autograd的分析：</p><blockquote><p><ahref="https://blog.csdn.net/witnessai1/article/details/79763596">Pytorch中的backward- CSDN</a></p></blockquote><h3 id="禁用autograd">3.3 禁用autograd</h3><p>如果<code>.requires_grad=True</code>但是你又不希望进行autograd的计算，那么可以将变量包裹在 <code>with torch.no_grad()</code>中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(x.requires_grad)<span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>((x ** <span class="number">2</span>).requires_grad)<span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line"><span class="built_in">print</span>((x ** <span class="number">2</span>).requires_grad)<span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>这个方法在测试集测试准确率的时候回经常用到。</p><h2 id="神经网络">4 神经网络</h2><blockquote><p><a href="https://pytorch.org/docs/stable/nn.html">torch.nn - PyTorchmaster documentation</a></p></blockquote><p>详细文档参阅PyTorch官方文档关于<code>nn</code>包的信息。</p><h3 id="定义网络">4.1 定义网络</h3><p>使用<code>torch.nn</code>包来构建神经网络。</p><p><code>nn</code>包依赖<code>autograd</code>包来定义模型并求导。一个<code>nn.Module</code>包含各个层和一个<code>forward(input)</code>方法，该方法返回<code>output</code>。</p><p>除了<code>nn</code>别名以外，我们还引用了<code>nn.functional</code>，这个包中包含了神经网络中使用的一些常用函数，这些函数的特点是，<strong>不具有可学习的参数</strong>（如ReLU，pool，DropOut等），这些函数可以放在构造函数中，也可以不放，但是这里建议不放。</p><p>一般情况下我们会<strong>将nn.functional设置为大写的F</strong>，这样缩写方便调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):<span class="comment"># 必要：定义神经网络模型的结构</span></span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        <span class="comment"># 1 input image channel, 6 output channels, 5x5 square convolution kernel</span></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="comment"># an affine operation: y = Wx + b</span></span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)<span class="comment"># 输入16个卷积核，各5×5像素</span></span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):<span class="comment"># 必要：定义神经网络模型的前向传播计算细节</span></span><br><span class="line">        <span class="comment"># Max pooling over a (2, 2) window</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv1(x)), (<span class="number">2</span>, <span class="number">2</span>))<span class="comment"># 卷积-&gt;激活-&gt;池化</span></span><br><span class="line">        <span class="comment"># If the size is a square you can only specify a single number</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv2(x)), <span class="number">2</span>)</span><br><span class="line">        x = x.view(-<span class="number">1</span>, self.num_flat_features(x))</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">num_flat_features</span>(<span class="params">self, x</span>):</span><br><span class="line">        size = x.size()[<span class="number">1</span>:]  <span class="comment"># all dimensions except the batch dimension</span></span><br><span class="line">        num_features = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> size:</span><br><span class="line">            num_features *= s</span><br><span class="line">        <span class="keyword">return</span> num_features</span><br><span class="line">    </span><br><span class="line">net = Net()</span><br><span class="line"><span class="built_in">print</span>(net)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Net(</span></span><br><span class="line"><span class="comment">#   (conv1): Conv2d(1, 6, kernel_size=(5, 5), stride=(1, 1))</span></span><br><span class="line"><span class="comment">#   (conv2): Conv2d(6, 16, kernel_size=(5, 5), stride=(1, 1))</span></span><br><span class="line"><span class="comment">#   (fc1): Linear(in_features=400, out_features=120, bias=True)</span></span><br><span class="line"><span class="comment">#   (fc2): Linear(in_features=120, out_features=84, bias=True)</span></span><br><span class="line"><span class="comment">#   (fc3): Linear(in_features=84, out_features=10, bias=True)</span></span><br><span class="line"><span class="comment"># )</span></span><br></pre></td></tr></table></figure><p><strong>在模型中必须要定义 <code>forward</code>函数</strong>，<code>backward</code>函数（用来计算梯度）会被<code>autograd</code>自动创建。 可以在<code>forward</code> 函数中使用任何针对 Tensor 的操作。</p><p><code>net.parameters()</code>返回可被学习的参数（权重）列表和值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">params = <span class="built_in">list</span>(net.parameters())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(params))</span><br><span class="line"><span class="built_in">print</span>(params[<span class="number">0</span>].size())  <span class="comment"># conv1&#x27;s .weight</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># torch.Size([6, 1, 5, 5])</span></span><br></pre></td></tr></table></figure><p>测试随机输入32×32。注：这个网络（LeNet）期望的输入大小是32×32，如果使用MNIST数据集来训练这个网络，请把图片大小重新调整到32×32。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span> = torch.randn(<span class="number">1</span>, <span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>)<span class="comment"># samples, channels, height, width</span></span><br><span class="line">out = net(<span class="built_in">input</span>)</span><br><span class="line"><span class="built_in">print</span>(out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tensor([[-0.0204, -0.0268, -0.0829,  0.1420, -0.0192,  0.1848,  0.0723, -0.0393,</span></span><br><span class="line"><span class="comment">#          -0.0275,  0.0867]], grad_fn=&lt;ThAddmmBackward&gt;)</span></span><br></pre></td></tr></table></figure><p>将所有参数的梯度缓存清零，然后进行随机梯度的的反向传播：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.zero_grad()<span class="comment"># 否则梯度(.grad)会累加到已存在的梯度上</span></span><br><span class="line">out.backward(torch.randn(<span class="number">1</span>, <span class="number">10</span>))<span class="comment"># 此处还未定义损失函数，仅用out反向传播作为示例</span></span><br></pre></td></tr></table></figure><p><strong>注意：<code>torch.nn</code> 只支持mini-batch输入</strong></p><p><strong><code>torch.nn</code> 只支持小批量输入。</strong>整个<code>torch.nn</code> 包都只支持小批量样本，而不支持单个样本。例如，<code>nn.Conv2d</code> 接受一个4维的张量，<code>每一维分别是sSamples * nChannels * Height * Width（样本数*通道数*高*宽）</code>。如果你有单个样本，只需使用 <code>input.unsqueeze(0)</code>来添加其它的维数。</p><h3 id="损失函数">4.2 损失函数</h3><p>一个损失函数接受一对 (output, target)作为输入，计算一个值来估计网络的输出和目标值相差多少。</p><p>output就是神经网络的输出结果，target就是数据的标记值。</p><p><code>nn</code>包中有很多不同的<ahref="https://pytorch.org/docs/nn.html#loss-functions">损失函数</a>。<code>nn.MSELoss</code>是一个比较简单的损失函数，它计算输出和目标间的<strong>均方误差</strong>，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">output = net(<span class="built_in">input</span>)<span class="comment"># 1×10 tensor</span></span><br><span class="line">target = torch.randn(<span class="number">10</span>)  <span class="comment"># 随机值作为样例</span></span><br><span class="line">target = target.view(<span class="number">1</span>, -<span class="number">1</span>)  <span class="comment"># 使target和output的shape相同，转换为1×10 tensor</span></span><br><span class="line">criterion = nn.MSELoss()</span><br><span class="line"></span><br><span class="line">loss = criterion(output, target)</span><br><span class="line"><span class="built_in">print</span>(loss)</span><br><span class="line"><span class="comment"># tensor(1.3172, grad_fn=&lt;MseLossBackward&gt;)</span></span><br></pre></td></tr></table></figure><p>当反向传播计算<code>loss</code>时，读取<code>.grad_fn</code>属性，就可以看到一个图（graph）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">input</span> -&gt; conv2d -&gt; relu -&gt; maxpool2d -&gt; conv2d -&gt; relu -&gt; maxpool2d</span><br><span class="line">      -&gt; view -&gt; linear -&gt; relu -&gt; linear -&gt; relu -&gt; linear</span><br><span class="line">      -&gt; MSELoss</span><br><span class="line">      -&gt; loss</span><br></pre></td></tr></table></figure><p>此时，如果调用<code>loss.backward()</code>函数，整个图都会去求<code>loss</code>的微分，图中属性<code>requires_grad=True</code>的张量的<code>.grad</code>属性会累计梯度。</p><p>反向几步查看这几步的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(loss.grad_fn)  <span class="comment"># MSELoss</span></span><br><span class="line"><span class="built_in">print</span>(loss.grad_fn.next_functions[<span class="number">0</span>][<span class="number">0</span>])  <span class="comment"># Linear</span></span><br><span class="line"><span class="built_in">print</span>(loss.grad_fn.next_functions[<span class="number">0</span>][<span class="number">0</span>].next_functions[<span class="number">0</span>][<span class="number">0</span>])  <span class="comment"># ReLU</span></span><br></pre></td></tr></table></figure><h3 id="反向传播">4.3 反向传播</h3><p>调用<code>loss.backward()</code>获得反向传播的误差。</p><p>但是在调用前需要清除已存在的梯度，否则梯度将被累加到已存在的梯度。</p><p>现在，我们将调用<code>loss.backward()</code>，并查看<code>conv1</code>层的偏差（bias）项在反向传播前后的梯度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">net.zero_grad()     <span class="comment"># 清除梯度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;conv1.bias.grad before backward&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(net.conv1.bias.grad)</span><br><span class="line"></span><br><span class="line">loss.backward()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;conv1.bias.grad after backward&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(net.conv1.bias.grad)</span><br><span class="line"></span><br><span class="line"><span class="comment"># conv1.bias.grad before backward</span></span><br><span class="line"><span class="comment"># tensor([0., 0., 0., 0., 0., 0.])        反向传播前梯度为0</span></span><br><span class="line"><span class="comment"># conv1.bias.grad after backward</span></span><br><span class="line"><span class="comment"># tensor([ 0.0074, -0.0249, -0.0107,  0.0326, -0.0017, -0.0059])反向传播后各bias参数出现了梯度值</span></span><br></pre></td></tr></table></figure><h3 id="更新权重">4.4 更新权重</h3><p>在实践中最简单的权重更新规则是随机梯度下降（SGD）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weight = weight - learning_rate * gradient</span><br></pre></td></tr></table></figure><p>我们可以使用简单的Python代码实现这个规则：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> net.parameters():      <span class="comment"># 遍历net对象中的所有参数进行更新</span></span><br><span class="line">    f.data.sub_(f.grad.data * learning_rate)</span><br></pre></td></tr></table></figure><p>但是当使用神经网络是想要使用各种不同的更新规则时，比如SGD、Nesterov-SGD、Adam、RMSProp等，PyTorch中构建了一个包<code>torch.optim</code>实现了所有的这些规则。使用它们非常简单：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line"><span class="comment"># create your optimizer</span></span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.01</span>)<span class="comment"># 以SGD为例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">input</span> <span class="keyword">in</span> input_batches:</span><br><span class="line">    <span class="comment"># in your training loop:</span></span><br><span class="line">    optimizer.zero_grad()   <span class="comment"># 清空累加的梯度值，和net.zero_grad()效果一致</span></span><br><span class="line">    output = net(<span class="built_in">input</span>)     <span class="comment"># 每次一个mini-batch的数据</span></span><br><span class="line">    loss = criterion(output, target)</span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()    <span class="comment"># Does the update</span></span><br></pre></td></tr></table></figure><h2 id="数据加载与预处理">5 数据加载与预处理</h2><p>PyTorch通过<code>torch.utils.data</code>对一般常用的数据加载进行了封装，可以很容易地实现多线程数据预读和批量加载。并且<code>torchvision</code>已经预先实现了常用图像数据集，包括CIFAR-10、ImageNet、COCO、MNIST、LSUN等数据集，可通过<code>torchvision.datasets</code>方便的调用。</p><h3 id="dataset">5.1 Dataset</h3><p><code>Dataset</code>是一个抽象类,为了能够方便的读取，需要将要使用的数据包装为<code>Dataset</code>类。自定义的<code>Dataset</code>需要继承它并且实现两个成员方法：</p><ol type="1"><li><code>__getitem__()</code> 该方法定义每次怎么获取数据</li><li><code>__len__()</code> 该方法返回数据集的总长度</li></ol><p>下面我们使用kaggle上的一个竞赛<ahref="https://www.kaggle.com/c/bluebook-for-bulldozers/data">bluebookforbulldozers</a>自定义一个数据集，为了方便介绍，我们使用里面的数据字典来做说明（因为条数少）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个数据集类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BulldozerDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 数据集演示 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, csv_file</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;实现初始化方法，在初始化的时候将数据读载入&quot;&quot;&quot;</span></span><br><span class="line">        self.df = pd.read_csv(csv_file)<span class="comment"># 初始化DataFrame对象</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        返回df的长度</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.df)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        根据IDX返回一列数据</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self.df.iloc[idx].SalePrice</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 实例化和使用数据集对象</span></span><br><span class="line">ds_demo = BulldozerDataset(<span class="string">&#x27;median_benchmark.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(ds_demo)<span class="comment"># 实现了__len__方法所以可以直接使用len获取数据总数</span></span><br><span class="line">ds_demo[<span class="number">0</span>]<span class="comment"># 用索引可以直接访问对应的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 11573</span></span><br><span class="line"><span class="comment"># 24000.0</span></span><br></pre></td></tr></table></figure><h3 id="dataloader">5.2 DataLoader</h3><blockquote><p><ahref="https://pytorch.org/docs/stable/data.html?highlight=dataloader#torch.utils.data.DataLoader">torch.utils.data.DataLoader</a></p></blockquote><p><code>DataLoader</code>为我们提供了对<code>Dataset</code>的<strong>读取操作</strong>，常用参数有：</p><ul><li><code>batch_size</code> （每个batch的大小）</li><li><code>shuffle</code>（是否进行shuffle操作，即在每轮epoch时是否对数据重新洗牌）</li><li><code>num_workers</code> （加载数据的时候使用几个子进程）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dl = torch.utils.data.DataLoader(ds_demo, batch_size=<span class="number">10</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取单批数据示例</span></span><br><span class="line">idata = <span class="built_in">iter</span>(dl)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(idata))</span><br><span class="line"><span class="comment"># tensor([24000., 24000., 24000., 24000., 24000., 24000., 24000., 24000., 24000.,</span></span><br><span class="line"><span class="comment">#         24000.], dtype=torch.float64)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有批数据示例</span></span><br><span class="line"><span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(dl):</span><br><span class="line">    <span class="built_in">print</span>(i,data)</span><br><span class="line">    <span class="keyword">break</span><span class="comment"># 这里只循环一遍</span></span><br><span class="line"><span class="comment"># 0 tensor([24000., 24000., 24000., 24000., 24000., 24000., 24000., 24000., 24000.,</span></span><br><span class="line"><span class="comment">#         24000.], dtype=torch.float64)</span></span><br></pre></td></tr></table></figure><h3 id="torchvision">5.3 torchvision</h3><p><code>torchvision</code>是PyTorch中专门用来处理图像的库。</p><h4 id="torchvision.datasets">5.3.1 torchvision.datasets</h4><p><code>torchvision.datasets</code>可以理解为PyTorch团队自定义的<code>Dataset</code>，这些<code>Dataset</code>帮我们提前处理好了很多的图片数据集，我们拿来就可以直接使用：</p><ul><li>MNIST</li><li>COCO</li><li>Captions</li><li>Detection</li><li>LSUN</li><li>ImageFolder</li><li>Imagenet-12</li><li>CIFAR</li><li>STL10</li><li>SVHN</li><li>PhotoTour</li></ul><p>我们可以直接使用，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision.datasets <span class="keyword">as</span> datasets</span><br><span class="line">trainset = datasets.MNIST(root=<span class="string">&#x27;./data&#x27;</span>, <span class="comment"># 表示 MNIST 数据的加载的目录</span></span><br><span class="line">                        train=<span class="literal">True</span>,  <span class="comment"># 表示是否加载数据库的训练集，false的时候加载测试集</span></span><br><span class="line">                        download=<span class="literal">True</span>, <span class="comment"># 表示是否自动下载 MNIST 数据集</span></span><br><span class="line">                        transform=<span class="literal">None</span>) <span class="comment"># 表示是否需要对数据进行预处理，none为不进行预处理</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="torchvision.models">5.3.2 torchvision.models</h4><p><code>torchvision</code>不仅提供了常用图片数据集，还提供了训练好的模型，可以加载之后，直接使用，或者在进行迁移学习<code>torchvision.models</code>模块的 子模块中包含以下模型结构。</p><ul><li>AlexNet</li><li>VGG</li><li>ResNet</li><li>SqueezeNet</li><li>DenseNet</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#我们直接可以使用训练好的模型，当然这个与datasets相同，都是需要从服务器下载的</span></span><br><span class="line"><span class="keyword">import</span> torchvision.models <span class="keyword">as</span> models</span><br><span class="line">resnet18 = models.resnet18(pretrained=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="torchvision.transforms">5.3.3 torchvision.transforms</h4><p><code>transforms</code>模块提供了一般的图像转换操作类，用作数据的处理和增广。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms <span class="keyword">as</span> transforms</span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.RandomCrop(<span class="number">32</span>, padding=<span class="number">4</span>),  <span class="comment">#先四周填充0，在吧图像随机裁剪成32*32</span></span><br><span class="line">    transforms.RandomHorizontalFlip(),  <span class="comment">#图像一半的概率翻转，一半的概率不翻转</span></span><br><span class="line">    transforms.RandomRotation((-<span class="number">45</span>,<span class="number">45</span>)), <span class="comment">#随机旋转</span></span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize((<span class="number">0.4914</span>, <span class="number">0.4822</span>, <span class="number">0.4465</span>), (<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>)), <span class="comment">#R,G,B每层的归一化用到的均值和方差</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>肯定有人会问：(0.485, 0.456, 0.406), (0.2023, 0.1994, 0.2010)这几个数字是什么意思？</p><blockquote><p>官方的这个帖子有详细的说明: <ahref="https://discuss.pytorch.org/t/normalization-in-the-mnist-example/457/21"class="uri">https://discuss.pytorch.org/t/normalization-in-the-mnist-example/457/21</a>这些都是根据ImageNet训练的归一化参数，可以直接使用，我们认为这个是固定值就可以</p></blockquote><h2 id="图像分类实例">6 图像分类实例</h2><p>基于CIFAR10数据集，实现一个图像分类器实例。</p><p>训练一个典型的图像分类分类器依次按照下列顺序进行：</p><ol type="1"><li>使用<code>torchvision</code>加载和归一化CIFAR10训练集和测试集</li><li>定义一个卷积神经网络</li><li>定义损失函数</li><li>在训练集上训练网络</li><li>在测试集上测试网络</li></ol><h3 id="处理数据">6.1 处理数据</h3><p>一般情况下处理图像、文本、音频和视频数据时，可以使用标准的Python包来加载数据到一个numpy数组中。然后把这个数组转换成 <code>torch.*Tensor</code>。</p><ul><li>图像可以使用 Pillow, OpenCV</li><li>音频可以使用 scipy, librosa</li><li>文本可以使用原始Python和Cython来加载，或者使用 NLTK或 SpaCy处理</li></ul><p>特别的，对于图像任务，我们创建了一个包<code>torchvision</code>，它包含了处理一些基本图像数据集的方法。这些数据集包括Imagenet, CIFAR10, MNIST 等。除了数据加载以外，<code>torchvision</code>还包含了图像转换器， <code>torchvision.datasets</code> 和<code>torch.utils.data.DataLoader</code>。</p><p><code>torchvision</code>包不仅提供了巨大的便利，也避免了代码的重复。</p><p>在这个教程中，我们使用CIFAR10数据集，它有如下10个类别 ：‘airplane’,‘automobile’, ‘bird’, ‘cat’, ‘deer’, ‘dog’, ‘frog’, ‘horse’, ‘ship’,‘truck’。CIFAR-10的图像都是3x32x32大小的，即，3颜色通道，32x32像素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose([transforms.ToTensor(),transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))])</span><br><span class="line"></span><br><span class="line">trainset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>, download=<span class="literal">True</span>, transform=transform)<span class="comment"># 配置CIFAR10训练集</span></span><br><span class="line">trainloader = torch.utils.data.DataLoader(trainset, batch_size=<span class="number">4</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">2</span>)<span class="comment"># 配置数据加载器，每个mini-batch含4张图</span></span><br><span class="line"></span><br><span class="line">testset = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>, transform=transform)<span class="comment"># 配置CIFAR10测试集</span></span><br><span class="line">testloader = torch.utils.data.DataLoader(testset, batch_size=<span class="number">4</span>, shuffle=<span class="literal">False</span>, num_workers=<span class="number">2</span>)<span class="comment"># 配置数据加载器，测试时也是4个图一个mini-batch</span></span><br><span class="line"></span><br><span class="line">classes = (<span class="string">&#x27;plane&#x27;</span>, <span class="string">&#x27;car&#x27;</span>, <span class="string">&#x27;bird&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;deer&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;frog&#x27;</span>, <span class="string">&#x27;horse&#x27;</span>, <span class="string">&#x27;ship&#x27;</span>, <span class="string">&#x27;truck&#x27;</span>)<span class="comment"># 共10分类</span></span><br></pre></td></tr></table></figure><p>可以通过<code>matplotlib</code>库来绘图查看数据集中的图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示图像的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imshow</span>(<span class="params">img</span>):</span><br><span class="line">    img = img / <span class="number">2</span> + <span class="number">0.5</span>     <span class="comment"># unnormalize</span></span><br><span class="line">    npimg = img.numpy()</span><br><span class="line">    plt.imshow(np.transpose(npimg, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取随机数据</span></span><br><span class="line">dataiter = <span class="built_in">iter</span>(trainloader)<span class="comment"># 配置迭代器从数据加载器中读取数据</span></span><br><span class="line">images, labels = dataiter.<span class="built_in">next</span>()<span class="comment"># 读取下一项数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 展示图像</span></span><br><span class="line">imshow(torchvision.utils.make_grid(images))<span class="comment"># make_grid把mini-batch的图片张量变成图片网格</span></span><br><span class="line"><span class="comment"># 显示图像标签</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="string">&#x27;%5s&#x27;</span> % classes[labels[j]] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><h3 id="定义卷积神经网络模型">6.2 定义卷积神经网络模型</h3><p>从之前的神经网络一节复制神经网络代码，并修改为输入3通道图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>)<span class="comment"># 3通道（彩色图片），6个5×5的卷积核</span></span><br><span class="line">        self.pool = nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.pool(F.relu(self.conv1(x)))</span><br><span class="line">        x = self.pool(F.relu(self.conv2(x)))</span><br><span class="line">        x = x.view(-<span class="number">1</span>, <span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>)</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    </span><br><span class="line">net = Net()</span><br></pre></td></tr></table></figure><h3 id="定义损失函数与优化器">6.3 定义损失函数与优化器</h3><p>我们使用交叉熵作为损失函数，使用带动量的随机梯度下降。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line"></span><br><span class="line">criterion = nn.CrossEntropyLoss()<span class="comment"># 交叉熵损失函数</span></span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.001</span>, momentum=<span class="number">0.9</span>)</span><br></pre></td></tr></table></figure><h3 id="训练神经网络模型">6.4 训练神经网络模型</h3><p>有趣的时刻开始了。我们只需在数据迭代器上循环，将数据输入给网络，并优化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):  <span class="comment"># 多轮（epoch）训练</span></span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(trainloader, <span class="number">0</span>):<span class="comment"># 多mini-batch循环</span></span><br><span class="line">        <span class="comment"># 获取输入</span></span><br><span class="line">        inputs, labels = data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 梯度置0（清空累加grad）</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 正向传播，反向传播，优化</span></span><br><span class="line">        outputs = net(inputs)<span class="comment"># 模型正向传播，inputs=&gt;outputs</span></span><br><span class="line">        loss = criterion(outputs, labels)<span class="comment"># 调用交叉熵损失</span></span><br><span class="line">        loss.backward()<span class="comment"># 对损失进行反向传播</span></span><br><span class="line">        optimizer.step()<span class="comment"># 对参数梯度下降一步</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打印状态信息</span></span><br><span class="line">        running_loss += loss.item()</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2000</span> == <span class="number">1999</span>:    <span class="comment"># 每2000批次打印一次</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[%d, %5d] loss: %.3f&#x27;</span> %</span><br><span class="line">                  (epoch + <span class="number">1</span>, i + <span class="number">1</span>, running_loss / <span class="number">2000</span>))</span><br><span class="line">            running_loss = <span class="number">0.0</span><span class="comment"># running_loss是2000个batch的loss和</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Finished Training&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="测试神经网络模型">6.5 测试神经网络模型</h3><p>我们在整个训练集上进行了2轮（epoch）训练，但是我们需要检查网络是否从数据集中学习到有用的东西。通过预测神经网络输出的类别标签与实际情况标签进行对比来进行检测。如果预测正确，我们把该样本添加到正确预测列表。第一步，显示测试集中的图片并熟悉图片内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">dataiter = <span class="built_in">iter</span>(testloader)</span><br><span class="line">images, labels = dataiter.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图片</span></span><br><span class="line">imshow(torchvision.utils.make_grid(images))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;GroundTruth: &#x27;</span>, <span class="string">&#x27; &#x27;</span>.join(<span class="string">&#x27;%5s&#x27;</span> % classes[labels[j]] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对模型输入图片</span></span><br><span class="line">outputs = net(images)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出是10个标签的分值。</span></span><br><span class="line"><span class="comment"># 一个类别的分值越大，神经网络越认为它是这个类别。所以让我们得到最高能量的标签。</span></span><br><span class="line">_, predicted = torch.<span class="built_in">max</span>(outputs, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Predicted: &#x27;</span>, <span class="string">&#x27; &#x27;</span>.join(<span class="string">&#x27;%5s&#x27;</span> % classes[predicted[j]] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)))<span class="comment"># 列表推导式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计模型在整个测试集上的测试结果</span></span><br><span class="line">correct = <span class="number">0</span></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():<span class="comment"># 禁用梯度计算</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> testloader:<span class="comment"># 加载测试数据</span></span><br><span class="line">        images, labels = data</span><br><span class="line">        outputs = net(images)<span class="comment"># 正向传播</span></span><br><span class="line">        _, predicted = torch.<span class="built_in">max</span>(outputs.data, <span class="number">1</span>)<span class="comment"># 计算mini-batch的预测结果</span></span><br><span class="line">        total += labels.size(<span class="number">0</span>)<span class="comment"># 统计已测试图片个数</span></span><br><span class="line">        correct += (predicted == labels).<span class="built_in">sum</span>().item()<span class="comment"># 统计预测正确的个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Accuracy of the network on the 10000 test images: %d %%&#x27;</span> % (<span class="number">100</span> * correct / total))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Accuracy of the network on the 10000 test images: 9 %</span></span><br></pre></td></tr></table></figure><p>结果看起来不错，至少比随机选择要好，随机选择的正确率为10%。似乎网络学习到了一些东西。</p><p>在识别哪一个类的时候好，哪一个不好呢？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class_correct = <span class="built_in">list</span>(<span class="number">0.</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">class_total = <span class="built_in">list</span>(<span class="number">0.</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> testloader:</span><br><span class="line">        images, labels = data</span><br><span class="line">        outputs = net(images)</span><br><span class="line">        _, predicted = torch.<span class="built_in">max</span>(outputs, <span class="number">1</span>)</span><br><span class="line">        c = (predicted == labels).squeeze()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            label = labels[i]</span><br><span class="line">            class_correct[label] += c[i].item()<span class="comment"># 统计每类的正确数</span></span><br><span class="line">            class_total[label] += <span class="number">1</span><span class="comment"># 统计每类的预测总数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Accuracy of %5s : %2d %%&#x27;</span> % (</span><br><span class="line">        classes[i], <span class="number">100</span> * class_correct[i] / class_total[i]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Accuracy of plane : 99 %</span></span><br><span class="line"><span class="comment"># Accuracy of   car :  0 %</span></span><br><span class="line"><span class="comment"># Accuracy of  bird :  0 %</span></span><br><span class="line"><span class="comment"># Accuracy of   cat :  0 %</span></span><br><span class="line"><span class="comment"># Accuracy of  deer :  0 %</span></span><br><span class="line"><span class="comment"># Accuracy of   dog :  0 %</span></span><br><span class="line"><span class="comment"># Accuracy of  frog :  0 %</span></span><br><span class="line"><span class="comment"># Accuracy of horse :  0 %</span></span><br><span class="line"><span class="comment"># Accuracy of  ship :  0 %</span></span><br><span class="line"><span class="comment"># Accuracy of truck :  0 %</span></span><br></pre></td></tr></table></figure><h3 id="在gpu上训练">6.6 在GPU上训练</h3><h4 id="检查gpu支持">6.6.1 检查GPU支持</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">&quot;cuda:0&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="comment"># 确认我们的电脑支持CUDA，然后显示CUDA信息：</span></span><br><span class="line"><span class="built_in">print</span>(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># device(type=&#x27;cuda&#x27;, index=0)</span></span><br></pre></td></tr></table></figure><p>本节的其余部分假定<code>device</code>是CUDA设备。</p><h4 id="神经网络模型载入cuda">6.6.2 神经网络模型载入CUDA</h4><p><code>torch.nn.Module.to</code>将递归遍历所有模块并将模块的参数和缓冲区转换成CUDA张量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.to(device)<span class="comment"># 把神经网络模型载入CUDA</span></span><br></pre></td></tr></table></figure><blockquote><p><ahref="https://pytorch.org/docs/stable/nn.html?highlight=#torch.nn.Module.to">torch.nn.Module.to</a></p></blockquote><h4 id="输入数据载入cuda">6.6.3 输入数据载入CUDA</h4><p>记住：inputs 和 targets 也要转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inputs, labels = inputs.to(device), labels.to(device)</span><br></pre></td></tr></table></figure><blockquote><p><ahref="https://pytorch.org/docs/stable/tensors.html?highlight=#torch.Tensor.to">torch.Tensor.to</a></p></blockquote><p>为什么我们没注意到GPU的速度提升很多？那是因为网络非常的小。</p><p><strong>实践:</strong>尝试增加你的网络的宽度（第一个<code>nn.Conv2d</code>的第2个参数，第二个<code>nn.Conv2d</code>的第一个参数，它们需要是相同的数字），看看你得到了什么样的加速。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cascade R-CNN论文阅读笔记</title>
      <link href="/posts/Cascade-R-CNN%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/Cascade-R-CNN%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p><ahref="http://openaccess.thecvf.com/content_cvpr_2018/papers/Cai_Cascade_R-CNN_Delving_CVPR_2018_paper.pdf">CascadeR-CNN</a></p></blockquote><img src="/posts/Cascade-R-CNN%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/cascade_r-cnn.png" class="" title="Cascade R-CNN"><p>Cascade R-CNN[1]是R-CNN系列的最新进展，发表于CVPR 2018。</p><span id="more"></span><p>CascadeR-CNN关注于IoU的阈值设定问题。模型训练时，区域提议出的边界框若与真实值（ground-truth）的IoU达到阈值，则为正例，否则为负例。然后再对边界框坐标及长宽进行回归调整修正。若IoU阈值过高，则正例过少、负例过多，训练会出现过拟合问题；反之，若IoU阈值过低，对低IoU的目标边界框有改善，但也会导致正例过多。</p><p>为了解决训练时IoU阈值设定的问题，CascadeR-CNN提出了一款级联R-CNN头（head）的结构，即每个R-CNN头设定一个IoU阈值，每一级使用上一级回归修正过的候选框作为输入。这种结构使得每一个头都可以得到充足的正样本，且正样本的质量因级联输入而逐渐提高。在测试时，通过各级联头输出的均值作为测试预测结果。</p><p>最新的Cascade R-CNN通过对IoU阈值问题的进一步探索和结构改进，在MSCOCO数据集上创造了R-CNN系列图像目标检测mAP水平的新高。相同ResNet-101的backbone，在IoU阈值0.5:0.95、0.5、0.75下，mAP(%)：FasterR-CNN为34.9、55.7、37.4，Mask R-CNN为38.2、60.3、41.7，CascadeR-CNN为42.8、62.1、46.3。</p><table><thead><tr class="header"><th></th><th>backbone</th><th>AP</th><th>AP_50</th><th>AP_75</th></tr></thead><tbody><tr class="odd"><td>Faster R-CNN+++</td><td>ResNet-101</td><td>34.9</td><td>55.7</td><td>37.4</td></tr><tr class="even"><td>Mask R-CNN</td><td>ResNet-101</td><td>38.2</td><td>60.3</td><td>41.7</td></tr><tr class="odd"><td>Cascade R-CNN</td><td>ResNet-101</td><td>42.8</td><td>62.1</td><td>46.3</td></tr></tbody></table><p><strong>注</strong>：IoU阈值0.5:0.95表示阈值从0.5到0.95，步长0.05测定的mAP均值</p><h3 id="参考文献">参考文献</h3><p>[1] Cai Z, Vasconcelos N. Cascade r-cnn: Delving into high qualityobject detection[C]//Proceedings of the IEEE Conference on ComputerVision and Pattern Recognition. 2018: 6154-6162.</p>]]></content>
      
      
      
        <tags>
            
            <tag> R-CNN </tag>
            
            <tag> Object Detection </tag>
            
            <tag> Papers </tag>
            
            <tag> CV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>句子（2019.2.23）</title>
      <link href="/posts/%E5%8F%A5%E5%AD%90%EF%BC%882019-2-23%EF%BC%89/"/>
      <url>/posts/%E5%8F%A5%E5%AD%90%EF%BC%882019-2-23%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如果每一个人都能够对自己有一个清晰的认识，就会免去很多无知的冲动。在现实生活中，往往由于人们夸大自己的能力，高估自己的水平，而经常会有一些不切实际的要求；当这些要求不能获得满足时，痛苦也就难免。[1]</p></blockquote><span id="more"></span><h3 id="参考文献">参考文献</h3><p>[1] 侯玉波. 社会心理学: 第三版. 北京: 北京大学出版社, 2013: 2.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Digest </tag>
            
            <tag> Psychology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello, Hexo!</title>
      <link href="/posts/Hello-Hexo/"/>
      <url>/posts/Hello-Hexo/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://hexo.io">Hexo</a>: A fast, simple &amp; powerfulblog framework</p></blockquote><p>今天我基于Hexo搭建了新的个人站点，并部署在了GitHubPages上。新的站点仍然可以通过我的域名heary.cn访问，并部署了全站HTTPS传输加密。</p><p>计划将新的所学所想记录下来。</p><p><strong><em>Hello, Hexo!</em></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>层次注意力的可视化分析</title>
      <link href="/posts/%E5%B1%82%E6%AC%A1%E6%B3%A8%E6%84%8F%E5%8A%9B%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E5%88%86%E6%9E%90/"/>
      <url>/posts/%E5%B1%82%E6%AC%A1%E6%B3%A8%E6%84%8F%E5%8A%9B%E7%9A%84%E5%8F%AF%E8%A7%86%E5%8C%96%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>在Yelp review和Yahoo Answers数据集上，层次注意力的可视化分析</p><span id="more"></span><h1 id="层次注意力的可视化分析">层次注意力的可视化分析</h1><h2 id="yelp-review与情感分析">1 Yelp review与情感分析</h2><p>Yelpreview的文本内容是对餐饮、旅宿等商品及服务的用户评论，包含用户的好恶情感。层次注意力模型很好地实现了对情感信息的理解，包含更强烈用户情感的句子和词均具有更高的注意力权重。</p><p><a href="/HAN/yelp.html"><strong>Yelp review -层次注意力可视化</strong></a></p><h2 id="yahoo-answers与主题标记">2 Yahoo Answers与主题标记</h2><p>YahooAnswers的文本内容是互联网问答信息。每个问答（问题主题、问题描述、回答内容）都属于相应的问答主题。层次注意力模型很好地实现了对主题信息的理解，与主题相关性高的句子或词具有更高的注意力权重。</p><p><a href="/HAN/yahoo.html"><strong>Yahoo Answers -层次注意力可视化</strong></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Deep Learning </tag>
            
            <tag> NLP </tag>
            
            <tag> HAN </tag>
            
            <tag> Visualize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tf.variable_scope - HAN ValueError Analysis</title>
      <link href="/posts/tf-variable-scope-HAN-ValueError-Analysis/"/>
      <url>/posts/tf-variable-scope-HAN-ValueError-Analysis/</url>
      
        <content type="html"><![CDATA[<p>to be continued <span id="more"></span></p><blockquote><p><ahref="https://www.tensorflow.org/api_docs/python/tf/variable_scope">tf.variable_scope| TensorFlow</a></p></blockquote><blockquote><p><ahref="http://blog.csdn.net/wenqiwenqi123/article/details/79436722">解决ValueError:Trying to share variablernn/multi_rnn_cell/cell_0/basic_lstm_cell/kernel</a></p></blockquote><p>2018.2.13</p><p>Comparing <strong>RNNCell</strong> in <code>API r1.0</code> and in<code>API r1.6</code></p><blockquote><p>This module provides a number of basic commonly used RNN cells, suchas LSTM (Long Short Term Memory) or GRU (Gated Recurrent Unit), and anumber of operators that allow add dropouts, projections, or embeddingsfor inputs. Constructing multi-layer cells is supported by the class<code>MultiRNNCell</code>, or by calling the <code>rnn</code> opsseveral times. Every <code>RNNCell</code> must have the properties belowand implement <code>__call__</code> with the following signature.</p><p><ahref="https://www.tensorflow.org/versions/r1.0/api_docs/python/tf/contrib/rnn/RNNCell">tf.contrib.rnn.RNNCell- API r1.0</a></p></blockquote><blockquote><p>Every <code>RNNCell</code> must have the properties below andimplement <code>call</code> with the signature<code>(output, next_state) = call(input, state)</code>. The optionalthird input argument, <code>scope</code>, is allowed for backwardscompatibility purposes; but should be left off for new subclasses.</p><p><ahref="https://www.tensorflow.org/api_docs/python/tf/contrib/rnn/RNNCell">tf.contrib.rnn.RNNCell- API r1.6</a></p></blockquote><ul><li>I guess I should <strong>def</strong> new <code>call</code><em>func</em> to replace old <code>__call__</code> <em>func</em> andreturn <code>(new_h, new_c)</code> according to <code>API r1.6</code>.<ul><li><code>x</code> input</li><li><code>new_h</code> output</li><li><code>c</code>, <code>new_c</code> state</li></ul></li></ul><p>ValueError:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ValueError: Trying to share variable tcm/word/fw/multi_rnn_cell/cell_0/bn_lstm/W_xh, but specified shape (100, 320) and found shape (200, 320).</span><br></pre></td></tr></table></figure><p>Traceback:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">C:\Python36\python.exe D:/hierarchical-attention-networks-master/worker.py --mode=train --device=/gpu:0 --batch-size=30</span><br><span class="line">epoch 1</span><br><span class="line">data loaded</span><br><span class="line">2018-03-12 21:59:50.508320: I C:\tf_jenkins\workspace\rel-win\M\windows\PY\36\tensorflow\core\platform\cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;D:/hierarchical-attention-networks-master/worker.py&quot;, line 207, in &lt;module&gt;</span><br><span class="line">    main()</span><br><span class="line">  File &quot;D:/hierarchical-attention-networks-master/worker.py&quot;, line 202, in main</span><br><span class="line">    train()</span><br><span class="line">  File &quot;D:/hierarchical-attention-networks-master/worker.py&quot;, line 153, in train</span><br><span class="line">    model, saver = model_fn(s)</span><br><span class="line">  File &quot;D:/hierarchical-attention-networks-master/worker.py&quot;, line 86, in HAN_model_1</span><br><span class="line">    is_training=is_training,</span><br><span class="line">  File &quot;D:\hierarchical-attention-networks-master\HAN_model.py&quot;, line 67, in __init__</span><br><span class="line">    self._init_body(scope)</span><br><span class="line">  File &quot;D:\hierarchical-attention-networks-master\HAN_model.py&quot;, line 140, in _init_body</span><br><span class="line">    self.sentence_cell, self.sentence_cell, sentence_inputs, self.sentence_lengths, scope=scope)</span><br><span class="line">  File &quot;D:\hierarchical-attention-networks-master\model_components.py&quot;, line 24, in bidirectional_rnn</span><br><span class="line">    scope=scope))</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\rnn.py&quot;, line 416, in bidirectional_dynamic_rnn</span><br><span class="line">    time_major=time_major, scope=fw_scope)</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\rnn.py&quot;, line 632, in dynamic_rnn</span><br><span class="line">    dtype=dtype)</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\rnn.py&quot;, line 829, in _dynamic_rnn_loop</span><br><span class="line">    swap_memory=swap_memory)</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\control_flow_ops.py&quot;, line 3096, in while_loop</span><br><span class="line">    result = loop_context.BuildLoop(cond, body, loop_vars, shape_invariants)</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\control_flow_ops.py&quot;, line 2874, in BuildLoop</span><br><span class="line">    pred, body, original_loop_vars, loop_vars, shape_invariants)</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\control_flow_ops.py&quot;, line 2814, in _BuildLoop</span><br><span class="line">    body_result = body(*packed_vars_for_body)</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\control_flow_ops.py&quot;, line 3075, in &lt;lambda&gt;</span><br><span class="line">    body = lambda i, lv: (i + 1, orig_body(*lv))</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\rnn.py&quot;, line 798, in _time_step</span><br><span class="line">    skip_conditionals=True)</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\rnn.py&quot;, line 249, in _rnn_step</span><br><span class="line">    new_output, new_state = call_cell()</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\rnn.py&quot;, line 786, in &lt;lambda&gt;</span><br><span class="line">    call_cell = lambda: cell(input_t, state)</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\rnn_cell_impl.py&quot;, line 190, in __call__</span><br><span class="line">    return super(RNNCell, self).__call__(inputs, state)</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\layers\base.py&quot;, line 696, in __call__</span><br><span class="line">    outputs = self.call(inputs, *args, **kwargs)</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\rnn_cell_impl.py&quot;, line 1234, in call</span><br><span class="line">    cur_inp, new_state = cell(cur_inp, cur_state)</span><br><span class="line">  File &quot;D:\hierarchical-attention-networks-master\bn_lstm.py&quot;, line 74, in __call__</span><br><span class="line">    initializer=orthogonal_initializer())</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\variable_scope.py&quot;, line 1297, in get_variable</span><br><span class="line">    constraint=constraint)</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\variable_scope.py&quot;, line 1093, in get_variable</span><br><span class="line">    constraint=constraint)</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\variable_scope.py&quot;, line 431, in get_variable</span><br><span class="line">    return custom_getter(**custom_getter_kwargs)</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\rnn_cell_impl.py&quot;, line 193, in _rnn_get_variable</span><br><span class="line">    variable = getter(*args, **kwargs)</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\variable_scope.py&quot;, line 408, in _true_getter</span><br><span class="line">    use_resource=use_resource, constraint=constraint)</span><br><span class="line">  File &quot;C:\Python36\lib\site-packages\tensorflow\python\ops\variable_scope.py&quot;, line 752, in _get_single_variable</span><br><span class="line">    found_var.get_shape()))</span><br><span class="line">ValueError: Trying to share variable tcm/word/fw/multi_rnn_cell/cell_0/bn_lstm/W_xh, but specified shape (100, 320) and found shape (200, 320).</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>in <code>HAN_model.py</code> below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HANClassifierModel</span>():</span><br><span class="line">  <span class="string">&quot;&quot;&quot; Implementation of document classification model described in</span></span><br><span class="line"><span class="string">    `Hierarchical Attention Networks for Document Classification (Yang et al., 2016)`</span></span><br><span class="line"><span class="string">    (https://www.cs.cmu.edu/~diyiy/docs/naacl16.pdf)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,</span></span><br><span class="line"><span class="params">               vocab_size,</span></span><br><span class="line"><span class="params">               embedding_size,</span></span><br><span class="line"><span class="params">               classes,</span></span><br><span class="line"><span class="params">               word_cell,</span></span><br><span class="line"><span class="params">               sentence_cell,</span></span><br><span class="line"><span class="params">               word_output_size,</span></span><br><span class="line"><span class="params">               sentence_output_size,</span></span><br><span class="line"><span class="params">               max_grad_norm,</span></span><br><span class="line"><span class="params">               dropout_keep_proba,</span></span><br><span class="line"><span class="params">               is_training=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">               learning_rate=<span class="number">1e-4</span>,</span></span><br><span class="line"><span class="params">               device=<span class="string">&#x27;/cpu:0&#x27;</span>,</span></span><br><span class="line"><span class="params">               scope=<span class="literal">None</span></span>):</span><br><span class="line">    self.vocab_size = vocab_size</span><br><span class="line">    self.embedding_size = embedding_size</span><br><span class="line">    self.classes = classes</span><br><span class="line">    self.word_cell = word_cell</span><br><span class="line">    self.word_output_size = word_output_size</span><br><span class="line">    self.sentence_cell = sentence_cell</span><br><span class="line">    self.sentence_output_size = sentence_output_size</span><br><span class="line">    self.max_grad_norm = max_grad_norm</span><br><span class="line">    self.dropout_keep_proba = dropout_keep_proba</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(scope <span class="keyword">or</span> <span class="string">&#x27;tcm&#x27;</span>) <span class="keyword">as</span> scope:</span><br><span class="line">      self.global_step = tf.Variable(<span class="number">0</span>, name=<span class="string">&#x27;global_step&#x27;</span>, trainable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> is_training <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        self.is_training = is_training</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        self.is_training = tf.placeholder(dtype=tf.<span class="built_in">bool</span>, name=<span class="string">&#x27;is_training&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      self.sample_weights = tf.placeholder(shape=(<span class="literal">None</span>,), dtype=tf.float32, name=<span class="string">&#x27;sample_weights&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># [document x sentence x word]</span></span><br><span class="line">      self.inputs = tf.placeholder(shape=(<span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>), dtype=tf.int32, name=<span class="string">&#x27;inputs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># [document x sentence]</span></span><br><span class="line">      self.word_lengths = tf.placeholder(shape=(<span class="literal">None</span>, <span class="literal">None</span>), dtype=tf.int32, name=<span class="string">&#x27;word_lengths&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># [document]</span></span><br><span class="line">      self.sentence_lengths = tf.placeholder(shape=(<span class="literal">None</span>,), dtype=tf.int32, name=<span class="string">&#x27;sentence_lengths&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># [document]</span></span><br><span class="line">      self.labels = tf.placeholder(shape=(<span class="literal">None</span>,), dtype=tf.int32, name=<span class="string">&#x27;labels&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      (self.document_size,</span><br><span class="line">        self.sentence_size,</span><br><span class="line">        self.word_size) = tf.unstack(tf.shape(self.inputs))</span><br><span class="line"></span><br><span class="line">      self._init_embedding(scope)</span><br><span class="line"></span><br><span class="line">      <span class="comment"># embeddings cannot be placed on GPU</span></span><br><span class="line">      <span class="keyword">with</span> tf.device(device):</span><br><span class="line">        self._init_body(scope)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">&#x27;train&#x27;</span>):</span><br><span class="line">      self.cross_entropy = tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.labels, logits=self.logits)</span><br><span class="line"></span><br><span class="line">      self.loss = tf.reduce_mean(tf.multiply(self.cross_entropy, self.sample_weights))</span><br><span class="line">      tf.summary.scalar(<span class="string">&#x27;loss&#x27;</span>, self.loss)</span><br><span class="line"></span><br><span class="line">      self.accuracy = tf.reduce_mean(tf.cast(tf.nn.in_top_k(self.logits, self.labels, <span class="number">1</span>), tf.float32))</span><br><span class="line">      tf.summary.scalar(<span class="string">&#x27;accuracy&#x27;</span>, self.accuracy)</span><br><span class="line"></span><br><span class="line">      tvars = tf.trainable_variables()</span><br><span class="line"></span><br><span class="line">      grads, global_norm = tf.clip_by_global_norm(</span><br><span class="line">        tf.gradients(self.loss, tvars),</span><br><span class="line">        self.max_grad_norm)</span><br><span class="line">      tf.summary.scalar(<span class="string">&#x27;global_grad_norm&#x27;</span>, global_norm)</span><br><span class="line"></span><br><span class="line">      opt = tf.train.AdamOptimizer(learning_rate)</span><br><span class="line"></span><br><span class="line">      self.train_op = opt.apply_gradients(</span><br><span class="line">        <span class="built_in">zip</span>(grads, tvars), name=<span class="string">&#x27;train_op&#x27;</span>,</span><br><span class="line">        global_step=self.global_step)</span><br><span class="line"></span><br><span class="line">      self.summary_op = tf.summary.merge_all()</span><br></pre></td></tr></table></figure><p>in <code>bn_lstm.py</code> below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BNLSTMCell</span>(<span class="title class_ inherited__">RNNCell</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Batch normalized LSTM as described in http://arxiv.org/abs/1603.09025&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num_units, training</span>):</span><br><span class="line">        self.num_units = num_units</span><br><span class="line">        self.training = training</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">state_size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.num_units, self.num_units)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">output_size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.num_units</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, x, state, scope=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">with</span> tf.variable_scope(scope <span class="keyword">or</span> <span class="string">&#x27;bn_lstm&#x27;</span>):</span><br><span class="line">            c, h = state</span><br><span class="line"></span><br><span class="line">            x_size = x.get_shape().as_list()[<span class="number">1</span>]</span><br><span class="line">            W_xh = tf.get_variable(<span class="string">&#x27;W_xh&#x27;</span>,    <span class="comment"># ValueError!!!</span></span><br><span class="line">                [x_size, <span class="number">4</span> * self.num_units],</span><br><span class="line">                initializer=orthogonal_initializer())</span><br><span class="line">            W_hh = tf.get_variable(<span class="string">&#x27;W_hh&#x27;</span>,</span><br><span class="line">                [self.num_units, <span class="number">4</span> * self.num_units],</span><br><span class="line">                initializer=bn_lstm_identity_initializer(<span class="number">0.95</span>))</span><br><span class="line">            bias = tf.get_variable(<span class="string">&#x27;bias&#x27;</span>, [<span class="number">4</span> * self.num_units])</span><br><span class="line"></span><br><span class="line">            xh = tf.matmul(x, W_xh)</span><br><span class="line">            hh = tf.matmul(h, W_hh)</span><br><span class="line"></span><br><span class="line">            bn_xh = batch_norm(xh, <span class="string">&#x27;xh&#x27;</span>, self.training)</span><br><span class="line">            bn_hh = batch_norm(hh, <span class="string">&#x27;hh&#x27;</span>, self.training)</span><br><span class="line"></span><br><span class="line">            hidden = bn_xh + bn_hh + bias</span><br><span class="line"></span><br><span class="line">            i, j, f, o = tf.split(hidden, <span class="number">4</span>, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            new_c = c * tf.sigmoid(f) + tf.sigmoid(i) * tf.tanh(j)</span><br><span class="line">            bn_new_c = batch_norm(new_c, <span class="string">&#x27;c&#x27;</span>, self.training)</span><br><span class="line"></span><br><span class="line">            new_h = tf.tanh(bn_new_c) * tf.sigmoid(o)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> new_h, (new_c, new_h)</span><br></pre></td></tr></table></figure><p>I guess Variable W_xh in<code>tcm/word/fw/multi_rnn_cell/cell_0/bn_lstm/W_xh</code> is inconflict with value in so-called <code>specified shape</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow - 基础笔记</title>
      <link href="/posts/TensorFlow-%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/TensorFlow-%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>自学TensoFlow，备忘笔记</p><span id="more"></span><h1 id="tensorflow---基础笔记">TensorFlow - 基础笔记</h1><h2 id="概念">1 概念</h2><h3 id="tensorflow基本概念">1.1 TensorFlow基本概念</h3><p><strong>TensorFlow</strong>包含以下主要元素</p><ul><li><strong>graph</strong><ul><li>表示计算</li><li>一个graph包含若干节点，即<strong><em>op</em></strong> (<em>operation</em>）</li></ul></li><li><strong>op</strong><ul><li><em>graph</em>的节点</li><li>输入/输出为0或n个<em>tensor</em></li></ul></li><li><strong>Session</strong><ul><li>执行<em>graph</em></li></ul></li><li><strong>tensor</strong><ul><li>表示数据</li><li>例如：a mini-batch of images可表示为4-D array,<code>[batch, height, width, channels]</code></li></ul></li><li><strong>Variable</strong><ul><li>维护状态信息</li></ul></li><li><strong>feed</strong> / <strong>fetch</strong><ul><li><strong>feed</strong> 数据传入</li><li><strong>fetch</strong> 数据传出</li></ul></li></ul><h3 id="tensorflow过程原理">1.2 TensorFlow过程原理</h3><ol type="1"><li>打开<em>Session</em>；</li><li><em>Session</em>启动<em>graph</em>；</li><li><em>Session</em>将<em>graph</em>的节点<em>ops</em>(operation)分发到可用的设备上，如CPUs/GPUs，并提供执行op的<em>methods</em>；</li><li><em>op</em>收到0或n个<em>tensor</em>后执行<em>methods</em>以计算，<em>methods</em>执行后，输出的相应的0或n个<em>tensor</em></li></ol><blockquote><p>注：</p><ol type="1"><li>在Python 语言中, 将返回numpy的<em>ndarray</em> 对象; 在C 和C++语言中, 将返回tensorflow::Tensor实例。</li></ol></blockquote><h2 id="tensorflow编程">2 TensorFlow编程</h2><h3 id="两个阶段">2.1 两个阶段</h3><p><strong>TensorFlow</strong>程序通常包含以下两个阶段：</p><ol type="1"><li><strong>construction phase</strong>构建阶段，组装出<em>graph</em></li><li><strong>execution phase</strong>执行阶段，用<em>Session</em>执行graph的<em>ops</em></li></ol><h3 id="构建图并执行">2.2 构建图并执行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># create constants</span></span><br><span class="line">matrix1 = tf.constant([[<span class="number">3.</span>, <span class="number">3.</span>]])  <span class="comment"># 1×2的矩阵[3 3]</span></span><br><span class="line">matrix2 = tf.constant([[<span class="number">2.</span>], [<span class="number">2</span>,]]) <span class="comment"># 2×1的矩阵[2; 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create a matmul(matrix multiply) op</span></span><br><span class="line">product = tf.matmul(matrix1, matrix2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># with-block</span></span><br><span class="line"><span class="comment"># by using with-block, session would be closed and release resources automatically</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    result = sess.run(product)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="comment"># construct session, launch graph, execute and close mannually</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># sess = tf.Session()</span></span><br><span class="line"><span class="comment"># result = sess.run(product)</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"><span class="comment"># sess.close()</span></span><br></pre></td></tr></table></figure><ul><li><strong>TensorFlow</strong>事实上通过一个“翻译”过程，将定义的<em>graph</em>转化为不同的可用计算资源间实现分布计算的操作(op,operations)，如：CPU或GPU。通常不需要用户指定具体使用的CPU或GPU，TensorFlow能自动检测并尽可能的充分利用找到的第一个GPU进行运算。</li></ul><h3 id="指定设备">2.3 指定设备</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="keyword">with</span> tf.device(<span class="string">&quot;/gpu:0&quot;</span>):</span><br><span class="line">        matrix1 = tf.constant([[<span class="number">3.</span>, <span class="number">3.</span>]])</span><br><span class="line">        matrix2 = tf.constant([[<span class="number">2.</span>], [<span class="number">2</span>,]])</span><br><span class="line">        product = tf.matmul(matrix1, matrix2)</span><br><span class="line">        result = sess.run(product)</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><ul><li>通过<code>tf.device(...)</code>指定用于执行的设备</li></ul><p>设备字符串：</p><ul><li><code>"/cpu:0"</code><ul><li>1st CPU, 即设备的CPU</li></ul></li><li><code>"/gpu:0"</code><ul><li>1st GPU, 即设备的GPU</li></ul></li><li><code>"/gpu:1"</code><ul><li>2nd GPU, 即设备的第二块GPU（如果有）</li></ul></li><li>以此类推...</li></ul><h3 id="tensor">2.4 Tensor</h3><p>TensorFlow程序使用<em>tensor</em>数据结构来代表所有的数据，计算图中，<em>ops</em>(operations)之间传递的数据都是<em>tensor</em>。</p><p>你可以把<em>tensor</em>看作是一个n维的数组或列表。一个tensor包含一个<code>static type</code>,一个<code>rank</code>和一个<code>shape</code>。</p><h3 id="variable">2.5 Variable</h3><p><em>Variable</em>维持graph执行过程中的状态信息。</p><p>例如，使用Variable实现一个计数器（Counter）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">state = tf.Variable(<span class="number">0</span>, name=<span class="string">&quot;counter&quot;</span>)</span><br><span class="line">one = tf.constant(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># Create an Op to add one to `state`.</span></span><br><span class="line">new_value = tf.add(state, one)</span><br><span class="line">update = tf.assign(state, new_value)</span><br><span class="line"><span class="comment"># Variables must be initialized by running an `init` Op after having</span></span><br><span class="line"><span class="comment"># launched the graph. We first have to add the `init` Op to the graph.</span></span><br><span class="line">init_op = tf.initialize_all_variables()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Launch the graph and run the ops.</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line"><span class="comment"># Run the &#x27;init&#x27; op</span></span><br><span class="line">sess.run(init_op)</span><br><span class="line"><span class="comment"># Print the initial value of &#x27;state&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(sess.run(state))</span><br><span class="line"><span class="comment"># Run the op that updates &#x27;state&#x27; and print &#x27;state&#x27;.</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">sess.run(update)</span><br><span class="line"><span class="built_in">print</span>(sess.run(state))</span><br><span class="line">        </span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h3 id="fetch">2.6 Fetch</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">input1 = tf.constant(<span class="number">3.0</span>)</span><br><span class="line">input2 = tf.constant(<span class="number">2.0</span>)</span><br><span class="line">input3 = tf.constant(<span class="number">5.0</span>)</span><br><span class="line">intermed = tf.add(input2, input3)</span><br><span class="line">mul = tf.mul(input1, intermed)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">result = sess.run([mul, intermed])</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># [array([ 21.], dtype=float32), array([ 7.], dtype=float32)]</span></span><br></pre></td></tr></table></figure><ul><li>Fetch both <code>mul</code>'s result and <code>intermed</code>'sresult.</li></ul><h3 id="feed">2.7 Feed</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">input1 = tf.placeholder(tf.float32)</span><br><span class="line">input2 = tf.placeholder(tf.float32)</span><br><span class="line">output = tf.mul(input1, input2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line"><span class="built_in">print</span>(sess.run([output], feed_dict=&#123;input1:[<span class="number">7.</span>], input2:[<span class="number">2.</span>]&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># [array([ 14.], dtype=float32)]</span></span><br></pre></td></tr></table></figure><ul><li>使用<code>tf.placeholder(...)</code>来创建占位符，用于直接给<em>op</em>传入一个<em>tensor</em></li></ul><blockquote><p>TensorFlow also provides a feed mechanism for patching a tensordirectly into any operation in the graph.</p></blockquote><h2 id="links">3 Links</h2><blockquote><p><a href="https://www.tensorflow.org/">TensorFlow.org</a></p><p><ahref="http://wiki.jikexueyuan.com/project/tensorflow-zh/">TensorFlow官方文档中文版- 极客学院</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cython - C-Extensions for Python</title>
      <link href="/posts/Cython-C-Extensions-for-Python/"/>
      <url>/posts/Cython-C-Extensions-for-Python/</url>
      
        <content type="html"><![CDATA[<p><strong>Cython</strong> is an <strong>optimising staticcompiler</strong> for both the <strong>Python</strong> programminglanguage and the extended Cython programming language (based on<strong>Pyrex</strong>). It makes writing C extensions for Python aseasy as Python itself.</p><span id="more"></span><h1 id="cython---c-extensions-for-python">Cython - C-Extensions forPython</h1><h2 id="references">1 references</h2><blockquote><p><a href="http://cython.org/">Cython.org</a></p></blockquote><h2 id="description">2 description</h2><p>The Cython language is a superset of the <strong>Python</strong>language that additionally supports calling <strong>C functions</strong>and declaring <strong>C types</strong> on variables and classattributes.</p><p>This allows the compiler to generate very <strong>efficient Ccode</strong> from Cython code. The C code is <strong>generatedonce</strong> and then compiles with all major C/C++ compilers in <ahref="http://python.org/">CPython</a> 2.6, 2.7 (2.4+ with Cython 0.20.x)as well as 3.3 and all later versions. We regularly run integrationtests against all supported CPython versions and their latestin-development branches to make sure that the generated code stayswidely compatible and well adapted to each version. <ahref="http://pypy.org/">PyPy</a> support is work in progress (on bothsides) and is considered <ahref="http://docs.cython.org/src/userguide/pypy.html">mostly usable</a>since Cython 0.17. The latest PyPy version is always recommendedhere.</p><p>All of this makes Cython the ideal language for<strong>wrapping</strong> external C libraries,<strong>embedding</strong> CPython into existing applications, and for<strong>fast C modules</strong> that speed up the execution of Pythoncode.01postpublish01110ad67e4a83c6d0e65b106a33ff90209de</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Cython </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spaCy - Industrial-Strength Natural Language Processing in Python</title>
      <link href="/posts/spaCy-Industrial-Strength-Natural-Language-Processing-in-Python/"/>
      <url>/posts/spaCy-Industrial-Strength-Natural-Language-Processing-in-Python/</url>
      
        <content type="html"><![CDATA[<p><em>spaCy</em> is a free open-source library featuringstate-of-the-art speed and accuracy and a powerful Python API.</p><span id="more"></span><h1id="spacy---industrial-strength-natural-language-processing-in-python">spaCy- Industrial-Strength Natural Language Processing in Python</h1><h2 id="references">1 references</h2><blockquote><p><a href="https://spacy.io/">spaCy.io</a></p></blockquote><blockquote><p><ahref="https://juejin.im/post/5971a4b9f265da6c42353332?utm_source=gold_browser_extension%5D">使用Python+spaCy 进行简易自然语言处理 - 掘金</a></p></blockquote><h2 id="examples">2 examples</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LIGHTNING_TOUR.PY</span></span><br><span class="line"><span class="comment"># Install: pip install spacy &amp;&amp; python -m spacy download en</span></span><br><span class="line"><span class="keyword">import</span> spacy</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load English tokenizer, tagger, parser, NER and word vectors</span></span><br><span class="line">nlp = spacy.load(<span class="string">&#x27;en&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Process whole documents</span></span><br><span class="line">text = <span class="built_in">open</span>(<span class="string">&#x27;customer_feedback_627.txt&#x27;</span>).read()</span><br><span class="line">doc = nlp(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Find named entities, phrases and concepts</span></span><br><span class="line"><span class="keyword">for</span> entity <span class="keyword">in</span> doc.ents:</span><br><span class="line">    <span class="built_in">print</span>(entity.text, entity.label_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Determine semantic similarities</span></span><br><span class="line">doc1 = nlp(<span class="string">u&#x27;the fries were gross&#x27;</span>)</span><br><span class="line">doc2 = nlp(<span class="string">u&#x27;worst fries ever&#x27;</span>)</span><br><span class="line">doc1.similarity(doc2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Hook in your own deep learning models</span></span><br><span class="line">nlp.add_pipe(load_my_model(), before=<span class="string">&#x27;parser&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> NLP </tag>
            
            <tag> spaCy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pandas - Python Data Analysis Library</title>
      <link href="/posts/pandas-Python-Data-Analysis-Library/"/>
      <url>/posts/pandas-Python-Data-Analysis-Library/</url>
      
        <content type="html"><![CDATA[<p><em>pandas</em> is an open source, BSD-licensed library providinghigh-performance, easy-to-use data structures and data analysis toolsfor the <a href="https://www.python.org/">Python</a> programminglanguage.</p><span id="more"></span><h1 id="pandas---python-data-analysis-library">pandas - Python DataAnalysis Library</h1><h2 id="references">1 references</h2><h3 id="official">1.1 official</h3><blockquote><p><a href="http://pandas.pydata.org/">pandas - pydata.org</a></p></blockquote><h3 id="tutorial">1.2 tutorial</h3><blockquote><p><ahref="http://wiki.jikexueyuan.com/project/start-learning-python/311.html">Pandas使用 - 极客学院</a></p></blockquote><blockquote><p><ahref="http://blog.csdn.net/liufang0001/article/details/77856255">pandas用法大全- CSDN</a></p></blockquote><h2 id="series">2 Series</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="dataframe">3 DataFrame</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">&quot;name&quot;</span>:[<span class="string">&quot;yahoo&quot;</span>,<span class="string">&quot;google&quot;</span>,<span class="string">&quot;facebook&quot;</span>], <span class="string">&quot;marks&quot;</span>:[<span class="number">200</span>,<span class="number">400</span>,<span class="number">800</span>], <span class="string">&quot;price&quot;</span>:[<span class="number">9</span>, <span class="number">3</span>, <span class="number">7</span>]&#125; </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1 = DataFrame(data) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f1 </span><br><span class="line">     marks  name      price </span><br><span class="line"><span class="number">0</span>    <span class="number">200</span>    yahoo     <span class="number">9</span> </span><br><span class="line"><span class="number">1</span>    <span class="number">400</span>    google    <span class="number">3</span> </span><br><span class="line"><span class="number">2</span>    <span class="number">800</span>    facebook  <span class="number">7</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2 = DataFrame(data, columns=[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;price&#x27;</span>,<span class="string">&#x27;marks&#x27;</span>]) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f2 </span><br><span class="line">       name     price  marks </span><br><span class="line"><span class="number">0</span>     yahoo     <span class="number">9</span>      <span class="number">200</span> </span><br><span class="line"><span class="number">1</span>    google     <span class="number">3</span>      <span class="number">400</span> </span><br><span class="line"><span class="number">2</span>  facebook     <span class="number">7</span>      <span class="number">800</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3 = DataFrame(data, columns=[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;price&#x27;</span>, <span class="string">&#x27;marks&#x27;</span>, <span class="string">&#x27;debt&#x27;</span>], index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f3 </span><br><span class="line">       name      price  marks  debt </span><br><span class="line">a     yahoo      <span class="number">9</span>      <span class="number">200</span>     NaN </span><br><span class="line">b    google      <span class="number">3</span>      <span class="number">400</span>     NaN </span><br><span class="line">c  facebook      <span class="number">7</span>      <span class="number">800</span>     NaN </span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newdata = &#123;<span class="string">&quot;lang&quot;</span>:&#123;<span class="string">&quot;firstline&quot;</span>:<span class="string">&quot;python&quot;</span>,<span class="string">&quot;secondline&quot;</span>:<span class="string">&quot;java&quot;</span>&#125;, <span class="string">&quot;price&quot;</span>:&#123;<span class="string">&quot;firstline&quot;</span>:<span class="number">8000</span>&#125;&#125; </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f4 = DataFrame(newdata) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f4 </span><br><span class="line">              lang     price </span><br><span class="line">firstline     python   <span class="number">8000</span> </span><br><span class="line">secondline    java     NaN </span><br></pre></td></tr></table></figure><h2 id="csv">4 CSV</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> csv </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>csv_reader = csv.reader(<span class="built_in">open</span>(<span class="string">&quot;./marks.csv&quot;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> csv_reader:</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span> row</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;math&#x27;</span>, <span class="string">&#x27;english&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;100&#x27;</span>, <span class="string">&#x27;100&#x27;</span>, <span class="string">&#x27;25&#x27;</span>, <span class="string">&#x27;12&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;Facebook&#x27;</span>, <span class="string">&#x27;45&#x27;</span>, <span class="string">&#x27;54&#x27;</span>, <span class="string">&#x27;44&#x27;</span>, <span class="string">&#x27;88&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;Twitter&#x27;</span>, <span class="string">&#x27;54&#x27;</span>, <span class="string">&#x27;76&#x27;</span>, <span class="string">&#x27;13&#x27;</span>, <span class="string">&#x27;91&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;Yahoo&#x27;</span>, <span class="string">&#x27;54&#x27;</span>, <span class="string">&#x27;452&#x27;</span>, <span class="string">&#x27;26&#x27;</span>, <span class="string">&#x27;100&#x27;</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marks = pd.read_csv(<span class="string">&quot;./marks.csv&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marks</span><br><span class="line">       name  physics  python  math  english</span><br><span class="line"><span class="number">0</span>    Google      <span class="number">100</span>     <span class="number">100</span>    <span class="number">25</span>       <span class="number">12</span></span><br><span class="line"><span class="number">1</span>  Facebook       <span class="number">45</span>      <span class="number">54</span>    <span class="number">44</span>       <span class="number">88</span></span><br><span class="line"><span class="number">2</span>   Twitter       <span class="number">54</span>      <span class="number">76</span>    <span class="number">13</span>       <span class="number">91</span></span><br><span class="line"><span class="number">3</span>     Yahoo       <span class="number">54</span>     <span class="number">452</span>    <span class="number">26</span>      <span class="number">100</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.read_table(<span class="string">&quot;./marks.csv&quot;</span>, sep=<span class="string">&quot;,&quot;</span>)</span><br><span class="line">       name  physics  python  math  english</span><br><span class="line"><span class="number">0</span>    Google      <span class="number">100</span>     <span class="number">100</span>    <span class="number">25</span>       <span class="number">12</span></span><br><span class="line"><span class="number">1</span>  Facebook       <span class="number">45</span>      <span class="number">54</span>    <span class="number">44</span>       <span class="number">88</span></span><br><span class="line"><span class="number">2</span>   Twitter       <span class="number">54</span>      <span class="number">76</span>    <span class="number">13</span>       <span class="number">91</span></span><br><span class="line"><span class="number">3</span>     Yahoo       <span class="number">54</span>     <span class="number">452</span>    <span class="number">26</span>      <span class="number">100</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADO.NET - C#查询/修改SQL Server数据库</title>
      <link href="/posts/ADO-NET-C-%E6%9F%A5%E8%AF%A2-%E4%BF%AE%E6%94%B9SQL-Server%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/posts/ADO-NET-C-%E6%9F%A5%E8%AF%A2-%E4%BF%AE%E6%94%B9SQL-Server%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>查询（输出查询结果）， 修改SQL Server数据库数据</p><span id="more"></span><h1 id="ado.net---c查询修改sql-server数据库">ADO.NET - C#查询/修改SQLServer数据库</h1><h2 id="references">1 References</h2><blockquote><p><ahref="https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/retrieving-and-modifying-data">Retrievingand Modifying Data in ADO.NET - Microsoft Docs</a></p></blockquote><h2 id="select">2 Select</h2><h3 id="query">2.1 Query</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SqlConnection Conn_Timesheet = <span class="keyword">new</span> SqlConnection(connStr_Timesheet);</span><br><span class="line"></span><br><span class="line">Conn_Timesheet.Open();</span><br><span class="line">SqlCommand cmd_readUser = <span class="keyword">new</span> SqlCommand(<span class="string">&quot;select * from [dbo].[Users]&quot;</span>, Conn_Timesheet);</span><br><span class="line">SqlDataAdapter da = <span class="keyword">new</span> SqlDataAdapter(cmd_readUser);</span><br><span class="line">DataSet ds = <span class="keyword">new</span> DataSet();</span><br><span class="line">da.Fill(ds, <span class="string">&quot;Users&quot;</span>);</span><br><span class="line">Conn_Timesheet.Close();</span><br></pre></td></tr></table></figure><ul><li>Query Database and Fill the query result into a <code>Dataset</code>instance <strong><em>ds</em></strong></li></ul><h3 id="output-query-result">2.2 output query result</h3><h4 id="console">2.2.1 Console</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">foreach</span> (DataRow row <span class="keyword">in</span> ds.Tables[<span class="number">0</span>].Rows)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> UserName = row[<span class="string">&quot;UserName&quot;</span>].ToString();</span><br><span class="line">    <span class="built_in">string</span> PersonnelID = row[<span class="string">&quot;EmployeeID&quot;</span>].ToString();</span><br><span class="line">    <span class="built_in">string</span> NTaccount = row[<span class="string">&quot;DomainAccount&quot;</span>].ToString();</span><br><span class="line">    <span class="built_in">string</span> IsEnabled = row[<span class="string">&quot;IsLockedOut&quot;</span>].ToString();</span><br><span class="line"></span><br><span class="line">    count++;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;&#123;0,-10&#125;&#123;1,-35&#125;&#123;2,-10&#125;&#123;3,-10&#125;&#123;4,10&#125;&quot;</span>, count, UserName, PersonnelID, NTaccount, IsEnabled);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Output query result stored in <code>Dataset</code> instance<strong><em>ds</em></strong></li></ul><h4 id="xml">2.2.2 XML</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ds.WriteXml(<span class="string">&quot;Users.xml&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>Output <code>Dataset</code> instance <strong><em>ds</em></strong> toa XML-format file</li></ul><h2 id="modify">3 Modify</h2><h3 id="insert">3.1 Insert</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SqlConnection Conn_Timesheet = <span class="keyword">new</span> SqlConnection(connStr_BIS);</span><br><span class="line">Conn_BIS.Open();</span><br><span class="line"></span><br><span class="line">SqlCommand cmd_insertUser = <span class="keyword">new</span> SqlCommand(<span class="string">&quot;INSERT INTO [BIS].[dbo].[SUser]&quot;</span></span><br><span class="line">                                           + <span class="string">&quot;([UserName], [PersonnelID], [NTaccount], [FullName], [IsEnabled], [Password], [CreateDate])&quot;</span></span><br><span class="line">                                           + <span class="string">&quot;VALUES(&#x27;&quot;</span> + PersonnelID + <span class="string">&quot;&#x27;, &#x27;&quot;</span> + PersonnelID + <span class="string">&quot;&#x27;, &#x27;&quot;</span> + NTaccount + <span class="string">&quot;&#x27;, &#x27;&quot;</span> + UserName + <span class="string">&quot;&#x27;, &quot;</span> + IsEnabled + <span class="string">&quot;, &#x27;BA3253876AED6BC22D4A6FF53D8406C6AD864195ED144AB5C87621B6C233B548BAEAE6956DF346EC8C17F5EA10F35EE3CBC514797ED7DDD3145464E2A0BAB413&#x27;, &#x27;&quot;</span> + DateTime.Now.ToString() + <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">                                           + <span class="string">&quot;);&quot;</span>,</span><br><span class="line">                                           Conn_BIS);</span><br><span class="line"></span><br><span class="line">cmd_insertUser.ExecuteNonQuery();</span><br><span class="line"></span><br><span class="line">Conn_BIS.Close();</span><br></pre></td></tr></table></figure><ul><li>Insert a record into table</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ADO.NET </tag>
            
            <tag> SQL Server </tag>
            
            <tag> C# </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Numpy Tutorial</title>
      <link href="/posts/Python-Numpy-Tutorial/"/>
      <url>/posts/Python-Numpy-Tutorial/</url>
      
        <content type="html"><![CDATA[<p>Notes of the Stanford CS class CS231n: Convolutional Neural Networksfor Visual Recognition.</p><span id="more"></span><h1 id="python-numpy-tutorial">Python Numpy Tutorial</h1><h2 id="python-numpy-tutorial-1">1 Python Numpy Tutorial</h2><blockquote><p><a href="http://cs231n.github.io/python-numpy-tutorial/">Python NumpyTutorial</a> - Brief notes of Python, Numpy, SciPy and Matplotlib</p></blockquote><h2 id="cs231n-convolutional-neural-networks-for-visual-recognition">2CS231n Convolutional Neural Networks for Visual Recognition</h2><blockquote><p><a href="http://cs231n.github.io/">CS231n Convolutional NeuralNetworks for Visual Recognition</a> - Notes of the Stanford CS classCS231n: Convolutional Neural Networks for Visual Recognition.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DateTime - .NET时间数据及输出格式</title>
      <link href="/posts/DateTime-NET%E6%97%B6%E9%97%B4%E6%95%B0%E6%8D%AE%E5%8F%8A%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F/"/>
      <url>/posts/DateTime-NET%E6%97%B6%E9%97%B4%E6%95%B0%E6%8D%AE%E5%8F%8A%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>整理一下.NET下，DateTime实例所包含的时间数据，以及默认支持的时间输出格式</p><span id="more"></span><h1 id="datetime---.net时间数据及输出格式">DateTime -.NET时间数据及输出格式</h1><h2 id="example">1 example</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DateTimeTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">DateTimeTest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> dt = DateTime.Now;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;========= Fields =========&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Year\t\t&quot;</span> + dt.Year);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Month\t\t&quot;</span> + dt.Month);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Date\t\t&quot;</span> + dt.Date);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Day\t\t&quot;</span> + dt.Day);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;DayOfWeek\t\t&quot;</span> + dt.DayOfWeek);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;DayOfYear\t\t&quot;</span> + dt.DayOfYear);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Kind\t\t&quot;</span> + dt.Kind);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Minute\t\t&quot;</span> + dt.Minute);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Second\t\t&quot;</span> + dt.Second);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Millisecond\t\t&quot;</span> + dt.Millisecond);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Ticks\t\t&quot;</span> + dt.Ticks);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;========= Methods =========&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ToBinary\t\t&quot;</span> + dt.ToBinary());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ToFileTime\t\t&quot;</span> + dt.ToFileTime());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ToFileTimeUtc\t\t&quot;</span> + dt.ToFileTimeUtc());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ToLocalTime\t\t&quot;</span> + dt.ToLocalTime());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ToLongDateString\t&quot;</span> + dt.ToLongDateString());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ToLongTimeString\t&quot;</span> + dt.ToLongTimeString());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ToOADate\t\t&quot;</span> + dt.ToOADate());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ToShortDateString\t&quot;</span> + dt.ToShortDateString());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ToShortTimeString\t&quot;</span> + dt.ToShortTimeString());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ToString\t\t&quot;</span> + dt.ToString());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;ToUniversalTime\t\t&quot;</span> + dt.ToUniversalTime());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">========= Fields =========</span></span><br><span class="line"><span class="comment">Year            2018</span></span><br><span class="line"><span class="comment">Month           2</span></span><br><span class="line"><span class="comment">Date            2/27/2018 12:00:00 AM</span></span><br><span class="line"><span class="comment">Day             27</span></span><br><span class="line"><span class="comment">DayOfWeek               Tuesday</span></span><br><span class="line"><span class="comment">DayOfYear               58</span></span><br><span class="line"><span class="comment">Kind            Local</span></span><br><span class="line"><span class="comment">Minute          27</span></span><br><span class="line"><span class="comment">Second          51</span></span><br><span class="line"><span class="comment">Millisecond             54</span></span><br><span class="line"><span class="comment">Ticks           636553276710549486</span></span><br><span class="line"><span class="comment">========= Methods =========</span></span><br><span class="line"><span class="comment">ToBinary                -8586819048144226322</span></span><br><span class="line"><span class="comment">ToFileTime              131641756710549486</span></span><br><span class="line"><span class="comment">ToFileTimeUtc           131641756710549486</span></span><br><span class="line"><span class="comment">ToLocalTime             2/27/2018 11:27:51 AM</span></span><br><span class="line"><span class="comment">ToLongDateString        Tuesday, February 27, 2018</span></span><br><span class="line"><span class="comment">ToLongTimeString        11:27:51 AM</span></span><br><span class="line"><span class="comment">ToOADate                43158.4776742361</span></span><br><span class="line"><span class="comment">ToShortDateString       2/27/2018</span></span><br><span class="line"><span class="comment">ToShortTimeString       11:27 AM</span></span><br><span class="line"><span class="comment">ToString                2/27/2018 11:27:51 AM</span></span><br><span class="line"><span class="comment">ToUniversalTime         2/27/2018 3:27:51 AM</span></span><br><span class="line"><span class="comment">Press any key to continue . . .</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> .NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspose.Email - 处理MIME Email文件</title>
      <link href="/posts/Aspose-Email-%E5%A4%84%E7%90%86MIME-Email%E6%96%87%E4%BB%B6/"/>
      <url>/posts/Aspose-Email-%E5%A4%84%E7%90%86MIME-Email%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>通过Aspose.Email包，可以方便地对邮件文件进行处理，如：读取邮件信息、获取内嵌HTML等</p><span id="more"></span><h1 id="aspose.email---处理mime-email文件">Aspose.Email - 处理MIMEEmail文件</h1><h2 id="example">1 example</h2><p>以Microsoft Outlook2013邮件文件格式<code>(*.msg)</code>为例，邮件Body是一个内嵌的HTML页面。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Aspose.Email;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EmailTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">EmailTest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Create MailMessage instance by loading an Eml file</span></span><br><span class="line">            MailMessage message = MailMessage.Load(<span class="string">@&quot;C:\Dev\Mail\Mail.msg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Print From, To(es), CC(s)</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;From: &quot;</span> + message.From.DisplayName + <span class="string">&quot;&lt;&quot;</span> + message.From.Address + <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> toAddr <span class="keyword">in</span> message.To)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;To: &quot;</span> + toAddr.DisplayName + <span class="string">&quot;&lt;&quot;</span> +  toAddr.Address + <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> ccAddr <span class="keyword">in</span> message.CC)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;CC: &quot;</span> + ccAddr.DisplayName + <span class="string">&quot;&lt;&quot;</span> + ccAddr.Address + <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Print Subject and Date(Time)</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Subject: &quot;</span> + message.Subject);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;DateTime: &quot;</span> + message.Date.ToString());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// pause</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Print message body</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Body:&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (message.IsBodyHtml)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(message.HtmlBody);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Save HTML message body as a page</span></span><br><span class="line">                FileStream outFile = File.OpenWrite(<span class="string">@&quot;C:\Dev\Mail\MailBody.html&quot;</span>);</span><br><span class="line">                StreamWriter writer = <span class="keyword">new</span> StreamWriter(outFile);</span><br><span class="line">                writer.Write(message.HtmlBody);</span><br><span class="line">                writer.Close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(message.Body);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Print and save mail&#x27;s attachments</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Attachments:&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> attach <span class="keyword">in</span> message.Attachments)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(attach.Name + attach.ContentType);</span><br><span class="line">                attach.Save(<span class="string">@&quot;C:\Dev\Mail\&quot;</span> + attach.Name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Aspose </tag>
            
            <tag> Email </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MvcHtmlString - ASP.NET MVC View HTML显示String（区分String）</title>
      <link href="/posts/MvcHtmlString-ASP-NET-MVC-View-HTML%E6%98%BE%E7%A4%BAString%EF%BC%88%E5%8C%BA%E5%88%86String%EF%BC%89/"/>
      <url>/posts/MvcHtmlString-ASP-NET-MVC-View-HTML%E6%98%BE%E7%A4%BAString%EF%BC%88%E5%8C%BA%E5%88%86String%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>ASP.NET中，使用String类型用作ViewHTML显示会导致意想不到的结果（显示HTML原始字符串），需要使用MvcHtmlString（继承HtmlString）才可显示HTML描述内容</p><span id="more"></span><h1id="mvchtmlstring---asp.net-mvc-view-html显示string区分string">MvcHtmlString- ASP.NET MVC View HTML显示String（区分String）</h1><p>参考：</p><blockquote><p><ahref="http://www.cnblogs.com/shuai7boy/p/5208680.html">MVC————扩展方法MvcHtmlString</a></p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MyHtmlHelper</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GroupPage</span>(<span class="params"><span class="keyword">this</span> HtmlHelper helper</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">string</span> html1 = <span class="string">&quot;&lt;span style=&#x27;color:red;&#x27;&gt;hello&lt;/span&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> html1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>显示<code>&lt;span style='color:red;'&gt;hello&lt;/span&gt;</code>本身</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MyHtmlHelper</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MvcHtmlString <span class="title">GroupPage</span>(<span class="params"><span class="keyword">this</span> HtmlHelper helper</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">string</span> html1 = <span class="string">&quot;&lt;span style=&#x27;color:red;&#x27;&gt;hello&lt;/span&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MvcHtmlString(html1);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>显示HTML描述对象</li></ul><p><span style="color:red;">hello</span></p>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET </tag>
            
            <tag> HTML </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspose.Words - 表格行复制、插入及编辑</title>
      <link href="/posts/Aspose-Words-%E8%A1%A8%E6%A0%BC%E8%A1%8C%E5%A4%8D%E5%88%B6%E3%80%81%E6%8F%92%E5%85%A5%E5%8F%8A%E7%BC%96%E8%BE%91/"/>
      <url>/posts/Aspose-Words-%E8%A1%A8%E6%A0%BC%E8%A1%8C%E5%A4%8D%E5%88%B6%E3%80%81%E6%8F%92%E5%85%A5%E5%8F%8A%E7%BC%96%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<p>Aspose.Words的Table, Row,Cell三级对象，依次实现对表格、表格行、行内列单元的三级封装处理。</p><span id="more"></span><h1 id="aspose.words---表格行复制插入及编辑">Aspose.Words -表格行复制、插入及编辑</h1><h1 id="example">1 Example</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Aspose.Words;</span><br><span class="line"><span class="keyword">using</span> Aspose.Words.Tables;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TableTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">string</span> MyDir = <span class="string">&quot;C:\\Dev\\Test\\&quot;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Document doc = <span class="keyword">new</span> Document(MyDir + <span class="string">&quot;in.docx&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Retrieve the second([0,1,...]) table in the document.</span></span><br><span class="line">            Table table = (Table)doc.GetChild(NodeType.Table, <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> rowCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (Row row <span class="keyword">in</span> table.Rows)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//　第0行作为标题行，第1行作为内容模板行</span></span><br><span class="line">                <span class="keyword">if</span>(rowCount == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Row rowClone = (Row)row.Clone(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">                    row.Range.Replace(<span class="keyword">new</span> Regex(<span class="string">&quot;__newName__&quot;</span>), <span class="string">&quot;Name1&quot;</span>);</span><br><span class="line">                    row.Range.Replace(<span class="keyword">new</span> Regex(<span class="string">&quot;__newPrice__&quot;</span>), <span class="string">&quot;111&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    row.ParentNode.InsertAfter(rowClone, row);  <span class="comment">// insert the template row after current edited row</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                rowCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            doc.Save(MyDir + <span class="string">&quot;out.docx&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Aspose </tag>
            
            <tag> Word </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspose.Words - 理解Word DOM结构</title>
      <link href="/posts/Aspose-Words-%E7%90%86%E8%A7%A3Word-DOM%E7%BB%93%E6%9E%84/"/>
      <url>/posts/Aspose-Words-%E7%90%86%E8%A7%A3Word-DOM%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>整理的一些信息，关于Aspose.Words的DOM结构理解</p><span id="more"></span><h1 id="aspose.words---理解word-dom结构">Aspose.Words - 理解WordDOM结构</h1><h2 id="links">1 Links</h2><blockquote><p><ahref="http://blog.csdn.net/sinat_30276961/article/details/48136289">Aspose.words编程指南之DOM树结构初识，Node类继承关系及说明</a></p><p><ahref="http://blog.csdn.net/sinat_30276961/article/details/48155223">Aspose.words编程指南之DOM树再识，各层结构之间的关系</a></p></blockquote><h2 id="structure">2 Structure</h2><figure><img src="https://www.heary.cn/usr/uploads/2018/02/2375993134.png"alt="demoWordFile.png" /><figcaption aria-hidden="true">demoWordFile.png</figcaption></figure><figure><img src="https://www.heary.cn/usr/uploads/2018/02/364278311.png"alt="demoWordStructure.png" /><figcaption aria-hidden="true">demoWordStructure.png</figcaption></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Aspose </tag>
            
            <tag> Word </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip - 批量更新所有库</title>
      <link href="/posts/pip-%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0%E6%89%80%E6%9C%89%E5%BA%93/"/>
      <url>/posts/pip-%E6%89%B9%E9%87%8F%E6%9B%B4%E6%96%B0%E6%89%80%E6%9C%89%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>Pythonpip本身不支持批量更新功能，但可以借助pip的API编程实现批量更新所有package</p><span id="more"></span><h1 id="pip---批量更新所有库">pip - 批量更新所有库</h1><h2 id="codes">1 codes</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> pip</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> call</span><br><span class="line"></span><br><span class="line">call(<span class="string">&quot;pip list --outdated&quot;</span>, shell=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dist <span class="keyword">in</span> pip.get_installed_distributions():</span><br><span class="line">    call(<span class="string">&quot;pip install --upgrade &quot;</span> + dist.project_name, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>upper/lower - C# string大小写转换函数性能比较</title>
      <link href="/posts/upper-lower-C-string%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/"/>
      <url>/posts/upper-lower-C-string%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<p>C#的string类中，包含ToUpper/ToLower以及ToUpperInvariant/ToLowerInvariant大小写转换函数</p><span id="more"></span><h1 id="upperlower---c-string大小写转换函数性能比较">upper/lower - C#string大小写转换函数性能比较</h1><h2 id="prototype">1 Prototype</h2><p>Definition of ToUpper/ToLower/ToUpperInvariant/ToLowerInvariantmethods in string class:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Summary:</span></span><br><span class="line"><span class="comment">//     Returns a copy of this string converted to lowercase.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Returns:</span></span><br><span class="line"><span class="comment">//     A string in lowercase.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ToLower</span>()</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Summary:</span></span><br><span class="line"><span class="comment">//     Returns a copy of this string converted to lowercase, using the casing rules</span></span><br><span class="line"><span class="comment">//     of the specified culture.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Parameters:</span></span><br><span class="line"><span class="comment">//   culture:</span></span><br><span class="line"><span class="comment">//     An object that supplies culture-specific casing rules.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Returns:</span></span><br><span class="line"><span class="comment">//     The lowercase equivalent of the current string.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Exceptions:</span></span><br><span class="line"><span class="comment">//   T:System.ArgumentNullException:</span></span><br><span class="line"><span class="comment">//     culture is null.</span></span><br><span class="line">[<span class="meta">TargetedPatchingOptOut(<span class="string">&quot;Performance critical to inline across NGen image boundaries&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ToLower</span>(<span class="params">CultureInfo culture</span>)</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Summary:</span></span><br><span class="line"><span class="comment">//     Returns a copy of this System.String object converted to lowercase using the</span></span><br><span class="line"><span class="comment">//     casing rules of the invariant culture.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Returns:</span></span><br><span class="line"><span class="comment">//     The lowercase equivalent of the current string.</span></span><br><span class="line">[<span class="meta">TargetedPatchingOptOut(<span class="string">&quot;Performance critical to inline across NGen image boundaries&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ToLowerInvariant</span>()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Summary:</span></span><br><span class="line"><span class="comment">//     Returns a copy of this string converted to uppercase.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Returns:</span></span><br><span class="line"><span class="comment">//     The uppercase equivalent of the current string.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ToUpper</span>()</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Summary:</span></span><br><span class="line"><span class="comment">//     Returns a copy of this string converted to uppercase, using the casing rules</span></span><br><span class="line"><span class="comment">//     of the specified culture.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Parameters:</span></span><br><span class="line"><span class="comment">//   culture:</span></span><br><span class="line"><span class="comment">//     An object that supplies culture-specific casing rules.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Returns:</span></span><br><span class="line"><span class="comment">//     The uppercase equivalent of the current string.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Exceptions:</span></span><br><span class="line"><span class="comment">//   T:System.ArgumentNullException:</span></span><br><span class="line"><span class="comment">//     culture is null.</span></span><br><span class="line">[<span class="meta">TargetedPatchingOptOut(<span class="string">&quot;Performance critical to inline across NGen image boundaries&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ToUpper</span>(<span class="params">CultureInfo culture</span>)</span>;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Summary:</span></span><br><span class="line"><span class="comment">//     Returns a copy of this System.String object converted to uppercase using the</span></span><br><span class="line"><span class="comment">//     casing rules of the invariant culture.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Returns:</span></span><br><span class="line"><span class="comment">//     The uppercase equivalent of the current string.</span></span><br><span class="line">[<span class="meta">TargetedPatchingOptOut(<span class="string">&quot;Performance critical to inline across NGen image boundaries&quot;</span>)</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">ToUpperInvariant</span>()</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>reference <a href="http://referencesource.microsoft.com/">.NETReference Source - Mircosoft</a> for more.</p></blockquote><h2 id="program">2 Program</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">UpperLowerTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Stopwatch stopwatch = <span class="keyword">new</span> Stopwatch();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// read EN strings from file</span></span><br><span class="line">            stopwatch.Start();</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; strings = ReadStrings(<span class="string">&quot;test.html&quot;</span>);</span><br><span class="line">            stopwatch.Stop();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;line count: &#123;0&#125;\nReadString: &#123;1&#125;ms&quot;</span>, strings.Count, stopwatch.ElapsedMilliseconds);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// test ToUpper</span></span><br><span class="line">            stopwatch.Start();</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; toUpperStrings = ToUpperTest(strings);</span><br><span class="line">            stopwatch.Stop();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;line count: &#123;0&#125;\tToUpperTest: &#123;1&#125;ms&quot;</span>, toUpperStrings.Count, stopwatch.ElapsedMilliseconds);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// test ToUpperInvariant</span></span><br><span class="line">            stopwatch.Start();</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; toUpperInvariantStrings = ToUpperInvariantTest(strings);</span><br><span class="line">            stopwatch.Stop();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;line count: &#123;0&#125;\tToUpperInvariantTest: &#123;1&#125;ms&quot;</span>, toUpperStrings.Count, stopwatch.ElapsedMilliseconds);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// test ToLower</span></span><br><span class="line">            stopwatch.Start();</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; toLowerStrings = ToLowerTest(strings);</span><br><span class="line">            stopwatch.Stop();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;line count: &#123;0&#125;\tToLowerTest: &#123;1&#125;ms&quot;</span>, toUpperStrings.Count, stopwatch.ElapsedMilliseconds);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// test ToLowerInvariant</span></span><br><span class="line">            stopwatch.Start();</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; toLowerInvariantStrings = ToLowerInvariantTest(strings);</span><br><span class="line">            stopwatch.Stop();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;line count: &#123;0&#125;\tToLowerInvariantTest: &#123;1&#125;ms&quot;</span>, toUpperStrings.Count, stopwatch.ElapsedMilliseconds);</span><br><span class="line"></span><br><span class="line">            stopwatch.Start();</span><br><span class="line">            WriteStrings(toUpperStrings, <span class="string">&quot;toUpperStrings.html&quot;</span>);</span><br><span class="line">            WriteStrings(toUpperInvariantStrings, <span class="string">&quot;toUpperInvariantStrings.html&quot;</span>);</span><br><span class="line">            WriteStrings(toLowerStrings, <span class="string">&quot;toLowerStrings.html&quot;</span>);</span><br><span class="line">            WriteStrings(toLowerInvariantStrings, <span class="string">&quot;toLowerInvariantStrings.html&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;WriteStrings: &#123;0&#125;ms&quot;</span>, stopwatch.ElapsedMilliseconds);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">ReadStrings</span>(<span class="params"><span class="built_in">string</span> path</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            StreamReader streamReader = <span class="keyword">new</span> StreamReader(path);</span><br><span class="line">            <span class="built_in">string</span> line;</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; stringList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(!streamReader.EndOfStream)</span><br><span class="line">            &#123;</span><br><span class="line">                line = streamReader.ReadLine();</span><br><span class="line">                stringList.Add(line);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            streamReader.Close();</span><br><span class="line">            <span class="keyword">return</span> stringList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">WriteStrings</span>(<span class="params">List&lt;<span class="built_in">string</span>&gt; stringList, <span class="built_in">string</span> path</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            StreamWriter streamWriter = <span class="keyword">new</span> StreamWriter(path);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> line <span class="keyword">in</span> stringList)</span><br><span class="line">            &#123;</span><br><span class="line">                streamWriter.WriteLine(line);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            streamWriter.Flush();</span><br><span class="line">            streamWriter.Close();</span><br><span class="line">            <span class="keyword">return</span> stringList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">ToUpperTest</span>(<span class="params">List&lt;<span class="built_in">string</span>&gt; stringList</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; upperList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> line <span class="keyword">in</span> stringList)</span><br><span class="line">            &#123;</span><br><span class="line">                upperList.Add(line.ToUpper());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> upperList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">ToUpperInvariantTest</span>(<span class="params">List&lt;<span class="built_in">string</span>&gt; stringList</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; upperList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> line <span class="keyword">in</span> stringList)</span><br><span class="line">            &#123;</span><br><span class="line">                upperList.Add(line.ToUpperInvariant());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> upperList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">ToLowerTest</span>(<span class="params">List&lt;<span class="built_in">string</span>&gt; stringList</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; lowerList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> line <span class="keyword">in</span> stringList)</span><br><span class="line">            &#123;</span><br><span class="line">                lowerList.Add(line.ToLower());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> lowerList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; <span class="title">ToLowerInvariantTest</span>(<span class="params">List&lt;<span class="built_in">string</span>&gt; stringList</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; lowerList = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> line <span class="keyword">in</span> stringList)</span><br><span class="line">            &#123;</span><br><span class="line">                lowerList.Add(line.ToLowerInvariant());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> lowerList;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="result">3 Result</h2><p>我使用了一个101850行, 容量为4.00 MB (4,202,730bytes)的英文html文本进行测试。</p><p>测试环境：</p><ul><li><strong>CPU</strong>: Intel(R) Core(TM) i5-5300U CPU @ 2.30GHz2.30GHz</li><li><strong>RAM</strong>: 8.00GB (7.78 GB usable)</li><li><strong>OS</strong>: Windows 7 Enterprise (Service Pack1)64-bit</li></ul><p>第1次：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">line count: 101850</span><br><span class="line">ReadString: 44ms</span><br><span class="line">line count: 101850      ToUpperTest: 104ms</span><br><span class="line">line count: 101850      ToUpperInvariantTest: 156ms</span><br><span class="line">line count: 101850      ToLowerTest: 220ms</span><br><span class="line">line count: 101850      ToLowerInvariantTest: 287ms</span><br><span class="line">WriteStrings: 403ms</span><br><span class="line">Press any key to continue . . .</span><br></pre></td></tr></table></figure><p>第2次：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">line count: 101850</span><br><span class="line">ReadString: 36ms</span><br><span class="line">line count: 101850      ToUpperTest: 91ms</span><br><span class="line">line count: 101850      ToUpperInvariantTest: 139ms</span><br><span class="line">line count: 101850      ToLowerTest: 197ms</span><br><span class="line">line count: 101850      ToLowerInvariantTest: 262ms</span><br><span class="line">WriteStrings: 368ms</span><br><span class="line">Press any key to continue . . .</span><br></pre></td></tr></table></figure><p>第3次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">line count: 101850</span><br><span class="line">ReadString: 29ms</span><br><span class="line">line count: 101850      ToUpperTest: 79ms</span><br><span class="line">line count: 101850      ToUpperInvariantTest: 125ms</span><br><span class="line">line count: 101850      ToLowerTest: 179ms</span><br><span class="line">line count: 101850      ToLowerInvariantTest: 237ms</span><br><span class="line">WriteStrings: 339ms</span><br><span class="line">Press any key to continue . . .</span><br></pre></td></tr></table></figure><h2 id="conclusion">4 Conclusion</h2><p>三次测试体现出，对于相同测试数据，性能上：</p><p><strong>string.ToUpper &gt; string.ToUpperInvariant &gt;string.ToLower &gt; string.ToLowerInvariant</strong></p><p>即：</p><ul><li><code>ToUpper</code>转换快于<code>ToLower</code>转换。</li><li><code>Invariant</code>转换在<code>ToUpper</code>和<code>ToLower</code>两种处理中，均增加了处理耗时。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> .NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspose.HTML - 解析HTML</title>
      <link href="/posts/Aspose-HTML-%E8%A7%A3%E6%9E%90HTML/"/>
      <url>/posts/Aspose-HTML-%E8%A7%A3%E6%9E%90HTML/</url>
      
        <content type="html"><![CDATA[<p>Aspose.HTML是一款商业授权的HTML解析包，可以实现HTML的解析、渲染、转换格式等功能。</p><span id="more"></span><h1 id="aspose.html---解析html">Aspose.HTML - 解析HTML</h1><h2 id="example">1 example</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Aspose.Html;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">HtmlTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">HtmlTest</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Create HtmlDocument instance to load existing HTML file</span></span><br><span class="line">            HTMLDocument htmlPage = <span class="keyword">new</span> HTMLDocument(<span class="string">@&quot;C:\Dev\Test\AsposeTest\HtmlTest\Sources\page1.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Concatenate to get the raw string of the page</span></span><br><span class="line">            <span class="comment">// Important: use htmlDocument.DocumentElement.OuterHTML to get htmlPage&#x27;s HtmlContents(outerHtml)</span></span><br><span class="line">            <span class="built_in">string</span> rawPage = htmlPage.Doctype.ToString() + htmlPage.DocumentElement.OuterHTML;</span><br><span class="line">            Console.WriteLine(rawPage);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Print Title and inner HTML of file to console</span></span><br><span class="line">            Console.WriteLine(htmlPage.Title);</span><br><span class="line">            Console.WriteLine(htmlPage.Body.InnerHTML);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get DOM node and set new text in it</span></span><br><span class="line">            htmlPage.GetElementById(<span class="string">&quot;p1&quot;</span>).TextContent = <span class="string">&quot;modified paragraph1&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Get a collection of specific nodes and traverse</span></span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> para <span class="keyword">in</span> htmlPage.Body.GetElementsByTagName(<span class="string">&quot;p&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(para.OuterHTML);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Save to output the processed html</span></span><br><span class="line">            htmlPage.Save(<span class="string">&quot;out.html&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="references">2 references</h2><blockquote><p>Product Page: <a href="https://products.aspose.com/html">Aspose.HTML- aspose.com</a></p><p>Documentation: <ahref="https://docs.aspose.com/display/htmlnet/Home">Aspose.HTMLDocumentation - aspose.com</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Aspose </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CryptoServiceProvider - .NET下计算SHAx</title>
      <link href="/posts/CryptoServiceProvider-NET%E4%B8%8B%E8%AE%A1%E7%AE%97SHAx/"/>
      <url>/posts/CryptoServiceProvider-NET%E4%B8%8B%E8%AE%A1%E7%AE%97SHAx/</url>
      
        <content type="html"><![CDATA[<p>在.NET框架下计算SHA1/SHA512</p><span id="more"></span><h1 id="cryptoserviceprovider---.net下计算shax">CryptoServiceProvider -.NET下计算SHAx</h1><h2 id="example">1 example</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Security.Cryptography;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Web;</span><br><span class="line"><span class="keyword">using</span> System.Web.Hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Core.Common</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> SHAUtility provides SHA hash functions for caculating signature/digest.</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SHAUtility</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Compute SHA1 of a Stream instance, return the hex content string</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;stream&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">SHA1Hash</span>(<span class="params">Stream stream</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            SHA1 sha1 = <span class="keyword">new</span> SHA1CryptoServiceProvider();</span><br><span class="line"></span><br><span class="line">            stream.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line">            <span class="built_in">string</span> sha1Str = BitConverter.ToString(sha1.ComputeHash(stream)).Replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);   <span class="comment">// get SHA1 file hash as a hex string</span></span><br><span class="line">            stream.Seek(<span class="number">0</span>, SeekOrigin.Begin);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> sha1Str;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Compute SHA1 of a file, return the hex content string</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;virtualFilePath&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">SHA1Hash</span>(<span class="params"><span class="built_in">string</span> virtualFilePath</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (FilePathUtility.IsExisted(virtualFilePath))</span><br><span class="line">            &#123;</span><br><span class="line">                FileStream fs = File.OpenRead(HostingEnvironment.MapPath(virtualFilePath));</span><br><span class="line">                <span class="built_in">string</span> sha1Hash = SHA1Hash(fs);</span><br><span class="line">                fs.Close();</span><br><span class="line">                <span class="keyword">return</span> sha1Hash;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Compute SHA1 of a HttpPostedFileBase instance, return the hex content string</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;fileBase&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">SHA1Hash</span>(<span class="params">HttpPostedFileBase fileBase</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> SHA1Hash(fileBase.InputStream);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> Compute SHA512 of a string (mainly for hashing a password)</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;plainText&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">SHA512Hash</span>(<span class="params"><span class="built_in">string</span> plainText</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] data = ASCIIEncoding.ASCII.GetBytes(plainText);</span><br><span class="line">            SHA512 sha512 = <span class="keyword">new</span> SHA512CryptoServiceProvider();</span><br><span class="line">            <span class="built_in">byte</span>[] result = sha512.ComputeHash(data);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> BitConverter.ToString(result).Replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> .NET </tag>
            
            <tag> Cryptography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SMTP - .NET发送邮件</title>
      <link href="/posts/SMTP-NET%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
      <url>/posts/SMTP-NET%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>通过<code>SmtpClient</code>，实现.NET框架下的<strong>SMTP</strong>邮件协议编程</p><span id="more"></span><h1 id="smtp---.net发送邮件">SMTP - .NET发送邮件</h1><h2 id="example">1 example</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Net.Mail;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SMTP</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> A utility provides SMTP mail functions</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SMTPUtility</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> send an email in the name of &#x27;System Notification&#x27;(demo.noreply@cn.demo.com) via SMTP</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;mailto&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;mailBody&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;mailSubject&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SendMail</span>(<span class="params"><span class="built_in">string</span> mailto, <span class="built_in">string</span> mailBody, <span class="built_in">string</span> mailSubject</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            MailMessage MyMail = <span class="keyword">new</span> MailMessage();</span><br><span class="line">            MyMail.From = <span class="keyword">new</span> MailAddress(<span class="string">&quot;demo.noreply@cn.demo.com&quot;</span>, <span class="string">&quot;System Notification&quot;</span>);</span><br><span class="line">            MyMail.To.Add(mailto);</span><br><span class="line">            MyMail.Subject = mailSubject;</span><br><span class="line">            MyMail.IsBodyHtml = <span class="literal">true</span>;</span><br><span class="line">            MyMail.Body = mailBody;</span><br><span class="line"></span><br><span class="line">            SmtpClient smtp = <span class="keyword">new</span> SmtpClient();</span><br><span class="line">            smtp.Host = <span class="string">&quot;hostname or IP address&quot;</span>;</span><br><span class="line">            smtp.Send(MyMail);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>注：<code>MailMessage</code>和<code>SmtpClient</code>通过<code>using System.Net.Mail;</code>导入namespace。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> .NET </tag>
            
            <tag> SMTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pluralize - .NET单词转复数形式</title>
      <link href="/posts/Pluralize-NET%E5%8D%95%E8%AF%8D%E8%BD%AC%E5%A4%8D%E6%95%B0%E5%BD%A2%E5%BC%8F/"/>
      <url>/posts/Pluralize-NET%E5%8D%95%E8%AF%8D%E8%BD%AC%E5%A4%8D%E6%95%B0%E5%BD%A2%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>微软EntityFramework中，包含一个单词单数转复数形式的函数，简单易用。</p><span id="more"></span><h1 id="pluralize---.net单词转复数形式">Pluralize -.NET单词转复数形式</h1><h2 id="pluralize">1 Pluralize</h2><h3 id="api">1.1 API</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.Data.Entity.Design.PluralizationServices.</span><br><span class="line">                PluralizationService.CreateService(<span class="keyword">new</span> CultureInfo(<span class="string">&quot;en&quot;</span>)).</span><br><span class="line">                Pluralize(englishWord);</span><br></pre></td></tr></table></figure><h3 id="demo">1.2 Demo</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Globalization;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Pluralize</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> str_out, str_in;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                str_in = Console.ReadLine();</span><br><span class="line">                str_out = System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(<span class="keyword">new</span> CultureInfo(<span class="string">&quot;en&quot;</span>)).Pluralize(str_in);</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;plural form: &quot;</span> + str_out);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>注意：reference中默认不包含System.Data.Entity.Design，需要手动在solution下的References中，AddReference...执行添加</li></ul><p>运行测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">process</span><br><span class="line"></span><br><span class="line">plural form: processes</span><br><span class="line"></span><br><span class="line">datum</span><br><span class="line"></span><br><span class="line">plural form: data</span><br><span class="line"></span><br><span class="line">fly</span><br><span class="line"></span><br><span class="line">plural form: flies</span><br><span class="line"></span><br><span class="line">ability</span><br><span class="line"></span><br><span class="line">plural form: abilities</span><br><span class="line"></span><br><span class="line">person</span><br><span class="line"></span><br><span class="line">plural form: people</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>可以看出，Pluralize函数的转换能力强大，各种复数形式变形均有覆盖。</li><li>不规则变形，如：datum =&gt; data, person =&gt;people，均正确转换。应该有词典型数据结构作为转换支撑。</li></ul><h3 id="encapsulation">1.3 encapsulation</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> return plural form of the specified word</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;word&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">PluralFormat</span>(<span class="params"><span class="built_in">string</span> word</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> System.Data.Entity.Design.PluralizationServices.</span><br><span class="line">      PluralizationService.CreateService(<span class="keyword">new</span> CultureInfo(<span class="string">&quot;en&quot;</span>)).</span><br><span class="line">      Pluralize(word);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="reference">2 Reference</h2><blockquote><p><a href="http://bbs.csdn.net/topics/391004684">C# 将英文转为复数形式- CSDN</a>01postpublish0111005090c221a9417a4bf0afa8a7ac91d5f</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> .NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspose.Pdf - PDF文档页数</title>
      <link href="/posts/Aspose-Pdf-PDF%E6%96%87%E6%A1%A3%E9%A1%B5%E6%95%B0/"/>
      <url>/posts/Aspose-Pdf-PDF%E6%96%87%E6%A1%A3%E9%A1%B5%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>通过Aspose.Pdf读取PDF文档实际页数</p><span id="more"></span><h1 id="aspose.pdf---pdf文档页数">Aspose.Pdf - PDF文档页数</h1><h2 id="api">1 API</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Aspose.Pdf.Document.Pages.Count</span><br></pre></td></tr></table></figure><h2 id="documentation">2 Documentation</h2><blockquote><p>Example below demonstrates how to operate with the documentpages:</p><p>How to obtain number of pages and how to obtain rectangle of startingpage of the document.</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Document document = <span class="keyword">new</span> Document(<span class="string">&quot;sample.pdf&quot;</span>);</span><br><span class="line">Pages pages = document.Pages;</span><br><span class="line">Console.WriteLine(<span class="string">&quot;Document contains &quot;</span> + pages.Count);</span><br><span class="line">Page page = Pages[<span class="number">1</span>];</span><br><span class="line">Rectangle rect = page.Rect;</span><br></pre></td></tr></table></figure><h2 id="encapsulation">3 encapsulation</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Get the count of pages in a PDF document</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;document&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">GetPdfPageCount</span>(<span class="params">Aspose.Pdf.Document document</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> document.Pages.Count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> Get the count of pages in a PDF document</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;document&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">GetPdfPageCount</span>(<span class="params"><span class="built_in">string</span> virtualPath</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Aspose.Pdf.Document document = <span class="keyword">new</span> Aspose.Pdf.Document(HostingEnvironment.MapPath(virtualPath));</span><br><span class="line">    <span class="keyword">return</span> GetPdfPageCount(document);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Aspose </tag>
            
            <tag> PDF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BKDRHash算法C++实现[转载]</title>
      <link href="/posts/BKDRHash%E7%AE%97%E6%B3%95C-%E5%AE%9E%E7%8E%B0-%E8%BD%AC%E8%BD%BD/"/>
      <url>/posts/BKDRHash%E7%AE%97%E6%B3%95C-%E5%AE%9E%E7%8E%B0-%E8%BD%AC%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>正好需要用到BKDRHash算法，简单摘录。</p><span id="more"></span><h1 id="bkdrhash算法c实现转载">BKDRHash算法C++实现[转载]</h1><p>引用源： &gt; <ahref="http://www.cnblogs.com/-clq/archive/2012/05/31/2528153.html">各种字符串Hash函数- clq - 博客园</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// @brief BKDR Hash Function  </span></span><br><span class="line"><span class="comment">/// @detail 本 算法由于在Brian Kernighan与Dennis Ritchie的《The C Programming Language》一书被展示而得 名，是一种简单快捷的hash算法，也是Java目前采用的字符串的Hash算法（累乘因子为31）。  </span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;  </span></span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">BKDRHash</span><span class="params">(<span class="type">const</span> T *str)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">register</span> <span class="type">size_t</span> hash = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span> (<span class="type">size_t</span> ch = (<span class="type">size_t</span>)*str++)  </span><br><span class="line">    &#123;         </span><br><span class="line">        hash = hash * <span class="number">131</span> + ch;   <span class="comment">// 也可以乘以31、131、1313、13131、131313..  </span></span><br><span class="line">        <span class="comment">// 有人说将乘法分解为位运算及加减法可以提高效率，如将上式表达为：hash = hash &lt;&lt; 7 + hash &lt;&lt; 1 + hash + ch;  </span></span><br><span class="line">        <span class="comment">// 但其实在Intel平台上，CPU内部对二者的处理效率都是差不多的，  </span></span><br><span class="line">        <span class="comment">// 我分别进行了100亿次的上述两种运算，发现二者时间差距基本为0（如果是Debug版，分解成位运算后的耗时还要高1/3）；  </span></span><br><span class="line">        <span class="comment">// 在ARM这类RISC系统上没有测试过，由于ARM内部使用Booth&#x27;s Algorithm来模拟32位整数乘法运算，它的效率与乘数有关：  </span></span><br><span class="line">        <span class="comment">// 当乘数8-31位都为1或0时，需要1个时钟周期  </span></span><br><span class="line">        <span class="comment">// 当乘数16-31位都为1或0时，需要2个时钟周期  </span></span><br><span class="line">        <span class="comment">// 当乘数24-31位都为1或0时，需要3个时钟周期  </span></span><br><span class="line">        <span class="comment">// 否则，需要4个时钟周期  </span></span><br><span class="line">        <span class="comment">// 因此，虽然我没有实际测试，但是我依然认为二者效率上差别不大          </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> hash;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> BKDR </tag>
            
            <tag> Hash </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XMind - 思维导图制图工具</title>
      <link href="/posts/XMind-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E5%88%B6%E5%9B%BE%E5%B7%A5%E5%85%B7/"/>
      <url>/posts/XMind-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E5%88%B6%E5%9B%BE%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>非常适合做需求分析，梳理思路。</p><span id="more"></span><h1 id="xmind---思维导图制图工具">XMind - 思维导图制图工具</h1><h2 id="简介">1 简介</h2><p>XMind操作极其简单，内置简约美观的多款设计主题。</p><p>XMind ZEN目前以Beta测试的名义免费授权使用。</p><blockquote><p><a href="https://www.xmind.cn/zen/">XMind ZEN</a></p></blockquote><p>XMind Pro作为专业版本，商业授权，付费使用。</p><blockquote><p><a href="https://www.xmind.cn/xmind8-pro/">XMind 8 Pro</a></p></blockquote><h2 id="操作">2 操作</h2><p>默认包含一个MainTopic：</p><ul><li><p>按 <strong>Tab</strong> 创建子层的 <code>SubTopic</code></p></li><li><p>按 <strong>Enter</strong> 创建同层并列的<code>Topic</code></p></li><li><p>按 <strong>Space</strong>即可选中并<code>输入内容</code>（实际上直接输入也可以修改内容）</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> XMind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspose.Words - 指定位置替换并插入</title>
      <link href="/posts/Aspose-Words-%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E6%9B%BF%E6%8D%A2%E5%B9%B6%E6%8F%92%E5%85%A5/"/>
      <url>/posts/Aspose-Words-%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%E6%9B%BF%E6%8D%A2%E5%B9%B6%E6%8F%92%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>重载句柄类方法，通过传递匿名句柄对象，实现指哪打哪的编辑插入功能。</p><span id="more"></span><h1 id="aspose.words---指定位置替换并插入">Aspose.Words -指定位置替换并插入</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Aspose.Words;</span><br><span class="line"><span class="keyword">using</span> Aspose.Words.Replacing;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">AppendTest</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">class</span> <span class="title">InsertAtReplaceHandler</span> : <span class="title">IReplacingCallback</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">string</span> replaceStr;</span><br><span class="line">            <span class="keyword">private</span> <span class="built_in">bool</span> hasNext;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">InsertAtReplaceHandler</span>(<span class="params"><span class="built_in">string</span> replaceStr, <span class="built_in">bool</span> hasNext</span>)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">this</span>.replaceStr = replaceStr;</span><br><span class="line">                <span class="keyword">this</span>.hasNext = hasNext;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ReplaceAction IReplacingCallback.Replacing(ReplacingArgs e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Insert a document after the paragraph, containing the match text.</span></span><br><span class="line">                Paragraph para = (Paragraph)e.MatchNode.ParentNode;</span><br><span class="line">                <span class="comment">//InsertDocument(para, subDoc);</span></span><br><span class="line"></span><br><span class="line">                Document doc = (Document)e.MatchNode.Document;</span><br><span class="line">                DocumentBuilder docBuilder = <span class="keyword">new</span> DocumentBuilder(doc);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// duplicate pattern for next replace use</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.hasNext)</span><br><span class="line">                &#123;</span><br><span class="line">                    Paragraph paraClone = (Paragraph)para.Clone(<span class="literal">true</span>);</span><br><span class="line">                    para.ParentNode.InsertAfter(paraClone, para);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                docBuilder.MoveTo(para);</span><br><span class="line">                para.RemoveAllChildren();</span><br><span class="line">                <span class="comment">//docBuilder.MoveToParagraph(doc.IndexOf(para))</span></span><br><span class="line">                <span class="comment">//docBuilder.Bold = true;</span></span><br><span class="line">                <span class="comment">//docBuilder.Font.Size = 20.0;</span></span><br><span class="line">                docBuilder.Write(<span class="keyword">this</span>.replaceStr);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Remove the paragraph with the match text.</span></span><br><span class="line">                <span class="comment">//para.Remove();</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ReplaceAction.Skip;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Document doc = <span class="keyword">new</span> Document(<span class="string">&quot;C:\\Dev\\Test\\AsposeTest\\MES dev quote.docx&quot;</span>);</span><br><span class="line">            DocumentBuilder docBuilder = <span class="keyword">new</span> DocumentBuilder(doc);</span><br><span class="line"></span><br><span class="line">            doc.Range.Replace(<span class="keyword">new</span> Regex(<span class="string">&quot;__pattern__&quot;</span>), <span class="keyword">new</span> InsertAtReplaceHandler(<span class="string">&quot;TEST20171214&quot;</span>, <span class="literal">true</span>), <span class="literal">false</span>);</span><br><span class="line">            doc.Range.Replace(<span class="keyword">new</span> Regex(<span class="string">&quot;__pattern__&quot;</span>), <span class="keyword">new</span> InsertAtReplaceHandler(<span class="string">&quot;TEST20171215&quot;</span>, <span class="literal">false</span>), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            doc.Save(<span class="string">&quot;C:\\Dev\\Test\\AsposeTest\\MES dev quote.output.pdf&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Aspose </tag>
            
            <tag> Word </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspose.Words - DOCX到PDF格式转换</title>
      <link href="/posts/Aspose-Words-DOCX%E5%88%B0PDF%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
      <url>/posts/Aspose-Words-DOCX%E5%88%B0PDF%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>通过Aspose.Words可以实现很方便的Word格式到PDF格式的转换。</p><span id="more"></span><h1 id="aspose.words---docx到pdf格式转换">Aspose.Words -DOCX到PDF格式转换</h1><h1 id="example">1 Example</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Aspose.Words;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConvertTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">string</span> MyDir = <span class="string">&quot;C:\\Dev\\Test\\&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Document mainDoc = <span class="keyword">new</span> Document(MyDir + <span class="string">&quot;in.docx&quot;</span>);</span><br><span class="line"></span><br><span class="line">            mainDoc.Save(MyDir + <span class="string">&quot;out.pdf&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Aspose </tag>
            
            <tag> PDF </tag>
            
            <tag> Word </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspose.Pdf - PDF数字签名</title>
      <link href="/posts/Aspose-Pdf-PDF%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/"/>
      <url>/posts/Aspose-Pdf-PDF%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<p>通过Aspose.Pdf可以便捷地实现对PDF文件的数字签名处理。</p><span id="more"></span><h1 id="aspose.pdf---pdf数字签名">Aspose.Pdf - PDF数字签名</h1><h1 id="example">1 Example</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Aspose.Pdf.Forms;</span><br><span class="line"><span class="keyword">using</span> Aspose.Pdf.Facades;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">SignTest</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">string</span> MyDir = <span class="string">&quot;C:\\Dev\\Test\\&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">signAndSave</span>(<span class="params"><span class="built_in">string</span> inFile,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="built_in">string</span> outFile,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="built_in">string</span> sigPath,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="built_in">string</span> sigPassword,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="built_in">string</span> sigReason,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="built_in">string</span> sigContactInfo,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="built_in">string</span> sigLocation,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="built_in">int</span> pageNo,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="built_in">int</span> x,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="built_in">int</span> y,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="built_in">int</span> width,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="built_in">int</span> height,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="built_in">string</span> sigAppearancePath</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// sign</span></span><br><span class="line">            PKCS1 sig = <span class="keyword">new</span> PKCS1(sigPath, sigPassword);</span><br><span class="line">            sig.Reason = sigReason;</span><br><span class="line">            sig.ContactInfo = sigContactInfo;</span><br><span class="line">            sig.Location = sigLocation;</span><br><span class="line">            PdfFileSignature pdfSign = <span class="keyword">new</span> PdfFileSignature(inFile, outFile);</span><br><span class="line">            System.Drawing.Rectangle rect = <span class="keyword">new</span> System.Drawing.Rectangle(x, y, width, height);</span><br><span class="line">            pdfSign.SignatureAppearance = sigAppearancePath;</span><br><span class="line">            pdfSign.Sign(pageNo, <span class="literal">true</span>, rect, sig);</span><br><span class="line">            pdfSign.Save();</span><br><span class="line">            pdfSign.Close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// sign 1</span></span><br><span class="line">            signAndSave(MyDir + <span class="string">&quot;quotation.pdf&quot;</span>,</span><br><span class="line">            MyDir + <span class="string">&quot;quotation_signed1.pdf&quot;</span>,</span><br><span class="line">            MyDir + <span class="string">&quot;Heary.pfx&quot;</span>,</span><br><span class="line">            <span class="string">&quot;password&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Software Dev&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Heary&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SuZhou&quot;</span>,</span><br><span class="line">            <span class="number">1</span>,</span><br><span class="line">            <span class="number">100</span>,</span><br><span class="line">            <span class="number">100</span>,</span><br><span class="line">            <span class="number">100</span>,</span><br><span class="line">            <span class="number">50</span>,</span><br><span class="line">            MyDir + <span class="string">&quot;heary.jpg&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Aspose </tag>
            
            <tag> PDF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aspose.Words - Replace实现正则匹配及替换</title>
      <link href="/posts/Aspose-Words-Replace%E5%AE%9E%E7%8E%B0%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E5%8F%8A%E6%9B%BF%E6%8D%A2/"/>
      <url>/posts/Aspose-Words-Replace%E5%AE%9E%E7%8E%B0%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E5%8F%8A%E6%9B%BF%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>Aspose.Words的Replace函数可以实现对Word文档字符串的正则匹配及内容替换。</p><span id="more"></span><h1 id="aspose.words---replace实现正则匹配及替换">Aspose.Words -Replace实现正则匹配及替换</h1><h2 id="example">1 Example</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Aspose.Words;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ReplaceTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">string</span> MyDir = <span class="string">&quot;C:\\Dev\\Test\\&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Aspose.Words.Document mainDoc = <span class="keyword">new</span> Document(MyDir + <span class="string">&quot;in.docx&quot;</span>);</span><br><span class="line"></span><br><span class="line">            mainDoc.Range.Replace(<span class="keyword">new</span> Regex(<span class="string">&quot;__pattern1__&quot;</span>), <span class="string">&quot;REPLACE1&quot;</span>);</span><br><span class="line"></span><br><span class="line">            mainDoc.Save(MyDir + <span class="string">&quot;out.docx&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> Aspose </tag>
            
            <tag> Word </tag>
            
            <tag> Regex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AsNoTracking - 实现Entity Framework 6中克隆数据库对象</title>
      <link href="/posts/AsNoTracking-%E5%AE%9E%E7%8E%B0Entity-Framework-6%E4%B8%AD%E5%85%8B%E9%9A%86%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E8%B1%A1/"/>
      <url>/posts/AsNoTracking-%E5%AE%9E%E7%8E%B0Entity-Framework-6%E4%B8%AD%E5%85%8B%E9%9A%86%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>通过IQueryable接口的AsNoTracking方法，可以实现脱离上下文<em>(context)</em>的数据库对象修改，实现克隆数据库对象的功能</p><span id="more"></span><h1id="asnotracking---实现entity-framework-6中克隆数据库对象">AsNoTracking- 实现Entity Framework 6中克隆数据库对象</h1><h2 id="example">1 example</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> entity = context.Entities</span><br><span class="line">                    .AsNoTracking()</span><br><span class="line">                    .Include(x =&gt; x.ChildEntities)</span><br><span class="line">                    .FirstOrDefault(x =&gt; x.EntityId == entityId);</span><br><span class="line"></span><br><span class="line">entity.SomeProperty = DateTime.Now;</span><br><span class="line"></span><br><span class="line">context.Entities.Add(entity);</span><br><span class="line">context.SaveChanges();</span><br></pre></td></tr></table></figure><ul><li><p>须通过FirstOrDefault()或类似作用的函数取出唯一对象，再对唯一对象修改。</p></li><li><p><strong>不可以写作：</strong></p></li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> entites = context.Entities</span><br><span class="line">                    .AsNoTracking();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> item <span class="keyword">in</span> entities)</span><br><span class="line">&#123;</span><br><span class="line">  item.SomeProperty = SomeValue;</span><br><span class="line">  context.Entities.Add(entity);</span><br><span class="line">  context.SaveChanges();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>需要一次查询一项、修改一项</li></ul><h2 id="reference">2 reference</h2><blockquote><p><a href="https://cloud.tencent.com/developer/ask/38723">EntityFramework 6:克隆除ID外的对象？ - tencent.com</a></p><p>当您从DataSet检索一个或多个实体时，您可以告诉EntityFramework不要跟踪您对该对象所做的任何更改，然后将该实体作为一个新实体添加到DataSet中。通过使用。作为NoTracking，上下文对现有实体一无所知。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> SQL Server </tag>
            
            <tag> C# </tag>
            
            <tag> Database </tag>
            
            <tag> Entity Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AdminLTE - 一款简约的前端框架（MIT license）</title>
      <link href="/posts/AdminLTE-%E4%B8%80%E6%AC%BE%E7%AE%80%E7%BA%A6%E7%9A%84%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%EF%BC%88MIT-license%EF%BC%89/"/>
      <url>/posts/AdminLTE-%E4%B8%80%E6%AC%BE%E7%AE%80%E7%BA%A6%E7%9A%84%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%EF%BC%88MIT-license%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>AdminLTE - Free Premium Admin control Panel Theme Based On Bootstrap3.x</p><span id="more"></span><h1 id="adminlte---一款简约的前端框架mit-license">AdminLTE -一款简约的前端框架（MIT license）</h1><h2 id="intro">Intro</h2><figure><img src="https://adminlte.io/img/AdminLTE2.1.png" alt="AdminLTE2" /><figcaption aria-hidden="true">AdminLTE2</figcaption></figure><ul><li><p><strong>Live Preview</strong>: <ahref="https://adminlte.io/themes/AdminLTE/index.html">AdminLTE 2 -AdminLTE.io</a></p></li><li><p><strong>GitHub</strong>: <ahref="https://github.com/almasaeed2010/AdminLTE">almasaeed2010/AdminLTE- GitHub.com</a></p></li><li><p><strong>Website</strong>: <a href="https://adminlte.io">AdminLTEControl Panel Template - AdminLTE.io</a></p></li><li><p><strong>Download</strong>: <ahref="https://github.com/almasaeed2010/AdminLTE/releases">Releases -GitHub.com</a></p></li></ul><h2 id="related">Related</h2><blockquote><p><strong>Creative-Tim</strong>: <ahref="https://www.creative-tim.com/">Premium Bootstrap Themes -Creative-Tim</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> AdminLTE </tag>
            
            <tag> front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Controller间调用 - ASP.NET MVC实现AController调用BController</title>
      <link href="/posts/Controller%E9%97%B4%E8%B0%83%E7%94%A8-ASP-NET-MVC%E5%AE%9E%E7%8E%B0AController%E8%B0%83%E7%94%A8BController/"/>
      <url>/posts/Controller%E9%97%B4%E8%B0%83%E7%94%A8-ASP-NET-MVC%E5%AE%9E%E7%8E%B0AController%E8%B0%83%E7%94%A8BController/</url>
      
        <content type="html"><![CDATA[<p>通过DependencyResolver，实现在AController中调用BController的函数</p><span id="more"></span><h1id="controller间调用---asp.net-mvc实现acontroller调用bcontroller">Controller间调用- ASP.NET MVC实现AController调用BController</h1><h2 id="example1">example1</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChildController</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Copy</span>(<span class="params"><span class="built_in">int</span> ID = <span class="number">0</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// copy a child instance</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ParentController</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Copy</span>(<span class="params"><span class="built_in">int</span> ID = <span class="number">0</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> childController = DependencyResolver.Current.GetService&lt;ChildController&gt;();</span><br><span class="line">        <span class="keyword">var</span> result = childController.Copy(childID);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="reference">reference</h2><blockquote><p><ahref="http://blog.csdn.net/billy_chen_2013/article/details/52207192">Asp.netmvc 动作方法中 调用 另一个控制器的动作方法 - CSDN</a></p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ActionResult 动作方法()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> otherController = DependencyResolver.Current.GetService&lt;另一个控制器的类名&gt;();</span><br><span class="line">    <span class="keyword">var</span> result = otherController.另一个动作方法();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Monaco - 等宽西文字体</title>
      <link href="/posts/Monaco-%E7%AD%89%E5%AE%BD%E8%A5%BF%E6%96%87%E5%AD%97%E4%BD%93/"/>
      <url>/posts/Monaco-%E7%AD%89%E5%AE%BD%E8%A5%BF%E6%96%87%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<p>Monaco是一款等宽西文字体，作为代码字体显示效果极佳。</p><span id="more"></span><h1 id="monaco---等宽西文字体">Monaco - 等宽西文字体</h1><figure><img src="https://www.heary.cn/usr/uploads/2018/01/2291540495.gif"alt="908.GIF" /><figcaption aria-hidden="true">908.GIF</figcaption></figure><p>Monaco 字体下载:<a href="https://www.heary.cn/usr/uploads/2018/01/2843627104.rar" class="btn btn-primary">Download</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Fonts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Razor - 三目运算符样例</title>
      <link href="/posts/Razor-%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6%E6%A0%B7%E4%BE%8B/"/>
      <url>/posts/Razor-%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6%E6%A0%B7%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>Razor语法下，三目运算符（cond?exprForTrue:exprForFalse）样例</p><span id="more"></span><h1 id="razor---三目运算符样例">Razor - 三目运算符样例</h1><h2 id="example1">example1</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;@(Model.PName == null?&quot;</span>&quot;<span class="attr">:Model.PName</span>)&quot; /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="example2">example2</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary @(Model.HasPDF ? &quot;</span>&quot; <span class="attr">:</span> &quot; <span class="attr">disabled</span>&quot;)&quot; </span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;@Url.Action(&quot;</span><span class="attr">DownloadPDF</span>&quot;, <span class="attr">routeValues:</span> <span class="attr">new</span> &#123;<span class="attr">ID</span> = <span class="string">Model.QuotationID&#125;)</span>&quot;&gt;</span>PDF<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> Razor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中文信息处理复习</title>
      <link href="/posts/%E4%B8%AD%E6%96%87%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%E5%A4%8D%E4%B9%A0/"/>
      <url>/posts/%E4%B8%AD%E6%96%87%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>中文信息处理复习</p><span id="more"></span><h1 id="中文信息处理复习">中文信息处理复习</h1><h2 id="重点">重点</h2><h3 id="字符集">1. 字符集</h3><h3 id="汉字的字形">2. 汉字的字形</h3><ul><li>点阵【最重点】</li><li>轮廓矢量</li><li>曲线轮廓</li></ul><h3 id="计算显示器可以显示的汉字行数列数总数">3.计算显示器可以显示的汉字行数、列数、总数</h3><h3 id="显卡的工作模式">4. 显卡的工作模式</h3><ul><li>图形工作模式<ul><li>Windows的命令行控制台是在图形工作模式下，模拟的字符工作模式</li></ul></li><li>字符工作模式</li></ul><h3 id="计算显存大小需求分辨率n位色">5.计算显存大小需求（分辨率、n位色）</h3><h3 id="终端和显示器的区别">6. 终端和显示器的区别</h3><ul><li>汉字终端是一个能处理汉字的固化计算机系统。一般由主控板、显示器、键盘三大部分组成。</li><li>主机系统不能输入和显示中文，无法实现汉字机内码到汉字字形码的转换，就把西文字符或汉字等字符内码交给终端，由终端接收、判别内码，找到字形信息，经过处理在屏幕上显示。</li></ul><h3 id="分词">7. 分词</h3><ul><li>真/伪歧义</li><li>交叉型/组合型歧义</li><li>正向/逆向最大匹配分词算法</li></ul><h3 id="码长码元等概念理解">8. 码长、码元等概念理解</h3><h3 id="常用数据结构如-码本拼音输入码的压缩">9. 常用数据结构（如码本）、拼音输入码的压缩</h3><h3 id="字形码压缩">10. 字形码压缩</h3><ul><li>黑白段、线性增量压缩等</li></ul><h3 id="base64编码解码">11. Base64编码解码</h3><ul><li>算法、程序</li></ul><h3 id="tts实验">12. TTS实验</h3><hr /><h2 id="第一章-概论">第一章 概论</h2><h3 id="什么是中文信息处理它包含哪些主要内容fe">2.什么是中文信息处理？它包含哪些主要内容？[FE]</h3><ul><li>定义：用计算机对汉语的音、形、义等语言文字信息进行的加工操作，包括对字、词、短语、句、篇章的输入、输出、识别、转换、压缩、存储、检索、分析、理解和生成等各方面的处理技术。</li><li>简单地说，中文信息处理就是利用计算理论和计算技术处理中国语言文字信息的一门学科，是计算机科学和语言文字学的交叉学科。</li><li>内容<ul><li>字符层<ul><li>字符编码集</li><li>汉字的输入码编码</li><li>中文平台和中文操作系统</li><li>汉字输入技术（输入法、手写、语音输入等）</li><li>汉字字形和字形库管理技术</li><li>汉字输出技术</li></ul></li><li>内容层<ul><li>汉语分词</li><li>中文信息检索</li><li>中文信息抽取</li><li>中文文本分类</li></ul></li></ul></li></ul><h3 id="什么是字频词频什么是高频字和高频词-fe">4.什么是字频、词频？什么是高频字和高频词？ [FE]</h3><ul><li>字频：字频是一个汉字的相对使用频率，也就是一个汉字使用次数与所统计材料的总字数的比例，一般用百分比表示，用于体现一个汉字的覆盖面；</li><li>词频：词频就是一个词的相对使用频率。统计词频需要对汉字串进行切词处理，较为复杂，与统计字频不同。</li><li>高频字：统计材料中，使用频率较高的字；</li><li>高频词，统计材料中，使用频率较高的词。</li></ul><h3 id="中文信息处理的主要研究对象有哪些">6.中文信息处理的主要研究对象有哪些？</h3><ul><li>汉字键盘输入技术</li><li>汉字输出技术</li><li>软件汉化技术</li><li>汉字字形识别技术</li><li>汉语语音识别技术</li><li>激光照排技术</li><li>中文平台</li><li>文本分类</li><li>信息检索</li><li>其它：邮件过滤、舆情处理……</li></ul><h3 id="软件的国际化和本地化对中文信息处理有何意义">8.软件的国际化和本地化对中文信息处理有何意义？</h3><ul><li>国际化：把原来只为英文设计的计算机系统或应用软件改写成同时支持多种语言和文化习俗和编码集。在系统层提供一种多国语言的支持机制。</li><li>本地化：把计算机系统软件或应用软件转为使用并兼容某种特定语言的过程。</li></ul><hr /><h2 id="第二章-汉字信息在计算机内部的表示">第二章汉字信息在计算机内部的表示</h2><h3 id="什么是代码页其作用是什么">3. 什么是代码页？其作用是什么？</h3><ul><li>代码页：代码页是一个内部表，操作系统用它将符号映射为字符编号。代码页通过编号引用。</li><li>作用：通过代码页，操作系统将符号（字母、数字和标点符号）映射为字符编号，不同的代码页支持不同国家（地区）所使用的字符集。使得无需开发不同的操作系统，在成本、系统维护与升级等方面的开销大大减小。</li></ul><h3id="字符在iso-10646中如何编码的iso10646中的基本位平面的作用是什么">5.字符在ISO 10646中如何编码的？ISO10646中的基本位平面的作用是什么？</h3><ul><li>ISO 10646编码结构：4个字节，依次为组、面、行、位。<ul><li>128个组，每组256个字面，每个字面256行，每个行256个字位。</li></ul></li><li>基本位平面作用：ISO10646的第0组第0面，称为”基本多文种字面“BMP，编码与Unicode相同。包含拼音文字、中日韩汉字、符号区等……</li></ul><h3 id="从字符编码标准的角度谈谈计算机中文信息处理的特点-fe">11.从字符编码标准的角度谈谈计算机中文信息处理的特点。 [FE]</h3><ul><li>字汇大</li><li>​</li></ul><h3 id="什么是unicode字符编码标准其特点是什么-fe">12.什么是Unicode字符编码标准？其特点是什么？ [FE]</h3><ul><li>16位，两个字节容纳全世界各种语言的字符和符号</li><li>位于ISO 10646的第0组第0字面，即与BMP基本多文种字面兼容。</li><li>机内码</li><li>编码简单、实现容易、深受工业界欢迎</li></ul><hr /><h3 id="第三章-汉字字符编码集的应用">第三章 汉字字符编码集的应用</h3><h3id="提出一种实现汉字简-繁转换的方法并讨论如何采取措施提高其转换的准确率-fe">2.提出一种实现汉字简-繁转换的方法，并讨论如何采取措施提高其转换的准确率？[FE]</h3><ul><li>通过统计分析，分离字汇为：简繁一一对应字汇，简繁一对多字汇；如字在一一对应字汇中，则直接查表替换，简单高效；如字在一对多字汇中，通过词汇简繁映射表，根据搭配进行简繁转换。</li><li>提高准确率：收录足够多的简繁转换词汇数据，这样才能避免遇到陌生的简体/繁体词汇。</li></ul><h3 id="internet上的字符编码是如何产生的">3.Internet上的字符编码是如何产生的？</h3><ul><li>因为邮件协议等网络协议无法传输8位字符编码，高位置1的字节通常会被认作为控制字符等信息。因此，需要相应的字符编码来解决此问题，实现8位字符也可以通过邮件协议等网络协议进行正常的传输。</li></ul><h3 id="uuencodeqphz等编码主要解决什么问题-fe">4.UUENCODE、QP、HZ等编码主要解决什么问题？ [FE]</h3><ul><li>因为邮件协议等网络协议无法传输8位字符编码，高位置1的字节通常会被认作为控制字符等信息。因此，需要相应的字符编码来解决此问题，实现8位字符也可以通过邮件协议等网络协议进行正常的传输。</li></ul><hr /><h2 id="第四章-汉字编码技术">第四章 汉字编码技术</h2><h3 id="小键盘编码和大键盘编码各有哪些优缺点">5.“小键盘编码”和“大键盘编码”各有哪些优缺点？</h3><ul><li>大键盘编码：如 PC标准键盘<ul><li>优点：<ul><li>拼音码元与按键存在一一对应的关系，映射简单、方便，无需进行转换；</li><li>大键盘可以双手输入，可以实现快速输入；</li></ul></li><li>缺点：<ul><li>根据海曼公式，大键盘码元数较多，汉字编码时间就较长，需要记忆的信息也相应增多（全拼方法除外），不利于输入和学习。</li></ul></li></ul></li><li>小键盘编码：如 手机T9键盘<ul><li>优点：码元数少，汉字编码时间较小；<ul><li>需要记忆的信息少，有利于输入和学习。</li></ul></li><li>缺点：只能单手输入，因此小键盘相对大键盘输入速度较慢。</li></ul></li></ul><h3 id="如何理解汉字编码技术中的以字为基础以词为主导-fe">7.如何理解汉字编码技术中的”以字为基础，以词为主导“？ [FE]</h3><ul><li>Hints: 以词加快输入</li><li>输入法要能打出两万多个汉字，但实际输入主要以词为主</li><li>​</li></ul><h3id="给出一种汉字键盘编码的码本对照表设计方案使之能实现动态调频和高频先见并给出该检索引擎的检索算法和相关数据结构评价码本对照表的结构方案对检索的效率有何影响">12.给出一种汉字键盘编码的码本对照表设计方案，使之能实现“动态调频”和“高频先见”，并给出该检索引擎的检索算法和相关数据结构，评价码本对照表的结构方案对检索的效率有何影响？</h3><hr /><h2 id="第五章-中文平台与中文操作系统">第五章中文平台与中文操作系统</h2><h3 id="中文操作系统有哪几种设计方法各有什么特点">1.中文操作系统有哪几种设计方法？各有什么特点？</h3><ol type="1"><li>专用的中文输入输出设备与西文操作系统结合<ol type="1"><li>专用设备成本很高；</li><li>不实用，需要很大的键盘，检索汉字按键也很麻烦；</li></ol></li><li>设计一个全新的中文操作系统<ol type="1"><li>优：系统功能关系协调，可以完全解决中西文不兼容的问题；</li><li>缺：周期长，成本高，其他组织机构难以实现。</li></ol></li><li>修改原有的西文操作系统<ol type="1"><li>优：中西文兼容；实现周期短；</li><li>缺：可能会影响原来操作系统的部分功能；中文信息处理的特点和效率不能最好表现。</li></ol></li></ol><h3id="汉字信息处理系统中从信息的输入到信息的输出过程中各个模块的作用是什么-fe">2.汉字信息处理系统中，从信息的输入到信息的输出过程中，各个模块的作用是什么？[FE]</h3><ul><li><strong>Important</strong>: <em>书P78 图5.1汉字处理模块与代码体系关系图</em></li></ul><ol type="1"><li>汉字输入管理模块<ol type="1"><li>提供汉字输入的功能<ol type="1"><li>语音识别</li><li>手写输入</li><li>键盘输入</li></ol></li></ol></li><li>汉字打印管理模块<ol type="1"><li>将汉字处理模块传过来的汉字内码抛给字库管理模块，获取该汉字的字模信息，得到汉字的字形码，转而控制打印机打印</li></ol></li><li>汉字显示管理模块<ol type="1"><li>将汉字处理模块传过来的汉字内码抛给字库管理模块。获取该汉字的字母信息，得到汉字的字形码，然后控制显示卡在显示器上显示；</li></ol></li><li>汉字字库管理模块<ol type="1"><li>管理多种字体的汉字库，根据显示/打印模块传来的汉字内码进行映射检索找到字形信息，并将其返回。</li></ol></li><li>通信管理模块<ol type="1"><li>将汉字处理模块传过来的内码编程交换码输出；</li></ol></li><li>汉字处理模块<ol type="1"><li>处理文字编辑、排版等；主要由各个应用程序实现。</li></ol></li></ol><h3 id="嵌入式操作系统和台式机上的操作系统有何不同-fe">4.嵌入式操作系统和台式机上的操作系统有何不同？ [FE]</h3><ul><li>嵌入式操作系统<ul><li>低功耗</li><li>小内存</li><li>稳定性要求高</li></ul></li></ul><hr /><h2 id="第六章-汉字输入技术">第六章 汉字输入技术</h2><p><strong>重点：</strong></p><ul><li>汉字码本的数据结构、优缺点<ul><li>定长结构</li><li>变长结构</li><li>计算结构</li><li>索引结构</li></ul></li></ul><p>注：</p><ul><li>内码输入法（区位码输入）无需码本</li></ul><h3 id="试述汉语语音输入键盘输入和扫描输入的各自特点和应用领域-fe">1.试述汉语语音输入、键盘输入和扫描输入的各自特点和应用领域。 [FE]</h3><ul><li>键盘输入：<ul><li>最早、最广泛、最主要的输入方法；</li><li>输入快速、无需额外设备、编码方案丰富；</li></ul></li><li>语音输入：<ul><li>人机对话，前景广阔；</li><li>实现在计算机网络上不同语言人之间的直接交谈、开会和其它合作工作；</li></ul></li><li>扫描输入：<ul><li>批量识别、速度快</li><li>整理、保全计算机出现前的文书资料，绝版古籍资料，图像处理，桌面排版，印刷出版，字符识别，图文数据库，广告美术设计，多媒体图文通信，办公自动化。</li></ul></li></ul><h3 id="阐述windows中的钩子机制">4. 阐述Windows中的钩子机制。</h3><ul><li>通过钩子机制，实现输入系统先于应用程序得到键盘按键。</li><li>例如：NewGetChar作为输入系统定义的GetChar函数的钩子，那么应用程序读取键盘缓冲区字符时，实际会调用NewGetChar，在NewGetChar中，系统调用GetChar读取字符，传递给输入系统处理；输入系统处理完后，把结果给NewGetChar返回给应用程序。</li></ul><h3 id="输入码对照表在汉字输入系统中的作用是什么-fe">5.输入码对照表在汉字输入系统中的作用是什么？ 【FE】</h3><ul><li>输入码对照表是汉字键盘输入中的一个重要的数据结构，是汉字输入码到机内码转换的核心，反映了汉字输入码到机内码之间的映射关系。</li><li>汉字输入过程最主要的一个环节是根据用户输入的输入码，在对照表中检索得到输入码所对应的汉字。</li></ul><h3id="在一个具体的汉字输入法中是如何实现动态调频和联想功能的在输入程序和对照表的设计中如何合理解决这一问题-fe-opt">11.在一个具体的汉字输入法中是如何实现“动态调频”和“联想”功能的？在输入程序和对照表的设计中如何合理解决这一问题？[FE, Opt]</h3><p>记录频度</p><ul><li>频度需要防止溢出，例如，达到200时，折半到100，并把其它频度也整体调整，保持大小关系</li></ul><hr /><h2 id="第七章-汉字字形和字形库管理技术">第七章汉字字形和字形库管理技术</h2><p>会写汉字点阵码</p><ul><li>注意汉字点阵码有横向点阵和纵向点阵</li></ul><h3 id="什么是点阵字库矢量字库和曲线字库它们各有什么特点-fe">3.什么是点阵字库、矢量字库和曲线字库？它们各有什么特点？ [FE]</h3><ul><li>点阵<ul><li>点</li></ul></li><li>轮廓矢量<ul><li>直线</li><li>优点：不怕放大</li><li>缺点：方法有折线、锯齿</li></ul></li><li>曲线轮廓<ul><li>二次、三次曲线</li><li>不怕放大、且平滑、避免了折线锯齿</li></ul></li></ul><h3 id="黑白段表示法和线性增量表示法各有哪些特点-fe">4.“黑白段表示法”和“线性增量表示法”各有哪些特点？ [FE]</h3><ul><li>汉字字形压缩算法<ul><li>解决汉字字形点阵字库存储量过大的问题</li></ul></li><li>黑白段表示法<ul><li>仅当全空白行或者壁画均为竖直线才能压缩。汉字笔画中非竖直笔画多，字稿难以挂正，常有扫描误差、毛刺，使黑白段压缩效率降低。</li></ul></li><li>线性增量表示法<ul><li>在黑白段信息格式的基础上，增加增量信息。</li><li>可以处理汉字笔画中大量出现的斜线，进一步压缩字形信息。</li><li>对高分辨率的字库压缩倍率大，对低分辨率字库的压缩倍率小。</li><li>缺点：有可能会改变原来的字形，压缩时不可勉强。</li></ul></li></ul><hr /><h3 id="第八章-汉字输出技术">第八章 汉字输出技术</h3><p>搞清楚<strong>汉字终端</strong>和<strong>显示器</strong>的区别</p><h3 id="什么叫显示器的显示模式字符显示模式和图形显示模式有何不同-fe">1.什么叫显示器的显示模式？字符显示模式和图形显示模式有何不同？ [FE]</h3><ul><li>字符显示模式<ul><li>西文ASCII码通过系统调用写入显存，显卡读取ASCII码，通过显卡ROM中的ASCII码字形库找到字形点阵信息并显示。</li></ul></li><li>图形显示模式<ul><li>汉字只能显示在图形显示模式下，汉字显示系统将汉字机内码通过软件转换的形式转换为汉字字型码，继而将点阵信息写入显示存储器，提供给屏幕显示。</li></ul></li></ul><h3 id="汉字显示终端和pc机上的显示器有哪些异同之处-fe">7.汉字显示终端和PC机上的显示器有哪些异同之处？ [FE]</h3><ul><li>汉字终端是一个能处理汉字的固化计算机系统。一般由主控板、显示器、键盘三大部分组成。主机系统不能输入和显示中文，则通过汉字终端输入、显示输出中文。汉字终端可以接受、辨别内码，并查字形库进行显示；也可以处理用户操作的输入。</li><li>显示器只接收、显示字符、图形信息，不具备汉字内码输入输出的处理能力。</li></ul><hr /><h2 id="第九章-汉语分词">第九章 汉语分词</h2><p>考试要求不高</p><p>知道汉语分词的主要障碍</p><p>不要求掌握太复杂的汉字分词算法，掌握最基本的：正向最大匹配、逆向最大匹配。比较哪个效率高。了解词典数据结构和分词性能。（如果检索词很长，对词典排序有讲究）</p><h3 id="什么是汉语分词其特点是什么-fe">1. 什么是汉语分词？其特点是什么？[FE]</h3><ul><li>分词规范问题<ul><li>词的概念不清，词该如何界定</li></ul></li><li>歧义切分问题<ul><li>存在多种理解方式</li></ul></li><li>未登录词识别<ul><li>专业术语、新词、缩略词等</li></ul></li><li>分词理解的先与后<ul><li>先分词才能后理解，但分词又需要以理解为基础</li></ul></li></ul><h3 id="什么是歧义歧义有哪几种歧义切分是指什么-fe">2.什么是歧义？歧义有哪几种？歧义切分是指什么？ [FE]</h3><ul><li>分法1：<ul><li>交集型歧义：ABC、AB/C、A/BC</li><li>组合型歧义：AB、A/B</li></ul></li><li>分法2：<ul><li>真歧义</li><li>假歧义</li></ul></li></ul><h3 id="什么是真歧义什么是伪歧义-fe">4. 什么是真歧义？什么是伪歧义？[FE]</h3><ul><li>真歧义：句子有多种合理的含义。人也无法识别出来。</li><li>伪歧义：句子只有一种合理含义。人能识别出来，但计算机分词无法辨别出合理的含义。</li></ul><hr /><h2 id="第十章-中文信息检索">第十章 中文信息检索</h2><ul><li><p>对象：文字信息</p></li><li><p>起源于图书馆的参考咨询和文摘索引工作</p></li><li><p>研究从一定规模的文档库(DocumentCollection)中找出满足用户提出的信息求(User InformationNeed)的技术</p></li></ul><p>区分：</p><ul><li>结构化文档<ul><li>内容按照结构组织</li><li>如：数据表文件</li></ul></li><li>半结构化文档<ul><li>部分有结构、部分没结构</li><li>如：网页、邮件</li></ul></li><li>非结构化文档<ul><li>无格式</li><li>如：自然文本</li></ul></li></ul><p>主要用到的技术</p><ul><li>统计模型</li><li>语义模型</li></ul><p>Web信息检索和普通的信息检索有什么区别？</p><ul><li>Web信息检索更麻烦</li><li>但Web信息重爬下的标签有用</li></ul><p>Web搜索≠文本信息检索</p><ul><li>Web搜索=文本信息检索+针对Web搜索的新技术</li><li>面向海量数据，查准比查全更重要</li></ul><hr /><h2 id="第十一章-中文信息抽取">第十一章 中文信息抽取</h2><hr /><h2 id="第十二章-中文文本分类技术">第十二章 中文文本分类技术</h2><h2 id="重点-1">重点</h2><h3 id="字符集-1">1. 字符集</h3><h3 id="汉字的字形-1">2. 汉字的字形</h3><ul><li>点阵【最重点】</li><li>轮廓矢量</li><li>曲线轮廓</li></ul><h3 id="计算显示器可以显示的汉字行数列数总数-1">3.计算显示器可以显示的汉字行数、列数、总数</h3><h3 id="显卡的工作模式-1">4. 显卡的工作模式</h3><ul><li>图形工作模式<ul><li>Windows的命令行控制台是在图形工作模式下，模拟的字符工作模式</li></ul></li><li>字符工作模式</li></ul><h3 id="计算显存大小需求分辨率n位色-1">5.计算显存大小需求（分辨率、n位色）</h3><h3 id="终端和显示器的区别-1">6. 终端和显示器的区别</h3><ul><li>汉字终端是一个能处理汉字的固化计算机系统。一般由主控板、显示器、键盘三大部分组成。</li><li>主机系统不能输入和显示中文，无法实现汉字机内码到汉字字形码的转换，就把西文字符或汉字等字符内码交给终端，由终端接收、判别内码，找到字形信息，经过处理在屏幕上显示。</li></ul><h3 id="分词-1">7. 分词</h3><ul><li>真/伪歧义</li><li>交叉型/组合型歧义</li><li>正向/逆向最大匹配分词算法</li></ul><h3 id="码长码元等概念理解-1">8. 码长、码元等概念理解</h3><h3 id="常用数据结构如-码本拼音输入码的压缩-1">9. 常用数据结构（如码本）、拼音输入码的压缩</h3><h3 id="字形码压缩-1">10. 字形码压缩</h3><ul><li>黑白段、线性增量压缩等</li></ul><h3 id="base64编码解码-1">11. Base64编码解码</h3><ul><li>算法、程序</li></ul><h3 id="tts实验-1">12. TTS实验</h3><hr /><h2 id="第一章-概论-1">第一章 概论</h2><h3 id="什么是中文信息处理它包含哪些主要内容fe-1">2.什么是中文信息处理？它包含哪些主要内容？[FE]</h3><ul><li>​定义：用计算机对汉语的音、形、义等语言文字信息进行的加工操作，包括对字、词、短语、句、篇章的输入、输出、识别、转换、压缩、存储、检索、分析、理解和生成等各方面的处理技术。</li><li>简单地说，中文信息处理就是利用计算理论和计算技术处理中国语言文字信息的一门学科，是计算机科学和语言文字学的交叉学科。</li><li>内容<ul><li>字符层<ul><li>字符编码集</li><li>汉字的输入码编码</li><li>中文平台和中文操作系统</li><li>汉字输入技术（输入法、手写、语音输入等）</li><li>汉字字形和字形库管理技术</li><li>汉字输出技术</li></ul></li><li>内容层<ul><li>汉语分词</li><li>中文信息检索</li><li>中文信息抽取</li><li>中文文本分类</li></ul></li></ul></li></ul><h3 id="什么是字频词频什么是高频字和高频词-fe-1">4.什么是字频、词频？什么是高频字和高频词？ [FE]</h3><ul><li>字频：字频是一个汉字的相对使用频率，也就是一个汉字使用次数与所统计材料的总字数的比例，一般用百分比表示，用于体现一个汉字的覆盖面；</li><li>词频：词频就是一个词的相对使用频率。统计词频需要对汉字串进行切词处理，较为复杂，与统计字频不同。</li><li>高频字：统计材料中，使用频率较高的字；</li><li>高频词，统计材料中，使用频率较高的词。</li></ul><h3 id="中文信息处理的主要研究对象有哪些-1">6.中文信息处理的主要研究对象有哪些？</h3><ul><li>汉字键盘输入技术</li><li>汉字输出技术</li><li>软件汉化技术</li><li>汉字字形识别技术</li><li>汉语语音识别技术</li><li>激光照排技术</li><li>中文平台</li><li>文本分类</li><li>信息检索</li><li>其它：邮件过滤、舆情处理……</li></ul><h3 id="软件的国际化和本地化对中文信息处理有何意义-1">8.软件的国际化和本地化对中文信息处理有何意义？</h3><ul><li>国际化：把原来只为英文设计的计算机系统或应用软件改写成同时支持多种语言和文化习俗和编码集。在系统层提供一种多国语言的支持机制。</li><li>本地化：把计算机系统软件或应用软件转为使用并兼容某种特定语言的过程。</li></ul><hr /><h2 id="第二章-汉字信息在计算机内部的表示-1">第二章汉字信息在计算机内部的表示</h2><h3 id="什么是代码页其作用是什么-1">3. 什么是代码页？其作用是什么？</h3><ul><li>代码页：代码页是一个内部表，操作系统用它将符号映射为字符编号。代码页通过编号引用。</li><li>作用：通过代码页，操作系统将符号（字母、数字和标点符号）映射为字符编号，不同的代码页支持不同国家（地区）所使用的字符集。使得无需开发不同的操作系统，在成本、系统维护与升级等方面的开销大大减小。</li></ul><h3id="字符在iso-10646中如何编码的iso10646中的基本位平面的作用是什么-1">5.字符在ISO 10646中如何编码的？ISO10646中的基本位平面的作用是什么？</h3><ul><li>ISO 10646编码结构：4个字节，依次为组、面、行、位。<ul><li>128个组，每组256个字面，每个字面256行，每个行256个字位。</li></ul></li><li>基本位平面作用：ISO10646的第0组第0面，称为”基本多文种字面“BMP，编码与Unicode相同。包含拼音文字、中日韩汉字、符号区等……</li></ul><h3 id="从字符编码标准的角度谈谈计算机中文信息处理的特点-fe-1">11.从字符编码标准的角度谈谈计算机中文信息处理的特点。 [FE]</h3><ul><li>字汇大</li><li>​</li></ul><h3 id="什么是unicode字符编码标准其特点是什么-fe-1">12.什么是Unicode字符编码标准？其特点是什么？ [FE]</h3><ul><li>16位，两个字节容纳全世界各种语言的字符和符号</li><li>位于ISO 10646的第0组第0字面，即与BMP基本多文种字面兼容。</li><li>机内码</li><li>编码简单、实现容易、深受工业界欢迎</li></ul><hr /><h3 id="第三章-汉字字符编码集的应用-1">第三章 汉字字符编码集的应用</h3><h3id="提出一种实现汉字简-繁转换的方法并讨论如何采取措施提高其转换的准确率-fe-1">2.提出一种实现汉字简-繁转换的方法，并讨论如何采取措施提高其转换的准确率？[FE]</h3><ul><li>通过统计分析，分离字汇为：简繁一一对应字汇，简繁一对多字汇；如字在一一对应字汇中，则直接查表替换，简单高效；如字在一对多字汇中，通过词汇简繁映射表，根据搭配进行简繁转换。</li><li>提高准确率：收录足够多的简繁转换词汇数据，这样才能避免遇到陌生的简体/繁体词汇。</li></ul><h3 id="internet上的字符编码是如何产生的-1">3.Internet上的字符编码是如何产生的？</h3><ul><li>因为邮件协议等网络协议无法传输8位字符编码，高位置1的字节通常会被认作为控制字符等信息。因此，需要相应的字符编码来解决此问题，实现8位字符也可以通过邮件协议等网络协议进行正常的传输。</li></ul><h3 id="uuencodeqphz等编码主要解决什么问题-fe-1">4.UUENCODE、QP、HZ等编码主要解决什么问题？ [FE]</h3><ul><li>因为邮件协议等网络协议无法传输8位字符编码，高位置1的字节通常会被认作为控制字符等信息。因此，需要相应的字符编码来解决此问题，实现8位字符也可以通过邮件协议等网络协议进行正常的传输。</li></ul><hr /><h2 id="第四章-汉字编码技术-1">第四章 汉字编码技术</h2><h3 id="小键盘编码和大键盘编码各有哪些优缺点-1">5.“小键盘编码”和“大键盘编码”各有哪些优缺点？</h3><ul><li>大键盘编码：如 PC标准键盘<ul><li>优点：<ul><li>拼音码元与按键存在一一对应的关系，映射简单、方便，无需进行转换；</li><li>大键盘可以双手输入，可以实现快速输入；</li></ul></li><li>缺点：<ul><li>根据海曼公式，大键盘码元数较多，汉字编码时间就较长，需要记忆的信息也相应增多（全拼方法除外），不利于输入和学习。</li></ul></li></ul></li><li>小键盘编码：如 手机T9键盘<ul><li>优点：码元数少，汉字编码时间较小；<ul><li>需要记忆的信息少，有利于输入和学习。</li></ul></li><li>缺点：只能单手输入，因此小键盘相对大键盘输入速度较慢。</li></ul></li></ul><h3 id="如何理解汉字编码技术中的以字为基础以词为主导-fe-1">7.如何理解汉字编码技术中的”以字为基础，以词为主导“？ [FE]</h3><ul><li>Hints: 以词加快输入</li><li>输入法要能打出两万多个汉字，但实际输入主要以词为主</li><li>​</li></ul><h3id="给出一种汉字键盘编码的码本对照表设计方案使之能实现动态调频和高频先见并给出该检索引擎的检索算法和相关数据结构评价码本对照表的结构方案对检索的效率有何影响-1">12.给出一种汉字键盘编码的码本对照表设计方案，使之能实现“动态调频”和“高频先见”，并给出该检索引擎的检索算法和相关数据结构，评价码本对照表的结构方案对检索的效率有何影响？</h3><hr /><h2 id="第五章-中文平台与中文操作系统-1">第五章中文平台与中文操作系统</h2><h3 id="中文操作系统有哪几种设计方法各有什么特点-1">1.中文操作系统有哪几种设计方法？各有什么特点？</h3><ol type="1"><li>专用的中文输入输出设备与西文操作系统结合<ol type="1"><li>专用设备成本很高；</li><li>不实用，需要很大的键盘，检索汉字按键也很麻烦；</li></ol></li><li>设计一个全新的中文操作系统<ol type="1"><li>优：系统功能关系协调，可以完全解决中西文不兼容的问题；</li><li>缺：周期长，成本高，其他组织机构难以实现。</li></ol></li><li>修改原有的西文操作系统<ol type="1"><li>优：中西文兼容；实现周期短；</li><li>缺：可能会影响原来操作系统的部分功能；中文信息处理的特点和效率不能最好表现。</li></ol></li></ol><h3id="汉字信息处理系统中从信息的输入到信息的输出过程中各个模块的作用是什么-fe-1">2.汉字信息处理系统中，从信息的输入到信息的输出过程中，各个模块的作用是什么？[FE]</h3><ul><li><strong>Important</strong>: <em>书P78 图5.1汉字处理模块与代码体系关系图</em></li></ul><ol type="1"><li>汉字输入管理模块<ol type="1"><li>提供汉字输入的功能<ol type="1"><li>语音识别</li><li>手写输入</li><li>键盘输入</li></ol></li></ol></li><li>汉字打印管理模块<ol type="1"><li>将汉字处理模块传过来的汉字内码抛给字库管理模块，获取该汉字的字模信息，得到汉字的字形码，转而控制打印机打印</li></ol></li><li>汉字显示管理模块<ol type="1"><li>将汉字处理模块传过来的汉字内码抛给字库管理模块。获取该汉字的字母信息，得到汉字的字形码，然后控制显示卡在显示器上显示；</li></ol></li><li>汉字字库管理模块<ol type="1"><li>管理多种字体的汉字库，根据显示/打印模块传来的汉字内码进行映射检索找到字形信息，并将其返回。</li></ol></li><li>通信管理模块<ol type="1"><li>将汉字处理模块传过来的内码编程交换码输出；</li></ol></li><li>汉字处理模块<ol type="1"><li>处理文字编辑、排版等；主要由各个应用程序实现。</li></ol></li></ol><h3 id="嵌入式操作系统和台式机上的操作系统有何不同-fe-1">4.嵌入式操作系统和台式机上的操作系统有何不同？ [FE]</h3><ul><li>嵌入式操作系统<ul><li>低功耗</li><li>小内存</li><li>稳定性要求高</li></ul></li></ul><hr /><h2 id="第六章-汉字输入技术-1">第六章 汉字输入技术</h2><p><strong>重点：</strong></p><ul><li>汉字码本的数据结构、优缺点<ul><li>定长结构</li><li>变长结构</li><li>计算结构</li><li>索引结构</li></ul></li></ul><p>注：</p><ul><li>内码输入法（区位码输入）无需码本</li></ul><h3 id="试述汉语语音输入键盘输入和扫描输入的各自特点和应用领域-fe-1">1.试述汉语语音输入、键盘输入和扫描输入的各自特点和应用领域。 [FE]</h3><ul><li>键盘输入：<ul><li>最早、最广泛、最主要的输入方法；</li><li>输入快速、无需额外设备、编码方案丰富；</li></ul></li><li>语音输入：<ul><li>人机对话，前景广阔；</li><li>实现在计算机网络上不同语言人之间的直接交谈、开会和其它合作工作；</li></ul></li><li>扫描输入：<ul><li>批量识别、速度快</li><li>整理、保全计算机出现前的文书资料，绝版古籍资料，图像处理，桌面排版，印刷出版，字符识别，图文数据库，广告美术设计，多媒体图文通信，办公自动化。</li></ul></li></ul><h3 id="阐述windows中的钩子机制-1">4. 阐述Windows中的钩子机制。</h3><ul><li>通过钩子机制，实现输入系统先于应用程序得到键盘按键。</li><li>例如：NewGetChar作为输入系统定义的GetChar函数的钩子，那么应用程序读取键盘缓冲区字符时，实际会调用NewGetChar，在NewGetChar中，系统调用GetChar读取字符，传递给输入系统处理；输入系统处理完后，把结果给NewGetChar返回给应用程序。</li></ul><h3 id="输入码对照表在汉字输入系统中的作用是什么-fe-1">5.输入码对照表在汉字输入系统中的作用是什么？ 【FE】</h3><ul><li>输入码对照表是汉字键盘输入中的一个重要的数据结构，是汉字输入码到机内码转换的核心，反映了汉字输入码到机内码之间的映射关系。</li><li>汉字输入过程最主要的一个环节是根据用户输入的输入码，在对照表中检索得到输入码所对应的汉字。</li></ul><h3id="在一个具体的汉字输入法中是如何实现动态调频和联想功能的在输入程序和对照表的设计中如何合理解决这一问题-fe-opt-1">11.在一个具体的汉字输入法中是如何实现“动态调频”和“联想”功能的？在输入程序和对照表的设计中如何合理解决这一问题？[FE, Opt]</h3><p>记录频度</p><ul><li>频度需要防止溢出，例如，达到200时，折半到100，并把其它频度也整体调整，保持大小关系</li></ul><hr /><h2 id="第七章-汉字字形和字形库管理技术-1">第七章汉字字形和字形库管理技术</h2><p>会写汉字点阵码</p><ul><li>注意汉字点阵码有横向点阵和纵向点阵</li></ul><h3 id="什么是点阵字库矢量字库和曲线字库它们各有什么特点-fe-1">3.什么是点阵字库、矢量字库和曲线字库？它们各有什么特点？ [FE]</h3><ul><li>点阵<ul><li>点</li></ul></li><li>轮廓矢量<ul><li>直线</li><li>优点：不怕放大</li><li>缺点：方法有折线、锯齿</li></ul></li><li>曲线轮廓<ul><li>二次、三次曲线</li><li>不怕放大、且平滑、避免了折线锯齿</li></ul></li></ul><h3 id="黑白段表示法和线性增量表示法各有哪些特点-fe-1">4.“黑白段表示法”和“线性增量表示法”各有哪些特点？ [FE]</h3><ul><li>汉字字形压缩算法<ul><li>解决汉字字形点阵字库存储量过大的问题</li></ul></li><li>黑白段表示法<ul><li>仅当全空白行或者壁画均为竖直线才能压缩。汉字笔画中非竖直笔画多，字稿难以挂正，常有扫描误差、毛刺，使黑白段压缩效率降低。</li></ul></li><li>线性增量表示法<ul><li>在黑白段信息格式的基础上，增加增量信息。</li><li>可以处理汉字笔画中大量出现的斜线，进一步压缩字形信息。</li><li>对高分辨率的字库压缩倍率大，对低分辨率字库的压缩倍率小。</li><li>缺点：有可能会改变原来的字形，压缩时不可面前。</li></ul></li></ul><hr /><h3 id="第八章-汉字输出技术-1">第八章 汉字输出技术</h3><p>搞清楚<strong>汉字终端</strong>和<strong>显示器</strong>的区别</p><h3id="什么叫显示器的显示模式字符显示模式和图形显示模式有何不同-fe-1">1.什么叫显示器的显示模式？字符显示模式和图形显示模式有何不同？ [FE]</h3><ul><li>字符显示模式<ul><li>西文ASCII码通过系统调用写入显存，显卡读取ASCII码，通过显卡ROM中的ASCII码字形库找到字形点阵信息并显示。</li></ul></li><li>图形显示模式<ul><li>汉字只能显示在图形显示模式下，汉字显示系统将汉字机内码通过软件转换的形式转换为汉字字型码，继而将点阵信息写入显示存储器，提供给屏幕显示。</li></ul></li></ul><h3 id="汉字显示终端和pc机上的显示器有哪些异同之处-fe-1">7.汉字显示终端和PC机上的显示器有哪些异同之处？ [FE]</h3><ul><li>汉字终端是一个能处理汉字的固化计算机系统。一般由主控板、显示器、键盘三大部分组成。主机系统不能输入和显示中文，则通过汉字终端输入、显示输出中文。汉字终端可以接受、辨别内码，并查字形库进行显示；也可以处理用户操作的输入。</li><li>显示器只接收、显示字符、图形信息，不具备汉字内码输入输出的处理能力。</li></ul><hr /><h2 id="第九章-汉语分词-1">第九章 汉语分词</h2><p>考试要求不高</p><p>知道汉语分词的主要障碍</p><p>不要求掌握太复杂的汉字分词算法，掌握最基本的：正向最大匹配、逆向最大匹配。比较哪个效率高。了解词典数据结构和分词性能。（如果检索词很长，对词典排序有讲究）</p><h3 id="什么是汉语分词其特点是什么-fe-1">1.什么是汉语分词？其特点是什么？ [FE]</h3><ul><li>分词规范问题<ul><li>词的概念不清，词该如何界定</li></ul></li><li>歧义切分问题<ul><li>存在多种理解方式</li></ul></li><li>未登录词识别<ul><li>专业术语、新词、缩略词等</li></ul></li><li>分词理解的先与后<ul><li>先分词才能后理解，但分词又需要以理解为基础</li></ul></li></ul><h3 id="什么是歧义歧义有哪几种歧义切分是指什么-fe-1">2.什么是歧义？歧义有哪几种？歧义切分是指什么？ [FE]</h3><ul><li>分法1：<ul><li>交集型歧义</li><li>组合型歧义</li></ul></li><li>分法2：<ul><li>真歧义</li><li>假歧义</li></ul></li></ul><h3 id="什么是真歧义什么是伪歧义-fe-1">4. 什么是真歧义？什么是伪歧义？[FE]</h3><ul><li>真歧义：句子有多种合理的含义。人也无法识别出来。</li><li>伪歧义：句子只有一种合理含义。人能识别出来，但计算机分词无法辨别出合理的含义。</li></ul><hr /><h2 id="第十章-中文信息检索-1">第十章 中文信息检索</h2><ul><li><p>对象：文字信息</p></li><li><p>起源于图书馆的参考咨询和文摘索引工作</p></li><li><p>研究从一定规模的文档库(DocumentCollection)中找出满足用户提出的信息求(User InformationNeed)的技术</p></li></ul><p>区分：</p><ul><li>结构化文档<ul><li>内容按照结构组织</li><li>如：数据表文件</li></ul></li><li>半结构化文档<ul><li>部分有结构、部分没结构</li><li>如：网页、邮件</li></ul></li><li>非结构化文档<ul><li>无格式</li><li>如：自然文本</li></ul></li></ul><p>主要用到的技术</p><ul><li>统计模型</li><li>语义模型</li></ul><p>Web信息检索和普通的信息检索有什么区别？</p><ul><li>Web信息检索更麻烦</li><li>但Web信息重爬下的标签有用</li></ul><p>Web搜索≠文本信息检索</p><ul><li>Web搜索=文本信息检索+针对Web搜索的新技术</li><li>面向海量数据，查准比查全更重要</li></ul><hr /><h2 id="第十一章-中文信息抽取-1">第十一章 中文信息抽取</h2><hr /><h2 id="第十二章-中文文本分类技术-1">第十二章 中文文本分类技术</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Chinese Information Processing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列表推导式 - Python定义定长容器</title>
      <link href="/posts/%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F-Python%E5%AE%9A%E4%B9%89%E5%AE%9A%E9%95%BF%E5%AE%B9%E5%99%A8/"/>
      <url>/posts/%E5%88%97%E8%A1%A8%E6%8E%A8%E5%AF%BC%E5%BC%8F-Python%E5%AE%9A%E4%B9%89%E5%AE%9A%E9%95%BF%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>通过列表推导式可以高效地在Python中实现定长列表的定义。</p><span id="more"></span><h1 id="列表推导式---python定义定长容器">列表推导式 -Python定义定长容器</h1><p>Python的容器本身都注重动态地插入、修改、删除等，不像C语言之类可以直接定义一个定长数组，如：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">100</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以通过Python的列表推导式，实现类似的效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line">emptyList= [<span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>)]    <span class="comment"># 列表推导式</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(emptyList)</span><br></pre></td></tr></table></figure><ul><li>此时，定义了一个长度为100，初始值为0的list</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET - 文档及教程</title>
      <link href="/posts/ASP-NET-%E6%96%87%E6%A1%A3%E5%8F%8A%E6%95%99%E7%A8%8B/"/>
      <url>/posts/ASP-NET-%E6%96%87%E6%A1%A3%E5%8F%8A%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>收藏若干ASP.NET的文档及教程链接</p><span id="more"></span><h1 id="asp.net---文档及教程">ASP.NET - 文档及教程</h1><ul><li><blockquote><p><a href="https://docs.microsoft.com/zh-cn/aspnet/overview" target="_blank">ASP.NEToverview | Microsoft Docs</a></p></blockquote></li><li><blockquote><p><b><a href="https://docs.microsoft.com/zh-cn/aspnet/mvc/overview/getting-started/introduction/" target="_blank">GettingStarted with ASP.NET MVC 5 | Microsoft Docs</a></b></p></blockquote></li><li><p>Main Ideas:</p></li><li><p>default MVC mapping is<code>/[Controller]/[ActionName]/[Parameters]</code>, e.g.<code>http://localhost:xxxx/HelloWorld/Welcome?name=Scott&amp;numtimes=4</code></p></li><li><p>The <code>Index</code> method in your controller didn't do muchwork; it simply ran the statement <code>return View()</code>, whichspecified that the method should use a view template file to render aresponse to the browser.</p></li><li><p>Find the <code>@RenderBody()</code> line. <code>RenderBody</code>is a placeholder where all the view-specific pages you create showup</p></li><li><p>A view template should never perform business logic or interactwith a database directly.</p></li><li><p><code>ViewBag</code> is a dynamic object, which means you can putwhatever you want in to it; the <code>ViewBag</code> object has nodefined properties until you put something inside it.</p></li><li><p>The <code>MovieDBContext</code> class represents the EntityFramework movie database context, which handles fetching, storing, andupdating <code>Movie</code> class instances in a database. The<code>MovieDBContext</code> derives from the <code>DbContext</code> baseclass provided by the Entity Framework.</p></li><li><p>The main class that coordinates Entity Framework functionalityfor a given data model is the <code>database context</code>class.</p></li><li><p>DAL (for Data Access Layer).</p></li><li><blockquote><p><a href="http://www.runoob.com/aspnet/aspnet-tutorial.html" target="_blank">ASP.NET教程 | 菜鸟教程</a></p></blockquote></li><li><blockquote><p><a href="https://docs.microsoft.com/zh-cn/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions" target="_blank">Lambda表达式（C# 编程指南） | Microsoft Docs</a></p></blockquote></li><li><blockquote><p><a href="https://www.cnblogs.com/powertoolsteam/p/MVC_one.html" target="_blank">七天学会ASP.NETMVC (一)——深入理解ASP.NET MVC</a></p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[转载] - nginx php上传大文件的设置(php-fpm)</title>
      <link href="/posts/%E8%BD%AC%E8%BD%BD-nginx-php%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%96%87%E4%BB%B6%E7%9A%84%E8%AE%BE%E7%BD%AE-php-fpm/"/>
      <url>/posts/%E8%BD%AC%E8%BD%BD-nginx-php%E4%B8%8A%E4%BC%A0%E5%A4%A7%E6%96%87%E4%BB%B6%E7%9A%84%E8%AE%BE%E7%BD%AE-php-fpm/</url>
      
        <content type="html"><![CDATA[<p>LNMP架构下POST上传文件时，会遇到默认可传输文件大小过小的问题，转载一篇解决方法。</p><span id="more"></span><blockquote><p>原文来源： <ahref="http://blog.chinaunix.net/uid-20639775-id-3219291.html">nginxphp上传大文件的设置(php-fpm) - ChinaUnix</a></p></blockquote><h1 id="nginx-php上传大文件的设置php-fpm">nginxphp上传大文件的设置(php-fpm)</h1><p>这周由于一个参数的理解不对导致一个大文件上传的问题排查了很久才弄好，因此写下总结，做个备忘，也更多的人能留意，不用多走弯路！对于lnmp架构的大文件上传的问题，有几个地方需要修改，另外还有几个参数如果更改过需要注意，下面是详细的需要注意的地方：</p><h2 id="nginx的修改">nginx的修改</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">send_timeout    60;</span><br><span class="line">fastcgi_connect_timeout 300;</span><br><span class="line">fastcgi_send_timeout 300;</span><br><span class="line">fastcgi_read_timeout 300;</span><br><span class="line">client_max_body_size 30m;</span><br></pre></td></tr></table></figure><h2 id="php的修改">php的修改</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upload_max_filesize</span><br><span class="line">post_max_size</span><br><span class="line">max_input_time</span><br><span class="line">max_execution_time</span><br></pre></td></tr></table></figure><h2 id="php-fpm注意参数">php-fpm注意参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request_terminate_timeout</span><br><span class="line">request_slowlog_timeout</span><br></pre></td></tr></table></figure><ul><li>这两个参数如果设置过小的话会导致文件传输了一部分后连接关闭。01postpublish0111079d8f2626de13f0759f42c6693c4e0f9</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mastering the game of Go with deep neural networks and tree search</title>
      <link href="/posts/Mastering-the-game-of-Go-with-deep-neural-networks-and-tree-search/"/>
      <url>/posts/Mastering-the-game-of-Go-with-deep-neural-networks-and-tree-search/</url>
      
        <content type="html"><![CDATA[<p>AlphaGo Paper published on Nature.</p><span id="more"></span><h1id="mastering-the-game-of-go-with-deep-neural-networks-and-tree-search">Masteringthe game of Go with deep neural networks and tree search</h1><h2 id="nature">1 Nature</h2><blockquote><p><ahref="https://www.nature.com/articles/nature16961"><strong><em>Masteringthe game of Go with deep neural networks and tree search</em></strong> -Nature</a></p></blockquote><blockquote><p><a href="https://www.nature.com/articles/nature16961.pdf"><strong>PDFDownload</strong></a></p></blockquote><h2 id="links">2 Links</h2><blockquote><p><ahref="https://mp.weixin.qq.com/s?__biz=MzA5MDE2MjQ0OQ==&amp;mid=2652786766&amp;idx=1&amp;sn=bf6f3189e4a16b9f71f985392c9dc70b&amp;chksm=8be52430bc92ad2644838a9728d808d000286fb9ca7ced056392f1210300286f63bd991bde84#rd">要不我也说说AlphaGo？ - Nao</a></p></blockquote><blockquote><p><ahref="https://www.zhihu.com/question/39916945?sort=created">蒙特卡洛树是什么算法？- 知乎</a></p></blockquote><blockquote><p><ahref="https://www.leiphone.com/news/201702/poAxdPGhfQFrxsXS.html?vt=4">28天自制你的 AlphaGo（五）：蒙特卡洛树搜索（MCTS）基础 - 雷锋网</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Papers </tag>
            
            <tag> AlphaGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Note</title>
      <link href="/posts/C-Note/"/>
      <url>/posts/C-Note/</url>
      
        <content type="html"><![CDATA[<p>Note for C# programming language</p><span id="more"></span><h1 id="c-note">C# Note</h1><h2 id="hello-world">1 Hello World</h2><h3 id="demo">1.1 Demo</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> document comment</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* block comment(multiline)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);<span class="comment">// line comment(single line)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="notes">1.2 Notes</h3><ul><li>main function is written as<code>static void Main(string[] args)</code><ul><li><code>Main</code> starts with Capitalized character</li></ul></li><li>To print text in console screen, use:<ul><li>Auto end with new line: <code>Console.WriteLine(...)</code></li><li>no auto ending new line: <code>Console.Write(...)</code></li></ul></li><li>Comment has 3 types:<ul><li>document comment: <code>/// ...</code><ul><li><em>Attention:</em> this should be only written in front ofclass/method/attribute.</li></ul></li><li>block comment: <code>/* ... */</code></li><li>line comment: <code>// ...</code></li></ul></li><li>type cast:<ul><li>lower precision variable can be converted to higher precisionautomatically, however, higher precision variable has to be cast tolower precision manually by code.</li><li><code>c#     double d = 2.5;     int x = (int)d + 1; // cause ERROR if no (int) cast</code></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中文信息处理思考题</title>
      <link href="/posts/%E4%B8%AD%E6%96%87%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%E6%80%9D%E8%80%83%E9%A2%98/"/>
      <url>/posts/%E4%B8%AD%E6%96%87%E4%BF%A1%E6%81%AF%E5%A4%84%E7%90%86%E6%80%9D%E8%80%83%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="中文信息处理思考题">中文信息处理思考题</h1><h2 id="第一章">第一章</h2><h3 id="什么是字频词频什么是高频字和高频词">4.什么是字频、词频？什么是高频字和高频词？</h3><ul><li>字频：字频是一个汉字的相对使用频率，也就是一个汉字使用次数与所统计材料的总字数的比例，一般用百分比表示，用于体现一个汉字的覆盖面；</li><li>词频：词频就是一个词的相对使用频率。统计词频需要对汉字串进行切词处理，较为复杂，与统计字频不同。</li><li>高频字：统计材料中，使用频率较高的字；</li><li>高频词，统计材料中，使用频率较高的词。</li></ul><h3 id="中文信息处理的主要研究对象有哪些">6.中文信息处理的主要研究对象有哪些？</h3><ul><li>汉字键盘输入技术</li><li>汉字输出技术</li><li>软件汉化技术</li><li>汉字字形识别技术</li><li>汉语语音识别技术</li><li>激光照排技术</li><li>中文平台</li><li>文本分类</li><li>信息检索</li></ul><h3 id="软件的国际化和本地化对中文信息处理有何意义">8.软件的国际化和本地化对中文信息处理有何意义？</h3><ul><li>国际化：把原来只为英文设计的计算机系统或应用软件改写成同时支持多种语言和文化习俗和编码集。在系统层提供一种多国语言的支持机制。</li><li>本地化：把计算机系统软件或应用软件转为使用并兼容某种特定语言的过程。</li></ul><hr /><h2 id="第二章">第二章</h2><h3 id="什么是代码页其作用是什么">3. 什么是代码页？其作用是什么？</h3><ul><li>代码页：代码页是一个内部表，操作系统用它将符号映射为字符编号。代码页通过编号引用。</li><li>作用：通过代码页，操作系统将符号（字母、数字和标点符号）映射为字符编号，不同的代码页支持不同国家（地区）所使用的字符集。使得无需开发不同的操作系统，在成本、系统维护与升级等方面的开销大大减小。</li></ul><h3id="字符在iso-10646中如何编码的iso10646中的基本位平面的作用是什么">5.字符在ISO 10646中如何编码的？ISO10646中的基本位平面的作用是什么？</h3><ul><li>ISO 10646编码结构：4个字节，依次为组、面、行、位。<ul><li>128个组，每组256个字面，每个字面256行，每个行256个字位。</li></ul></li><li>基本位平面作用：ISO10646的第0组第0面，称为”基本多文种字面“BMP，编码与Unicode相同。包含拼音文字、中日韩汉字、符号区等……</li></ul><h3 id="从字符编码标准的角度谈谈计算机中文信息处理的特点">11.从字符编码标准的角度谈谈计算机中文信息处理的特点。</h3><ul><li>字汇大</li><li>​</li></ul><hr /><h3 id="第三章">第三章</h3><h3id="提出一种实现汉字简-繁转换的方法并讨论如何采取措施提高其转换的准确率">2.提出一种实现汉字简-繁转换的方法，并讨论如何采取措施提高其转换的准确率？</h3><ul><li>通过统计分析，分离字汇为：简繁一一对应字汇，简繁一对多字汇；如字在一一对应字汇中，则直接查表替换，简单高效；如字在一对多字汇中，通过词汇简繁映射表，根据搭配进行简繁转换。</li><li>提高准确率：收录足够多的简繁转换词汇数据，这样才能避免遇到陌生的简体/繁体词汇。</li></ul><h3 id="internet上的字符编码是如何产生的">3.Internet上的字符编码是如何产生的？</h3><ul><li>因为邮件协议等网络协议无法传输8位字符编码，高位置1的字节通常会被认作为控制字符等信息。因此，需要相应的字符编码来解决此问题，实现8位字符也可以通过邮件协议等网络协议进行正常的传输。</li></ul><hr /><h2 id="第四章">第四章</h2><h3 id="小键盘编码和大键盘编码各有哪些优缺点">5.“小键盘编码”和“大键盘编码”各有哪些优缺点？</h3><ul><li>大键盘编码：如 PC标准键盘<ul><li>优点：<ul><li>拼音码元与案件存在一一对应的关系，映射简单、方便，无需进行转换；</li><li>大键盘可以双手输入，可以实现快速输入；</li></ul></li><li>缺点：<ul><li>根据海曼公式，大键盘码元数较多，汉字编码时间就较长，需要记忆的信息也相应增多（全拼方法除外），不利于输入和学习。</li></ul></li></ul></li><li>小键盘编码：如 手机T9键盘<ul><li>优点：码元数少，汉字编码时间较小；<ul><li>需要记忆的信息少，有利于输入和学习。</li></ul></li><li>缺点：只能单手输入，因此小键盘相对大键盘输入速度较慢。</li></ul></li></ul><h3id="给出一种汉字键盘编码的码本对照表设计方案使之能实现动态调频和高频先见并给出该检索引擎的检索算法和相关数据结构评价码本对照表的结构方案对检索的效率有何影响">12.给出一种汉字键盘编码的码本对照表设计方案，使之能实现“动态调频”和“高频先见”，并给出该检索引擎的检索算法和相关数据结构，评价码本对照表的结构方案对检索的效率有何影响？</h3><hr /><h2 id="第五章">第五章</h2><h3 id="中文操作系统有哪几种设计方法各有什么特点">1.中文操作系统有哪几种设计方法？各有什么特点？</h3><ol type="1"><li>专用的中文输入输出设备与细纹操作系统结合<ol type="1"><li>专用设备成本很高；</li><li>不实用，需要很大的键盘，检索汉字按键也很麻烦；</li></ol></li><li>设计一个全新的中文操作系统<ol type="1"><li>优：系统功能关系协调，可以完全解决中西文不兼容的问题；</li><li>缺：周期长，成本高，其他组织机构难以实现。</li></ol></li><li>修改原有的西文操作系统<ol type="1"><li>优：中西文兼容；实现周期短；</li><li>缺：可能会影响原来操作系统的部分功能；中文信息处理的特点和效率不能最好表现。</li></ol></li></ol><h3id="汉字信息处理系统中从信息的输入到信息的输出过程中各个模块的作用是什么">2.汉字信息处理系统中，从信息的输入到信息的输出过程中，各个模块的作用是什么？</h3><ol type="1"><li>汉字输入管理模块<ol type="1"><li>提供汉字输入的功能<ol type="1"><li>语音识别</li><li>手写输入</li><li>键盘输入</li></ol></li></ol></li><li>汉字打印管理模块<ol type="1"><li>将汉字处理模块传过来的汉字内码抛给字库管理模块，获取该汉字的字模信息，得到汉字的字形码，转而控制打印机打印</li></ol></li><li>汉字显示管理模块<ol type="1"><li>将汉字处理模块传过来的汉字内码抛给字库管理模块。获取该汉字的字母信息，得到汉字的字形码，然后控制显示卡在显示器上显示；</li></ol></li><li>汉字字库管理模块<ol type="1"><li>管理多种字体的汉字库，根据显示/打印模块传来的汉字内码进行映射检索找到字形信息，并将其返回。</li></ol></li><li>通信管理模块<ol type="1"><li>将汉字处理模块传过来的内码编程交换码输出；</li></ol></li><li>汉字处理模块<ol type="1"><li>处理文字编辑、排版等；主要由各个应用程序实现。</li></ol></li></ol><hr /><h2 id="第六章">第六章</h2><h3 id="试述汉语语音输入键盘输入和扫描输入的各自特点和应用领域">1.试述汉语语音输入、键盘输入和扫描输入的各自特点和应用领域。</h3><ul><li>键盘输入：<ul><li>最早、最广泛、最主要的输入方法；</li><li>输入快速、无需额外设备、编码方案丰富；</li></ul></li><li>语音输入：<ul><li>人机对话，前景广阔；</li><li>实现在计算机网络上不同语言人之间的直接交谈、开会和其它合作工作；</li></ul></li><li>扫描输入：<ul><li>批量识别、速度快</li><li>整理、保全计算机出现前的文书资料，绝版古籍资料，图像处理，桌面排版，印刷出版，字符识别，图文数据库，广告美术设计，多媒体图文通信，办公自动化。</li></ul></li></ul><h3 id="阐述windows中的钩子机制">4. 阐述Windows中的钩子机制。</h3><ul><li>通过钩子机制，实现输入系统先于应用程序得到键盘按键。</li><li>例如：NewGetChar作为输入系统定义的GetChar函数的钩子，那么应用程序读取键盘缓冲区字符时，实际会调用NewGetChar，在NewGetChar中，系统调用GetChar读取字符，传递给输入系统处理；输入系统处理完后，把结果给NewGetChar返回给应用程序。</li></ul><h3 id="输入码对照表在汉字输入系统中的作用是什么">5.输入码对照表在汉字输入系统中的作用是什么？</h3><ul><li>输入码对照表是汉字键盘输入中的一个重要的数据结构，是汉字输入码到机内码转换的核心，反映了汉字输入码到机内码之间的映射关系。</li><li>汉字输入过程最主要的一个环节是根据用户输入的输入码，在对照表中检索得到输入码所对应的汉字。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Chinese Information Processing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pygame - MP3格式音频播放</title>
      <link href="/posts/pygame-MP3%E6%A0%BC%E5%BC%8F%E9%9F%B3%E9%A2%91%E6%92%AD%E6%94%BE/"/>
      <url>/posts/pygame-MP3%E6%A0%BC%E5%BC%8F%E9%9F%B3%E9%A2%91%E6%92%AD%E6%94%BE/</url>
      
        <content type="html"><![CDATA[<p>pygame是一个功能丰富的多媒体包，此文主要整理通过pygame实现MP3格式音频的播放等相关功能。<span id="more"></span></p><h1 id="pygame---mp3格式音频播放">pygame - MP3格式音频播放</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># waitForPlay</span></span><br><span class="line"><span class="comment"># 自定义函数，实现pygame异步播放情况下，对音频播放服务的忙等延时，避免程序直接返回导致播放服务过早中止</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waitForPlay</span>():</span><br><span class="line">    <span class="keyword">while</span> pygame.mixer.music.get_busy():</span><br><span class="line">        pygame.time.delay(<span class="number">1000</span>)<span class="comment"># 每次延时1000ms</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- main func -*-</span></span><br><span class="line"></span><br><span class="line">file = <span class="string">r&quot;D:\CHNsound\a1.mp3&quot;</span><span class="comment"># 此处无法包含中文路径</span></span><br><span class="line">pygame.mixer.init()</span><br><span class="line">pygame.time.delay(<span class="number">1000</span>)<span class="comment"># init返回后，等待1000ms让mixer完成初始化，否则易出现前半段声音未被播放</span></span><br><span class="line"></span><br><span class="line">track = pygame.mixer.music.load(file)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;start play&quot;</span>)</span><br><span class="line">pygame.mixer.music.play()</span><br><span class="line">waitForPlay()<span class="comment"># play函数异步播放，会立即返回，通过自定义waitForPlay函数实现完整播放</span></span><br><span class="line">pygame.mixer.music.stop()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;play end&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>：<code>pygame.mixer</code>初始化<em>(init)</em>之后，建议延时至少1秒，以便<strong>mixer</strong>完成初始化。经测试，如果不延时等待，立即执行<code>load</code>和<code>play</code>易出现音频播放时，前段声音缺失，未被播放出来。</li></ul><blockquote><p><a href="http://www.cnblogs.com/chan7/p/5801953.html">ref1</a></p></blockquote><blockquote><p><a href="http://www.jb51.net/article/66437.htm">ref2</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> pygame </tag>
            
            <tag> MP3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SAPI - 微软Speech API</title>
      <link href="/posts/SAPI-%E5%BE%AE%E8%BD%AFSpeech-API/"/>
      <url>/posts/SAPI-%E5%BE%AE%E8%BD%AFSpeech-API/</url>
      
        <content type="html"><![CDATA[<p>微软自Windows7开始就内置了SAPI，通过C编程可以快速地实现多国语TTS功能。整理记录以备查阅。</p><span id="more"></span><h1 id="sapi---微软speech-api">SAPI - 微软Speech API</h1><h2 id="概要">1 概要</h2><blockquote><p>本文整理及引用自《中文信息处理实验教程》（主审：朱巧明 主编：朱晓旭苏州大学出版社）</p></blockquote><p>微软自Windows7开始就内置了SAPI，通过C编程可以快速地实现多国语TTS功能。</p><p>Speech API通过Windows Speech SDK提供，包含几类接口：Voice CommandsAPI, Voice Dictation API, Voice Text API, Voice Telephone API, AudioObject API。语音合成使用的是Voice Text API中的函数接口。</p><hr /><h2 id="sapi主要函数接口">2 SAPI主要函数接口</h2><h3 id="setrate">2.1 SetRate</h3><ul><li>设置朗读速度，取值-10~10</li></ul><h3 id="getrate">2.2 GetRate</h3><ul><li>获取朗读速度</li></ul><h3 id="setvoice">2.3 SetVoice</h3><ul><li>设置使用的语音库</li></ul><h3 id="getvoice">2.4 GetVoice</h3><ul><li>获取使用的语音库</li></ul><h3 id="pause">2.5 Pause</h3><ul><li>暂停朗读</li></ul><h3 id="resume">2.6 Resume</h3><ul><li>恢复朗读</li></ul><h3 id="setvolume">2.7 SetVolume</h3><ul><li>设置音量，范围0~100</li></ul><h3 id="getvolume">2.8 GetVolume</h3><ul><li>获取音量</li></ul><h3 id="setsyncspeaktimeout">2.9 SetSyncSpeakTimeout</h3><ul><li>设置同步朗读超时时间（毫秒）</li></ul><h3 id="getsyncspeaktimeout">2.10 GetSyncSpeakTimeout</h3><ul><li>获取同步朗读超时时间（毫秒）</li></ul><hr /><h2 id="编程">3 编程</h2><h3 id="speak函数原型">3.1 Speak函数原型</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HRESULT <span class="title function_">Speak</span><span class="params">(</span></span><br><span class="line"><span class="params">  LPCWSTR*pwcs,</span></span><br><span class="line"><span class="params">  DWORDdwFlags,</span></span><br><span class="line"><span class="params">  ULONG*pulStreamNumber</span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure><h3 id="案例">3.2 案例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sapi.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sphelper.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;sapi.lib&quot;</span>)<span class="comment">// 引用lib库</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">ISpVoice *pSpVoice;<span class="comment">// 定义TTS引擎接口指针</span></span><br><span class="line">::CoInitialize(<span class="literal">NULL</span>);<span class="comment">// COM初始化</span></span><br><span class="line"></span><br><span class="line">CoCreateInstance(CLSID_SpVoice, <span class="literal">NULL</span>, CLSCTX_INPROC_SERVER, IID_ISpVoice, (<span class="type">void</span> **)&amp;pSpVoice);<span class="comment">// 获取ISpVoice接口指针</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Speak\n&quot;</span>);</span><br><span class="line">pSpVoice-&gt;SetVolume(<span class="number">100</span>);<span class="comment">// 设置音量（0~100）</span></span><br><span class="line">pSpVoice-&gt;Speak(TEXT(<span class="string">L&quot;新垣结衣&quot;</span>),<span class="comment">// L作为字符串前缀，告知编译器使用等宽两个字节的Unicode字符集</span></span><br><span class="line">SPF_ASYNC,<span class="comment">// SND_SYNC 同步播放，在播放完后Speak才返回；另：SND_ASYNC/SPF_ASYNC 异步播放，开始播放时Speak立即返回。</span></span><br><span class="line"><span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Speak return.\n&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line">pSpVoice-&gt;Release();</span><br><span class="line">::CoUninitialize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TEXT(L"新垣结衣")提供的是一个WCHAR字符串。Speak函数原型中，LPCWSTR是<code>typedef const WCHAR *LPCWSTR</code>的类型定义结果。实质是WCHAR宽字符const字符串的指针。而<strong>L</strong>作为字符串前缀，作用就是告知编译器，使用等宽两字节的Unicode字符编码而非默认的ANSI编码。</li><li>如果采用异步播放，则Speak函数会立即返回，同时开始播放，因此需要在主函数结束前添置一个getchar()避免主函数过早return，导致进程在尚未完成播放的情况下提前结束。<ul><li><strong>SPF_ASYNC</strong>是enum枚举类型元素，可读值为1，表示异步；</li><li><strong>SPF_DEFAULT</strong>是enum枚举类型元素，可读值为0，表示同步；</li><li><strong>SND_ASYNC</strong>是宏定义<code>#define SND_ASYNC 0X0001</code>，表示异步；</li><li><strong>SND_SYNC</strong>是宏定义<code>#define SND_ASYNC 0X0000</code>，表示同步；</li></ul></li></ul><hr /><h2 id="xml定制化朗读">4 XML定制化朗读</h2><p>通过XML标签，实现对TTS发音的控制，如：强调重读、整数朗读和逐个数字字符朗读的区分等个性化朗读定制。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pSpVoice-&gt;Speak(TEXT(<span class="string">L&quot;110&quot;</span>),<span class="comment">// 作为110整数朗读</span></span><br><span class="line">SPF_DEFAULT,<span class="comment">// 默认同步播放</span></span><br><span class="line"><span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><ul><li>整数朗读</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pSpVoice-&gt;Speak(TEXT(<span class="string">L&quot;&lt;spell&gt;110&lt;/spell&gt;&quot;</span>),<span class="comment">// 作为1 1 0数字字符逐个朗读</span></span><br><span class="line">SPF_DEFAULT|SPF_IS_XML,<span class="comment">// 默认同步播放，并置SPF_IS_XML位（该位值为8）</span></span><br><span class="line"><span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><ul><li>逐个数字字符朗读</li></ul><hr /><h2 id="错误解决">5 错误解决</h2><h3 id="c4996-getversionexa-被声明为已否决">5.1 C4996 'GetVersionExA'被声明为已否决</h3><p>在较高版本的Visual Studio中会遇到此问题，且阻止编译进行。</p><p>解决方法是，取消项目的SDL检查。</p><p>Project Properties &gt; Configuration Properties &gt; C/C++ &gt;General &gt; SDL checks（将其关闭）</p><p>关闭后，此问题仅作为warning提示。</p><h3 id="无法将const-char-转换为lpcwstr">5.2 无法将const char*转换为LPCWSTR</h3><p>见本文对<strong>L</strong>字符串前缀的介绍。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> API </tag>
            
            <tag> Mircosoft </tag>
            
            <tag> TTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML笔记（第1次修订）</title>
      <link href="/posts/HTML%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC1%E6%AC%A1%E4%BF%AE%E8%AE%A2%EF%BC%89/"/>
      <url>/posts/HTML%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC1%E6%AC%A1%E4%BF%AE%E8%AE%A2%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>整理了一些HTML笔记，日常速成计划 : )</p><span id="more"></span><blockquote><p>第1次修订：2017.9-2017.10</p><ul><li>补充quote, address, caption, label等标签；</li><li>修订单标记语法，跟进xhtml1.0标准；</li><li>细节增补改进。</li></ul><p>创建：2017.3.28</p><ul><li>初稿</li></ul></blockquote><h1 id="html笔记">HTML笔记</h1><h2 id="概念">1 概念</h2><h3 id="定义">1.1 定义</h3><ul><li>超文本标记语言（英语：HyperText MarkupLanguage，简称：HTML）是一种用于创建网页的标准标记语言。</li></ul><h3 id="动态静态网页">1.2 动态/静态网页</h3><ul><li>静态网页，无计算处理能力的网页，后缀名：<code>.htm</code>，<code>.html</code>， <code>.shtml</code>， <code>.xml</code>；</li><li>动态网页，有计算处理能力的网页，可提供交互反馈等，如<code>.asp</code>， <code>.jsp</code>， <code>.php</code>，<code>.perl</code>， <code>.cgi</code>；</li></ul><p><strong>注意</strong>：动态/静态之分与网页画面是否在动无关</p><h3 id="标记">1.3 标记</h3><ul><li>HTML作为标记(Markup)语言，其核心组成元素是标记。</li><li>标记分为<strong>单标记</strong>和<strong>双标记</strong>；（也称“标签”）</li></ul><h4 id="单标记">1.3.1 单标记</h4><ul><li><code>&lt;标记 /&gt;</code>（xhtml1.0），简记<code>&lt;标记&gt;</code>（html4.01）</li><li>例子：<ul><li><code>&lt;hr /&gt;</code> - 横线（水平分隔线（horizontalrule））</li><li><code>&lt;br /&gt;</code> - 换行（barter rabbet）</li></ul></li><li>目前的规范标准是<strong>xhtml</strong></li></ul><h4 id="双标记">1.3.2 双标记</h4><ul><li><code>&lt;标记&gt;内容&lt;/标记&gt;</code></li></ul><h4 id="注释">1.3.3 注释</h4><ul><li><p><code>&lt;!-- 注释内容 --&gt;</code></p></li><li><p>也可跨行</p></li><li><p>```html <!--  注释内容行1  注释内容行2  ……  --> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 1.4  结构</span><br><span class="line"></span><br><span class="line">document</span><br><span class="line"></span><br><span class="line">- html</span><br><span class="line">  - head</span><br><span class="line">    - title</span><br><span class="line">      - meta</span><br><span class="line">  - body</span><br><span class="line">    - table</span><br><span class="line">    - span</span><br><span class="line">    - p</span><br><span class="line"></span><br><span class="line">**注意**：HTML标记须按照结构组织，可以包含，但不得交叉，如 `&lt;title&gt;` 不得放入 `&lt;body&gt;` 内。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">通常结构：</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;网页标题&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">      &lt;p&gt; &lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p></li><li><p><code>meta</code>为元信息，供浏览器解析使用</p></li></ul><hr /><h2 id="版面">2 版面</h2><h3 id="标题">2.1 标题</h3><p>标题共6级，从1到6，字体有大到小，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>// 最大</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span>// 最小</span><br></pre></td></tr></table></figure><h3 id="段落">2.2 段落</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">段落</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>段落之间默认会有段距；</p><p>注意**：默认多个连续空格会合并成一个，多个连续空行会合并成一行。</p><ul><li>增加空格： <code>&amp;nbsp</code> ；(new blank space)</li><li>增加空行：<ul><li>换行标记：<code>&lt;br /&gt;</code>，简记为<code>&lt;br&gt;</code>；</li><li>段间距：<code>&lt;p&gt;&lt;/p&gt;</code>，简记为<code>&lt;p&gt;</code>；</li></ul></li><li>禁用换行：<code>&lt;nobr&gt;段落&lt;/nobr&gt;</code>（不常用）；</li></ul><h3 id="对齐">2.3 对齐</h3><ul><li>标记的align属性：<ul><li><code>align="left"</code> ，另有"right"，"center"；</li></ul></li><li>居中标记：<ul><li><code>&lt;center&gt;内容&lt;/center&gt;</code></li></ul></li></ul><h3 id="列表">2.4 列表</h3><h4 id="无序表">2.4.1 无序表</h4><p>无序表标记为<code>&lt;ul&gt;表&lt;/ul&gt;</code> （unorderedlist）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>li （list item）</li></ul><h4 id="有序表">2.4.2 有序表</h4><p>有序表标记为<code>&lt;ol&gt;表&lt;/ol&gt;</code>（ordered list）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>有序表默认<code>type</code>属性为“1”，表示数字序标<ul><li>另：<code>"A"</code>, <code>"a"</code>, <code>"i"</code>,<code>"Ⅰ"</code>；</li></ul></li></ul><h3 id="特殊段">2.5 特殊段</h3><h4 id="预解析">2.5.1 预解析</h4><ul><li><code>&lt;pre&gt;内容&lt;/pre&gt;</code><ul><li>只解析内容中的HTML标记，不合并空格、换行，保留源格式</li></ul></li></ul><h4 id="不解析">2.5.2 不解析</h4><ul><li><code>&lt;xmp&gt;内容&lt;/xmp&gt;</code><ul><li>不对内容做任何解析，保留内容中的HTML标记，格式；</li></ul></li></ul><h4 id="代码段">2.5.3 代码段</h4><ul><li><code>&lt;code&gt;代码段&lt;/code&gt;</code><ul><li>用于显示代码</li></ul></li><li><code>&lt;/var&gt;变量&lt;/var&gt;</code><ul><li>用于标记变量（会斜体显示）</li></ul></li></ul><h3 id="引用">2.6 引用</h3><h4 id="短文本引用">2.6.1 短文本引用</h4><ul><li><p>```html <q>短文本</q> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - quote</span><br><span class="line">  - 一般默认解析为自动带上引号</span><br><span class="line">  - &lt;q&gt;短文本&lt;/q&gt;</span><br><span class="line"></span><br><span class="line">#### 2.6.2  长文本引用</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;blockquote&gt;长文本&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure></p><ul><li>block quote</li><li>一般默认解析为左右缩进，文本居中且自动折行</li><li><blockquote>暗淡轻黄体性柔，情疏迹远只香留。何须浅碧深红色，自是花中第一流。</blockquote></li></ul></li></ul><h3 id="地址信息">2.7 地址信息</h3><h4 id="地址块">2.7.1 地址块</h4><ul><li>```html<address>江苏省苏州市姑苏区十梓街1号 苏州大学</address><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &lt;address&gt;江苏省苏州市姑苏区十梓街1号 苏州大学&lt;/address&gt;</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 3  字体</span><br><span class="line"></span><br><span class="line">字体分物理字体和逻辑字体。</span><br><span class="line"></span><br><span class="line">### 3.1  物理字体</span><br><span class="line"></span><br><span class="line">- &lt;b&gt;粗体&lt;/b&gt; - `&lt;b&gt;粗体&lt;/b&gt;`</span><br><span class="line">- &lt;i&gt;斜体&lt;/i&gt; - `&lt;i&gt;斜体&lt;/i&gt;`</span><br><span class="line">- &lt;u&gt;下划线&lt;/u&gt; - `&lt;u&gt;下划线&lt;/u&gt;`</span><br><span class="line">- &lt;s&gt;删除线&lt;/s&gt; - `&lt;s&gt;删除线&lt;/s&gt;`</span><br><span class="line">- &lt;sup&gt;上标&lt;/sup&gt; - `&lt;sup&gt;上标&lt;/sup&gt;`</span><br><span class="line">- &lt;sub&gt;下标&lt;/sub&gt; - `&lt;sub&gt;下标&lt;/sub&gt;`</span><br><span class="line">- &lt;tt&gt;打字机字体&lt;/tt&gt; - `&lt;tt&gt;打字机字体&lt;/tt&gt;`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 3.2  逻辑字体</span><br><span class="line"></span><br><span class="line">- &lt;em&gt;强调&lt;/em&gt; - `&lt;em&gt;强调&lt;/em&gt;`</span><br><span class="line">- &lt;strong&gt;加重&lt;/strong&gt; - `&lt;strong&gt;加重&lt;/strong&gt;`</span><br><span class="line">- &lt;code&gt;代码&lt;/code&gt; - `&lt;code&gt;代码&lt;/code&gt;`</span><br><span class="line">- &lt;samp&gt;示例文字&lt;/samp&gt; - `&lt;samp&gt;示例文字&lt;/samp&gt;`</span><br><span class="line">- &lt;kbd&gt;键盘按键文字&lt;/kbd&gt; - `&lt;kbd&gt;键盘按键文字&lt;/kbd&gt;`</span><br><span class="line">- &lt;small&gt;缩小&lt;/small&gt; - `&lt;small&gt;缩小&lt;/small&gt;`</span><br><span class="line">- &lt;big&gt;放大&lt;/big&gt; - `&lt;big&gt;放大&lt;/big&gt;`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 3.3  属性字体</span><br><span class="line"></span><br><span class="line">更高级的字体设计可以使用属性字体标记实现：</span><br><span class="line"></span><br><span class="line">`&lt;font&gt;字体&lt;/font&gt;`</span><br><span class="line"></span><br><span class="line">#### 3.3.1  颜色</span><br><span class="line"></span><br><span class="line">- `&lt;font color=&quot;red&quot;&gt;字体&lt;/font&gt;`</span><br><span class="line">  - 属性值为颜色名</span><br><span class="line">- `&lt;font color=&quot;#ff0000&quot;&gt;字体&lt;/font&gt;`</span><br><span class="line">  - 属性值为RGB 十六进制值</span><br><span class="line"></span><br><span class="line">#### 3.3.2  大小</span><br><span class="line"></span><br><span class="line">- `&lt;font size=&quot;3&quot;&gt;字体&lt;/font&gt;`</span><br><span class="line">  - size的值从1~7，由小到大</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4  图像</span><br><span class="line"></span><br><span class="line">### 4.1  引用图片</span><br><span class="line"></span><br><span class="line">引用图片时：  `&lt;img src=&quot;url&quot;&gt;`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 4.2  属性</span><br><span class="line"></span><br><span class="line">- `width=&quot;200px&quot;`  px即像素</span><br><span class="line">- `height=&quot;..px&quot;`</span><br><span class="line">- `alt=&quot;解释&quot;` </span><br><span class="line">  - 光标停留时输出</span><br><span class="line">  - 图片加载失败时显示</span><br><span class="line">- `align=&quot;bottom&quot;`</span><br><span class="line">  - 默认bottom， 另top, middle；</span><br><span class="line">- `border=&quot;1opx&quot;`</span><br><span class="line">  - 边框像素</span><br><span class="line">- `title=&quot;标题&quot;`</span><br><span class="line">  - 光标置于图片上时，浮出显示title内容</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">## 5  链接</span><br><span class="line"></span><br><span class="line">### 5.1  超链接</span><br><span class="line"></span><br><span class="line">#### 5.1.1 基本</span><br><span class="line"></span><br><span class="line">`&lt;a href=&quot;example.html&quot;&gt;内容&lt;/a&gt;`</span><br><span class="line"></span><br><span class="line">- 内容可以是文字或图片等…</span><br><span class="line"></span><br><span class="line">#### 5.1.2  属性</span><br><span class="line"></span><br><span class="line">- `target=&quot;_self&quot;`  </span><br><span class="line">  - 默认`&quot;_self&quot;` 当前窗口打开</span><br><span class="line">  - `_parent`  父标签页打开</span><br><span class="line">  - `_top`  销毁当前标签页，顶层窗口打开</span><br><span class="line">  - `_blank`  新标签页打开【常用】</span><br><span class="line">- `title=&quot;click&quot;`</span><br><span class="line">  - 光标置于链接上时会浮出文字提示`click`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 5.2  区域链接</span><br><span class="line"></span><br><span class="line">通过`map`和`area`在图片中实现可点击的链接区域：</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;img src=&quot;example.jpg&quot; usemap=&quot;#face&quot;&gt;</span><br><span class="line">&lt;map name=&quot;face&quot;&gt;</span><br><span class="line">&lt;area shape=&quot;rect&quot; href=&quot;link1.html&quot; coords=&quot;140, 20, 280, 60&quot;&gt;</span><br><span class="line">  &lt;area shape=&quot;ploy&quot; href=&quot;link2.html&quot; coords=&quot;100, 100, 180, 80, 200, 140&quot;&gt;</span><br><span class="line">  &lt;area shape=&quot;circle&quot; href=&quot;link3.html&quot; coords=&quot;80, 100, 60&quot;&gt;</span><br><span class="line">&lt;/map&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="页内链接">5.3 页内链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#item&quot;</span>&gt;</span>跳转至item处<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">……</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>点击后，会在页面内跳转到item目标行</li></ul><h3 id="邮件链接">5.4 邮件链接</h3><h4 id="典型">5.4.1 典型</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">heaf</span>=<span class="string">&quot;mailto:demo@mail.com?subject=mail subject title&amp;body=mail content body&quot;</span>&gt;</span>click to send e-mail<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>mailto:邮箱地址</li><li>subject=邮件主题</li><li>body=邮件内容</li><li>通过<code>?</code>和一系列<code>&amp;</code>符号实现分隔</li></ul><h4 id="关键字">5.4.2 关键字</h4><ul><li><code>mailto:</code> 邮箱地址<ul><li><code>;</code> 封号隔开多个邮箱地址</li></ul></li><li><code>subject=</code> 邮件主题</li><li><code>body=</code> 邮件内容</li><li><code>cc=</code> 抄送地址</li><li><code>bcc=</code> 密件抄送地址</li></ul><hr /><h2 id="表单">6 表单</h2><h3 id="表单框体">6.1 表单框体</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;test.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">  表项</span><br><span class="line">  ……</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>action</code> 表单发送目标url，通常发给一个php这样的对象</li><li><code>method</code> GET或POST报文</li></ul><h3 id="输入">6.2 输入</h3><h4 id="文本框">6.2.1 文本框</h4><ul><li><code>&lt;input type="text"&gt;</code><ul><li>上限255字符</li></ul></li></ul><h4 id="密码框">6.2.2 密码框</h4><ul><li><code>&lt;input type="password"&gt;</code></li></ul><h4 id="按钮">6.2.3 按钮</h4><ul><li><code>&lt;input type="submit" value="提交"&gt;</code><ul><li><strong>提交</strong>按钮</li></ul></li><li><code>&lt;input type="reset" value="重置"&gt;</code><ul><li><strong>重置</strong>按钮</li></ul></li><li><code>&lt;input type="button" value="自定义按钮"&gt;</code><ul><li><strong>自定义</strong>按钮</li></ul></li></ul><h4 id="上传">6.2.4 上传</h4><ul><li><code>&lt;input type="image" src="image.jpg" /&gt;</code><ul><li>图片</li></ul></li><li><code>&lt;input type="file" /&gt;</code><ul><li>上传文件，点击后会弹出文件选择框</li></ul></li></ul><h4 id="隐藏信息">6.2.5 隐藏信息</h4><ul><li><code>&lt;input type="hidden" name="text" value="隐藏区域信息"&gt;</code></li></ul><h4 id="文本域大段">6.2.6 文本域（大段）</h4><ul><li>```html<textarea cols="50" row="10">  在这里输入文本内容...</textarea><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - **注意：**这两个属性可用css样式的width和height来代替：col用width、row用height来代替。</span><br><span class="line"></span><br><span class="line">#### 6.2.7  单选按钮</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;label&gt;男&lt;/label&gt;</span><br><span class="line">  &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;m&quot;&gt;</span><br><span class="line">  &lt;label&gt;女&lt;/label&gt;</span><br><span class="line">  &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;f&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li><code>value</code>提交数据到服务器的值（后台PHP脚本运行使用）；</li><li><code>name</code> 为控件命名，以备后台程序 ASP、PHP 使用；</li><li>注意：**同一组的单选按钮，name取值一定要一致，比如上面例子为同一个名称“sex”，这样同一组的单选按钮才可以起到单选的作用。</li></ul></li></ul><h4 id="复选按钮">6.2.8 复选按钮</h4><ul><li><p>```html <label>数学</label><input type="checkbox" name="course" value="math" checked="checked"><label>英语</label><input type="checkbox" name="course" value="english"> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - `checked`  当设置 checked=&quot;checked&quot; 时，该选项被默认选中</span><br><span class="line"></span><br><span class="line">#### 6.2.9  下拉列表框</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;form action=&quot;save.php&quot; method=&quot;post&quot; &gt;</span><br><span class="line">      &lt;label&gt;爱好:&lt;/label&gt;</span><br><span class="line">      &lt;select multiple=&quot;multiple&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;看书&quot;&gt;看书&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;旅游&quot; selected=&quot;selected&quot;&gt;旅游&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;运动&quot;&gt;运动&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;购物&quot;&gt;购物&lt;/option&gt;</span><br><span class="line">      &lt;/select&gt;</span><br><span class="line">  &lt;/form&gt;</span><br></pre></td></tr></table></figure></p><ul><li>设置<strong>selected="selected"</strong>属性，则该选项就被默认选中。</li><li>设置<strong>multiple="multiple"</strong>属性，则按下<code>Ctrl</code>可多选。</li></ul></li></ul><h3 id="其它">6.3 其它</h3><h4 id="label标签">6.3.1 label标签</h4><ul><li><p>```html <label for="控件id名称">label for id</label><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 格式</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;form&gt;</span><br><span class="line">    &lt;label for=&quot;male&quot;&gt;男&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; name=&quot;gender&quot; id=&quot;male&quot; /&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;label for=&quot;female&quot;&gt;女&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; name=&quot;gender&quot; id=&quot;female&quot; /&gt;</span><br><span class="line">    &lt;label for=&quot;email&quot;&gt;输入你的邮箱地址&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;email&quot; id=&quot;email&quot; placeholder=&quot;Enter email&quot;&gt;</span><br><span class="line">  &lt;/form&gt;</span><br></pre></td></tr></table></figure></p><ul><li>示例</li></ul></li></ul><hr /><h2 id="表格">7 表格</h2><h3 id="表格框体">7.1 表格框体</h3><ul><li><code>&lt;table&gt;&lt;/table&gt;</code></li><li>属性：<ul><li><code>border="1"</code><ul><li>边框粗细</li></ul></li><li><code>width</code></li><li><code>height</code></li><li><code>align</code></li></ul></li></ul><h3 id="结构解析">7.2 结构解析</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">summary</span>=<span class="string">&quot;table title&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">caption</span>&gt;</span>table caption<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>table head1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>table head2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>table data1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>table data2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>表格框体内，逐行，行内逐列</li><li>表行、表头、表项都有诸如<code>align</code>的属性，可调整对齐方式，如<code>"center"</code>居中</li></ul><h4 id="表行">7.2.1 表行</h4><ul><li>```html<tr>列信息</tr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 7.2.2  表头</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;th&gt;</span><br><span class="line">    表头值</span><br><span class="line">  &lt;/th&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="表项">7.2.2 表项</h4><ul><li>```html<td>表项值</td><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 7.2.3  表摘要</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;caption&gt;摘要&lt;/caption&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="表格版面">7.3 表格版面</h3><h4 id="跨行">7.3.1 跨行</h4><ul><li><code>rowspan=3</code><ul><li>当前元素跨3行</li></ul></li></ul><h4 id="跨列">7.3.2 跨列</h4><ul><li><code>colspan=3</code><ul><li>当前元素跨3列</li></ul></li></ul><h4 id="对齐-1">7.3.3 对齐</h4><ul><li>表行、表头、表项都有诸如<code>align</code> 的属性，可调整对齐方式：<ul><li><code>"center"</code>居中；</li><li><code>"right"</code> 右对齐。</li></ul></li></ul><hr /><h2 id="框架">8 框架</h2><h3 id="概念-1">8.1 概念</h3><ul><li>一个页面可以包含frameset，一个frameset可以包含多个frame，每个frame显示一个page。</li><li>框架用途：<ul><li>常驻导航栏，导航栏中显示多个板块链接，方便用户在显示框架中切换到不同页面</li></ul></li></ul><h3 id="框架集">8.2 框架集</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">&quot;25,50,25&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;http://a.com&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;http://b.com&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;http://c.com&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>1:2:1 分三列显示三个页面</li><li><code>&lt;frameset frameborder="yes"&gt;</code><ul><li>另有 <code>"no"</code> 或 <code>1</code>或<code>0</code></li><li>控制框架集边框显示</li></ul></li></ul><p><strong>注意</strong>：<code>&lt;frameset&gt;</code> 不得与<code>&lt;body&gt;</code> 并列。</p><h3 id="框架-1">8.3 框架</h3><ul><li><code>&lt;frame src="http://c.com" /&gt;</code><ul><li><code>&lt;frame /&gt;</code> 是<strong>单标记</strong></li></ul></li><li>禁用调节：使框架大小无法被用户调节<ul><li><code>&lt;frame noresize="noresize"&gt;</code></li></ul></li><li>滑动条<ul><li><code>&lt;frame src="http://a.com" scrolling="auto"&gt;</code><ul><li>另有： <code>"yes"</code> 或 <code>"no"</code>，可启用或禁用滚动条</li></ul></li></ul></li></ul><h3 id="分栏">8.4 分栏</h3><ul><li><strong>框架集</strong>属性 <code>cols</code>，<code>rows</code></li></ul><h4 id="多列分栏">8.4.1 多列分栏</h4><ul><li><code>cols</code> 属性表示分配列向分栏比例</li></ul><h4 id="多行分栏">8.4.2 多行分栏</h4><ul><li><code>rows</code> 属性分配行向分栏比例</li></ul><h4 id="表格分割">8.4.3 表格分割</h4><ul><li>复合使用<code>cols</code>和<code>rows</code>属性可以实现表格分割</li></ul><h3 id="内联框架">8.5 内联框架</h3><p><code>&lt;iframe src="a,html" /&gt;</code></p><ul><li><p>嵌入在网页的一个独立网页框</p></li><li><p>属性：类似<code>&lt;frame&gt;</code></p></li></ul><hr /><h2 id="多媒体嵌入">9 多媒体嵌入</h2><h3 id="嵌入标记">9.1 嵌入标记</h3><ul><li><code>&lt;embed src=url&gt;</code></li><li>可嵌入音频、视频</li><li><code>url</code> 是需要嵌入多媒体的URL</li><li>依赖浏览器协同的音视频播放器 Windows Media Player</li></ul><h3 id="属性">9.2 属性</h3><ul><li><code>autostart=true/false</code><ul><li>自动播放</li></ul></li><li><code>loop=true/false</code><ul><li>循环播放</li></ul></li><li><code>hidden=true/false(no)</code><ul><li>隐藏播放器显示</li></ul></li><li><code>height</code></li><li><code>width</code><ul><li>默认单位<code>px</code></li></ul></li><li><code>bgcolor</code></li><li><code>align</code></li></ul><hr /><h2 id="动态效果">10 动态效果</h2><h3 id="滚动">10.1 滚动</h3><h4 id="滚动标记">10.1.1 滚动标记</h4><p><marquee>内容</marquee></p><ul><li><code>&lt;marquee&gt;内容&lt;/marquee&gt;</code><ul><li>默认从右向左滚动</li></ul></li></ul><h4 id="属性-1">10.1.2 属性</h4><ul><li><code>direction=left</code><ul><li>滚动方向</li><li>另 <code>"right"</code>， <code>"up"</code>，<code>"down"</code></li></ul></li><li><code>scrollamount</code><ul><li>滚动量（滚动速度）</li></ul></li><li><code>behavior=“scroll”</code><ul><li>滚动方式，默认<code>scroll</code> 来回滚动</li><li>另 <code>alternate</code> 来回滚动， <code>slide</code>一次滚动</li></ul></li><li><code>loop="5"</code><ul><li>循环次数，此处为循环5次</li></ul></li><li><code>scrolldelay</code></li><li><code>bgcolor</code></li><li><code>width</code></li><li><code>height</code></li></ul><hr /><h2 id="区块">11 区块</h2><h3 id="行块span">11.1 行块span</h3><h4 id="标记-1">11.1.1 标记</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="特点">11.1.2 特点</h4><ul><li>span是跨度，宽度，从一头到另一头义</li><li>顾名思义，span块的宽度为内容宽度，且内容单行，不换行</li></ul><h3 id="区块div">11.2 区块div</h3><h4 id="标记-2">11.2.1 标记</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="特点-1">11.2.2 特点</h4><ul><li>宽度默认为父容器宽度</li><li>行、段等其它元素均可放置在div内，<code>&lt;div&gt;</code>标记使用范围广，与CSS紧密相关</li></ul><hr /><h2 id="结合css">12 结合CSS</h2><h3 id="style标签">12.1 style标签</h3><ul><li><div class="sourceCode" id="cb1"><preclass="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;style</span> <span class="er">type</span><span class="ot">=</span><span class="st">&quot;text/css&quot;</span><span class="kw">&gt;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  p&#123;</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>     <span class="kw">font-size</span>:<span class="dv">20</span><span class="dt">px</span><span class="op">;</span><span class="co">/*设置文字字号*/</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>     <span class="kw">color</span>:<span class="cn">red</span><span class="op">;</span><span class="co">/*设置文字颜色*/</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>     <span class="kw">font-weight</span>:<span class="dv">bold</span><span class="op">;</span><span class="co">/*设置字体加粗*/</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  &#125;</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">&lt;/style&gt;</span></span></code></pre></div><ul><li>html中，<code>&lt;p&gt;</code>标签内的段落文本会成为CSS中定义的样式</li><li><code>&lt;style&gt;</code>标签置于<code>&lt;head&gt;</code>中</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> front-end </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio - 多种方式打开文件</title>
      <link href="/posts/Visual-Studio-%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6/"/>
      <url>/posts/Visual-Studio-%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>中文信息处理课程，get到一个VisualStudio的小技巧，可以多种方式打开文件，包括查看文件二进制内容（十六进制显示），简单记录备忘。</p><span id="more"></span><h1 id="visual-studio---多种方式打开文件">Visual Studio -多种方式打开文件</h1><h2 id="二进制形式">1 二进制形式</h2><ol type="1"><li>将目标文件添加到项目中，如：添加到资源文件目录；</li><li>选中文件，右键选择 <strong>打开方式(N)...</strong> 或 选项栏选择<strong>视图</strong> -&gt; <strong>打开方式(N)...</strong> ；</li><li>在弹出的打开方式选择框中，选择 <strong>二进制编辑器</strong>并确定；</li><li>可以看到十六进制编码显示的文本二进制内容，且与右侧内容相对应。</li></ol><h2 id="资源形式">2 资源形式</h2><p>例如 <em>ico</em>图标资源：</p><ol type="1"><li>将目标文件添加到项目中，如：添加到资源文件目录；</li><li>选中文件，右键选择 <strong>打开方式(N)...</strong> 或 选项栏选择<strong>视图</strong> -&gt; <strong>打开方式(N)...</strong> ；</li><li>在弹出的打开方式选择框中，选择 <strong>资源编辑器</strong>并确定；</li><li>可以看到ICO图标文件包含的多种分辨率资源。</li></ol><h2 id="其它">3 其它</h2><ul><li>其它形式，诸如：JSON格式数据文件，均可在VisualStudio中对应打开。01postpublish011107f6047dd19db4786e1ee32dc8d2db25e</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Visual Studio </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于UDP或TCP的Socket通信 - Python网络编程</title>
      <link href="/posts/%E5%9F%BA%E4%BA%8EUDP%E6%88%96TCP%E7%9A%84Socket%E9%80%9A%E4%BF%A1-Python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/posts/%E5%9F%BA%E4%BA%8EUDP%E6%88%96TCP%E7%9A%84Socket%E9%80%9A%E4%BF%A1-Python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>通过Python，可以便捷地进行基于UDP或TCP的Socket网络通信。</p><span id="more"></span><h1id="基于udp或tcp的socket通信---python网络编程">基于UDP或TCP的Socket通信- Python网络编程</h1><blockquote><p>本文内容整理自 James F. Kurose, Keith W. Ross <em>ComputerNetworking: A Top-Down Approach (sixth edition)</em></p></blockquote><ul><li>原书内容是Python2的兼容代码，根据我的开发环境，做了少许修改以便兼容Python3。</li><li>经测试在Python3.5环境下可顺利执行。</li></ul><h2 id="udp">1 UDP</h2><h3 id="udpclient.py">1.1 UDPClient.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">serverName = <span class="string">&#x27;www.heary.cn&#x27;</span>     <span class="comment"># 目标域名或IP地址</span></span><br><span class="line">serverPort = <span class="number">12000</span>              <span class="comment"># 目标端口号</span></span><br><span class="line">clientSocket = socket(AF_INET, SOCK_DGRAM)  <span class="comment"># AF_INET指示协议簇（AF, Address Family）, (DGRAM, Datagram)</span></span><br><span class="line">message = <span class="built_in">input</span>(<span class="string">&#x27;Input lowercase sentence:&#x27;</span>)    <span class="comment"># input返回str类型</span></span><br><span class="line">clientSocket.sendto(message.encode(), (serverName, serverPort)) <span class="comment"># bytes = str.encode()</span></span><br><span class="line">modifiedMessage, serverAddress = clientSocket.recvfrom(<span class="number">2048</span>)    <span class="comment"># serverAddress包含IP和port</span></span><br><span class="line"><span class="built_in">print</span>(modifiedMessage)</span><br><span class="line">clientSocket.close()    <span class="comment"># 关闭socket，继而关闭进程</span></span><br></pre></td></tr></table></figure><h3 id="udpserver.py">1.2 UDPServer.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">serverSocket = socket(AF_INET, SOCK_DGRAM)  <span class="comment"># 创建socket时，port是从1024~65535中自动分配的</span></span><br><span class="line">serverSocket.bind((<span class="string">&#x27;&#x27;</span>, serverPort))         <span class="comment"># 将该socket与指定port绑定，服务器端提供固定port以便访问</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The server is ready to receive&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    message, clientAddress = serverSocket.recvfrom(<span class="number">2048</span>)    <span class="comment"># 取缓存长度2048作为输入</span></span><br><span class="line">    modifiedMessage = message.decode().upper()      <span class="comment"># str = bytes.decode()</span></span><br><span class="line">    serverSocket.sendto(modifiedMessage, clientAddress)</span><br></pre></td></tr></table></figure><h3 id="服务器端部署">1.3 服务器端部署</h3><p>测试需要，我在云服务器端通过<strong>screen</strong>创建一个新的screensocket：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S UDPServer</span><br></pre></td></tr></table></figure><p>在新的screen中，运行UDPServer.py：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python UDPServer.py</span><br></pre></td></tr></table></figure><p>此时，服务器端的监听进程已经开始工作，通过<code>netstat</code>可以查看网络通信端口信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an | grep 12000</span><br></pre></td></tr></table></figure><p>可以看到结果显示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-49-193-ubuntu:~$ netstat -an | grep 12000</span><br><span class="line">udp        0      0 0.0.0.0:12000           0.0.0.0:*  </span><br></pre></td></tr></table></figure><ul><li>本机本地IP的12000端口开启，为UDP协议。</li></ul><hr /><h2 id="tcp">2 TCP</h2><h3 id="tcpclient.py">2.1 TCPClient.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">serverName = <span class="string">&#x27;www.heary.cn&#x27;</span></span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">clientSocket = socket(AF_INET, SOCK_STREAM)     <span class="comment"># AF_INET指示底层使用IPv4, SOCK_STREAM指示TCP套接字</span></span><br><span class="line">clientSocket.connect((serverName, serverPort))  <span class="comment"># 执行三次握手，建立TCP连接</span></span><br><span class="line">sentence = <span class="built_in">input</span>(<span class="string">&#x27;Input lowercase sentence:&#x27;</span>)</span><br><span class="line">clientSocket.send(sentence.encode())    <span class="comment"># TCP socket基于连接，且已连接至服务器，直接send即可</span></span><br><span class="line">modifiedSentence = clientSocket.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(modifiedSentence)</span><br><span class="line">clientSocket.close()</span><br></pre></td></tr></table></figure><h3 id="tcpserver.py">2.2 TCPServer.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line">serverPort = <span class="number">12000</span></span><br><span class="line">serverSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">serverSocket.bind((<span class="string">&#x27;&#x27;</span>, serverPort))     <span class="comment"># 将该socket与指定port绑定，服务器端提供固定port以便访问</span></span><br><span class="line">serverSocket.listen(<span class="number">1</span>)      <span class="comment"># 定义TCP最大请求连接数为1 （该参数最小为1）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The server is ready to receive&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    connectionSocket, addr = serverSocket.accept()  <span class="comment"># 用于请求建立TCP连接时，服务器段调用accept，即可完成三次握手协议，建立TCP通信Socket:connectionSocket</span></span><br><span class="line">    sentence = connectionSocket.recv(<span class="number">1024</span>)</span><br><span class="line">    capitalizedSentence = sentence.decode().upper()</span><br><span class="line">    connectionSocket.send(capitalizedSentence.encode())</span><br><span class="line">    connectionSocket.close()    <span class="comment"># 通信完成后，通信连接关闭（但监听连接持续存在）</span></span><br></pre></td></tr></table></figure><h3 id="服务器端部署-1">2.3 服务器端部署</h3><p>操作内容同上<strong><em>1.3</em></strong></p><p>补充：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-49-193-ubuntu:~$ netstat -an | grep 12000</span><br><span class="line">tcp        0      0 0.0.0.0:12000           0.0.0.0:*               LISTEN  </span><br></pre></td></tr></table></figure><ul><li>TCPServer.py执行后，TCP监听进程启动。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-49-193-ubuntu:~$ netstat -an | grep 12000</span><br><span class="line">tcp        0      0 10.105.49.193:12000     42.244.62.236:2538      TIME_WAIT  </span><br></pre></td></tr></table></figure><ul><li>TCP连接关闭，会有一段TIME_WAIT，约几秒钟，过后再检索，会发现该端口已经释放。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Socket </tag>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解C——#define与typedef</title>
      <link href="/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3C%E2%80%94%E2%80%94-define%E4%B8%8Etypedef/"/>
      <url>/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3C%E2%80%94%E2%80%94-define%E4%B8%8Etypedef/</url>
      
        <content type="html"><![CDATA[<p><code>#define</code>名为宏定义，工作在预处理阶段，实际是对字符串的宏替换；<code>typedef</code>工作在编译阶段，是对自定义数据类型的自定义别名定义。</p><span id="more"></span><h1 id="深入理解cdefine与typedef">深入理解C——#define与typedef</h1><h2 id="define">1 #define</h2><h3 id="概念">1.1 概念</h3><p>宏定义的实质就是替换。</p><p>宏定义在<strong>预处理阶段</strong>由预处理器进行替换，这个替换是原封不动的替换。</p><h3 id="特点">1.2 特点</h3><p>设置宏定义时，需要特别注意<strong>括号</strong>的使用。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 正确案例 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs(x) ((x)&gt;=0?(x):-(x))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 错误案例 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> abs(x) x&gt;=0?x:-x</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 正确的abs(x)展开abs(a-b) */</span></span><br><span class="line">((a-b)&gt;=<span class="number">0</span>?(a-b):-(a-b))</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 错误的abs(x)展开abs(a-b) */</span></span><br><span class="line">a-b&gt;=<span class="number">0</span>?a-b:-a-b</span><br></pre></td></tr></table></figure><ul><li>因为C语言中，符号优先级在此处为：<code>单目运算符+/-</code> &gt;<code>双目运算符+/-</code> &gt; <code>&gt;=</code> &gt; <code>?:</code>，因此实际上成了<code>(a-b)&gt;=0?(a-b):(-a-b)</code>。与原义不符。</li></ul><h3 id="作用">1.3 作用</h3><h4 id="实现null在c和c的不同定义">1.3.1 实现NULL在C++和C的不同定义</h4><p>简例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _cplusplus</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NULL 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NULL (void*)0</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>通过宏定义，实现编译时的自动兼容和适应替换。</li><li>在C++中，NULL定义为立即数0，特点是编译器不做严格类型检查；</li><li>在C语言中，NULL定义为(void*)型的0，特点是编译器会执行严格的类型检查，需要做好类型转换工作。</li></ul><h4 id="debug和release的版本控制">1.3.2 Debug和Release的版本控制</h4><p>程序的在Debug阶段调试，会包含调试代码，用于显示输入，如：IDE中的调试时数据显示。而Release时需要去除这些冗余的调试输出代码。通过宏替换可以实现轻松的Debug/Release版本切换。</p><p>原理如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> dbg() printf()</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> dbg()</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>如果源代码中包含一句<code>#define DEBUG</code>，则编译前的预处理阶段，所有代码中的<code>dbg()</code>调试输出函数都会被替换成<code>printf()</code>显示输出函数。</li><li>如果源代码中没有对<code>DEBUG</code>进行宏定义，则预处理阶段会将所有的<code>dbg()</code>函数替换为空白，此时，被编译的代码中不包含<code>dbg()</code>调试输出语句。</li></ul><hr /><h2 id="typedef">2 typedef</h2><h3 id="概念-1">2.1 概念</h3><p><code>typedef</code>与<code>#define</code>的核心区别在于处理阶段不同——<code>#define</code>是预处理器识别读取并执行宏替换的宏语句，工作在编译阶段之前；<code>typedef</code>是编译器实现的类型定义语句，工作在编译时。</p><p>因此，<code>#define</code>眼中只有字符串的概念，只知道字符串存不存在宏定义，如何替换源代码中的字符串。而<code>typedef</code>工作在编译阶段，因此存在变量数据类型、数组、函数 等具体的语言层面的概念。</p><h3 id="实例">2.2 实例</h3><h4 id="基本数据类型">2.2.1 基本数据类型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  size i;<span class="comment">// 意义：int i;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最简单的<code>typedef</code>应用形式，定义变量名的别名，通过<code>#define</code>也可以实现。</li></ul><h4 id="数组类型">2.2.2 数组类型</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> Line[<span class="number">81</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  Line t;   <span class="comment">// 意义：char t[81];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>typedef</code>能够处理数组的语义，实际上<code>Line</code>在<code>typedef</code>中被定义为了一个<code>char[81]</code>的”类“，因此<code>Line t</code>实际上定义了一个名为<code>t</code>的<code>Line</code>型对象（即<code>char[81]</code>字符数组对象），此处就不是简单地进行宏替换能实现的了。</li></ul><h4 id="函数">2.2.3 函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*fun_ptr)</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 示例：定义一个简单的示例函数 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">maxInt</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> a&gt;=b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  fun_ptr fp;<span class="comment">// 意义：int (*fp)(int, int);</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/** </span></span><br><span class="line"><span class="comment">   * 延伸：函数指针的使用方法 </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">/* 初始化函数指针变量 */</span></span><br><span class="line">  fp = maxInt;<span class="comment">// 或 fp = &amp;maxInt，意义相同</span></span><br><span class="line">  <span class="comment">/* 调用函数（通过函数指针变量） */</span></span><br><span class="line">  fp(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">// 通过函数指针fp调用maxInt函数</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过<code>typedef</code>定义了一个函数指针类型<code>fun_ptr</code>，这是一个参数表为两个<code>int</code>，返回值为<code>int</code>的函数的函数指针类型。<code>fun_ptr</code>在定义此类型的函数指针变量时，显然更加简洁明了。</li></ul><h4 id="struct结构体">2.2.4 struct结构体</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">  <span class="comment">/* 变量定义 */</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  Node n;   <span class="comment">// 意义：struct node n;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>此例，<code>Node</code>被定义为了<code>struct node</code>的别名，通过<code>typedef</code>简化变量定义。</li><li>注意：如果去除<code>typedef</code>，则按照结构体定义语法，<code>Node</code>将成为该结构体类型的全局变量。</li></ul><hr /><h2 id="小结">3 小结</h2><h3 id="区别define和typedef">3.1 区别#define和typedef</h3><p>联系指针的概念，理解一下<code>#define</code>和<code>typedef</code>的区别。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> dpChar char*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span>* tpChar;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  dpChar p1, p2;<span class="comment">// 宏替换后：char* p1, p2;</span></span><br><span class="line">  tpChar p3, p4;<span class="comment">// p3, p4均为(char*)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>dpChar</code>为宏定义，预处理阶段，该字符串<code>dpChar</code>就被替换为字符串<code>char*</code>，最终定义变量的结果是，<code>p1</code>是<code>char*</code>字符指针变量，<code>p2</code>是<code>char</code>字符变量。</li><li><code>tpChar</code>是<code>typedef</code>类型定义，编译阶段，<code>tpChar</code>作为一个字符指针<code>(char*)</code>类型的别名，所定义的变量<code>p3</code>，<code>p4</code>均为字符指针变量。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解C——const与volatile</title>
      <link href="/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3C%E2%80%94%E2%80%94const%E4%B8%8Evolatile/"/>
      <url>/posts/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3C%E2%80%94%E2%80%94const%E4%B8%8Evolatile/</url>
      
        <content type="html"><![CDATA[<p>理解编译器级别的类型限定符，const与volatile的实质原理。</p><span id="more"></span><h1 id="深入理解cconst与volatile">深入理解C——const与volatile</h1><h2 id="const">1 const</h2><h3 id="概要">1.1 概要</h3><p><strong>const</strong> 即 <em>constant</em>的简记形式，作为C语言的关键字，实现的是类型限定符的作用。</p><blockquote><p>类型限定符可以与任何类型说明符一起使用。可以对const对象进行初始化，但在初始化之后不能进行赋值。……const用于声明可以存放在只读存储器中的对象，并可能提高优化的可能性。……除了诊断显式尝试修改const对象的情况外，编译器可能会忽略这些限定符。</p><p>（Kernighan&amp;Ritchie 《The C Programming Language(2ndEdition)》）</p></blockquote><p>const用于实现常量变量，通过编译器检查诊断的方式，避免对const变量的二次赋值。</p><h3 id="使用">1.2 使用</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 定义const变量a */</span></span><br><span class="line"><span class="type">int</span> <span class="type">const</span> a=<span class="number">10</span>;<span class="comment">// 写法1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> a=<span class="number">10</span>;<span class="comment">// 写法2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 指针p指向空间为const，即*p或a为const */</span></span><br><span class="line"><span class="type">int</span> <span class="type">const</span> *p=&amp;a;<span class="comment">// 写法1</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p=&amp;a;<span class="comment">// 写法2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 指针变量p为const变量，即指针本身不能被修改 */</span></span><br><span class="line"><span class="type">int</span> *<span class="type">const</span> p=&amp;a;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 指针变量p为const变量，所指变量a也为const变量 */</span></span><br><span class="line"><span class="type">int</span> <span class="type">const</span>* <span class="type">const</span> p=&amp;a;</span><br></pre></td></tr></table></figure><h3 id="实质">1.3 实质</h3><p>const实现的不是真正意义上的常量！</p><p>const机制是编译器检查实现的，不是运行时保护，运行时无const约束。</p><p>const变量仅仅是编译时的“伪常量”。</p><p>具体说来：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="type">const</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> *)&amp;a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a=100; 编译报错！直接赋值无法通过编译器检查，编译器会保护const变量被赋值修改。</span></span><br><span class="line">*p = <span class="number">100</span>;<span class="comment">// 赋值成功！通过指针，在运行时对该地址存储的int变量进行赋值。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>此例中，通过取const变量的地址并强制类型转换为(int*)非const的int型指针，此地址赋值给int指针变量p，通过指针p，即绕过了编译器的const常量约束检查，成功地在运行时实现对const的修改。</li><li>真正的只读常量，编译后存储在目标文件的<code>.ro.data</code>区。</li></ul><h3 id="目标文件的存储安排">1.4 目标文件的存储安排</h3><p>之所以称const变量为“伪常量”，不仅是因为其根据的是编译器的编译时诊断检查来实现常量效果，而且const变量的存储区域和普通变量别无二致。全局变量存储在<code>.data</code>段或记录在<code>.bss</code>段，局部变量则在程序的临时栈中管理。</p><p>编译过后生成的目标文件中，包含以下几个与变量相关的存储段：</p><ul><li><code>.text</code><ul><li>代码段</li><li>存储代码以及立即数等数据，只读常量。</li></ul></li><li><code>.ro.data</code><ul><li>只读（<em>readonly</em>）段 - 数据区</li><li>真正的常量，如：字符串常量，存储在目标文件的<code>.ro.data</code>区，此区域是<strong>真正的只读常量</strong>。</li></ul></li><li><code>.data</code><ul><li>数据段</li><li>存储已初始化为且值为非0的全局变量。</li></ul></li><li><code>.bss</code><ul><li>BSS段（<em>Block Started by Symbol</em>）</li><li>记录未初始化的全局变量。此段的变量将被默认初始化为0。此部分仅仅是占位符，数据不占用实际的磁盘空间。</li></ul></li></ul><hr /><h2 id="volatile">2 volatile</h2><p>volatile声明易变常量，即告知编译器该变量可能被代码以外的因素改变，如：中断服务例程（ISR），多线程中的异线程修改，或硬件修改等。</p><blockquote><p>volatile用于强制某个实现屏蔽可能的优化。例如，对于具有内存映像输入/输出的机器，指向设备寄存器的指针可以声明为指向volatile的指针，目的是防止编译器通过指针删除明显多于的引用。</p><p>（Kernighan&amp;Ritchie 《The C Programming Language(2ndEdition)》）</p></blockquote><ul><li>编译器遇到volatile变量，将不会对其做编译优化，以避免出现问题。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>signal&amp;slot - Qt的交互响应机制</title>
      <link href="/posts/signal-slot-Qt%E7%9A%84%E4%BA%A4%E4%BA%92%E5%93%8D%E5%BA%94%E6%9C%BA%E5%88%B6/"/>
      <url>/posts/signal-slot-Qt%E7%9A%84%E4%BA%A4%E4%BA%92%E5%93%8D%E5%BA%94%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>Qt的信号和槽机制，不同于传统的callback机制，signal&amp;slot机制，使得信号的触发与处理变得更加灵活且安全。</p><span id="more"></span><h1 id="signalslot---qt的交互响应机制">signal&amp;slot -Qt的交互响应机制</h1><h2 id="原理">1 原理</h2><h3 id="传统的callback机制">1.1 传统的callback机制</h3><p>传统的callback是事件触发后，就去调用被触发对象的callback函数。</p><p>例如，一个Button被按下后，该Button的回调函数<em>(callbackfunction)</em>就会被调用执行。</p><p>Matlab的GUI编程下通过编写callback函数，Java环境下通过设置事件监听函数。其实都是去重载原本默认为空的事件处理函数。</p><h3 id="qt的signal与slot机制">1.2 Qt的signal与slot机制</h3><p>Qt采用 <strong>信号<em>(signal)</em></strong> 与<strong>槽<em>(slot)</em></strong> 的机制来实现交互响应。</p><p><strong>信号<em>(signal)</em></strong> 与<strong>槽<em>(slot)</em></strong> 都是Qt中一个类的成员函数。</p><p>首先，信号需要和接收槽相连接。运行时，被触发的对象会释放<em>(emit)</em>信号，如果此信号有已连接的接收槽，那么该接收槽就会收到信号，以及其附带的参数，并进行事件处理。</p><hr /><h2 id="connect">2 connect</h2><h3 id="函数原型">2.1 函数原型</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(sender, <span class="built_in">SIGNAL</span>(signal), receiver, <span class="built_in">SLOT</span>(slot));</span><br></pre></td></tr></table></figure><ul><li><strong>sender</strong> 是信号发送对象的指针</li><li><strong>signal</strong> 是信号发送对象的signal函数<ul><li>例如，PushButton：<ul><li>按下时，会释放pressed()的信号；</li><li>抬起时，会释放released()的信号；</li><li>单击时，会释放clicked()的信号；</li><li>……</li></ul></li></ul></li><li><strong>receiver</strong> 是接收槽对象的指针</li><li><strong>slot</strong> 是接收槽对象的slot函数<ul><li>此函数用于处理接收到signal函数信号之后，需要执行的内容</li></ul></li><li>另外，<strong>SIGNAL</strong> 和 <strong>SLOT</strong>都是Qt定义的宏函数，用于实现参数转换。</li></ul><h3 id="示例">2.2 示例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MainWindow::<span class="built_in">MainWindow</span>(QWidget *parent) :</span><br><span class="line">    <span class="built_in">QMainWindow</span>(parent),</span><br><span class="line">    <span class="built_in">ui</span>(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;<span class="built_in">setupUi</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">connect</span>(ui-&gt;listWidget_users, <span class="built_in">SIGNAL</span>(<span class="built_in">itemClicked</span>(QListWidgetItem*)), <span class="keyword">this</span>, <span class="built_in">SLOT</span>(<span class="built_in">onUserClicked</span>(QListWidgetItem*)));</span><br><span class="line">    </span><br><span class="line">      ……</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>此处，我在MainWindow的构造函数<em>(construct func)</em>中，使用了connect函数来实现用户列表组件的点击信号与点击处理槽函数的连接。</p><ul><li>当用户列表组件<em>(ListWidget)</em> 中的一个项目被单击后，就是释放出<code>itemClicked(QListWidgetItem*)</code>信号，这个信号会导致相连接的接收槽函数<code>onUserClicked(QListWidgetItem*)</code>被调用。前者的参数<code>QListWidgetItem*</code>会被传递给后者。</li></ul></li><li><p>MainWindow的ui对象在拷贝构造函数开始执行之前已经构造生成。（C++冒号语法，不再赘述）</p></li><li><p>通过ui对象指针，可以获取当前的界面组件。</p></li><li><p>接收槽函数——<code>onUserClicked(QListWidgetItem*)</code>在接受类中先声明，再实现。</p><ul><li><p>声明：</p><ul><li><p>```c++ class **** { ****</p><p>public slots: void onUserClicked(QListWidgetItem*);</p><hr /><p>} <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 实现：</span><br><span class="line"></span><br><span class="line">  - ```c++</span><br><span class="line">    void MainWindow::onUserClicked(QListWidgetItem *item)</span><br><span class="line">    &#123;</span><br><span class="line">        QString currentUser = item-&gt;text();</span><br><span class="line"></span><br><span class="line">        ****</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></li></ul></li></ul></li></ul><h3 id="进一步理解connect">2.3 进一步理解connect</h3><ol type="1"><li><p>signal和slot之间的关系没有限制，可以一对多，多对一；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(sender, <span class="built_in">SIGNAL</span>(signal), receiverA, <span class="built_in">SLOT</span>(slotA));</span><br><span class="line"><span class="built_in">connect</span>(sender, <span class="built_in">SIGNAL</span>(signal), receiverB, <span class="built_in">SLOT</span>(slotB));</span><br></pre></td></tr></table></figure><ul><li>一对多</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(senderA, <span class="built_in">SIGNAL</span>(signalA), receiver, <span class="built_in">SLOT</span>(slot));</span><br><span class="line"><span class="built_in">connect</span>(senderB, <span class="built_in">SIGNAL</span>(signalB), receiver, <span class="built_in">SLOT</span>(slot));</span><br></pre></td></tr></table></figure><ul><li>多对一</li></ul></li><li><p>signal和signal之间也可以互相连接，由一个signal的释放，触发后一个signal的释放。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(sender, <span class="built_in">SIGNAL</span>(signal), receiverA, <span class="built_in">SLOT</span>(slotA));</span><br><span class="line"><span class="built_in">connect</span>(sender, <span class="built_in">SIGNAL</span>(signal), receiverB, <span class="built_in">SLOT</span>(slotB));</span><br></pre></td></tr></table></figure><ul><li>一对多</li></ul></li><li><p>连接关系可以动态连接，也可以动态断开</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">connect</span>(sender, <span class="built_in">SIGNAL</span>(signal), receiver, <span class="built_in">SLOT</span>(slot));<span class="comment">// 动态连接</span></span><br><span class="line"><span class="built_in">disconnect</span>(sender, <span class="built_in">SIGNAL</span>(signal), receiver, <span class="built_in">SLOT</span>(slot));<span class="comment">// 动态断开连接</span></span><br></pre></td></tr></table></figure><ul><li>通过disconnect函数即可断开信号与槽的连接关系</li></ul></li></ol><hr /><h2 id="进一步理解">3 进一步理解</h2><h3 id="自定义qt类">3.1 自定义Qt类</h3><p>尝试编写包含signal和slot的Qt类模型：</p><blockquote><p>以下代码来源《Qt C++跨平台图形界面程序设计基础》 殷立峰 主编清华大学出版社 245页。</p><p>（有改动）</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span>:Public QObject</span><br><span class="line">&#123;</span><br><span class="line">  Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Circle</span>()</span><br><span class="line">  &#123;</span><br><span class="line">    circleRadius=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">getRadius</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> circleRadius;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">setRadius</span><span class="params">(<span class="type">int</span> newRadius)</span></span>;</span><br><span class="line">signals:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">radiusChanged</span><span class="params">(<span class="type">int</span> newRadius)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">int</span> circleRadius;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Circle::setRadius</span><span class="params">(<span class="type">int</span> newRadius)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(newRadius != circleRadius)</span><br><span class="line">  &#123;</span><br><span class="line">    circleRadius = newRadius;</span><br><span class="line">    <span class="function">emit <span class="title">radiusChanged</span><span class="params">(circleRadius)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义的Circle类继承自QObject；</li><li>对外提供slots函数<strong>setRadius</strong>，此函数用于设置圆形的新半径。<ul><li>例如，可以根据用户的操作，触发setRadius函数，判断是否有变化后，更新圆形半径。</li><li>此函数特点在于，圆形半径更新后，它又释放出了一个信号——<code>emit radiusChanged(circleRadius);</code>。此信号函数也在Circle类中定义，是Circle类的信号函数。此信号函数携带着参数，会触发开发者编程时连接的槽函数，并将参数对应地传递给槽函数。实际编程中，槽函数例如：界面绘制刷新函数。这样就可以实现数据结构更新时的界面更新重绘。不需要盲目地轮询式查询数据结构，实时重绘显示。</li></ul></li></ul><h3 id="总结">3.2 总结</h3><p>Qt的信号和槽机制，使得信号触发与信号处理的关系变得灵活且安全。</p><ul><li>安全：各个封装好的组件与组件之间可以定向联系，而不打破封装性，不需要互访数据结构。</li><li>灵活：connect和disconnect可以动态执行，灵活地实现signal到slot，也即不同对象之间的函数到函数的动态连接和断开。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt - Linux下的Qt开发环境配置</title>
      <link href="/posts/Qt-Linux%E4%B8%8B%E7%9A%84Qt%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/posts/Qt-Linux%E4%B8%8B%E7%9A%84Qt%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>在Ubuntu 16.04下配置Qt开发环境，解决一些报错问题。</p><span id="more"></span><h1 id="qt---linux下的qt开发环境配置">Qt - Linux下的Qt开发环境配置</h1><h2 id="下载">1 下载</h2><h3 id="注册账号">1.1 注册账号</h3><p>现在下载Qt需要注册Qt账号，并承诺不用于商业开发的分发版本，才能获取Community版本的Qt。</p><h3 id="下载qt5.6">1.2 下载Qt5.6</h3><h4 id="linux">1.2.1 Linux</h4><p>这里我选择了Linux Host下的Qt 5.6.2 for Linux 64-bit版本。Linux环境的版本比较单一，没什么需要比较的。</p><p>下载链接： <ahref="http://download.qt.io/official_releases/qt/5.6/5.6.2/qt-opensource-linux-x64-5.6.2.run">Qt5.6.2 for Linux 64-bit (653 MB)</a></p><h4 id="windows">1.2.2 Windows</h4><p>如果是Windows环境下，Qt提供一系列的版本，主要区别在于编译环境不同。</p><p>其中：</p><ul><li><strong>MinGW</strong><ul><li>Windows平台下的GCC移植版。可以在Windows或Linux环境下编译出Windows的可执行文件。</li></ul></li><li><strong>VS 2015/2013/xxxx</strong><ul><li>或以<strong>MSVC</strong>开头</li><li>使用Windows平台下Visual Studio开发环境进行Qt开发，使用VisualC++编译器进行编译。</li></ul></li></ul><hr /><h2 id="安装">2 安装</h2><p>Linux版本的离线安装文件<strong><em>qt-opensource-linux-x64-5.6.2.run</em></strong>，后缀为<code>.run</code>，双击即可直接运行。跟着安装向导完成安装即可。默认勾选QtCreator。</p><p><strong>Qt Creator</strong></p><ul><li>是Qt的IDE，跨平台多版本。集成Qt Designer, Qt Assistant, QtLinguist等一系列工具。</li><li>QtCreator可以所见即所得地拖动组件、设计布局，也可以编写C++程序，完成整个GUI程序的开发、编译、调试。</li></ul><hr /><h2 id="错误">3 错误</h2><h3 id="编译器配置">3.1 编译器配置</h3><h4 id="报错信息">3.1.1 报错信息</h4><p>报错内容如下：</p><blockquote><p>error: Qt Creator needs a compiler set up to build. Configure acompiler in the kit options.</p></blockquote><h4 id="错误原因">3.1.2 错误原因</h4><p>此错误是因为Qt Creator中尚未配置好当前Qt库对应使用的编译器。</p><p>原因包括：</p><ul><li>未自动检测到推荐的编译器</li><li>自动检测检测到推荐编译器，且手动配置的编译器有错误</li></ul><h4 id="解决方法">3.1.3 解决方法</h4><ul><li>Ubuntu16.04 环境下，Qt可以自动检测G++编译器，安装一个即可<ul><li><code>sudo apt-get install g++</code></li></ul></li><li>设置当前已有的编译器，如GCC<ul><li>Ubuntu16.04环境下路径( <strong><em>path</em></strong> ) 为<code>/uer/bin/gcc</code></li></ul></li></ul><h3 id="lgl选项缺失">3.2 -lGL选项缺失</h3><h4 id="报错信息-1">3.2.1 报错信息</h4><p>报错内容如下：</p><blockquote><p>cannot find -lGL</p></blockquote><h4 id="错误原因-1">3.2.2 错误原因</h4><p>g++缺少-lGL选项。实际上是缺少库文件导致的。</p><p>lGL表示的是libGL库文件。</p><h4 id="解决方法-1">3.2.3 解决方法</h4><p>Ubuntu16.04环境下，安装以下包：</p><p><code>sudo apt-get install libgl1-mesa-dev</code></p><h4 id="有价值的讨论">3.2.4 有价值的讨论</h4><p>StackOverflow 问答：</p><blockquote><p><ahref="https://stackoverflow.com/questions/17417211/android-error-libgl-so-cannot-open-shared-object-file-no-such-file-or-direct">Android: error libGL.so: cannot open shared object file: No such file ordirectory</a></p></blockquote><blockquote><p><ahref="https://stackoverflow.com/questions/18406369/qt-cant-find-lgl-error">Qt:can't find -lGL error</a></p></blockquote><p>博客：</p><blockquote><p><ahref="http://www.cnblogs.com/coding-my-life/p/5677256.html">解决Qt5.7.0cannot find -lGL</a></p></blockquote><h2 id="另附">4 另附</h2><p><code>sudo apt-get install libc-dev libltdl-dev libxtst-dev</code></p><ul><li>可能有助于解决前期安装缺乏类库的一些问题（我还没细查）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> Linux </tag>
            
            <tag> Qt </tag>
            
            <tag> GUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fitcsvm - Matlab的SVM分类器</title>
      <link href="/posts/fitcsvm-Matlab%E7%9A%84SVM%E5%88%86%E7%B1%BB%E5%99%A8/"/>
      <url>/posts/fitcsvm-Matlab%E7%9A%84SVM%E5%88%86%E7%B1%BB%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>在Matlab下使用SVM(支持向量机，support vectormachine)分类器实现数据分类预测。</p><span id="more"></span><h1 id="fitcsvm---matlab的svm分类器">fitcsvm - Matlab的SVM分类器</h1><h2 id="构造svm分类器">1 构造SVM分类器</h2><p>Matlab已经开始提示，推荐使用fitcsvm，且未来版本将删除svmclassify。因此，本文介绍fitcsvm。</p><h3 id="fitcsvm函数">1.1 fitcsvm函数</h3><p>使用<strong>fitcsvm</strong>函数即可<strong>构造</strong><strong><em>(construct)</em></strong> SVM分类器。</p><p><strong>输入：</strong></p><ul><li>分类集数据</li><li>分类集标记</li><li>参数表<ul><li>属性 <em>key</em></li><li>参数 <em>value</em></li></ul></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svmClassifier = fitcsvm(TrainData&#x27;,TrainLabels&#x27;)</span><br></pre></td></tr></table></figure><ul><li><code>TrainData</code>和<code>TrainLabels</code>，是我分离出的训练集数据，此处做了矩阵转置，因为MatLab的fitcknn函数接收的参数是一行一条数据，一列一个特征维度的。<ul><li>具体地，<code>TrainData</code>是一个1024×1140double的数据集，原始数据的结构是每列一条数据，每条数据有1024个特征（feature）。</li><li><code>TrainLabels</code>是一个1×1140double的数据集，原始数据的结构是每列一个标记，与TrainData一一对应，实现标定。</li></ul></li><li>实际上，<code>fitcknn</code>将<code>TrainLabels</code>识别为<code>ClassNames</code>，也就是说，可以输入非数值型标记，只要区分出类别即可。</li><li><strong>注意：<code>fitcsvm</code>只支持二分类！</strong></li></ul><p><strong>输出：</strong></p><ul><li>ClassificationSVM对象</li></ul><h3 id="运行实例">1.2 运行实例</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; svmClassifier = fitcsvm(TrainData&#x27;,Labels)</span><br><span class="line"></span><br><span class="line">svmClassifier = </span><br><span class="line"></span><br><span class="line">  ClassificationSVM</span><br><span class="line">             ResponseName: <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">    CategoricalPredictors: []</span><br><span class="line">               ClassNames: [<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line">           ScoreTransform: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">          NumObservations: <span class="number">1140</span></span><br><span class="line">                    Alpha: [<span class="number">32</span>x1 double]</span><br><span class="line">                     Bias: <span class="number">-0.8187</span></span><br><span class="line">         KernelParameters: [<span class="number">1</span>x1 struct]</span><br><span class="line">           BoxConstraints: [<span class="number">1140</span>x1 double]</span><br><span class="line">          ConvergenceInfo: [<span class="number">1</span>x1 struct]</span><br><span class="line">          IsSupportVector: [<span class="number">1140</span>x1 logical]</span><br><span class="line">                   Solver: <span class="string">&#x27;SMO&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Properties, Methods</span><br><span class="line"></span><br><span class="line">&gt;&gt; </span><br></pre></td></tr></table></figure><hr /><h2 id="使用svm分类器实现预测分类">2 使用SVM分类器实现预测分类</h2><h3 id="predict函数">2.1 predict函数</h3><p>使用predict函数即可根据分类器，对输入的测试数据进行分类预测。</p><p><strong>输入：</strong></p><ul><li>分类器 <em>classifier</em></li><li>测试数据</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[labels, scores] = predict(svmClassifier&#123;<span class="built_in">i</span>&#125;, TestData&#x27;);</span><br></pre></td></tr></table></figure><ul><li><code>TestData(:,1:60)'</code>做了转置，使得一行一条数据，示例选取60条数据</li><li>输出的cls是一个60条类信息的60×1维度矩阵</li></ul><p><strong>输出：</strong></p><ul><li><p>分类结果</p><ul><li>维度，数据项数×1列</li></ul></li><li><p>分数 <em>score</em></p><ul><li><blockquote><p>The SVM classification score for classifying observation x is thesigned distance from x to the decision boundary ranging from -∞ to +∞. Apositive score for a class indicates that x is predicted to be in thatclass, a negative score indicates otherwise.</p><p>(Matlab Documentation)</p></blockquote></li><li><em>score</em>是输入点x到决策边界的有符号距离。也就是x(...)所在的高维度空间内，x点与分类超平面的有向距离。绝对值越大，说明离分类超平面越远，则更加属于对应类别。</li></ul></li></ul><h3 id="运行实例-1">2.2 运行实例</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; [labels, scores] = predict(svmClassifier, TestData(:,<span class="number">1</span>:<span class="number">5</span>)&#x27;)</span><br><span class="line"></span><br><span class="line">labels =</span><br><span class="line"></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line">     <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">scores =</span><br><span class="line"></span><br><span class="line">    <span class="number">4.1200</span>   <span class="number">-4.1200</span></span><br><span class="line">    <span class="number">3.9809</span>   <span class="number">-3.9809</span></span><br><span class="line">    <span class="number">2.5742</span>   <span class="number">-2.5742</span></span><br><span class="line">    <span class="number">3.0851</span>   <span class="number">-3.0851</span></span><br><span class="line">    <span class="number">2.2911</span>   <span class="number">-2.2911</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; </span><br></pre></td></tr></table></figure><ul><li><p>输出了1~5项数据的分类预测</p><ul><li>在我的测试例中，实际上都是判定1~5条数据不属于第38个标定类。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Matlab </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> SVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fitcknn - Matlab的kNN分类器</title>
      <link href="/posts/fitcknn-Matlab%E7%9A%84kNN%E5%88%86%E7%B1%BB%E5%99%A8/"/>
      <url>/posts/fitcknn-Matlab%E7%9A%84kNN%E5%88%86%E7%B1%BB%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>在Matlab下使用kNN (k近邻，k-NearestNeighbor)分类器实现数据分类预测。</p><span id="more"></span><h1 id="fitcknn---matlab的knn分类器">fitcknn - Matlab的kNN分类器</h1><h2 id="构造knn分类器">1 构造kNN分类器</h2><h3 id="fitcknn函数">1.1 fitcknn函数</h3><p>使用<strong>fitcknn</strong>函数即可<strong>构造</strong><strong><em>(construct)</em></strong> kNN分类器。</p><p><strong>输入：</strong></p><ul><li>分类集数据</li><li>分类集标记</li><li>参数表<ul><li>属性 <em>key</em></li><li>参数 <em>value</em></li></ul></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kNNClassifier = fitcknn(TrainData&#x27;, TrainLabels&#x27;, <span class="string">&#x27;NumNeighbors&#x27;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li><code>TrainData</code>和<code>TrainLabels</code>，是我分离出的训练集数据，此处做了矩阵转置，因为MatLab的fitcknn函数接收的参数是一行一条数据，一列一个特征维度的。<ul><li>具体地，<code>TrainData</code>是一个1024×1140double的数据集，原始数据的结构是每列一条数据，每条数据有1024个特征（feature）。</li><li><code>TrainLabels</code>是一个1×1140double的数据集，原始数据的结构是每列一个标记，与TrainData一一对应，实现标定。</li></ul></li><li>实际上，<code>fitcknn</code>将<code>TrainLabels</code>识别为<code>ClassNames</code>，也就是说，可以输入非数值型标记，只要区分出类别即可。</li></ul><p><strong>输出：</strong></p><ul><li>ClassificationKNN对象</li></ul><h3 id="运行实例">1.2 运行实例</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; kNNClassifier = fitcknn(TrainData&#x27;, TrainLabels&#x27;, <span class="string">&#x27;NumNeighbors&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">kNNClassifier = </span><br><span class="line"></span><br><span class="line">  ClassificationKNN</span><br><span class="line">             ResponseName: <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">    CategoricalPredictors: []</span><br><span class="line">               ClassNames: [<span class="number">1</span>x38 double]</span><br><span class="line">           ScoreTransform: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">          NumObservations: <span class="number">1140</span></span><br><span class="line">                 Distance: <span class="string">&#x27;euclidean&#x27;</span></span><br><span class="line">             NumNeighbors: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Properties, Methods</span><br><span class="line">  </span><br><span class="line">&gt;&gt;</span><br></pre></td></tr></table></figure><ul><li>此例设置<code>NumNeighbors</code>属性为1，即kNN的k值为1，取1近邻。</li></ul><hr /><h2 id="使用knn分类器实现预测分类">2 使用kNN分类器实现预测分类</h2><h3 id="predict函数">2.1 predict函数</h3><p>使用predict函数即可根据分类器，对输入的测试数据进行分类预测。</p><p><strong>输入：</strong></p><ul><li>分类器 <em>classifier</em></li><li>测试数据</li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cls = predict(kNNClassifier, TestData(:,<span class="number">1</span>:<span class="number">60</span>)&#x27;)</span><br></pre></td></tr></table></figure><ul><li><code>TestData(:,1:60)'</code>做了转置，使得一行一条数据，示例选取60条数据</li><li>输出的cls是一个60条类信息的60×1维度矩阵</li></ul><p><strong>输出：</strong></p><ul><li>分类结果<ul><li>维度，数据项数×1列</li></ul></li></ul><h3 id="运行实例-1">2.2 运行实例</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; cls = predict(kNNClassifier, TestData(:,<span class="number">1</span>:<span class="number">60</span>)&#x27;)</span><br><span class="line"></span><br><span class="line">cls =</span><br><span class="line"></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">3</span></span><br><span class="line">    <span class="number">34</span></span><br><span class="line">    <span class="number">36</span></span><br><span class="line">    <span class="number">36</span></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">    <span class="number">37</span></span><br><span class="line">     <span class="number">1</span></span><br><span class="line">    <span class="number">30</span></span><br><span class="line">     <span class="number">4</span></span><br><span class="line">     <span class="number">4</span></span><br><span class="line">     <span class="number">4</span></span><br><span class="line">     <span class="number">4</span></span><br><span class="line">    <span class="number">30</span></span><br><span class="line">     <span class="number">4</span></span><br><span class="line">     <span class="number">4</span></span><br><span class="line">     <span class="number">4</span></span><br><span class="line">     <span class="number">4</span></span><br><span class="line">    <span class="number">10</span></span><br><span class="line">    <span class="number">10</span></span><br><span class="line">    <span class="number">10</span></span><br><span class="line">    <span class="number">10</span></span><br><span class="line">    <span class="number">10</span></span><br><span class="line">    <span class="number">10</span></span><br><span class="line">    <span class="number">36</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">    <span class="number">34</span></span><br><span class="line">    <span class="number">36</span></span><br><span class="line">    <span class="number">36</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">    <span class="number">33</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">    <span class="number">33</span></span><br><span class="line">     <span class="number">2</span></span><br><span class="line">     <span class="number">4</span></span><br><span class="line">    <span class="number">33</span></span><br><span class="line">     <span class="number">4</span></span><br><span class="line">    <span class="number">28</span></span><br><span class="line"></span><br><span class="line">&gt;&gt; </span><br></pre></td></tr></table></figure><ul><li>输出了60项数据的分类预测<ul><li>可以看到，预测效果尚可，有一定的预测能力。</li><li>考虑到我是用了较高维度的数据（1024维），且仅做简单实验测试之用，k值限制在了1近邻，错误预测较多也在意料之中。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Matlab </tag>
            
            <tag> kNN </tag>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web.config - IIS下的反向代理</title>
      <link href="/posts/web-config-IIS%E4%B8%8B%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>/posts/web-config-IIS%E4%B8%8B%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>实现IIS环境下，对seafile服务器的反向代理。</p><span id="more"></span><h1 id="web.config---iis下的反向代理">web.config - IIS下的反向代理</h1><h2 id="问题由来">1 问题由来</h2><p>从CentOS迁移到了Windows Server，网站服务器也从Nginx换到了IIS。</p><p>简单的网站设置，IIS十分简单，而且逻辑清晰，但涉及到地址重写，如：Seafile服务器分别工作在8000和8082端口。要针对Seafile服务服务器建立站点就有些困难，而且Seafile官方文档对WindowsServer的介绍很少，只有基本的环境搭建，没有介绍如何在IIS下进行域名绑定等配置。</p><hr /><h2 id="iis环境配置">2 IIS环境配置</h2><p>首先，实现IIS的地址重写需要在IIS中安装<strong>ARR</strong>和<strong>URL重写</strong>模块。这两个模块在IIS8中不再是默认安装的，也无法从添加或启用Windows功能中获取。需要自己去微软的网站上下载。我使用了微软的产品在线下载器（MicrosoftWeb Platform Installer）进行搜索和下载。</p><blockquote><p><ahref="https://www.microsoft.com/web/downloads/platform.aspx">MicrosoftWeb Platform Installer</a></p></blockquote><hr /><h2 id="url地址重写">3 URL地址重写</h2><h3 id="iis管理器内添加规则">3.1 IIS管理器内添加规则</h3><p>使用WindowsServer端的IIS管理程序，首先开启ARR，然后再到对应站点中的<strong>URL重写</strong>模块中去设置入站规则，输入识别入站URL的正则表达式，并编写重写地址。</p><p>由于有GUI向导，比起纯手写配置文件还是明显易用，逻辑清晰的。</p><blockquote><p><ahref="http://blog.csdn.net/yuanguozhengjust/article/details/23576033">IIS上的反向代理- CSDN</a></p></blockquote><p>在IIS管理器中设置生成的规则实际上也是在站点的Web目录下生成一个<code>web.config</code>文件。</p><h3 id="编写web.config配置文件">3.2 编写web.config配置文件</h3><p>直接操作<code>web.config</code>文件可以实现更细致的配置内容。</p><p>但网上关于web.config的编写说明少之又少，微软官方MSDN中也没有足够细致到可以阅读文档进行编写的程度。（当然也可能是我没找到）</p><p>找到一个老外的博客倒是写了一份基于IIS的Seafile服务器的地址重写：</p><blockquote><p><ahref="https://www.weavweb.net/2015/06/07/seafile-https-sync-on-windows-server-2012r2-step-by-step/">SeafileHTTPS Install on Windows Server 2012 R2; Step-by-Step</a></p></blockquote><p>不过老外给出的案例文档有些问题，估计是手误，也可能是没在真实环境中测试过，有些小瑕疵，如：有一处<code>&lt;/rule&gt;</code>写成了<code>&lt;/rules&gt;</code>，会导致服务器报错，无法正确解析。</p><p>以下是我修改后，且测试成功的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> <span class="attr">overrideMode</span>=<span class="string">&quot;Deny&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">security</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">requestFiltering</span> <span class="attr">allowDoubleEscaping</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">security</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rewrite</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">clear</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;Redirect to HTTPS&quot;</span> <span class="attr">enabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">stopProcessing</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">&quot;(.*)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">conditions</span> <span class="attr">logicalGrouping</span>=<span class="string">&quot;MatchAll&quot;</span> <span class="attr">trackAllCaptures</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;&#123;HTTPS&#125;&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^OFF$&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">conditions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">&quot;Redirect&quot;</span> <span class="attr">url</span>=<span class="string">&quot;https://&#123;HTTP_HOST&#125;/&#123;R:1&#125;&quot;</span> <span class="attr">redirectType</span>=<span class="string">&quot;Permanent&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;seafilehttp&quot;</span> <span class="attr">stopProcessing</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">&quot;seafhttp/(.*)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">conditions</span> <span class="attr">logicalGrouping</span>=<span class="string">&quot;MatchAll&quot;</span> <span class="attr">trackAllCaptures</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">&quot;Rewrite&quot;</span> <span class="attr">url</span>=<span class="string">&quot;http://127.0.0.1:8082/&#123;R:1&#125;&quot;</span> <span class="attr">appendQueryString</span>=<span class="string">&quot;true&quot;</span> <span class="attr">logRewrittenUrl</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;seafile&quot;</span> <span class="attr">enabled</span>=<span class="string">&quot;true&quot;</span> <span class="attr">stopProcessing</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">&quot;(.*)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">conditions</span> <span class="attr">logicalGrouping</span>=<span class="string">&quot;MatchAll&quot;</span> <span class="attr">trackAllCaptures</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">&quot;Rewrite&quot;</span> <span class="attr">url</span>=<span class="string">&quot;http://127.0.0.1:8000/&#123;R:1&#125;&quot;</span> <span class="attr">appendQueryString</span>=<span class="string">&quot;true&quot;</span> <span class="attr">logRewrittenUrl</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rule</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outboundRules</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">preConditions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">preCondition</span> <span class="attr">name</span>=<span class="string">&quot;ResponseIsHtml1&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">add</span> <span class="attr">input</span>=<span class="string">&quot;&#123;RESPONSE_CONTENT_TYPE&#125;&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;^text/html&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">preCondition</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">preConditions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">outboundRules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rewrite</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">httpErrors</span> <span class="attr">errorMode</span>=<span class="string">&quot;DetailedLocalOnly&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据我查到的资料和理解，做一些补充解释：</p><ul><li><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</code><ul><li>第一行注释形式的文件说明是xml的编写格式规范，以便机器识别</li></ul></li><li><code>web.config</code>文件内容从<code>&lt;configuration&gt;</code>开始，诸如<code>&lt;rewrite&gt;</code>之类的规则包含在<code>&lt;system.webServer&gt;</code>标签内</li><li><code>condition</code> 就是IIS管理器中<code>URL重写</code>里<strong>编辑入站规则</strong> 的 <strong>条件</strong> 选项</li><li><code>&lt;action&gt;</code>中的url就是地址重写的重写目标，即从入站时被正则表达式匹配的是源地址，而重写过后即为此处的目的地址。<ul><li><code>&#123;R:1&#125;</code> 表示入站时，域名后面的参数</li></ul></li></ul><hr /><h2 id="url重写与seafile服务器">4 URL重写与Seafile服务器</h2><h3 id="nginx环境">4.1 Nginx环境</h3><p>之前在CentOS上使用的是Nginx通过FastCGI转发seahub网站页面的请求到127.0.0.1的8000端口。</p><p>此时的8000端口是不能直接访问的。</p><h3 id="iis环境">4.2 IIS环境</h3><p>IIS的CGI模块中我没找到如何实现将请求转发到本地端口，只找到了使用本地的可执行文件去处理特定请求。</p><p>由于缺少Seafile官方技术文档的支持，我摸索下来的解决方案是WindowsServer下则通过IIS的<strong>URL重写</strong>实现将用户的入站请求重写后，转发到Seafile位于8000端口的网站服务器和位于8082端口的文件服务器。</p><p>也就是说，此时的8000端口是一个独立运作的网站，是可以直接访问的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Deploy </tag>
            
            <tag> IIS </tag>
            
            <tag> Reverse Proxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kindle联网问题分析</title>
      <link href="/posts/Kindle%E8%81%94%E7%BD%91%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"/>
      <url>/posts/Kindle%E8%81%94%E7%BD%91%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>WIFI_NO_NET_PROBE标记(Flag)的实际原理。</p><span id="more"></span><p>查到了一篇分析：</p><blockquote><p><a href="http://blog.chinaunix.net/uid-25906175-id-3444878.html">使Kindle Touch 连接无线接入点时跳过验证 - ChinaUnix</a></p></blockquote><p>摘录如下：</p><p>众所周知，KT在连接某个无线接入点时，会验证该接入点是否可以连上互联网。 这样，KT便不能连接那些需要通过网页登录的接入点了，比如很多高校里的校园网接入点。</p><p>今天在 KT的系统里闲逛，发现了很多有趣的文件，其中有个正好是关于无线网的，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/upstart/wifid.conf</span><br><span class="line">...</span><br><span class="line">script</span><br><span class="line">  # If the WIFI_NO_NET_PROBE flag file is present in the userstore,</span><br><span class="line">  # pass the \&#x27;-n\&#x27; option to wifid to disable network validation</span><br><span class="line">  # when connecting to an AP.</span><br><span class="line">  [ -e /mnt/us/WIFI_NO_NET_PROBE ] &amp;&amp; PARAMS=\&quot;$PARAMS -n\&quot; || true</span><br><span class="line"></span><br><span class="line">  exec wifid -f $PARAMS $ARGS</span><br><span class="line">end script</span><br></pre></td></tr></table></figure><p>也就是说，若是存在文件/mnt/us/WIFI_NO_NET_PROBE，则在连接无线网络时便不再验证该网络是否已接入互联网。</p><p>方法很简单，只需要在 KT 的盘符根目录下创建一个空文件名为WIFI_NO_NET_PROBE，然后重启 KT 即可。测试了一下，果然可行！现在终于可以拿着 KT在校园里四处游荡随意联网了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> Kindle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyinstaller - 将Python脚本打包成EXE</title>
      <link href="/posts/pyinstaller-%E5%B0%86Python%E8%84%9A%E6%9C%AC%E6%89%93%E5%8C%85%E6%88%90EXE/"/>
      <url>/posts/pyinstaller-%E5%B0%86Python%E8%84%9A%E6%9C%AC%E6%89%93%E5%8C%85%E6%88%90EXE/</url>
      
        <content type="html"><![CDATA[<p>将Python脚本打包成可执行文件，以EXE形式执行Python脚本。</p><span id="more"></span><h1 id="pyinstaller---将python脚本打包成exe">pyinstaller -将Python脚本打包成EXE</h1><h2 id="pyinstaller">1 pyinstaller</h2><h3 id="pyinstaller简介">1.1 pyinstaller简介</h3><p>pyinstaller同时支持python2.7和python3.3/3.4/3.5多个版本。</p><p>pyinstaller工作原理：</p><blockquote><p>PyInstaller reads a Python script written by you. It analyzes yourcode to discover every other module and library your script needs inorder to execute. Then it collects copies of all those files – includingthe active Python interpreter! – and puts them with your script in asingle folder, or optionally in a single executable file.</p></blockquote><p>Pyinstaller实现的是 <strong>打包(bundle)</strong>Python脚本及其依赖项，包括Python解释器，使其能在未安装Python的环境中运行。</p><ul><li><strong>注意：不是编译(compile)，是打包(bundle)！</strong><ul><li>pyinstaller打包后的EXE可执行文件，是有一个类似bootloader的文件，这个bootloader文件去加载启动该EXE包中的Python解释器，然后由这个解释器去解释Python脚本、处理动态链接库等Python运行的事情。</li><li>由于pyinstaller所做的实际上并不是将脚本文件做编译处理。pyinstaller只是连带解释器、依赖文件、链接库等资源打包。因此，pyinstaller生成的EXE可执行文件没有改变Python解释型语言的本质，也不会在运行速度上带来解释型到编译型的提升。充其量在链接、加载阶段，打包处理后的文件可能会因资源检索、IO传输量的减少，而缩短时间。但运行阶段不会有本质变化。</li><li>pyinstaller实际上是用于实现在未安装Python的环境下运行Python脚本。</li></ul></li></ul><blockquote><p><a href="http://www.pyinstaller.org/">pyinstaller.org</a></p></blockquote><h3 id="安装">1.2 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><h3 id="使用">1.3 使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F demo.py</span><br></pre></td></tr></table></figure><ul><li><code>-F</code> 选项表示打包成一个独立的可执行文件</li><li>打包完成后，可执行文件会出现在当前目录下的<code>dist</code>目录中。<ul><li>注意不是<code>build</code>目录</li></ul></li></ul><p>详细信息参考：</p><blockquote><p><ahref="https://pyinstaller.readthedocs.io/en/stable/usage.html">UsingPyInstaller - Pyinstaller Docs</a></p></blockquote><hr /><h2 id="pyinstaller处理requests包的问题">2pyinstaller处理requests包的问题</h2><h3 id="情况">2.1 情况</h3><p>我的<code>SudaLogin.py</code>脚本中，处理网络编程的部分使用了<code>requests</code>包，经测试，pyinstaller在处理requests包时，生成的EXE无法正确执行。</p><p>执行时会报错：</p><ul><li>No module named 'queue'</li><li>No module named 'urllib3'</li></ul><p>urllib3通过pip安装一个即可消除报错。问题是queue。</p><h3 id="分析">2.2 分析</h3><p>我在stackoverflow上查到了相关讨论：</p><blockquote><p><ahref="http://stackoverflow.com/questions/36400111/pyinstaller-doesnt-import-queue">PyInstallerdoesn't import Queue - stackoverflow</a></p></blockquote><p>摘选：</p><blockquote><p>I don't think this is a PyInstaller or Twisted related issue at all.The <code>Queue</code> module is part of the standard library, and theissue is how you're naming it. In Python 2, it's <code>Queue</code> witha capital letter, but in Python 3, it's renamed <code>queue</code> tofollow the more standard naming convention where modules have lowercasenames.</p><p>Your script seems like it's a port of Python 2 code to Python 3 (thusthe <code>as Queue</code> part of the <code>import</code>), but you'rerunning it with Python 2 still. That may fail in other more subtle waysthan just the <code>Queue</code> import being wrong (e.g. its Unicodehandling may be all wrong).</p></blockquote><ul><li>结合报错信息，就是说<code>urllib3/packages/six.py</code>中使用了的queue包在Python历史上有两个命名，Python2时代的<code>Queue</code>和Python3时代的<code>queue</code>。命名上的变迁导致pyinstaller无法确切地解析queue包。</li></ul><p>更详细的讨论：</p><blockquote><p><ahref="https://github.com/pyinstaller/pyinstaller/issues/1935">Neededmodules are not collected on windows becasue of names with differentcase are treated the same #1935 - GitHub</a></p></blockquote><h3 id="解决">2.3 解决</h3><p>解决方法：</p><ul><li>使用<code>--hidden-import</code>选项即可</li></ul><p>经测试，打包时，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F --hidden-import=queue SudaLogin.py</span><br></pre></td></tr></table></figure><ul><li>此后输出的可执行程序可以正常运行了！</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> pyinstaller </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux内核模块调用</title>
      <link href="/posts/Linux%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E8%B0%83%E7%94%A8/"/>
      <url>/posts/Linux%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>做reverse内核模块测试时，用C语言写个小程序进行内核模块调用，一点记录。</p><span id="more"></span><h1 id="linux内核模块调用">Linux内核模块调用</h1><h2 id="reverse模块">1 reverse模块</h2><p>reverse模块解析 译文：</p><blockquote><p><ahref="http://blog.jobbole.com/72115/">编写属于你的第一个Linux内核模块</a></p></blockquote><p>源代码托管地址：</p><blockquote><p><a href="https://github.com/vsinitsyn/reverse">vsinitsyn/reverse -GitHub</a></p></blockquote><hr /><h2 id="c程序实现内核模块调用">2 C程序实现内核模块调用</h2><h3 id="c代码">2.1 C代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fd = open(\<span class="string">&quot;/dev/reverse\&quot;, O_RDWR);</span></span><br><span class="line"><span class="string">    write(fd, argv[1], strlen(argv[1]));</span></span><br><span class="line"><span class="string">    read(fd, argv[1], strlen(argv[1]));</span></span><br><span class="line"><span class="string">    printf(\&quot;Read: %s\\n\&quot;, argv[1]);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;sys/stat.h&gt;</code>和<code>fcntl.h</code>是open函数及参数O_RDWR依赖的头文件</li><li>内核模块的调用类似于对文件进行读写，write函数写入内核模块数据缓冲区，read函数再从缓冲区读取数据。而读取出的数据，是经过内核模块处理之后的。</li></ul><h3 id="shell下测试">2.2 Shell下测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gcc testReverse.c -o testRe</span><br><span class="line">$ sudo ./testRe \<span class="string">&#x27;A quick brown fox jumped over the lazy dog\&#x27;</span></span><br><span class="line">Read: dog lazy the over jumped fox brown quick A</span><br></pre></td></tr></table></figure><ul><li>注意：调用内核模块的C程序需要<code>sudo</code>使用<code>root</code>权限执行。<ul><li>经测试，无<code>root</code>权限则调用无效，字符串以原样返回。</li></ul></li></ul><h3 id="内核模块相关命令">2.3 内核模块相关命令</h3><ul><li><code>insmod &lt;mod_name&gt;</code><ul><li>install module</li></ul></li><li><code>rmmod &lt;mod_name&gt;</code><ul><li>remove module</li></ul></li><li><code>lsmod</code><ul><li>list module</li><li><code>lsmod | grep reverse</code></li></ul></li><li><code>dmesg</code><ul><li>print or control the kernel ring buffer</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>seafile - 搭建高安全性的私有云存储</title>
      <link href="/posts/seafile-%E6%90%AD%E5%BB%BA%E9%AB%98%E5%AE%89%E5%85%A8%E6%80%A7%E7%9A%84%E7%A7%81%E6%9C%89%E4%BA%91%E5%AD%98%E5%82%A8/"/>
      <url>/posts/seafile-%E6%90%AD%E5%BB%BA%E9%AB%98%E5%AE%89%E5%85%A8%E6%80%A7%E7%9A%84%E7%A7%81%E6%9C%89%E4%BA%91%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p>FTP行将就木，互联网云盘也不再可靠。最近比较了nextCloud和seafile，最后决定使用seafile搭建了一个私有云存储服务器。随手记录，以备不时之需。</p><span id="more"></span><h1 id="seafile---搭建高安全性的私有云存储">seafile -搭建高安全性的私有云存储</h1><h2 id="seafile">1 Seafile</h2><h3 id="特点">1.1 特点</h3><p>云存储的共有功能，如：多设备访问，数据同步备份等，就不再赘述。</p><p>我看中Seafile的两大特点：</p><ul><li>主要由C语言编写，预编译。实时性能较owncloud,nextcloud这些用PHP编写的会更好。</li><li>服务器端的切片及加密存储，而owncloud和nextcloud，是原文件原路径存储在服务器端。</li></ul><h3 id="链接">1.2 链接</h3><p>官方网站：</p><blockquote><p><a href="https://www.seafile.com">Seafile -开源的企业私有网盘</a></p></blockquote><p>在线体验：</p><blockquote><p><a href="https://demo.seafile.top/demo">Seafile Demo 站点</a></p></blockquote><h3 id="文档">1.3 文档</h3><p>Seafile服务器的技术文档整理齐全，从初步的配置安装，到进阶的后期管理，如：开机启动，应有尽有，参考官方文档即可。</p><blockquote><p><ahref="https://manual-cn.seafile.com/deploy/https_with_nginx.html">Seafile服务器手册中文版</a></p></blockquote><p>基本的步骤完成后，即可访问seahub页面（8000端口）</p><hr /><h2 id="基于nginx部署新站点">2 基于Nginx部署新站点</h2><p>原有的8000端口访问是直接访问服务器的8000端口，而不是正常的HTTP/HTTPS（80/443端口）访问方式。</p><p>如果要实现更加简单且自然的访问方式，需要通过网站服务器，我使用了Nginx，通过fastcgi转发，将80/443端口的HTTP/HTTPS请求进行过滤：</p><ul><li>seahub页面请求通过fastcgi转发至seahub服务进程所监听的8000端口；</li><li>seafile文件传输请求代理至seafile服务进程所监听的8082端口；</li><li><code>/media</code>目录下的页面资源文件请求定位至<code>seafile-server-latest/seahub</code>即可；</li></ul><p>这部分官方文档有较为规范的配置Demo，稍作修改进行适配即可。</p><hr /><h2 id="https---传输加密">3 HTTPS - 传输加密</h2><p>原来的TrustAsia RSADV证书只支持基本域名，对拓展域名无能为力，无法有效用在自定义子域名<code>seafile.heary.cn</code>上，这里我选用了Let'sEncrypt签发新证书。</p><h3 id="lets-encrypt">3.1 Let's Encrypt</h3><p>官方网站</p><blockquote><p><a href="https://letsencrypt.org/">Let's Encrypt</a></p></blockquote><h3 id="cerbot">3.2 Cerbot</h3><p>Certbot是用于Linux Shell/Terminal环境下的密钥及证书签发工具。</p><p>Nginx CentOS7环境下的Certbot的官方操作文档如下：</p><blockquote><p><a href="https://certbot.eff.org/#centosrhel7-nginx">Nginx onCentOS/RHEL 7 - Certbot</a></p></blockquote><h3 id="参考">3.3 参考</h3><p>值得参考的一篇详细指南：</p><blockquote><p><a href="https://ksmx.me/letsencrypt-ssl-https/">Let's Encrypt给网站加 HTTPS 完全指南 - ksmx.me</a></p></blockquote><p>生成安全可靠的网站服务器conf，Mozilla提供：</p><blockquote><p><ahref="https://mozilla.github.io/server-side-tls/ssl-config-generator/">MozillaSSL Configuration Generator</a></p></blockquote><p>通过查验及模拟攻击评估站点SSL的安全性：</p><blockquote><p><a href="https://www.ssllabs.com/ssltest/index.html">SSL Server Test- Qualys SSL Labs</a></p></blockquote><h3 id="成果">3.4 成果</h3><p>边做边琢磨，弄了一下午，遇到一系列的奇奇怪怪的问题，不过好在都解决了。</p><p>根据新学到的方法，又顺手改造了下主站点的服务器配置文件。</p><p>经测试，都从B-达到了<strong>A+</strong>级别的高安全评级。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Deploy </tag>
            
            <tag> seafile </tag>
            
            <tag> Storage </tag>
            
            <tag> Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP笔记</title>
      <link href="/posts/PHP%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/PHP%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>自学PHP，整理一些笔记</p><span id="more"></span><h1 id="php笔记">PHP笔记</h1><h2 id="概念">1 概念</h2><h3 id="定义">1.1 定义</h3><p>PHP（外文名:PHP: HypertextPreproce+ssor，中文名：“超文本预处理器”）是一种通用开源脚本语言。</p><h3 id="特点">1.2 特点</h3><ul><li>语法吸收了C语言、Java和Perl的特点，利于学习，使用广泛，主要适用于Web开发领域。PHP独特的语法混合了C、Java、Perl以及PHP自创的语法。它可以比CGI或者Perl更快速地执行动态网页。</li><li>用PHP做出的动态页面与其他的编程语言相比，PHP是将程序嵌入到HTML（标准通用标记语言下的一个应用）文档中去执行，执行效率比完全生成HTML标记的CGI要高许多；</li><li>PHP还可以执行编译后代码，编译可以达到加密和优化代码运行，使代码运行更快。</li></ul><hr /><h2 id="基础">2 基础</h2><h3 id="php标记">2.1 PHP标记</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line">  <span class="keyword">echo</span> \<span class="string">&quot;Hello, World!\&quot;  </span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>PHP使用<code>&lt;? &gt;</code>标记PHP语句块</li></ul><h3 id="注释">2.2 注释</h3><h4 id="行注释">2.2.1 行注释</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 行注释</span></span><br><span class="line"><span class="comment"># 行注释2.2.2</span></span><br></pre></td></tr></table></figure><h4 id="块注释">2.2.2 块注释</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  块注释，行1</span></span><br><span class="line"><span class="comment">  块注释，行2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="变量">2.3 变量</h3><h4 id="定义与调用">2.3.1 定义与调用</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span>=\<span class="string">&quot;hello\&quot;;</span></span><br><span class="line"><span class="string">echo \&quot;<span class="subst">$str</span>\&quot;.\&quot; world\&quot;    // 单点.表示字符串连接</span></span><br></pre></td></tr></table></figure><h4 id="可变变量">2.3.2 可变变量</h4><p>PHP中的变量名也可以是变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span>=\<span class="string">&quot;abc\&quot;;</span></span><br><span class="line"><span class="string">$<span class="subst">$i</span>=\&quot;xyz\&quot;;    // 此时，即 <span class="subst">$abc</span>=\&quot;xyz\&quot;</span></span><br></pre></td></tr></table></figure><h4 id="判断变量类型">2.3.3 判断变量类型</h4><ul><li><code>is_integer($var)</code></li><li><code>is_string($var)</code></li><li><code>is_double($var)</code></li><li><code>is_array($var)</code></li></ul><h4 id="读取变量类型">2.3.4 读取变量类型</h4><ul><li><code>gettype($var)</code></li></ul><h4 id="设置变量类型">2.3.5 设置变量类型</h4><ul><li><code>settype($var, \"string\")</code></li></ul><h4 id="判断变量是否定义">2.3.6 判断变量是否定义</h4><ul><li><code>isset($var)</code></li></ul><h4 id="删除变量">2.3.7 删除变量</h4><ul><li><code>unset($var)</code></li><li><code>unset($arr['...'])</code></li><li><code>unset($var1, $var2, ...)</code></li></ul><h4 id="预定义变量">2.3.8 预定义变量</h4><h5 id="globals">2.3.8.1 $GLOBALS[]</h5><p>全局范围有效</p><h5 id="server">2.3.8.2 $_SERVER[]</h5><ul><li><code>$_SERVER['PHP_SELF']</code><ul><li>当前脚本文件名</li></ul></li><li><code>$_SERVER['SERVER_ADD']</code><ul><li>服务器IP</li></ul></li><li><code>$_SERVER['SERVER_NAME']</code><ul><li>服务器主机名</li></ul></li><li><code>$_SERVER['DOCUMENT_ROOT']</code><ul><li>网页站点的服务器根目录</li></ul></li><li><code>$_SERVER['SCRIPT_FILENAME']</code><ul><li>当前脚本文件名</li></ul></li><li><code>$_SERVER['SCRIPT_NAME']</code><ul><li>当前脚本路径</li></ul></li><li><code>$_SERVER['HTTP_REFERER']</code><ul><li>上一页面，链接至当前页的URL</li></ul></li><li><code>$_SERVER['REQUEST_URI']</code><ul><li>访问此页面所需的URI</li></ul></li></ul><h5 id="http处理">2.3.8.3 HTTP处理</h5><ul><li><code>$_GET[]</code></li><li><code>$_POST[]</code></li><li><code>$_FILE[]</code></li><li><code>$_COOKIE[]</code></li></ul><h3 id="常量">2.4 常量</h3><h4 id="定义常量">2.4.1 定义常量</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(STR, \<span class="string">&quot;hello\&quot;);    // 字符串常量</span></span><br><span class="line"><span class="string">define(SIZE, 100);    // 数值常量</span></span><br></pre></td></tr></table></figure><h4 id="预定义常量">2.4.2 预定义常量</h4><ul><li><code>__FILE__</code><ul><li>当前PHP文件名</li></ul></li><li><code>__LINE__</code><ul><li>当前脚本执行行，行号</li></ul></li><li><code>PHP_OS</code></li><li><code>PHP_VERSION</code></li></ul><h3 id="逻辑结构">2.5 逻辑结构</h3><h4 id="if语句">2.5.1 if语句</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(...)</span><br><span class="line">&#123;</span><br><span class="line">  statements</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span>(...)</span><br><span class="line">&#123;</span><br><span class="line">  statements</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="switch语句">2.5.2 switch语句</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(<span class="variable">$var</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>: statements</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>: statements</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">default</span>: statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for语句">2.5.3 for语句</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">  statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="while语句">2.5.4 while语句</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(...)</span><br><span class="line">&#123;</span><br><span class="line">  statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="do-while语句">2.5.5 do-while语句</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">  statements</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(...)</span><br></pre></td></tr></table></figure><h3 id="函数">2.6 函数</h3><h4 id="自定义函数">2.6.1 自定义函数</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func_name</span>(<span class="params">params</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  statements</span><br><span class="line">  [<span class="keyword">return</span> <span class="variable">$param</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="系统函数">2.6.2 系统函数</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> </span><br><span class="line">  <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>输出php信息页</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">function_exists</span>(\<span class="string">&quot;fopen\&quot;);</span></span><br></pre></td></tr></table></figure><ul><li>判断名为fopen的函数是否存在</li></ul><h3 id="html与php交互">2.7 HTML与PHP交互</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">\</span>&quot;<span class="attr">form1</span>\&quot; <span class="attr">method</span>=<span class="string">\</span>&quot;<span class="attr">POST</span>\&quot; <span class="attr">action</span>=<span class="string">\</span>&quot;<span class="attr">form1.php</span>\&quot;&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">\</span>&quot;<span class="attr">user</span>\&quot; <span class="attr">type</span>=<span class="string">\</span>&quot;<span class="attr">text</span>\&quot;&gt;</span></span><br><span class="line">  ...more...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>html处显示表单，指定action为处理脚本</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;user&#x27;</span>];    <span class="comment">// 预定义变量__POST[&#x27;user&#x27;]存储POST报文传来的name为\&quot;user\&quot;的变量</span></span><br></pre></td></tr></table></figure><ul><li>php脚本通过PHP预定义变量读取传来的数据</li></ul><h3 id="会话-_session">2.8 会话 $_SESSION[]</h3><h4 id="概念-1">2.8.1 概念</h4><ul><li><strong>session</strong>：从用户访问到关闭浏览器期间存在的会话</li></ul><h4 id="使用">2.8.2 使用</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line">  <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">  <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]=<span class="string">&#x27;USER1&#x27;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>此变量在会话期间一直有效，可用于用户登录后，多个页面持续显示</li></ul><h3 id="文件-files">2.9 文件 $FILES[]</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">\</span>&quot;<span class="attr">myfile</span>\&quot; <span class="attr">type</span>=<span class="string">\</span>&quot;<span class="attr">file</span>\&quot; /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在HTML中POST文件</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span>=FILES[<span class="string">&#x27;myfile&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]    <span class="comment">// 获取文件名</span></span><br><span class="line"><span class="variable">$name</span>=FILES[<span class="string">&#x27;myfile&#x27;</span>][<span class="string">&#x27;type&#x27;</span>]    <span class="comment">// 获取类型</span></span><br><span class="line"><span class="variable">$name</span>=FILES[<span class="string">&#x27;myfile&#x27;</span>][<span class="string">&#x27;size&#x27;</span>]    <span class="comment">// 获取大小</span></span><br><span class="line"><span class="variable">$name</span>=FILES[<span class="string">&#x27;myfile&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]    <span class="comment">// 获取上传至服务器后的临时文件名</span></span><br><span class="line"><span class="variable">$name</span>=FILES[<span class="string">&#x27;myfile&#x27;</span>][<span class="string">&#x27;error&#x27;</span>]    <span class="comment">// 获取错误信息</span></span><br><span class="line">  </span><br><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$FILES</span>[<span class="string">&#x27;myfile&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$dest_filename</span>)    <span class="comment">// 将上传文件移动到指定的路径和文件名</span></span><br></pre></td></tr></table></figure><ul><li>在PHP中处理上传了的文件</li></ul><hr /><h2 id="数组-array">3 数组 array</h2><h3 id="定义与调用-1">3.1 定义与调用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="comment">// 用arr[0]~arr[2]调用</span></span><br></pre></td></tr></table></figure><ul><li>默认数字index</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="string">&#x27;server&#x27;</span>=&gt;\<span class="string">&quot;apache\&quot;, \&quot;os\&quot;=&gt;\&quot;windows\&quot;, \&quot;db\&quot;=\&quot;MySQL\&quot;);</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string"> arr[0~2]或arr[&#x27;server&#x27;]</span></span><br><span class="line"><span class="string">*/</span></span><br></pre></td></tr></table></figure><ul><li>自定义key-value映射</li></ul><h3 id="compact">3.2 compact</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$num</span>=<span class="number">1</span>;</span><br><span class="line"><span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="variable">$new_arr</span>=<span class="title function_ invoke__">compact</span>(\<span class="string">&quot;num\&quot;, \&quot;arr\&quot;);</span></span><br></pre></td></tr></table></figure><ul><li>compact合并变量为新数组</li></ul><h3 id="combine">3.3 combine</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$keys</span>=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="variable">$values</span>=(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="variable">$keyvalue_arr</span>=<span class="title function_ invoke__">combine</span>(<span class="variable">$keys</span>, <span class="variable">$values</span>);</span><br></pre></td></tr></table></figure><ul><li>combine合并<code>$key_arr</code>和<code>$value_arr</code>为新的键值对应数组</li></ul><h3 id="foreach">3.4 foreach</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$per_value</span>)</span><br><span class="line">&#123;</span><br><span class="line">  statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>遍历数组中的每一个值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$arr</span> <span class="keyword">as</span> <span class="variable">$key</span>=&gt;<span class="variable">$value</span>)</span><br><span class="line">&#123;</span><br><span class="line">  statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>遍历数组中的每一个键和对应的值</li></ul><h3 id="print_r">3.5 print_r</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> \<span class="string">&quot;&lt;pre&gt;\&quot;;</span></span><br><span class="line"><span class="string">print_r(<span class="subst">$arr</span>);</span></span><br></pre></td></tr></table></figure><ul><li>通常在print_r之前输出<code>&lt;pre&gt;</code>，HTML预解析，保留原格式。</li></ul><h3 id="count">3.6 count</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>); <span class="variable">$i</span>++)</span><br><span class="line">&#123;</span><br><span class="line">  statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>count()</code> 可以用在for循环中</li></ul><h3 id="array_chunk">3.7 array_chunk</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_chunk</span>(<span class="variable">$arr</span>, <span class="variable">$chunk_size</span>, <span class="variable">$preserve_key</span>);</span><br></pre></td></tr></table></figure><ul><li>将 <code>$arr</code>中的元素分为每<code>$chunk_size</code>个一组。</li></ul><h3 id="array_merge">3.8 array_merge</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_merge</span>(<span class="variable">$arr1</span>, <span class="variable">$arr2</span>, ...);</span><br></pre></td></tr></table></figure><ul><li>将多个array合并成一个array</li></ul><h3 id="current">3.9 current</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pos</span>=<span class="title function_ invoke__">current</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><ul><li>获取array的当前读写位置</li></ul><h3 id="next">3.10 next</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pos</span>=<span class="title function_ invoke__">next</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><ul><li>获取array读写位置的下一项，并移动读写指针到下一项</li></ul><h3 id="prev">3.11 prev</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pos</span>=<span class="title function_ invoke__">prev</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><ul><li>获取array读写位置的前一项，并移动读写指针到前一项</li></ul><h3 id="end">3.12 end</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pos</span>=<span class="title function_ invoke__">end</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><ul><li>获取array读写位置的最后一项，并移动读写指针到最后一项</li></ul><h3 id="reset">3.13 reset</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">reset</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><ul><li>重置array读写指针位置</li></ul><h3 id="sort">3.14 sort</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">sort</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><ul><li>对<code>$arr</code>执行排序（依据value排序，重建key(1,2,3,...)）</li></ul><h3 id="rsort">3.15 rsort</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">rsort</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><ul><li>对<code>$arr</code>执行逆向排序（依据value排序，重建key(1,2,3,...)）</li></ul><h3 id="asort">3.16 asort</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">asort</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><ul><li>对<code>$arr</code>执行排序（依据value排序，保留key-value映射）</li></ul><h3 id="ksort">3.17 ksort</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">ksort</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><ul><li>对<code>$arr</code>执行排序（依据key排序）</li></ul><h3 id="shuffle">3.18 shuffle</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">shuffle</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><ul><li>对<code>$arr</code>执行乱序排序（且重建key）</li></ul><h3 id="array_reverse">3.19 array_reverse</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_reverse</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><ul><li>对<code>$arr</code>执行倒序排序（且重建key）</li></ul><h3 id="range">3.20 range</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span>=<span class="title function_ invoke__">range</span>(<span class="variable">$low</span>, <span class="variable">$high</span>[, <span class="variable">$step</span>]);</span><br></pre></td></tr></table></figure><ul><li>根据范围建立array，建立从低到高（步长默认为1）的<code>$arr</code></li></ul><h3 id="array_push">3.21 array_push</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_push</span>(<span class="variable">$arr</span>, <span class="variable">$var</span>);</span><br></pre></td></tr></table></figure><h3 id="array_pop">3.22 array_pop</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_pop</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><h3 id="array_change_key_case">3.23 array_change_key_case</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_change_key_case</span>(<span class="variable">$arr</span>, CASE_UPPER/CASE_LOWER);</span><br></pre></td></tr></table></figure><ul><li>包含key，转换到全大写/小写</li></ul><h3 id="array_intersect">3.24 array_intersect</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_intersect</span>(<span class="variable">$arr1</span>, <span class="variable">$arr2</span>, ...);</span><br></pre></td></tr></table></figure><ul><li>求交集 A1∩A2∩...</li></ul><h3 id="array_diff">3.25 array_diff</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_diff</span>(<span class="variable">$arr1</span>, <span class="variable">$arr2</span>, ...);</span><br></pre></td></tr></table></figure><ul><li>求差集 A1-A2-...</li></ul><h3 id="array_diff_assoc">3.26 array_diff_assoc</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_diff_assoc</span>(<span class="variable">$arr1</span>, <span class="variable">$arr2</span>, ...);</span><br></pre></td></tr></table></figure><ul><li>求差集 A1-A2-...<ul><li>注意：<code>assoc</code> 表示把key值也计入比较</li></ul></li></ul><h3 id="array_flip">3.27 array_flip</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fliped_arr</span>=<span class="title function_ invoke__">array_flip</span>(<span class="variable">$arr1</span>);</span><br></pre></td></tr></table></figure><ul><li>key-value对换</li></ul><h3 id="array_fill">3.28 array_fill</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span>=<span class="title function_ invoke__">array_fill</span>(<span class="variable">$start_idx</span>, <span class="variable">$count</span>, <span class="variable">$fillvalue</span>);</span><br></pre></td></tr></table></figure><ul><li>从<code>start_idx</code>开始，用<code>$fillvalue</code>填充<code>$count</code>个元素</li></ul><h3 id="array_count_values">3.29 array_count_values</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$count</span>=<span class="title function_ invoke__">array_count_values</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><ul><li>array中value种类个数</li></ul><h3 id="array_key_exists">3.30 array_key_exists</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$bool</span>=<span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$key</span>, <span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><ul><li><code>$arr</code>中是否存在<code>$key</code></li></ul><h3 id="array_keys">3.31 array_keys</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$keys</span>=<span class="title function_ invoke__">array_keys</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><ul><li>输出array的keys</li></ul><h3 id="in_array">3.32 in_array</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$bool</span>=<span class="title function_ invoke__">in_array</span>(<span class="variable">$value</span>, <span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><ul><li>value是否在数组内</li></ul><h3 id="array_map">3.33 array_map</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">array_map</span>(\<span class="string">&quot;func_name\&quot;, <span class="subst">$arr</span>);</span></span><br></pre></td></tr></table></figure><ul><li>回调函数<code>func_name</code>，处理<code>$arr</code></li></ul><h3 id="key">3.34 key</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$key</span>=<span class="title function_ invoke__">key</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><ul><li>当前项的key</li></ul><hr /><h2 id="字符串-string">4 字符串 String</h2><h3 id="explode">4.1 explode</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span>=<span class="title function_ invoke__">explode</span>(<span class="variable">$seperator</span>, <span class="variable">$str</span>[, <span class="variable">$count</span>]);</span><br></pre></td></tr></table></figure><ul><li>分割符分割字符串，可以定义分几份为止</li></ul><h3 id="implode">4.2 implode</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span>=<span class="title function_ invoke__">implode</span>(<span class="variable">$seperator</span>, <span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><ul><li>合并<code>$arr</code>为<code>$str</code>， 并设置分隔符</li></ul><h3 id="strcmp">4.3 strcmp</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">strcmp</span>(<span class="variable">$str1</span>, <span class="variable">$str2</span>);</span><br></pre></td></tr></table></figure><ul><li>比较字符串</li></ul><h3 id="str_replace">4.4 str_replace</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">str_replace</span>(<span class="variable">$search</span>, <span class="variable">$replace</span>, <span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><ul><li>将<code>$str</code>的<code>$search</code>部分替换为<code>$replace</code>部分</li></ul><h3 id="print">4.5 print</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> <span class="variable">$str</span></span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><h3 id="sprintf">4.6 sprintf</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">sprintf</span>(<span class="variable">$format_str</span>, <span class="variable">$args</span>);</span><br></pre></td></tr></table></figure><ul><li><code>$format_str</code> 即包含<code>%d</code>,<code>%s</code>的格式化字符串</li></ul><h3 id="substr">4.7 substr</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">substr</span>(<span class="variable">$str</span>, <span class="variable">$start_idx</span>, <span class="variable">$args</span>);</span><br></pre></td></tr></table></figure><h3 id="ltrim">4.8 ltrim</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">ltrim</span>(<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><ul><li>从左向右清除空白符</li></ul><h3 id="rtrim">4.9 rtrim</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">rtrim</span>(<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><ul><li>从右向左清除空白符</li></ul><h3 id="trim">4.10 trim</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">trim</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="title function_ invoke__">trim</span>(<span class="variable">$str</span>， <span class="variable">$char</span>);</span><br></pre></td></tr></table></figure><ul><li>清除内容两侧的空白符</li></ul><h3 id="strlen">4.11 strlen</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$length</span>=<span class="title function_ invoke__">strlen</span>(<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><h3 id="strtolowerstrtoupper">4.12 strtolower/strtoupper</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">strtolower</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="title function_ invoke__">strtoupper</span>(<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><ul><li>大小写转换</li></ul><h3 id="htmlentities">4.13 htmlentities</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">htmlentities</span>(<span class="variable">$str</span>)</span><br></pre></td></tr></table></figure><ul><li>html编码</li></ul><h3 id="html_entity_decode">4.14 html_entity_decode</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">html_entity_decode</span>(<span class="variable">$str</span>)</span><br></pre></td></tr></table></figure><ul><li>html字符串解码</li></ul><h3 id="str_repeat">4.15 str_repeat</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$repeated_str</span>=<span class="title function_ invoke__">str_repeat</span>(<span class="variable">$str</span>, <span class="variable">$times</span>);</span><br></pre></td></tr></table></figure><ul><li>将<code>$str</code>重复多次生成新的字符串</li></ul><h3 id="parse_str">4.16 parse_str</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><ul><li>分析字符串，并生成相关变量</li></ul><h3 id="str_split">4.17 str_split</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">str_split</span>(<span class="variable">$str</span>, <span class="variable">$length</span>);</span><br></pre></td></tr></table></figure><ul><li>将<code>$str</code>切片分割，每片长度<code>$length</code></li></ul><h3 id="md5">4.18 md5</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">md5</span>(<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><h3 id="sha1">4.19 sha1</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">sha1</span>(<span class="variable">$str</span>);</span><br></pre></td></tr></table></figure><hr /><h2 id="日期及时间-datetime">5 日期及时间 Date&amp;Time</h2><h3 id="date">5.1 date</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$date_str</span>=<span class="title function_ invoke__">date</span>(<span class="variable">$format</span>[, <span class="variable">$timestamp</span>]);</span><br></pre></td></tr></table></figure><h3 id="mktime">5.2 mktime</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$timestamp</span>=<span class="title function_ invoke__">mktime</span>(<span class="variable">$hour</span>, <span class="variable">$minute</span>, <span class="variable">$second</span>, <span class="variable">$month</span>, <span class="variable">$day</span>, <span class="variable">$year</span>);</span><br></pre></td></tr></table></figure><h3 id="getdate">5.3 getdate</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span>=<span class="title function_ invoke__">getdate</span>([<span class="variable">$timestamp</span>]);</span><br></pre></td></tr></table></figure><h3 id="checkdate">5.4 checkdate</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">checkdate</span>(<span class="variable">$month</span>, <span class="variable">$day</span>, <span class="variable">$year</span>);</span><br></pre></td></tr></table></figure><ul><li>检查日期是否合法，如2月30日之类</li></ul><hr /><h2 id="文件及目录-filedir">6 文件及目录 File&amp;Dir</h2><h3 id="opendir">6.1 opendir</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dirhandle</span>=<span class="title function_ invoke__">opendir</span>(<span class="variable">$path</span>);</span><br></pre></td></tr></table></figure><ul><li>打开文件，返回值为句柄</li></ul><h3 id="closedir">6.2 closedir</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">closedir</span>(<span class="variable">$path</span>);</span><br></pre></td></tr></table></figure><h3 id="readdir">6.3 readdir</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$filename</span>=<span class="title function_ invoke__">readdir</span>(<span class="variable">$dirhandle</span>);</span><br></pre></td></tr></table></figure><ul><li>读取当前目录的下一项文件名，若无，则<code>false</code></li></ul><h3 id="scandir">6.4 scandir</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_list</span>=<span class="title function_ invoke__">scandir</span>(<span class="variable">$path</span>);</span><br></pre></td></tr></table></figure><h3 id="getcwd">6.5 getcwd</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">getcwd</span>();</span><br></pre></td></tr></table></figure><ul><li>取得当前工作目录(current working directory)</li></ul><h3 id="chdir">6.6 chdir</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="variable">$path</span>);</span><br></pre></td></tr></table></figure><ul><li>更改工作目录</li></ul><h3 id="mkdir">6.7 mkdir</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mkdir</span>(<span class="variable">$path</span>, <span class="variable">$mode</span>);</span><br></pre></td></tr></table></figure><h3 id="rmdir">6.8 rmdir</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">rmdir</span>(<span class="variable">$path</span>);</span><br></pre></td></tr></table></figure><h3 id="fopen">6.9 fopen</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$filehandle</span>=<span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="variable">$mod</span>);</span><br><span class="line"><span class="variable">$filehandle</span>=<span class="title function_ invoke__">fopen</span>(<span class="variable">$url</span>, <span class="variable">$mod</span>);</span><br></pre></td></tr></table></figure><h3 id="fclose">6.10 fclose</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$filehandle</span>);</span><br></pre></td></tr></table></figure><h3 id="feof">6.11 feof</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">feof</span>(<span class="variable">$filehandle</span>);</span><br></pre></td></tr></table></figure><h3 id="fgets">6.12 fgets</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$line</span>=<span class="title function_ invoke__">fgets</span>(<span class="variable">$filehandle</span>);</span><br><span class="line"><span class="variable">$line</span>=<span class="title function_ invoke__">fgets</span>(<span class="variable">$filehandle</span>, <span class="variable">$size</span>);</span><br></pre></td></tr></table></figure><ul><li>默认每次读取1024字节长度的一行</li></ul><p>另：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">readfile</span><br><span class="line">file</span><br><span class="line">get_file_contents</span><br></pre></td></tr></table></figure><h3 id="fwrite">6.13 fwrite</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$filehandle</span>, <span class="variable">$content</span>[, <span class="variable">$length</span>]);</span><br></pre></td></tr></table></figure><p>另：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fputs<span class="comment">// fwrite的别名</span></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><h3 id="filexxx">6.14 filexxx</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">fileowner</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="title function_ invoke__">filesize</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="title function_ invoke__">filetype</span>(<span class="variable">$filename</span>);</span><br></pre></td></tr></table></figure><h3 id="is_xxx">6.15 is_xxx</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">is_dir</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="title function_ invoke__">is_readable</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="title function_ invoke__">is_writeable</span>(<span class="variable">$filename</span>);</span><br></pre></td></tr></table></figure><h3 id="basename">6.16 basename</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span>=<span class="title function_ invoke__">basename</span>(<span class="variable">$path</span>);</span><br></pre></td></tr></table></figure><ul><li>从完整文件路径中读取文件名</li></ul><h3 id="dirname">6.17 dirname</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span>=<span class="title function_ invoke__">dirname</span>(<span class="variable">$path</span>);</span><br></pre></td></tr></table></figure><ul><li>从完整文件路径中读取目录部分（层级）</li></ul><h3 id="copy">6.18 copy</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">copy</span>(<span class="variable">$src</span>, <span class="variable">$dest</span>);</span><br></pre></td></tr></table></figure><h3 id="unlink">6.19 unlink</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">unlink</span>(<span class="variable">$filename</span>);</span><br></pre></td></tr></table></figure><ul><li>删除文件</li></ul><h3 id="rename">6.20 rename</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">rename</span>(<span class="variable">$oldname</span>, <span class="variable">$newname</span>)</span><br></pre></td></tr></table></figure><h3 id="chxxx">6.21 chxxx</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">chgrp</span>(<span class="variable">$filename</span>, <span class="variable">$grp</span>);</span><br><span class="line"><span class="title function_ invoke__">chmod</span>(<span class="variable">$filename</span>, <span class="variable">$mod</span>);</span><br><span class="line"><span class="title function_ invoke__">chown</span>(<span class="variable">$filename</span>, <span class="variable">$user</span>);</span><br></pre></td></tr></table></figure><h3 id="flock">6.22 flock</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">flock</span>(<span class="variable">$filehandle</span>, <span class="variable">$operation</span>);</span><br></pre></td></tr></table></figure><ul><li><code>$operation</code><ol type="1"><li><code>LOCK_SH</code> 读锁定，共享锁</li><li><code>LOCK_EX</code> 写锁定，互斥锁</li><li><code>LOCK_UN</code> 释放，解锁</li><li><code>LOCK_NB</code> 锁定时不阻塞</li></ol></li></ul><h3 id="filextime">6.23 filextime</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">fileatime</span>(<span class="variable">$filename</span>);  <span class="comment">// access time</span></span><br><span class="line"><span class="title function_ invoke__">filemtime</span>(<span class="variable">$filename</span>);  <span class="comment">// modified time</span></span><br><span class="line"><span class="title function_ invoke__">filectime</span>(<span class="variable">$filename</span>);  <span class="comment">// inode change time</span></span><br></pre></td></tr></table></figure><hr /><h2 id="http">7 HTTP</h2><h3 id="fopen-1">7.1 fopen</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$filehandle</span>=<span class="title function_ invoke__">fopen</span>(<span class="variable">$url</span>, <span class="variable">$mod</span>);</span><br></pre></td></tr></table></figure><h3 id="fgetss">7.2 fgetss</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span>=<span class="title function_ invoke__">fgetss</span>(<span class="variable">$url</span>, <span class="variable">$mod</span>);</span><br></pre></td></tr></table></figure><ul><li>读取网络文件一行，并过滤HTML和PHP标记</li></ul><h3 id="urlencodeurldecode">7.3 urlencode/urldecode</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$str=urlencode($str);// 非字母或数字的字符编码为 %+2位十六进制表示</span><br><span class="line">$str=urldecode($str);// 编码为可读url字符串</span><br></pre></td></tr></table></figure><h3 id="parse_url">7.4 parse_url</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br></pre></td></tr></table></figure><ul><li><code>$arr['key']</code><ul><li><code>key</code><ol type="1"><li><code>scheme</code></li><li><code>host</code></li><li><code>port</code></li><li><code>user</code></li><li><code>pass</code></li><li><code>path</code></li><li><code>query</code></li><li><code>fragment</code></li></ol></li></ul></li></ul><h3 id="header">7.5 header</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;key:value&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>修改HTTP头部</li><li>由<code>print_r($_SERVER)</code>可读取</li></ul><h3 id="setcookie">7.6 setcookie</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="variable">$name</span>[, <span class="variable">$value</span>, <span class="variable">$expire</span>, <span class="variable">$path</span>, <span class="variable">$domain</span>, <span class="variable">$secure</span>]);</span><br></pre></td></tr></table></figure><ul><li><code>expire</code> cookie生命值倒计时， 通常用<code>time()+n</code> 单位秒</li><li><code>$path</code> cookie的有效路径</li><li><code>$domain</code> cookie的有效域名</li><li><code>$secure</code> 是否当https时才有效</li></ul><p>读取时，可用 <code>$_COOKIE[$name]</code>读取</p><hr /><h2 id="系统信息">8 系统信息</h2><h3 id="getenv">8.1 getenv</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">getenv</span>(<span class="variable">$key</span>);</span><br></pre></td></tr></table></figure><ul><li><code>$key</code>：<ol type="1"><li><code>DOCUMENT_ROOT</code></li><li><code>SERVER_ROOT</code></li><li><code>SCRIPT_NAME</code></li><li><code>HTTP_USER_AGENT</code></li><li><code>REQUEST_METHOD</code></li><li><code>SERVER_PROTOCOL</code></li></ol></li></ul><h3 id="putenv">8.2 putenv</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">putenv</span>(\<span class="string">&quot;<span class="subst">$key</span>=<span class="subst">$value</span>\&quot;);</span></span><br></pre></td></tr></table></figure><h3 id="get_loaded_extensions">8.3 get_loaded_extensions</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span>=<span class="title function_ invoke__">get_loaded_extensions</span>();</span><br></pre></td></tr></table></figure><h3 id="get_extension_funcs">8.4 get_extension_funcs</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span>=<span class="title function_ invoke__">get_extension_funcs</span>(<span class="variable">$module</span>);</span><br></pre></td></tr></table></figure><h3 id="phpinfo">8.5 phpinfo</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">phpinfo</span>()</span><br></pre></td></tr></table></figure><h3 id="getmypid">8.6 getmypid</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">getmypid</span>();</span><br></pre></td></tr></table></figure><h3 id="get_current_user">8.7 get_current_user</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">get_current_user</span>();</span><br></pre></td></tr></table></figure><hr /><h2 id="数学">9 数学</h2><h3 id="计算">9.1 计算</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abs/floor/round/ceil/exp/pow/sqrt</span><br></pre></td></tr></table></figure><h3 id="转换">9.2 转换</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">decbin/dechex/decoct</span><br><span class="line">bindec/hexdec/octdec</span><br><span class="line">base_convert</span><br></pre></td></tr></table></figure><h3 id="随机数">9.3 随机数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mt_rand</span>(<span class="variable">$min</span>, <span class="variable">$max</span>);</span><br></pre></td></tr></table></figure><ul><li>另<code>rand()</code></li></ul><hr /><h2 id="数据库-mysql">10 数据库 MySQL</h2><h3 id="总例">10.1 总例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*建立连接*/</span></span><br><span class="line"><span class="variable">$conn</span>=<span class="title function_ invoke__">mysql_connect</span>(<span class="variable">$server</span>, <span class="variable">$user</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="keyword">if</span>(!conn)</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&#x27;no connection&#x27;</span>.<span class="title function_ invoke__">mysql_error</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*选中数据库*/</span></span><br><span class="line"><span class="title function_ invoke__">mysql_select_db</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*执行SQL语句*/</span></span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*获取，分析SQL执行结果*/</span></span><br><span class="line"><span class="variable">$row</span>=<span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>, MYSQL_ASSOC);<span class="comment">// MYSQL_ASSOC以索引关联</span></span><br><span class="line"><span class="variable">$row_count</span>=<span class="title function_ invoke__">mysql_num_rows</span>(<span class="variable">$result</span>);</span><br><span class="line"><span class="variable">$count</span>=<span class="title function_ invoke__">mysql_affected_rows</span>();</span><br><span class="line">fields=<span class="title function_ invoke__">mysql_fetch_field</span>();<span class="comment">// 获取域信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*关闭数据库连接*/</span></span><br><span class="line"><span class="title function_ invoke__">mysql_close</span>(<span class="variable">$conn</span>);</span><br></pre></td></tr></table></figure><hr /><h2 id="面向对象程序设计-oop">11 面向对象程序设计 OOP</h2><h3 id="总例-1">11.1 总例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义Person类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$name</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 构造函数 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>=<span class="literal">NULL</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$name</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 析构函数 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;destructing object&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;name=<span class="variable">$name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义Student类，继承Person类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$count</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$school</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$school</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">parent</span>::<span class="title function_ invoke__">__construct</span>(<span class="variable">$name</span>);</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;school=<span class="variable">$school</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setSchool</span>(<span class="params"><span class="variable">$school</span></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;school=school;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_ invoke__">getSchool</span>()</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;school;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* 静态成员函数专门处理静态变量 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">counts</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="built_in">self</span>::<span class="variable">$count</span>++;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getCount</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$count</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* OOP具体调用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">$stu</span>=<span class="title function_ invoke__">Student</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$stu</span>-&gt;<span class="title function_ invoke__">getName</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="magic-methods">11.2 Magic Methods</h3><p>类的特殊方法(function)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 对象的构造与析构 */</span></span><br><span class="line"><span class="title function_ invoke__">__construct</span>();</span><br><span class="line"><span class="title function_ invoke__">__destruct</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 取/置一个不存在的属性 */</span></span><br><span class="line"><span class="title function_ invoke__">__get</span>(<span class="variable">$name</span>);</span><br><span class="line"><span class="title function_ invoke__">__set</span>(<span class="variable">$name</span>, <span class="variable">$value</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 调用一个不存在的方法 */</span></span><br><span class="line"><span class="title function_ invoke__">__call</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对象内容转字符串 */</span></span><br><span class="line"><span class="title function_ invoke__">__tostring</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对象的clone方法 */</span></span><br><span class="line"><span class="title function_ invoke__">__clone</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 对象的clone使用方法 */</span></span><br><span class="line"><span class="variable">$obj</span>=<span class="keyword">new</span> <span class="title class_">Obj</span>;</span><br><span class="line"><span class="variable">$obj_cloned</span>=<span class="keyword">clone</span> <span class="variable">$obj</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux内核模块编程</title>
      <link href="/posts/Linux%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E7%BC%96%E7%A8%8B/"/>
      <url>/posts/Linux%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Linux内核模块编程[摘录]</p><span id="more"></span><blockquote><p>　原文地址: <ahref="https://www.hustyx.com/ubuntu/4/">Linux内核模块编程 -hustyx.com</a></p></blockquote><p>在任意一个地方创建一个hello.c文件，里面就写如下内容：</p><pre><code>/* hello.c */#include &lt;linux/init.h&gt;#include &lt;linux/module.h&gt;MODULE_LICENSE("Dual BSD/GPL");static int hello_init(void)&#123;     printk(KERN_ALERT "Hello, World\\n");     return 0;&#125;static int hello_exit(void)&#123;     printk(KERN_ALERT "Goodbye, cruel world\\n");&#125;module_init(hello_init);module_exit(hello_exit);</code></pre><p>这个模块什么也不干，只是在模块加载时打印一条信息，卸载时也打印一条信息。麻雀虽小，但五脏具全，MODULE_LICENSE()指明认证方式，现在支持的有：“GPL”“GPL v2" "GPL and additional rights" "Dual BSD/GPL" "Dual MIT/GPL" "DualMPL/GPL""Proprietary"，这是内核2.6里新添加的，实验发现它不是必需的。module_init()指明模块的入口，这是必需的；module_exit()指明模块的出口，这也是必需的。</p><p>编译使用make的扩展功能，在与hello.c同一目录下创建一个Makefile文件，内容如下：</p><pre><code>/* Makefile */TARGET=helloKDIR=/usr/src/linux-headers-2.6.31-19-genericPWD=$(shell pwd)obj-m:=$(TARGET).odefault:     make -C $(KDIR) M=$(PWD) modules</code></pre><p>其中TARGET指明了目标文件的名字，KDIR指明了引用头文件的位置，请根据具体情况修改该文件。不过有几点要说明，模块的编译需要有一个内核源码的目录结构，如果有内核源码当然更好，直接把KDIR改为源码的路径就OK了。当然只有一个内核目录结构也就可以了，毕竟需要的只是头文件，及一些编译脚本，在Linux各发行版的<code>/usr/src/</code>下是有这样一个目录结构的，比如我的系统为Ubuntu9.10，内核为2.6.31-19的通用版，在<code>/usr/src/</code>下就有linux-headers-2.6.31-19-generic这样一个目录。所以我使用<code>KDIR=/usr/src/linux-headers-2.6.31-19-generic</code>。其实还有一个目录名为linux-headers-2.6.31-19，而且你会发现linux-headers-2.6.31-19-generic里的大部分文件只是指向linux-headers-2.6.31-19的一些链接，不过linux-headers-2.6.31-19里面默认缺少一些编译模块所需要的文件，不要使用它。</p><p>接下来，你只要使用make命令，就可以进行编译了，make会为你处理好一切，它会根据KDIR找到编译所需要的文件。如果你运气好的话，你的当前目录下就会成生hello.ohello.mod.o hello.mod.c modules.order Module.markers Module.symvershello.ko，当然可爱的hello.ko就是我们想要的。到此你的模块已经成功生成了，接下来便可以加载这个模块看看效果了。</p><p>使用<code>insmod ./hello.ko</code>来加载模块，如果你遇到</p><pre><code>insmod: error inserting 'hello.o'  :-l invalid module format</code></pre><p>这样的错误，不用惊慌，并不是你的模块有问题，而是你当前运行的内核版本与你编译链接的头文件版本不一致，所以会出现格式不对的问题。此时，你可以更换系统内核，也可以下载一个与系统版本一致的内核源码重新编译该模块。如果你没有遇到任何问题，也没有打印出任何信息，那么恭喜你，你的内核加载成功了，你可以使用lsmod命令来罗列出当前你系统加载的所有模块，相信你在列表中会找到hello的。你可能会疑惑，为什么没有如我们想像中的那样，打印出"Hello,World"？呵呵，这是因为printk并不会把打印内容打印到你当面的终端，要知道模块是运行在内核态的，而你所能面对的是用户态，内核态的打印信息需要通过log或者dmesg命令来查看，想看到打印结果，最简单的方法是敲入dmesg命令，你就可以看到你所希望看到的信息了，同时，你也可以打开<code>/var/log/message</code>这个文件进行查看。</p><p>最后，使用rmmodhello来卸载模块，同样，使用dmesg可以看到打印出的"Goodbye, cruel world"。</p><p><strong>我的补充</strong>内核模块的退出函数应该是void型，经测试，有些内核比较严格，会检查报错！（如：Linuxkernel 4.8）</p>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Linux </tag>
            
            <tag> Kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7搭建LNMP环境</title>
      <link href="/posts/CentOS-7%E6%90%AD%E5%BB%BALNMP%E7%8E%AF%E5%A2%83/"/>
      <url>/posts/CentOS-7%E6%90%AD%E5%BB%BALNMP%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>CentOS 7搭建LNMP环境，一些注意点和区别，如：MariaDB</p><span id="more"></span><p>大部分操作，美团云知识库整理的很好。 &gt; <ahref="//mos.meituan.com/library/19/how-to-install-lnmp-on-centos6/">在CentOS6上搭建LNMP环境 - 美团云知识库</a></p><p>MySQL部分变天了，受Oracle影响，MySQL开源前景成疑。现CentOS正在过渡到MariaDB上，MariaDB是MySQL的分支，开源可靠。 &gt; <ahref="//www.cnblogs.com/starof/p/4680083.html">centos7mysql数据库安装和配置(MariaDB)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Deploy </tag>
            
            <tag> LNMP </tag>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN部署笔记</title>
      <link href="/posts/CDN%E9%83%A8%E7%BD%B2%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/CDN%E9%83%A8%E7%BD%B2%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>开通并部署了CDN，记录一些过程中遇到的问题和解决方法。</p><span id="more"></span><h1 id="cdn部署笔记">CDN部署笔记</h1><h2 id="cdn">1 CDN</h2><h3 id="概念">1.1 概念</h3><p><strong>内容分发网络（Content Delivery Network）</strong>，是在现有Internet 中增加一层新的网络架构，由遍布全国的高性能加速节点构成。</p><h3 id="原理及作用">1.2 原理及作用</h3><figure><imgsrc="https://mc.qcloudimg.com/static/img/1bead74703061b71eeaf6bf4db27fcdb/image.png"alt="加速原理" /><figcaption aria-hidden="true">加速原理</figcaption></figure><blockquote><p>这些高性能的服务节点都会按照一定的缓存策略存储您的业务内容，当您的用户向您的某一业务内容发起请求时，请求会被调度至最接近用户的服务节点，直接由服务节点直接快速响应，有效降低用户访问延迟，提升可用性。</p><p>CDN 有效的解决了目前互联网业务中网络层面的以下问题：</p><ol type="1"><li>用户与业务服务器地域间物理距离较远，需要进行多次网络转发，传输延时较高且不稳定；</li><li>用户使用运营商与业务服务器所在运营商不同，请求需要运营商之间进行互联转发；</li><li>业务服务器网络带宽、处理能力有限，当接收到海量用户请求时，会导致响应速度降低、可用性降低。</li></ol></blockquote><p>详细介绍：<ahref="https://www.qcloud.com/document/product/228/2939">内容分发网络 -腾讯云</a></p><hr /><h2 id="问题笔记">2 问题笔记</h2><h3 id="dns配置">2.1 DNS配置</h3><ol type="1"><li>在CDN中配置主域名后，会获得一个CDN域名；</li><li>在DNS中删去主域名原来的解析记录，设置新的CNAME域名解析记录，将主域名解析到CDN域名上；</li><li>配置CDN缓存策略，并开启CDN并刷新本地域名解析，WindowsCMD执行<strong><code>ipconfig/flushdns</code></strong></li><li>打开主域名</li></ol><h3 id="强制使用https">2.2 强制使用HTTPS</h3><ol type="1"><li>在CDN配置中设置好HTTPS证书，因为用户的HTTPS链接将是用户和CDN服务器的连接。</li><li>设置回源访问时，设置为HTTPS回源为宜（特别是如果你的站点有登录页面等）<ol type="1"><li>否则可能会出现浏览器拒绝加载<code>js</code>,<code>css</code>资源</li></ol></li></ol><h3 id="出现浏览器提示过多重定向无法打开">2.3出现浏览器提示"过多重定向"，无法打开</h3><p>我这里的问题经分析，是出在回源访问时的重定向上。</p><p>具体而言，就是站点在CDN上设置了默认HTTPS，而CDN回源时设置了HTTP回源，而源服务器处设置了地址重写，将HTTP访问重定向到HTTPS，这就导致CDN回源访问时，所有的HTTP都被重定向到了HTTPS（加载html,js, css等资源），导致浏览器提示过多的重定向，拒绝加载。</p><h3 id="只有html页面没有样式插件和图片">2.4只有html页面，没有样式、插件和图片</h3><p>是<code>js</code>，<code>css</code>等被浏览器拒绝加载导致，通常是CDN中没有缓存，而加载链接是HTTP回源，且源站设置了地址重写导致。</p><p>需要统一使用HTTP或HTTPS，不要出现混合使用的情况。</p><h3 id="cdn缓存策略">2.5 CDN缓存策略</h3><p>如果默认配置了所有文件缓存30天，<code>php, jsp, asp</code>缓存0秒，会缓存所有0秒/分/时/天以外的数据，这就意味着你的HTML页面更新后，CDN处要首次缓存的30天后才会更新，这显然是不行的。</p><p>我的理解是——</p><p><strong>一、CDN主要用于缓存不常修改的数据</strong>，如：</p><ul><li>网站样式、javascript插件——<code>css, js</code>；</li><li>图片资源——<code>png, jpg, bmp, ico</code>；</li><li>等</li><li><strong>这类资源的缓存寿命可以配置的比较长，如：30天，以减少回源访问，提高CDN命中率；</strong></li></ul><p><strong>二、而经常更新的，实时的资源不应该被长期缓存</strong>，如：</p><ul><li>文章、页面、动态信息——<code>html, php</code>；</li><li>首页；</li><li>后台管理页面；</li><li><strong>这类资源的缓存寿命应该配置得较短，直接回源就配置0秒，和源站保持一致性，访问量大就配置成较短的时间，如秒/分/时的级别。</strong></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CDN </tag>
            
            <tag> Deploy </tag>
            
            <tag> Troubleshooting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>www-data - Ubuntu Web服务所属用户/组</title>
      <link href="/posts/www-data-Ubuntu-Web%E6%9C%8D%E5%8A%A1%E6%89%80%E5%B1%9E%E7%94%A8%E6%88%B7-%E7%BB%84/"/>
      <url>/posts/www-data-Ubuntu-Web%E6%9C%8D%E5%8A%A1%E6%89%80%E5%B1%9E%E7%94%A8%E6%88%B7-%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>理解并配置www-data用户/用户组，解决Typecho无法直接编辑主题文件、上传附件等问题。</p><span id="more"></span><h1 id="www-data---ubuntu-web服务所属用户组">www-data - UbuntuWeb服务所属用户/组</h1><h2 id="问题由来">1 问题由来</h2><h3 id="typecho环境下的问题">1.1 Typecho环境下的问题</h3><ul><li>Console中无法直接编辑html及php文件</li><li>文章无法上传附件，提示附件上传失败</li><li>无法创建配置文件*.conf</li><li>……</li></ul><h3 id="网上流传的解决方案">1.2 网上流传的解决方案</h3><ul><li>网络上常见的解决方法集中是放宽权限，如：<ul><li>对Typecho所在的Web目录赋予最高的777权限；</li><li>给相关子文件夹，如<code>theme</code>, <code>usr</code>，<code>uploads</code> 赋予最高权限；</li></ul></li><li><strong>注意：</strong>这种方式确实是可以解决以上问题的，但是，这种赋予所有用户最高权限的方式极其草率，用于测试、分析原因尚可，但<strong>最大化的权限赋予极不规范</strong>。</li></ul><h3 id="分析">1.3 分析</h3><ul><li>经测试，赋予777权限确实可以解决问题，其原因在于<strong>其它用户</strong>的获得了完整的权限，这里就包含了服务器框架程序执行进程所属于的用户/组。服务器进程拥有了写权限，也就可以写入修改主题文件、写入接收到的上传文件了。</li></ul><hr /><h2 id="www-data">2 www-data</h2><h3 id="www-data是什么">2.1 www-data是什么？</h3><p><strong>www-data</strong> 是 Debian/Ubuntu上处理Web服务的用户/用户组。</p><p>服务器程序，如：Apache，Nginx（读作：engineX），运行在<strong>www-data</strong>用户/用户组的身份下。</p><h3 id="理解">2.2 理解</h3><p>Web服务运行于<strong>www-data</strong>的这个机制就类似于数据库管理机制，存在Role的对象。</p><p><strong>Role</strong>实质上是一种身份，是一组特定权限的集合。数据库中通过定义Role来实现清晰明确、有条理的权限分配。</p><p>Debian/Ubuntu中的原理也类似，通过专用的身份，也就是由专用的用户/用户组来执行特定类型的程序或服务。</p><p>通过 <code>lastlog</code> 命令可以看到系统的诸多用户/用户组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-49-193-ubuntu:~$ lastlog</span><br><span class="line">Username         Port     From             Latest</span><br><span class="line">root                                       四 1月  1 08:00:10 +0800 1970</span><br><span class="line">daemon                                     **Never logged <span class="keyword">in</span>**</span><br><span class="line">bin                                        **Never logged <span class="keyword">in</span>**</span><br><span class="line">sys                                        **Never logged <span class="keyword">in</span>**</span><br><span class="line"><span class="built_in">sync</span>                                       **Never logged <span class="keyword">in</span>**</span><br><span class="line">games                                      **Never logged <span class="keyword">in</span>**</span><br><span class="line">man                                        **Never logged <span class="keyword">in</span>**</span><br><span class="line">lp                                         **Never logged <span class="keyword">in</span>**</span><br><span class="line">mail                                       **Never logged <span class="keyword">in</span>**</span><br><span class="line">news                                       **Never logged <span class="keyword">in</span>**</span><br><span class="line">uucp                                       **Never logged <span class="keyword">in</span>**</span><br><span class="line">proxy                                      **Never logged <span class="keyword">in</span>**</span><br><span class="line">www-data                                   **Never logged <span class="keyword">in</span>**</span><br><span class="line">backup                                     **Never logged <span class="keyword">in</span>**</span><br><span class="line">list                                       **Never logged <span class="keyword">in</span>**</span><br><span class="line">irc                                        **Never logged <span class="keyword">in</span>**</span><br><span class="line">gnats                                      **Never logged <span class="keyword">in</span>**</span><br><span class="line">nobody                                     **Never logged <span class="keyword">in</span>**</span><br><span class="line">systemd-timesync                           **Never logged <span class="keyword">in</span>**</span><br><span class="line">systemd-network                            **Never logged <span class="keyword">in</span>**</span><br><span class="line">systemd-resolve                            **Never logged <span class="keyword">in</span>**</span><br><span class="line">systemd-bus-proxy                           **Never logged <span class="keyword">in</span>**</span><br><span class="line">syslog                                     **Never logged <span class="keyword">in</span>**</span><br><span class="line">_apt                                       **Never logged <span class="keyword">in</span>**</span><br><span class="line">lxd                                        **Never logged <span class="keyword">in</span>**</span><br><span class="line">messagebus                                 **Never logged <span class="keyword">in</span>**</span><br><span class="line">uuidd                                      **Never logged <span class="keyword">in</span>**</span><br><span class="line">dnsmasq                                    **Never logged <span class="keyword">in</span>**</span><br><span class="line">sshd                                       **Never logged <span class="keyword">in</span>**</span><br><span class="line">ubuntu           pts/0    42.244.62.236    三 4月  5 22:28:29 +0800 2017</span><br><span class="line">mysql                                      **Never logged <span class="keyword">in</span>**</span><br><span class="line">ftp                                        **Never logged <span class="keyword">in</span>**</span><br></pre></td></tr></table></figure><ul><li>可以看到，一个UbuntuServer里就有这么多用户/用户组，事实上它们具体都对应着特定类型的程序和服务。</li></ul><p>因此，只要把所在的Web路径下的文件及子目录放心地交给www-data用户/用户组即可！</p><p>权限方面，采用默认方案即可，目录配755，文件配644，比777不知妥当到那里去了。</p><h3 id="操作">2.3 操作</h3><p>更改所属用户及用户组的bash命令如下（递归）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chown</span> -R www-data /var/www/html/</span><br><span class="line">sudo <span class="built_in">chgrp</span> -R www-data /var/www/html/</span><br></pre></td></tr></table></figure><p>修改权限命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> 755 /var/www/html/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Typecho </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS笔记</title>
      <link href="/posts/CSS%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/CSS%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>知识补完，日常速成 : )</p><span id="more"></span><h1 id="css笔记">CSS笔记</h1><h2 id="概念">1 概念</h2><h3 id="定义">1.1 定义</h3><p><strong>CSS（Cascading Style Sheet）</strong>，层叠样式表。</p><p>一种用来表现HTML（标准通用标记语言的一个应用）或XML（标准通用标记语言的一个子集）等文件样式的计算机语言。CSS不仅可以静态地修饰网页，还可以配合各种脚本语言动态地对网页各元素进行格式化。</p><p>CSS能够对网页中元素位置的排版进行像素级精确控制，支持几乎所有的字体字号样式，拥有对网页对象和模型样式编辑的能力。</p><h3 id="选择符">1.2 选择符</h3><ul><li>CSS选择符是CSS样式的名字</li></ul><h4 id="html选择符">1.2.1 HTML选择符</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* html标记选择符 */</span></span><br><span class="line"><span class="selector-tag">body</span></span><br><span class="line">&#123;</span><br><span class="line">  属性:属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>以HTML标记命名，会覆盖标记的默认样式（无需调用）</li></ul><h4 id="id选择符">1.2.2 ID选择符</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* id选择符 */</span></span><br><span class="line">#选择符</span><br><span class="line">&#123;</span><br><span class="line">  属性:属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>#</code> 开头</li><li>HTML标记使用属性 <code>id="ID选择符"</code> 调用</li><li>唯一性选择符，不可重复定义</li></ul><h4 id="class选择符">1.2.3 CLASS选择符</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* class选择符 */</span></span><br><span class="line">.选择符</span><br><span class="line">&#123;</span><br><span class="line">  属性:属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>.</code> 开头</li><li>HTML标记使用属性 <code>class="class选择符"</code> 调用</li><li>多重选择符，可重复定义【常用】</li></ul><h4 id="伪类">1.2.4 伪类</h4><h5 id="基本">1.2.4.1 基本</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">selector:pseudo-class</span><br><span class="line">&#123;</span><br><span class="line">  属性:属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>预定义性质，预定义的class，但不存在真正的class的属性</li><li><code>link</code> 可链接对象</li><li><code>visited</code> 已访问过的链接</li><li><code>active</code> 正被点击的链接</li><li><code>hover</code> 光标置于其上</li></ul><h5 id="案例">1.2.4.2 案例</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例1，当<code>&lt;a&gt;</code>为超链接时，将其显示为红色。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-class">.spec</span><span class="selector-pseudo">:link</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">a</span> class=spec href=&quot;demo<span class="selector-class">.html</span>&quot; onclick=&quot;return false&quot;&gt;链接&lt;/<span class="selector-tag">a</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>例2，可以通过这种方式，通过特定的伪类定义特定样式，而不必覆盖页面内全部的链接样式。</li></ul><h4 id="通配选择符">1.2.5 通配选择符</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line">&#123;</span><br><span class="line">  属性:属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="规则">1.2.6 规则</h4><h5 id="可包含">1.2.6.1 可包含</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">td</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>此选择符仅对<code>&lt;table&gt;</code>标签内嵌的<code>&lt;td&gt;</code>有效</li></ul><h5 id="可分组">1.2.6.2 可分组</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">a</span>, <span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>表示将<code>&lt;body&gt;</code> <code>&lt;a&gt;</code><code>&lt;div&gt;</code> 分为一组，使用相同样式</li></ul><h3 id="注释">1.3 注释</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 单行注释 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">多行注释1</span></span><br><span class="line"><span class="comment">多行注释2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="单位">1.4 单位</h3><h4 id="通例">1.4.1 通例</h4><ul><li><code>+数值</code> <code>-数值</code><ul><li>注意：后接单位字符或百分号时，<strong>不得含空格</strong>。</li></ul></li></ul><h4 id="长度">1.4.2 长度</h4><h5 id="相对单位">1.4.2.1 相对单位</h5><ul><li><code>px</code> 像素【常用】</li><li><code>em</code> 元素字体高度</li><li><code>ex</code> 字母<code>x</code>的高度</li><li><code>%</code> 相对元素大小</li></ul><h5 id="绝对单位">1.4.2.2 绝对单位</h5><ul><li><code>in</code> 英寸， <code>1in=2.54cm</code></li><li><code>cm</code></li><li><code>mm</code></li><li><code>pt</code> 点point <code>1pt=(1/72)in</code></li><li><code>pc</code> 帕 <code>1pc=12pt</code></li></ul><h4 id="颜色">1.4.3 颜色</h4><h5 id="关键字">1.4.3.1 关键字</h5><ul><li><code>aqua</code>， <code>black</code>， <code>blue</code>，<code>fuchsia</code>， <code>grey</code> ……</li><li>总计16种，Windows VGA定义</li></ul><h5 id="rgb">1.4.3.2 RGB</h5><ul><li><code>#rrggbb</code></li><li><code>#rgb</code></li><li><code>rgb(x,y,z)</code></li><li><code>rgb(x%,y%,z%)</code></li><li>总计4种表达形式</li></ul><hr /><h2 id="html调用css">2 HTML调用CSS</h2><h3 id="示例">2.1 示例</h3><p>CSS部分：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#span1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">color</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#div1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">font-weight</span>:<span class="number">600</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.div2</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:x-large;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML部分：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;span1&quot;</span>&gt;</span>span内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">  div内容1</span><br><span class="line">  div内容2</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;.div2&quot;</span>&gt;</span></span><br><span class="line">  div内容1</span><br><span class="line">  div内容2</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="内联调用">2.2 内联调用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:red; font-size:12px&quot;</span>&gt;</span></span><br><span class="line">  内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>内联调用相当于是不需要独立的CSS部分</li></ul><h3 id="内部css同文件">2.3 内部CSS（同文件）</h3><p><code>&lt;span&gt;</code> 和 <code>&lt;div&gt;</code>使用属性</p><ul><li><code>id</code> 调用 <code>#样式名</code></li><li><code>class</code> 调用 <code>.样式名</code></li></ul><h3 id="外部css跨文件">2.4 外部CSS（跨文件）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在调用CSS样式之前连接<code>&lt;link&gt;</code>CSS文件</li></ul><p>连接后，使用方式同 <strong>1.3 内部CSS</strong> 用法。</p><hr /><h2 id="字体-font">3 字体 font</h2><h3 id="复合属性">3.1 复合属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font</span>: font-style font-variant font-weight font-size line-height font-family</span><br></pre></td></tr></table></figure><h3 id="属性">3.2 属性</h3><h4 id="color">3.2.1 color</h4><ul><li>使用颜色单位即可</li></ul><h4 id="font-size">3.2.2 font-size</h4><ul><li><p>专用属性：</p><ul><li>```css xx-small, x-small, small, normal, large, x-large, xx-large<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 通用属性：</span><br><span class="line"></span><br><span class="line">  - `px`  `em` 等</span><br><span class="line"></span><br><span class="line">#### 3.2.3  font-weight</span><br><span class="line"></span><br><span class="line">- ```css</span><br><span class="line">  lighter, light, normal, bolder, bolder</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>100</code>~<code>900</code> (每100)</p><ul><li>其中，normal 即 400，bold即700</li></ul></li></ul><h4 id="font-family">3.2.4 font-family</h4><ul><li>```css font-family: "Courier New", 宋体 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 优先级：从左到右</span><br><span class="line"></span><br><span class="line">#### 3.2.5  line-height</span><br><span class="line"></span><br><span class="line">- `px`， 行距</span><br><span class="line"></span><br><span class="line">#### 3.2.6  word-spacing</span><br><span class="line"></span><br><span class="line">单词间距，词距</span><br><span class="line"></span><br><span class="line">- `normal` 等</span><br><span class="line">- `px` 等</span><br><span class="line"></span><br><span class="line">#### 3.2.7  letter-spacing</span><br><span class="line"></span><br><span class="line">字母间距，字距</span><br><span class="line"></span><br><span class="line">- `normal` 等</span><br><span class="line">- `px` 等</span><br><span class="line"></span><br><span class="line">#### 3.2.8  text-transform</span><br><span class="line"></span><br><span class="line">字母大小写</span><br><span class="line"></span><br><span class="line">- `capitalize`  首字母大写</span><br><span class="line">- `uppercase`  转大写</span><br><span class="line">- `lowercase`  转小写</span><br><span class="line">- `none`  无转换</span><br><span class="line"></span><br><span class="line">#### 3.2.9  text-decoration</span><br><span class="line"></span><br><span class="line">文本装饰</span><br><span class="line"></span><br><span class="line">- `underline`  下划线</span><br><span class="line">- `overline`  上划线</span><br><span class="line">- `line-through`  删除线</span><br><span class="line">- `blink`  闪烁字</span><br><span class="line">- `none`  无，默认</span><br><span class="line"></span><br><span class="line">#### 3.2.10  whitespace</span><br><span class="line"></span><br><span class="line">空格处理方式</span><br><span class="line"></span><br><span class="line">- `nomal`  合并空格</span><br><span class="line">- `pre`  预解析，即不合并空格，使用等宽字体显示</span><br><span class="line">- `nowrap`  不自动折行</span><br><span class="line"></span><br><span class="line">#### 3.2.11  vertical-align</span><br><span class="line"></span><br><span class="line">垂直方向对齐模式</span><br><span class="line"></span><br><span class="line">- `baseline`  与父元素基线对齐</span><br><span class="line">- `sup`  上标</span><br><span class="line">- `sub`  下标</span><br><span class="line">- `top`  顶对齐</span><br><span class="line">- `text-top`  与父元素的字体顶对齐</span><br><span class="line">- `middle`  对齐元素基线并加上父元素的 x-height</span><br><span class="line">- `bottom`  底对齐</span><br><span class="line">- `text-bottom`  与父元素的字体底对齐</span><br><span class="line"></span><br><span class="line">#### 3.2.12  text-align</span><br><span class="line"></span><br><span class="line">文字的水平对齐模式</span><br><span class="line"></span><br><span class="line">- `left`  左对齐</span><br><span class="line">- `right`  右对齐</span><br><span class="line">- `center`  居中</span><br><span class="line">- `justify`  左右对齐</span><br><span class="line"></span><br><span class="line">#### 3.2.13  text-indent</span><br><span class="line"></span><br><span class="line">文字缩进（首行缩进）</span><br><span class="line"></span><br><span class="line">- `px`单位</span><br><span class="line">- `%`</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 4  背景 background</span><br><span class="line"></span><br><span class="line">### 4.1  复合属性</span><br><span class="line"></span><br><span class="line">```css</span><br><span class="line">background: background-color background-image background-repeat background-attachement</span><br></pre></td></tr></table></figure></li></ul><h3 id="属性-1">4.2 属性</h3><h4 id="background-color">4.2.1 background-color</h4><ul><li><code>transparent</code> 透明，默认</li><li>颜色</li></ul><h4 id="background-image">4.2.2 background-image</h4><ul><li><code>none</code></li><li><code>url("imageurl")</code></li></ul><h4 id="background-attachment">4.2.3 background-attachment</h4><ul><li><code>scroll</code>图像可滚动（div区域小于图像尺寸时，将出现滚动条）</li><li><code>fixed</code> 图像固定</li></ul><h4 id="background-position">4.2.4 background-position</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-position</span>: 水平位置 垂直位置</span><br></pre></td></tr></table></figure><ul><li>水平位置、垂直位置 值为 <em>长度</em> 或 <em>对齐关系</em></li><li><strong>长度</strong><ul><li><code>px</code> 或 <code>%</code></li></ul></li><li><strong>对齐关系</strong><ul><li><code>left</code></li><li><code>right</code></li><li><code>top</code></li><li><code>bottom</code></li></ul></li></ul><h4 id="background-repeat">4.2.5 background-repeat</h4><p>图像铺排方式，如果图像小于背景区域，是否重复图像以便填充。</p><ul><li><code>repeat</code> 默认，纵向及横向重复平铺</li><li><code>no-repeat</code> 不重复平铺</li><li><code>repeat-x</code> 仅在横向（x轴方向）重复平铺</li><li><code>repeat-y</code> 仅在纵向（y轴方向）重复平铺</li></ul><hr /><h2 id="外边距-margin">5 外边距 margin</h2><h3 id="基本-1">5.1 基本</h3><p>margin，外边距，指的是区块之间的边距。</p><ul><li><p>```css margin: auto <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 自适应</span><br><span class="line"></span><br><span class="line">- ```css</span><br><span class="line">  margin: 长度</span><br></pre></td></tr></table></figure></p><ul><li>如 <code>px</code></li></ul></li></ul><h3 id="综合属性">5.2 综合属性</h3><p><strong>注意</strong>：非复合属性，综合属性是多种书写形式对应多种解析方式，相当于重载</p><ul><li><p>```css margin: 四边 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```css</span><br><span class="line">  margin: 上下 左右</span><br></pre></td></tr></table></figure></p></li><li><p>```css margin: 上 左右 下 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```css</span><br><span class="line">  margin: 上 右 下 左</span><br></pre></td></tr></table></figure></p><ul><li>顺时针序，空格隔开</li><li>单位常用 <code>px</code></li></ul></li></ul><h3 id="四向属性">5.3 四向属性</h3><ul><li><code>margin-top</code></li><li><code>margin-bottom</code></li><li><code>margin-left</code></li><li><code>margin-right</code></li></ul><hr /><h2 id="内边距-padding">6 内边距 padding</h2><h3 id="基本-2">6.1 基本</h3><p>padding，内边距，是区块内容与区块边界的边距</p><h3 id="综合属性-1">6.2 综合属性</h3><ul><li>和外边距margin相同</li></ul><h3 id="四向属性-1">6.2.3 四向属性</h3><ul><li><code>padding-top</code></li><li><code>padding-bottom</code></li><li><code>padding-left</code></li><li><code>padding-right</code></li></ul><hr /><h2 id="边框-border">7 边框 border</h2><h3 id="复合属性-1">7.1 复合属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span>: border-width border-style border-color</span><br></pre></td></tr></table></figure><h3 id="属性-2">7.2 属性</h3><p>border属性均支持复合属性，可以一次性定义各向样式</p><h4 id="border-width">7.2.1 border-width</h4><ul><li>宽度单位<ul><li><code>medium</code> <code>thin</code> <code>thick</code></li></ul></li><li>长度<ul><li><code>px</code> 常用</li></ul></li></ul><h4 id="border-style">7.2.2 border-style</h4><ul><li><code>none</code> 不显示边界</li><li><code>dotted</code> 点</li><li><code>dashed</code> 虚线</li><li><code>solid</code> 实线</li><li><code>double</code> 双线</li><li><code>groove</code> 内容凹陷</li><li><code>ridge</code> 内容凸起</li><li><code>insert</code> 边框凹陷</li><li><code>outset</code> 边框凸起</li></ul><h4 id="border-color">7.2.3 border-color</h4><ul><li>颜色</li></ul><h3 id="四向属性-2">7.3 四向属性</h3><ul><li><code>border-top</code></li><li><code>border-bottom</code></li><li><code>border-left</code></li><li><code>border-right</code></li></ul><hr /><h2 id="位置">8 位置</h2><h3 id="position">8.1 position</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: static</span><br></pre></td></tr></table></figure><ul><li>默认</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: absolute</span><br></pre></td></tr></table></figure><ul><li>绝对定位，以父对象为参照定位</li><li>可层叠，可流出（自动出现滚动条）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>: relative</span><br></pre></td></tr></table></figure><ul><li>相对定位，以相邻对象为参照定位</li><li>不可层叠，流出时无滚动条</li></ul><p><strong>注意</strong>：absolute和relative必须要定义上下左右至少一个参照距离</p><h3 id="z-index">8.2 z-index</h3><p>页面的z轴，z-index值更大的，位于更上层（表层）；值小的，位于下层。</p><hr /><h2 id="列表-list-style">9 列表 list-style</h2><p>列表包含有序表<code>&lt;ol&gt;</code>和无序表<code>&lt;ul&gt;</code></p><h3 id="复合属性-2">9.1 复合属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">list-style</span>: list-style-image list-style-position list-style-type</span><br></pre></td></tr></table></figure><h3 id="属性-3">9.2 属性</h3><h4 id="list-style-image">9.2.1 list-style-image</h4><ul><li><code>none</code><ul><li>默认</li></ul></li><li><code>url("...")</code><ul><li>若url失效，则none</li></ul></li></ul><h4 id="list-style-position">9.2.2 list-style-position</h4><ul><li><code>outside</code><ul><li>默认</li></ul></li><li><code>inside</code><ul><li>表项标记占用文本空间，原表项标记空间空白</li></ul></li></ul><h4 id="list-style-type">9.2.3 list-style-type</h4><ul><li><code>disc</code><ul><li>默认，实心圆</li></ul></li><li><code>circle</code><ul><li>空心圆</li></ul></li><li><code>square</code><ul><li>实心方块</li></ul></li><li><code>decimal</code><ul><li>数字.</li></ul></li><li><code>lower-roman</code><ul><li>小写罗马数字</li></ul></li><li><code>upper-roman</code><ul><li>大写罗马数字</li></ul></li><li><code>lower-alpha</code><ul><li>小写英文字母</li></ul></li><li><code>upper-alpha</code><ul><li>大写英文字母</li></ul></li><li><code>none</code><ul><li>无表项标记</li></ul></li></ul><hr /><h2 id="表格">10 表格</h2><h3 id="border-collapse">10.1 border-collapse</h3><ul><li><code>seperate</code><ul><li>表格相邻边分开</li></ul></li><li><code>collapse</code><ul><li>表格相邻边合并</li></ul></li></ul><h3 id="table-layout">10.2 table-layout</h3><ul><li><code>auto</code><ul><li>自动，默认，根据内容调整表格尺寸</li></ul></li><li><code>fixed</code><ul><li>固定表格尺寸</li></ul></li></ul><hr /><h2 id="滚动条-scrollbar">11 滚动条 scrollbar</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scrollbar-<span class="number">3</span>dlight-<span class="attribute">color</span>: color  <span class="comment">/*滚动条亮边框颜色*/</span></span><br><span class="line">scrollbar-highlight-color: color  <span class="comment">/*滚动条3D界面的亮边颜色*/</span></span><br><span class="line">scrollbar-face-color: color  <span class="comment">/*滚动条3D表面的颜色*/</span></span><br><span class="line">scrollbar-arrow-color: color  <span class="comment">/*滚动条方向箭头的颜色*/</span></span><br><span class="line">scrollbar-<span class="number">3</span>dlight-color: color  <span class="comment">/*滚动条3D界面的暗边框颜色*/</span></span><br><span class="line">scrollbar-shadow-color: color  <span class="comment">/*滚动条暗边框颜色*/</span></span><br><span class="line">scrollbar-base-color: color  <span class="comment">/*滚动条基准颜色*/</span></span><br><span class="line">scrollbar-track-color: color  <span class="comment">/*滚动条的拖动区域颜色*/</span></span><br></pre></td></tr></table></figure><hr /><h2 id="层漂移-float">12 层漂移 float</h2><h3 id="漂移-float">12.1 漂移 float</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">float</span>: none | left | right</span><br></pre></td></tr></table></figure><p>层级区块向左/右漂移对齐</p><h3 id="清除漂移-clear">12.2 清除漂移 clear</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">clear</span>: none | left | right | both</span><br></pre></td></tr></table></figure><ul><li><code>none</code> 允许浮动漂移对象</li><li><code>left/right</code> 清除向左/右的浮动漂移对象</li><li><code>both</code> 清除向左向右的浮动漂移对象</li></ul><hr /><h2 id="裁剪可视区域-clip">13 裁剪可视区域 clip</h2><h3 id="基本-3">13.1 基本</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">clip</span>: auto</span><br></pre></td></tr></table></figure><ul><li>默认，不裁剪可视区域</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">clip</span>: <span class="built_in">rect</span>(上 右 下 左)</span><br></pre></td></tr></table></figure><ul><li>通过设置与上、右、下、左的距离，确定有效的可视范围，范围以外的区域变为透明，原内容不显示</li></ul><h3 id="案例-1">13.2 案例</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.textTop</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">26px</span> Arial;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">clip</span>: <span class="built_in">rect</span>(<span class="number">0</span> auto <span class="number">18px</span> <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.textBottom</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">26px</span> Arial;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">  <span class="attribute">clip</span>: <span class="built_in">rect</span>(<span class="number">18px</span> auto auto auto);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以实现上半部红色，下半部蓝色的字体</li></ul><hr /><h2 id="溢出显示">14 溢出显示</h2><p>设定当内容大小超过区块大小时，如何显示。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: visible</span><br></pre></td></tr></table></figure><ul><li>默认值，将区块大小调整为内容大小，以适应内容显示</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: auto</span><br></pre></td></tr></table></figure><ul><li>自动，在溢出时裁剪或显示滚动条</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden</span><br></pre></td></tr></table></figure><ul><li>隐藏溢出内容，满足区块大小限定</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: scroll</span><br></pre></td></tr></table></figure><ul><li>总是显示滚动条</li></ul><hr /><h2 id="光标效果-cursor">15 光标效果 cursor</h2><p>属性可选值内容很多，仅记录常用值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: auto</span><br></pre></td></tr></table></figure><ul><li>默认，根据内容适应光标形状</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: default</span><br></pre></td></tr></table></figure><ul><li>客户端默认光标，如Windows的箭头</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: hand</span><br><span class="line">cursor: pointer</span><br></pre></td></tr></table></figure><ul><li>手型，通常表示可点击</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: text</span><br><span class="line">cursor: vertical-text</span><br></pre></td></tr></table></figure><ul><li>I 型文本编辑光标</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: help</span><br></pre></td></tr></table></figure><ul><li>帮助光标，通常时问号</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: progress</span><br><span class="line">cursor: wait</span><br></pre></td></tr></table></figure><ul><li>progress为箭头+沙漏</li><li>wait仅沙漏</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: crosshair</span><br><span class="line">cursor: move</span><br></pre></td></tr></table></figure><ul><li>crosshair， 定位十字标（无箭头）</li><li>move，可移动标记十字标（四向箭头）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">cursor</span>: no-drop</span><br><span class="line">cursor: not-allowed</span><br></pre></td></tr></table></figure><ul><li>no-drop 禁止拖放</li><li>no-allowed 禁止点击</li></ul><hr /><h2 id="可见性">16 可见性</h2><h3 id="display">16.1 display</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: block</span><br></pre></td></tr></table></figure><ul><li>块对象默认，为内嵌对象前后换行</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: none</span><br></pre></td></tr></table></figure><ul><li>隐藏内嵌对象（<strong>不保留其空白空间</strong>），只显示非标记的内容</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: inline</span><br></pre></td></tr></table></figure><ul><li>将对象作为内联对象显示，内联化内嵌子对象（即无视内嵌对象换行格式，作为连续内容显示（自动折行））</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: inline-block</span><br></pre></td></tr></table></figure><ul><li>将对象作为内联对象显示，但不内联化内嵌子对象。旁边的对象会和当前对象显示在一行内。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: list-item</span><br></pre></td></tr></table></figure><ul><li>把当前对象作为列表项目显示，显示表项标记</li></ul><h3 id="visibility">16.2 visibility</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">visibility</span>: inherit</span><br></pre></td></tr></table></figure><ul><li>继承父容器可视性</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">visibility</span>: visible</span><br></pre></td></tr></table></figure><ul><li>可视</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">visibility</span>: hidden</span><br></pre></td></tr></table></figure><ul><li>不可视（但<strong>保留原空间</strong>）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> front-end </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>prism - 网页代码高亮（以Typecho为例）</title>
      <link href="/posts/prism-%E7%BD%91%E9%A1%B5%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%EF%BC%88%E4%BB%A5Typecho%E4%B8%BA%E4%BE%8B%EF%BC%89/"/>
      <url>/posts/prism-%E7%BD%91%E9%A1%B5%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%EF%BC%88%E4%BB%A5Typecho%E4%B8%BA%E4%BE%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>Typecho默认不支持代码高亮标记功能，而prism可以实现美观的代码高亮标记效果。</p><span id="more"></span><h1 id="prism---网页代码高亮以typecho为例">prism -网页代码高亮（以Typecho为例）</h1><h2 id="prism">1 prism</h2><h3 id="prism简介">1.1 prism简介</h3><blockquote><p><a href="http://prism.js">prismjs.com</a></p></blockquote><blockquote><p>Prism is a lightweight, extensible syntax highlighter, built withmodern web standards in mind. It’s used in thousands of websites,including some of those you visit daily.</p></blockquote><h3 id="尝试主题">1.2 尝试主题</h3><p>Prism提供default, dark, funky, okaidia, twilight, coy, solarizedlight多种主题配色。点击右边的主题即可在下方的预览frame内预览效果。</p><h3 id="下载">1.3 下载</h3><h4 id="选择">1.3.1 选择</h4><ul><li>Compression level<ul><li>压缩度</li><li>Development Version即开发版，压缩率低，可读性好，适合阅读和修改开发。</li><li>Minified Version即缩小化版本，适合直接使用。</li></ul></li><li>Theme<ul><li>略，选择一个即可</li><li>注意，主题不仅包含文字高亮即配色，还包含背景配色。</li></ul></li><li>Languages<ul><li>选择自己需要实现高亮标记效果的语言即可</li></ul></li><li>Plugins<ul><li>一些功能性插件</li></ul></li></ul><h4 id="下载-1">1.3.2 下载</h4><ul><li>JS和CSS都要下载，会得到<code>prism.js</code> 和<code>prism.css</code></li><li>JS和CSS是根据你的选择，合并生成的两份文件（javascript脚本及层叠样式表）。</li></ul><hr /><h2 id="配置typecho">2 配置Typecho</h2><h3 id="上传prism">2.1 上传prism</h3><ul><li>找到你当前使用的主题（theme）目录</li><li>以我的为例：<ul><li>路径为<code>/var/www/html/usr/themes/typecho-theme-next</code></li><li>则将<code>prism.js</code>上传到<code>/var/www/html/usr/themes/typecho-theme-next/js/</code></li><li>将<code>prism.css</code>上传到<code>/var/www/html/usr/themes/typecho-theme-next/css/</code></li></ul></li></ul><h3 id="添加调用代码">2.2 添加调用代码</h3><ul><li><p>修改<strong>当前主题</strong>的<code>header.php</code></p></li><li><p>添加调用声明</p></li><li><p>```html <!-- prism code highlight --><link rel="stylesheet" href="<?php $this->options-&gt;themeUrl('css/prism.css');?&gt;" /&gt;</p><script src="<?php $this->options->themeUrl('js/prism.js'); ?>"></script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 添加位置如下示例：</span><br><span class="line"></span><br><span class="line">- ```php</span><br><span class="line">  &lt;?php</span><br><span class="line">  if (!defined(&#x27;__TYPECHO_ROOT_DIR__&#x27;)) exit;</span><br><span class="line">  //当cdn加速开启时候定义cdn的地址</span><br><span class="line">  if (!empty($this-&gt;options-&gt;next_cdn) &amp;&amp; $this-&gt;options-&gt;next_cdn)&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  ?&gt;&lt;!doctype html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;meta charset=&quot;&lt;?php $this-&gt;options-&gt;charset(); ?&gt;&quot;&gt;</span><br><span class="line">      &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge, chrome=1&quot;&gt;</span><br><span class="line">      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;/&gt;</span><br><span class="line">      &lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-transform&quot; /&gt;</span><br><span class="line">  &lt;?php</span><br><span class="line">  if (!defined(&#x27;__TYPECHO_ROOT_DIR__&#x27;)) exit;</span><br><span class="line">  //当cdn加速开启时候定义cdn的地址</span><br><span class="line">  if (!empty($this-&gt;options-&gt;next_cdn) &amp;&amp; $this-&gt;options-&gt;next_cdn)&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  ?&gt;&lt;!doctype html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">      &lt;meta charset=&quot;&lt;?php $this-&gt;options-&gt;charset(); ?&gt;&quot;&gt;</span><br><span class="line">      &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge, chrome=1&quot;&gt;</span><br><span class="line">      &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;/&gt;</span><br><span class="line">      &lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-transform&quot; /&gt;</span><br><span class="line">      &lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-siteapp&quot; /&gt;</span><br><span class="line">      &lt;!-- 使用url函数转换相关路径 --&gt;</span><br><span class="line">      &lt;!-- &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;//fonts.googleapis.com/css?family=Lato:300,400,700,400italic&amp;subset=latin,latin-ext&quot;/&gt; --&gt;</span><br><span class="line">      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&lt;?php $this-&gt;options-&gt;themeUrl(&#x27;/vendors/fancybox/source/jquery.fancybox.css?v=2.1.5&#x27;); ?&gt;&quot;/&gt;</span><br><span class="line">      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&lt;?php $this-&gt;options-&gt;themeUrl(&#x27;/vendors/font-awesome/css/font-awesome.min.css?v=4.4.0&#x27;); ?&gt;&quot;/&gt;</span><br><span class="line">      &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;&lt;?php $this-&gt;options-&gt;themeUrl(&#x27;/css/main.css?v=1.2.1&#x27;); ?&gt;&quot;/&gt;</span><br><span class="line">     </span><br><span class="line">      &lt;!-- prism code highlight --&gt;</span><br><span class="line">      &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;?php $this-&gt;options-&gt;themeUrl(&#x27;css/prism.css&#x27;); ?&gt;&quot; /&gt;</span><br><span class="line">      &lt;script src=&quot;&lt;?php $this-&gt;options-&gt;themeUrl(&#x27;js/prism.js&#x27;); ?&gt;&quot;&gt;&lt;/script&gt;</span><br><span class="line">     </span><br><span class="line">      &lt;script type=&quot;text/javascript&quot; id=&quot;hexo.configuration&quot;&gt;</span><br></pre></td></tr></table></figure></li><li><p>done!</p></li></ul><hr /><h2 id="书写方式">3 书写方式</h2><h3 id="触发方式">3.1 触发方式</h3><p>在Markdown文档的代码段部分开头做上标记，写上当前语言即可，如：python</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">​```python</span><br><span class="line">import os</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">print(&quot;String highlight&quot;)</span><br><span class="line">​```</span><br></pre></td></tr></table></figure><p>效果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;String highlight&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> front-end </tag>
            
            <tag> Typecho </tag>
            
            <tag> prism </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SharedPreferences - Android Key-Value键值存储</title>
      <link href="/posts/SharedPreferences-Android-Key-Value%E9%94%AE%E5%80%BC%E5%AD%98%E5%82%A8/"/>
      <url>/posts/SharedPreferences-Android-Key-Value%E9%94%AE%E5%80%BC%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p>写SudaLogin Androidapp时，使用了SharedPreferences来实现保存配置信息等Key-Value形式的数据。</p><span id="more"></span><h1 id="sharedpreferences---android-key-value键值存储">SharedPreferences- Android Key-Value键值存储</h1><h2 id="sharedpreferences">1 SharedPreferences</h2><ul><li><code>SharedPreferences</code>适用于存储小型数据，如配置信息，设置项。</li></ul><h3 id="依赖包">1.1 依赖包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.SharedPreferences;</span><br></pre></td></tr></table></figure><h3 id="读取示例">1.2 读取示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得SharedPreferences对象</span></span><br><span class="line"><span class="type">SharedPreferences</span> <span class="variable">preferences</span> <span class="operator">=</span> MainActivity.<span class="built_in">this</span>.getSharedPreferences(<span class="string">&quot;SudaLoginDev&quot;</span>, Context.MODE_PRIVATE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SharedPreferences支持Java的基本数据类型</span></span><br><span class="line"><span class="comment">// 参数1为key，参数2为默认返回的value（如找不到存储的键值）</span></span><br><span class="line">preferences.getInt(<span class="string">&quot;frequency&quot;</span>, <span class="number">0</span>);</span><br><span class="line">prefenences.getString(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">preferences.getBoolean(<span class="string">&quot;enable&quot;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h3 id="写入示例">1.3 写入示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得SharedPreferences对象</span></span><br><span class="line"><span class="type">SharedPreferences</span> <span class="variable">preferences</span> <span class="operator">=</span> MainActivity.<span class="built_in">this</span>.getSharedPreferences(<span class="string">&quot;SudaLoginDev&quot;</span>, Context.MODE_PRIVATE);</span><br><span class="line"><span class="comment">// 获得编辑器对象</span></span><br><span class="line">SharedPreferences.<span class="type">Editor</span> <span class="variable">editor</span> <span class="operator">=</span> preferences.edit();</span><br><span class="line"></span><br><span class="line"><span class="comment">// SharedPreferences支持Java的基本数据类型</span></span><br><span class="line"><span class="comment">// 参数1为key，参数2为对应的value</span></span><br><span class="line">editor.putInt(<span class="string">&quot;frequency&quot;</span>, <span class="number">1</span>);</span><br><span class="line">editor.putString(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;name1&quot;</span>);</span><br><span class="line">editor.putBoolean(<span class="string">&quot;enable&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入编辑结束后，须提交</span></span><br><span class="line"><span class="comment">// editor.commit();</span></span><br><span class="line">editor.apply();<span class="comment">// 优化：apply自动优化写入时机，性能比占用同步资源的commit更好</span></span><br></pre></td></tr></table></figure><ul><li>我编写的时候，发现网上的资料大多老旧，还在使用<code>editor.commit()</code>。Android官方现推荐调用<code>editor.apply()</code>，以求达到更好的IO 性能。</li><li>欣赏下Android的文档 - <code>commit()</code>，<code>apply()</code>方法的Declaration</li></ul><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Commit your preferences changes back from this Editor to the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> SharedPreferences&#125; object it is editing.  This atomically</span></span><br><span class="line"><span class="comment"> * performs the requested modifications, replacing whatever is currently</span></span><br><span class="line"><span class="comment"> * in the SharedPreferences.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that when two editors are modifying preferences at the same</span></span><br><span class="line"><span class="comment"> * time, the last one to call commit wins.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If you don\&#x27;t care about the return value and you\&#x27;re</span></span><br><span class="line"><span class="comment"> * using this from your application\&#x27;s main thread, consider</span></span><br><span class="line"><span class="comment"> * using &#123;<span class="doctag">@link</span> #apply&#125; instead.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Returns true if the new values were successfully written</span></span><br><span class="line"><span class="comment"> * to persistent storage.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">commit</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Commit your preferences changes back from this Editor to the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> SharedPreferences&#125; object it is editing.  This atomically</span></span><br><span class="line"><span class="comment"> * performs the requested modifications, replacing whatever is currently</span></span><br><span class="line"><span class="comment"> * in the SharedPreferences.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that when two editors are modifying preferences at the same</span></span><br><span class="line"><span class="comment"> * time, the last one to call apply wins.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Unlike &#123;<span class="doctag">@link</span> #commit&#125;, which writes its preferences out</span></span><br><span class="line"><span class="comment"> * to persistent storage synchronously, &#123;<span class="doctag">@link</span> #apply&#125;</span></span><br><span class="line"><span class="comment"> * commits its changes to the in-memory</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> SharedPreferences&#125; immediately but starts an</span></span><br><span class="line"><span class="comment"> * asynchronous commit to disk and you won\&#x27;t be notified of</span></span><br><span class="line"><span class="comment"> * any failures.  If another editor on this</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> SharedPreferences&#125; does a regular &#123;<span class="doctag">@link</span> #commit&#125;</span></span><br><span class="line"><span class="comment"> * while a &#123;<span class="doctag">@link</span> #apply&#125; is still outstanding, the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #commit&#125; will block until all async commits are</span></span><br><span class="line"><span class="comment"> * completed as well as the commit itself.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;As &#123;<span class="doctag">@link</span> SharedPreferences&#125; instances are singletons within</span></span><br><span class="line"><span class="comment"> * a process, it\&#x27;s safe to replace any instance of &#123;<span class="doctag">@link</span> #commit&#125; with</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #apply&#125; if you were already ignoring the return value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;You don\&#x27;t need to worry about Android component</span></span><br><span class="line"><span class="comment"> * lifecycles and their interaction with &lt;code&gt;apply()&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * writing to disk.  The framework makes sure in-flight disk</span></span><br><span class="line"><span class="comment"> * writes from &lt;code&gt;apply()&lt;/code&gt; complete before switching</span></span><br><span class="line"><span class="comment"> * states.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p class=\&#x27;note\&#x27;&gt;The SharedPreferences.Editor interface</span></span><br><span class="line"><span class="comment"> * isn\&#x27;t expected to be implemented directly.  However, if you</span></span><br><span class="line"><span class="comment"> * previously did implement it and are now getting errors</span></span><br><span class="line"><span class="comment"> * about missing &lt;code&gt;apply()&lt;/code&gt;, you can simply call</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #commit&#125; from &lt;code&gt;apply()&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">apply</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></blockquote><ul><li>阅读即知，<code>apply()</code>是异步（asynchronous）写入，会根据修改情况，自动优化写入时机，以减少IO访问次数，实现更好的IO性能。而<code>commit()</code>则是同步写入（synchronous），特别是应用主线程中，为减少同步等待，使用<code>apply()</code>方法更好。</li></ul><h3 id="其它">1.4 其它</h3><p>另外还有如<code>editor.remove()</code>，<code>editor.clear()</code>等API，具体使用时查看Declaration即可。Android的Declaration部分代码及注释编写非常详实规范，在此赞叹一番。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HttpURLConnection - Java网络编程</title>
      <link href="/posts/HttpURLConnection-Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/posts/HttpURLConnection-Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>写SudaLogin Android app时，找了Java方面的网络编程方法。HttpURLConnection作为Android官方文档中建议的网络编程库，稳定可靠，现整理如下：</p><span id="more"></span><h1 id="httpurlconnection---java网络编程">HttpURLConnection -Java网络编程</h1><h2 id="post报文">1 POST报文</h2><h3 id="依赖包">1.1 依赖包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br></pre></td></tr></table></figure><h3 id="编程示例">1.2 编程示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 请求的地址</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">spec</span> <span class="operator">=</span> <span class="string">&quot;http://example.com/example&quot;</span>;</span><br><span class="line">    <span class="comment">// 根据地址创建URL对象</span></span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(spec);</span><br><span class="line">    <span class="comment">// 根据URL对象打开链接</span></span><br><span class="line">    <span class="type">HttpURLConnection</span> <span class="variable">urlConnection</span> <span class="operator">=</span> (HttpURLConnection) url.openConnection();</span><br><span class="line">    <span class="comment">// 设置请求的方式（此例为HTTP协议POST报文）</span></span><br><span class="line">    urlConnection.setRequestMethod(<span class="string">&quot;POST&quot;</span>);</span><br><span class="line">    <span class="comment">// 设置请求的超时时间</span></span><br><span class="line">    urlConnection.setReadTimeout(<span class="number">5000</span>);</span><br><span class="line">    urlConnection.setConnectTimeout(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 传递的数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;--&gt;POST报文数据！&lt;--&quot;</span></span><br><span class="line">    System.out.println(data);</span><br><span class="line"></span><br><span class="line">    urlConnection.setDoOutput(<span class="literal">true</span>); <span class="comment">// 发送POST请求必须设置允许输出</span></span><br><span class="line">    urlConnection.setDoInput(<span class="literal">true</span>); <span class="comment">// 发送POST请求必须设置允许输入</span></span><br><span class="line">    <span class="comment">//setDoInput的默认值就是true</span></span><br><span class="line">    <span class="comment">//获取POST输出流</span></span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> urlConnection.getOutputStream();</span><br><span class="line">    os.write(data.getBytes());  <span class="comment">// 字节流</span></span><br><span class="line">    os.flush();     <span class="comment">// 完整发送POST报文数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取响应的输入流对象</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> urlConnection.getInputStream();</span><br><span class="line">    <span class="comment">// 创建字节输出流对象</span></span><br><span class="line">    <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">    <span class="comment">// 定义读取的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 定义缓冲区</span></span><br><span class="line">    <span class="type">byte</span> buffer[] = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">// 按照缓冲区的大小，循环读取</span></span><br><span class="line">    <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123; <span class="comment">// InputStream --read-&gt; buffer(byte[])</span></span><br><span class="line">        <span class="comment">// 根据读取的长度写入到os对象中</span></span><br><span class="line">        baos.write(buffer, <span class="number">0</span>, len);         <span class="comment">// buffer(byte[]) --write-&gt; ByteArrayOutputStream</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回字符串</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> baos.toString();  <span class="comment">// ByteArrayOutputStream -&gt; String</span></span><br><span class="line">    <span class="comment">//                final String result = new String(baos.toByteArray());</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    is.close();</span><br><span class="line">    baos.close();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> Network </tag>
            
            <tag> Java </tag>
            
            <tag> SudaLogin </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML笔记</title>
      <link href="/posts/HTML%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/HTML%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>整理了一些HTML笔记，日常速成计划 : )</p><span id="more"></span><h1 id="html笔记">HTML笔记</h1><h2 id="概念">1 概念</h2><h3 id="定义">1.1 定义</h3><ul><li>超文本标记语言（英语：HyperText MarkupLanguage，简称：HTML）是一种用于创建网页的标准标记语言。</li></ul><h3 id="动态静态网页">1.2 动态/静态网页</h3><ul><li>静态网页，无计算处理能力的网页，后缀名：<code>.htm</code>，<code>.html</code>， <code>.shtml</code>， <code>.xml</code>；</li><li>动态网页，有计算处理能力的网页，可提供交互反馈等，如<code>.asp</code>， <code>.jsp</code>， <code>.php</code>，<code>.perl</code>， <code>.cgi</code>；</li></ul><p><strong>注意</strong>：动态/静态之分与网页画面是否在动无关</p><h3 id="标记">1.3 标记</h3><ul><li>HTML作为标记(Markup)语言，其核心组成元素是标记。</li><li>标记分为<strong>单标记</strong>和<strong>双标记</strong>；</li></ul><h4 id="单标记">1.3.1 单标记</h4><ul><li><code>&lt;标记 /&gt;</code>， 简记<code>&lt;标记&gt;</code></li><li>例子：<ul><li><code>&lt;hr&gt;</code> - 横线（水平分隔线（horizontal rule））</li><li><code>&lt;br&gt;</code> - 换行（barter rabbet）</li></ul></li></ul><h4 id="双标记">1.3.2 双标记</h4><ul><li><code>&lt;标记&gt;内容&lt;/标记&gt;</code></li></ul><h4 id="注释">1.3.3 注释</h4><ul><li><p><code>&lt;!-- 注释内容 --&gt;</code></p></li><li><p>也可跨行</p></li><li><p>```html <!--  注释内容行1  注释内容行2  ……  --> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 1.4  结构</span><br><span class="line"></span><br><span class="line">document</span><br><span class="line"></span><br><span class="line">- html</span><br><span class="line">  - head</span><br><span class="line">    - title</span><br><span class="line">      - meta</span><br><span class="line">  - body</span><br><span class="line">    - table</span><br><span class="line">    - span</span><br><span class="line">    - p</span><br><span class="line"></span><br><span class="line">**注意**：HTML标记须按照结构组织，可以包含，但不得交叉，如 `&lt;title&gt;` 不得放入 `&lt;body&gt;` 内。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 2  版面</span><br><span class="line"></span><br><span class="line">### 2.1  标题</span><br><span class="line"></span><br><span class="line">标题共6级，从1到6，字体有大到小，</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;h1&gt;标题&lt;/h1&gt;// 最大</span><br><span class="line">&lt;h2&gt;标题&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;标题&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;标题&lt;/h4&gt;</span><br><span class="line">&lt;h5&gt;标题&lt;/h5&gt;</span><br><span class="line">&lt;h6&gt;标题&lt;/h6&gt;// 最小</span><br></pre></td></tr></table></figure></p></li></ul><h3 id="段落">2.2 段落</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">段落</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>段落之间默认会有段距；</p><p>注意**：默认多个连续空格会合并成一个，多个连续空行会合并成一行。</p><ul><li>增加空格： <code>&amp;nbsp</code> ；</li><li>增加空行：<ul><li>换行标记：<code>&lt;br /&gt;</code>，简记为<code>&lt;br&gt;</code>；</li><li>段间距：<code>&lt;p&gt;&lt;/p&gt;</code>，简记为<code>&lt;p&gt;</code>；</li></ul></li><li>禁用换行：<code>&lt;nobr&gt;段落&lt;/nobr&gt;</code>（不常用）；</li></ul><h3 id="对齐">2.3 对齐</h3><ul><li>标记的align属性：<ul><li><code>align="left"</code> ，另有"right"，"center"；</li></ul></li><li>居中标记：<ul><li><code>&lt;center&gt;内容&lt;/center&gt;</code></li></ul></li></ul><h3 id="列表">2.4 列表</h3><h4 id="无序表">2.4.1 无序表</h4><p>无序表标记为<code>&lt;ul&gt;表&lt;/ul&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="有序表">2.4.2 有序表</h4><p>有序表标记为<code>&lt;ol&gt;表&lt;/ol&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>表项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>表项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>有序表默认<code>type</code>属性为“1”，表示数字序标<ul><li>另：<code>"A"</code>, <code>"a"</code>, <code>"i"</code>,<code>"Ⅰ"</code>；</li></ul></li></ul><h3 id="特殊段">2.5 特殊段</h3><h4 id="预解析">2.5.1 预解析</h4><ul><li><code>&lt;pre&gt;内容&lt;/pre&gt;</code><ul><li>只解析内容中的HTML标记，不合并空格、换行，保留源格式</li></ul></li></ul><h4 id="不解析">2.5.2 不解析</h4><ul><li><code>&lt;xmp&gt;内容&lt;/xmp&gt;</code><ul><li>不对内容做任何解析，保留内容中的HTML标记，格式；</li></ul></li></ul><h4 id="代码段">2.5.3 代码段</h4><ul><li><code>&lt;code&gt;代码段&lt;/code&gt;</code><ul><li>用于显示代码</li></ul></li><li><code>&lt;/var&gt;变量&lt;/var&gt;</code><ul><li>用于标记变量（会斜体显示）</li></ul></li></ul><hr /><h2 id="字体">3 字体</h2><p>字体分物理字体和逻辑字体。</p><h3 id="物理字体">3.1 物理字体</h3><ul><li><b>粗体</b> - <code>&lt;b&gt;粗体&lt;/b&gt;</code></li><li><i>斜体</i> - <code>&lt;i&gt;斜体&lt;/i&gt;</code></li><li><u>下划线</u> - <code>&lt;u&gt;下划线&lt;/u&gt;</code></li><li><s>删除线</s> - <code>&lt;s&gt;删除线&lt;/s&gt;</code></li><li><sup>上标</sup> - <code>&lt;sup&gt;上标&lt;/sup&gt;</code></li><li><sub>下标</sub> - <code>&lt;sub&gt;下标&lt;/sub&gt;</code></li><li><tt>打字机字体</tt> -<code>&lt;tt&gt;打字机字体&lt;/tt&gt;</code></li></ul><h3 id="逻辑字体">3.2 逻辑字体</h3><ul><li><em>强调</em> - <code>&lt;em&gt;强调&lt;/em&gt;</code></li><li><strong>加重</strong> -<code>&lt;strong&gt;加重&lt;/strong&gt;</code></li><li><code>代码</code> - <code>&lt;code&gt;代码&lt;/code&gt;</code></li><li><samp>示例文字</samp> -<code>&lt;samp&gt;示例文字&lt;/samp&gt;</code></li><li><kbd>键盘按键文字</kbd> -<code>&lt;kbd&gt;键盘按键文字&lt;/kbd&gt;</code></li><li><small>缩小</small> -<code>&lt;small&gt;缩小&lt;/small&gt;</code></li><li><big>放大</big> - <code>&lt;big&gt;放大&lt;/big&gt;</code></li></ul><h3 id="属性字体">3.3 属性字体</h3><p>更高级的字体设计可以使用属性字体标记实现：</p><p><code>&lt;font&gt;字体&lt;/font&gt;</code></p><h4 id="颜色">3.3.1 颜色</h4><ul><li><code>&lt;font color="red"&gt;字体&lt;/font&gt;</code><ul><li>属性值为颜色名</li></ul></li><li><code>&lt;font color="#ff0000"&gt;字体&lt;/font&gt;</code><ul><li>属性值为RGB 十六进制值</li></ul></li></ul><h4 id="大小">3.3.2 大小</h4><ul><li><code>&lt;font size="3"&gt;字体&lt;/font&gt;</code><ul><li>size的值从1~7，由小到大</li></ul></li></ul><hr /><h2 id="图像">4 图像</h2><h3 id="引用图片">4.1 引用图片</h3><p>引用图片时： <code>&lt;img src="url"&gt;</code></p><h3 id="属性">4.2 属性</h3><ul><li><code>width="200px"</code> px即像素</li><li><code>height="..px"</code></li><li><code>alt="解释"</code><ul><li>光标停留时输出</li><li>图片加载失败时显示</li></ul></li><li><code>align="bottom"</code><ul><li>默认bottom， 另top, middle；</li></ul></li><li><code>border="1opx"</code><ul><li>边框像素</li></ul></li></ul><hr /><h2 id="链接">5 链接</h2><h3 id="超链接">5.1 超链接</h3><h4 id="基本">5.1.1 基本</h4><p><code>&lt;a href="example.html"&gt;内容&lt;/a&gt;</code></p><ul><li>内容可以是文字或图片等…</li></ul><h4 id="属性-1">5.1.2 属性</h4><ul><li><code>target="_self"</code><ul><li>默认<code>"_self"</code> 当前窗口打开</li><li><code>_parent</code> 父标签页打开</li><li><code>_top</code> 销毁当前标签页，顶层窗口打开</li><li><code>_blank</code> 新标签页打开</li></ul></li></ul><h3 id="区域链接">5.2 区域链接</h3><p>通过<code>map</code>和<code>area</code>在图片中实现可点击的链接区域：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;example.jpg&quot;</span> <span class="attr">usemap</span>=<span class="string">&quot;#face&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">map</span> <span class="attr">name</span>=<span class="string">&quot;face&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;rect&quot;</span> <span class="attr">href</span>=<span class="string">&quot;link1.html&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;140, 20, 280, 60&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;ploy&quot;</span> <span class="attr">href</span>=<span class="string">&quot;link2.html&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;100, 100, 180, 80, 200, 140&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">area</span> <span class="attr">shape</span>=<span class="string">&quot;circle&quot;</span> <span class="attr">href</span>=<span class="string">&quot;link3.html&quot;</span> <span class="attr">coords</span>=<span class="string">&quot;80, 100, 60&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="页内链接">5.3 页内链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#item&quot;</span>&gt;</span>跳转至item处<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">……</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>点击后，会在页面内跳转到item目标行</li></ul><hr /><h2 id="表单">6 表单</h2><h3 id="表单框体">6.1 表单框体</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;test.aspx&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">  表项</span><br><span class="line">  ……</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>action</code> 表单发送目标url</li><li><code>method</code> GET或POST报文</li></ul><h3 id="输入">6.2 输入</h3><h4 id="文本框">6.2.1 文本框</h4><ul><li><code>&lt;input type="text"&gt;</code><ul><li>上限255字符</li></ul></li></ul><h4 id="密码框">6.2.2 密码框</h4><ul><li><code>&lt;input type="password"&gt;</code></li></ul><h4 id="按钮">6.2.3 按钮</h4><ul><li><code>&lt;input type="submit" value="提交"&gt;</code><ul><li>提交按钮</li></ul></li><li><code>&lt;input type="reset" value="重置"&gt;</code><ul><li>重置按钮</li></ul></li><li><code>&lt;input type="button" value="自定义按钮"&gt;</code><ul><li>自定义</li></ul></li></ul><h4 id="上传">6.2.4 上传</h4><ul><li><code>&lt;input type="image" src="image.jpg" /&gt;</code><ul><li>图片</li></ul></li><li><code>&lt;input type="file" /&gt;</code><ul><li>上传文件，点击后会弹出文件选择框</li></ul></li></ul><h4 id="隐藏信息">6.2.5 隐藏信息</h4><ul><li><code>&lt;input type="hidden" name="text" value="隐藏区域信息"&gt;</code></li></ul><hr /><h2 id="表格">7 表格</h2><h3 id="表格框体">7.1 表格框体</h3><ul><li><code>&lt;table&gt;&lt;/table&gt;</code></li><li>属性：<ul><li><code>border="1"</code><ul><li>边框粗细</li></ul></li><li><code>width</code></li><li><code>height</code></li><li><code>align</code></li></ul></li></ul><h3 id="结构解析">7.2 结构解析</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>table head1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>table head2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>table data1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>table data2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>表格框体内，逐行，行内逐列</li><li>表行、表头、表项都有诸如<code>align</code>的属性，可调整对齐方式，如<code>"center"</code>居中</li></ul><h4 id="表行">7.2.1 表行</h4><ul><li>```html<tr>列信息</tr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 7.2.2  表头</span><br><span class="line"></span><br><span class="line">- ```html</span><br><span class="line">  &lt;th&gt;</span><br><span class="line">    表头值</span><br><span class="line">  &lt;/th&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="表项">7.2.2 表项</h4><ul><li>```html<td>表项值</td><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 7.3  表格版面</span><br><span class="line"></span><br><span class="line">#### 7.3.1  跨行</span><br><span class="line"></span><br><span class="line">- `rowspan=3`</span><br><span class="line">  - 当前元素跨3行</span><br><span class="line"></span><br><span class="line">#### 7.3.2  跨列</span><br><span class="line"></span><br><span class="line">- `colspan=3`</span><br><span class="line">  - 当前元素跨3列</span><br><span class="line"></span><br><span class="line">#### 7.3.3  对齐</span><br><span class="line"></span><br><span class="line">- 表行、表头、表项都有诸如`align` 的属性，可调整对齐方式：</span><br><span class="line">  - `&quot;center&quot;`居中；</span><br><span class="line">  - `&quot;right&quot;` 右对齐。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 8  框架</span><br><span class="line"></span><br><span class="line">### 8.1  概念</span><br><span class="line"></span><br><span class="line">- 一个页面可以包含frameset，一个frameset可以包含多个frame，每个frame显示一个page。</span><br><span class="line">- 框架用途：</span><br><span class="line">  - 常驻导航栏，导航栏中显示多个板块链接，方便用户在显示框架中切换到不同页面</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 8.2  框架集</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;frameset cols=&quot;25,50,25&quot;&gt;</span><br><span class="line">  &lt;frame src=&quot;http://a.com&quot; /&gt;</span><br><span class="line">  &lt;frame src=&quot;http://b.com&quot; /&gt;</span><br><span class="line">  &lt;frame src=&quot;http://c.com&quot; /&gt;</span><br><span class="line">&lt;/frameset&gt;</span><br></pre></td></tr></table></figure></li><li>1:2:1 分三列显示三个页面</li><li><code>&lt;frameset frameborder="yes"&gt;</code><ul><li>另有 <code>"no"</code> 或 <code>1</code>或<code>0</code></li><li>控制框架集边框显示</li></ul></li></ul><p><strong>注意</strong>：<code>&lt;frameset&gt;</code> 不得与<code>&lt;body&gt;</code> 并列。</p><h3 id="框架">8.3 框架</h3><ul><li><code>&lt;frame src="http://c.com" /&gt;</code><ul><li><code>&lt;frame /&gt;</code> 是<strong>单标记</strong></li></ul></li><li>禁用调节：使框架大小无法被用户调节<ul><li><code>&lt;frame noresize="noresize"&gt;</code></li></ul></li><li>滑动条<ul><li><code>&lt;frame src="http://a.com" scrolling="auto"&gt;</code><ul><li>另有： <code>"yes"</code> 或 <code>"no"</code>，可启用或禁用滚动条</li></ul></li></ul></li></ul><h3 id="分栏">8.4 分栏</h3><ul><li><strong>框架集</strong>属性 <code>cols</code>，<code>rows</code></li></ul><h4 id="多列分栏">8.4.1 多列分栏</h4><ul><li><code>cols</code> 属性表示分配列向分栏比例</li></ul><h4 id="多行分栏">8.4.2 多行分栏</h4><ul><li><code>rows</code> 属性分配行向分栏比例</li></ul><h4 id="表格分割">8.4.3 表格分割</h4><ul><li>复合使用<code>cols</code>和<code>rows</code>属性可以实现表格分割</li></ul><h3 id="内联框架">8.5 内联框架</h3><p><code>&lt;iframe src="a,html" /&gt;</code></p><ul><li><p>嵌入在网页的一个独立网页框</p></li><li><p>属性：类似<code>&lt;frame&gt;</code></p></li></ul><hr /><h2 id="多媒体嵌入">9 多媒体嵌入</h2><h3 id="嵌入标记">9.1 嵌入标记</h3><ul><li><code>&lt;embed src=url&gt;</code></li><li>可嵌入音频、视频</li><li><code>url</code> 是需要嵌入多媒体的URL</li><li>依赖浏览器协同的音视频播放器 Windows Media Player</li></ul><h3 id="属性-2">9.2 属性</h3><ul><li><code>autostart=true/false</code><ul><li>自动播放</li></ul></li><li><code>loop=true/false</code><ul><li>循环播放</li></ul></li><li><code>hidden=true/false(no)</code><ul><li>隐藏播放器显示</li></ul></li><li><code>height</code></li><li><code>width</code><ul><li>默认单位<code>px</code></li></ul></li><li><code>bgcolor</code></li><li><code>align</code></li></ul><hr /><h2 id="动态效果">10 动态效果</h2><h3 id="滚动">10.1 滚动</h3><h4 id="滚动标记">10.1.1 滚动标记</h4><p><marquee>内容</marquee></p><ul><li><code>&lt;marquee&gt;内容&lt;/marquee&gt;</code><ul><li>默认从右向左滚动</li></ul></li></ul><h4 id="属性-3">10.1.2 属性</h4><ul><li><code>direction=left</code><ul><li>滚动方向</li><li>另 <code>"right"</code>， <code>"up"</code>，<code>"down"</code></li></ul></li><li><code>scrollamount</code><ul><li>滚动量（滚动速度）</li></ul></li><li><code>behavior=“scroll”</code><ul><li>滚动方式，默认<code>scroll</code> 来回滚动</li><li>另 <code>alternate</code> 来回滚动， <code>slide</code>一次滚动</li></ul></li><li><code>loop="5"</code><ul><li>循环次数，此处为循环5次</li></ul></li><li><code>scrolldelay</code></li><li><code>bgcolor</code></li><li><code>width</code></li><li><code>height</code></li></ul><hr /><h2 id="区块">11 区块</h2><h3 id="行块span">11.1 行块span</h3><h4 id="标记-1">11.1.1 标记</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="特点">11.1.2 特点</h4><ul><li>span是跨度，宽度，从一头到另一头义</li><li>顾名思义，span块的宽度为内容宽度，且内容单行，不换行</li></ul><h3 id="区块div">11.2 区块div</h3><h4 id="标记-2">11.2.1 标记</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="特点-1">11.2.2 特点</h4><ul><li>宽度默认为父容器宽度</li><li>行、段等其它元素均可放置在div内，<code>&lt;div&gt;</code>标记使用范围广，与CSS紧密相关</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> front-end </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署基于Apache的全站HTTPS加密</title>
      <link href="/posts/%E9%83%A8%E7%BD%B2%E5%9F%BA%E4%BA%8EApache%E7%9A%84%E5%85%A8%E7%AB%99HTTPS%E5%8A%A0%E5%AF%86/"/>
      <url>/posts/%E9%83%A8%E7%BD%B2%E5%9F%BA%E4%BA%8EApache%E7%9A%84%E5%85%A8%E7%AB%99HTTPS%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>一晚上的摸索，成功实现了全站HTTPS (TLS)加密！</p><span id="more"></span><h2 id="why-https">0 Why HTTPS?</h2><h3 id="https加密了什么">0.1 HTTPS加密了什么？</h3><p>HTTPS作为应用层加密，目前主要用于HTTP协议，其加密的对象是应用层报文，将加密过的报文作为数据段，递交给传输层进一步封装发送。</p><blockquote><p>在发送方。SSL接受应用层的数据（如HTTP或IMAP报文），对数据进行加密，然后把加了密的数据送往TCP套接字。在接收方，SSL从TCP套接字读取数据，解密后把数据交给应用层。</p><p>（谢希仁 编著《计算机网络（第6版）》）</p></blockquote><h3 id="https相对http安全在哪">0.2 HTTPS相对HTTP安全在哪？</h3><p>HTTP报文的加密传输，意味着：</p><ul><li>用户的访问请求完全保密，如：点击了什么链接，浏览了哪些页面；</li><li>用户发送的信息完全加密，如：登陆时的账号、密码、验证码，评论、留言、在线邮件、聊天等；</li><li>服务器发送给用户的响应数据完全加密，如：网页内容，API响应；</li><li>页面无劫持，无篡改，如：中间人（特别是某些运营商，CDN），将无法篡改网页内容，插入广告、弹窗等恶意信息</li></ul><p>另外，公共CA主持的RSA加密体系，包含服务器及客户身份鉴别，意味着：</p><ul><li>访问前会验证站点证书的合法性（是否由可信CA签发，是否处于有效期），校验授权域名和实际访问是否匹配，确保访问的一致性，防范了恶意跳转、钓鱼网站等风险。</li></ul><h2 id="获取ssl证书">1 获取SSL证书</h2><p>SSL证书方面，因为我采用的是腾讯云的平台，所以很方便地申请到了<strong>TrustAsiaDV SSL CA -G5</strong>证书，授信时长一年。审核速度挺快，10分钟左右就会有短信和站内信通知。</p><p><strong>TrustAsia DV SSL CA - G5</strong> 核心参数如下：</p><ul><li>签名算法： sha256RSA</li><li>公钥：RSA (2048 Bits)</li><li>指纹算法： sha1</li><li>颁布者：<ul><li>CN = TrustAsia DV SSL CA - G5 OU = Domain Validated SSL OU =Symantec Trust Network O = TrustAsia Technologies, Inc. C = CN</li></ul></li><li>证书路径：<ul><li>VeriSign<ul><li>TrustAsia DV SSL CA - G5<ul><li>heary.cn</li></ul></li></ul></li></ul></li></ul><p><a href="https://letsencrypt.org/"><imgsrc="https://letsencrypt.org/images/letsencrypt-logo-horizontal.svg"alt="Let&#39;s Encrypt" /></a>另外，获取SSL的方式众多，国际上大力推广https且获得众多企业资助的组织<strong>Let's Encrypt</strong> ，签发快，且免费。</p><p>当然实在不行也可以采用Ubuntu下的openssl自行签发，但这不是公共CA。</p><blockquote><p><a href="https://letsencrypt.org/">Let's Encrypt</a></p></blockquote><hr /><h2 id="部署至服务器">2 部署至服务器</h2><h3 id="上传证书及私钥文件">2.1 上传证书及私钥文件</h3><p>网上大多数的文档资料大概都是基于CentOS。</p><p>我服务器上部署的ubuntu server 16.04情况并不相同，经查 apache2主路径位于 <code>/etc/apache2/</code>。</p><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r--   1 root   root    7114 3月  15 20:52 apache2.conf</span><br><span class="line">drwxr-xr-x   2 root   root    4096 3月   9 10:03 conf-available/</span><br><span class="line">drwxr-xr-x   2 root   root    4096 3月   9 10:03 conf-enabled/</span><br><span class="line">-rw-r--r--   1 root   root    1782 3月  19  2016 envvars</span><br><span class="line">drwxrwxr-x   2 ubuntu ubuntu  4096 3月  15 19:40 heary_cn-ssl/</span><br><span class="line">-rw-r--r--   1 root   root   31063 3月  19  2016 magic</span><br><span class="line">drwxr-xr-x   2 root   root   12288 3月   8 18:04 mods-available/</span><br><span class="line">drwxr-xr-x   2 root   root    4096 3月  15 20:50 mods-enabled/</span><br><span class="line">-rw-r--r--   1 root   root     320 3月  19  2016 ports.conf</span><br><span class="line">drwxr-xr-x   2 root   root    4096 3月  15 20:48 sites-available/</span><br><span class="line">drwxr-xr-x   2 root   root    4096 3月  15 20:48 sites-enabled/</span><br></pre></td></tr></table></figure><p>首先，<code>heary_cn-ssl/</code>是我上传并保存根信息，公钥证书和私钥文件的目录。</p><ul><li>把<code>*.crt</code>和<code>*.key</code>文件上传或移动至该目录<ul><li>注意：修改<code>/etc/apache2</code>目录可能需要sudo权限</li></ul></li></ul><h3 id="开启apache-ssl模块">2.2 开启Apache SSL模块</h3><p>接下来，开启Apache2的SSL模块。</p><ul><li><strong><code>sudo a2enmod ssl</code></strong><ul><li>安装ssl模块</li><li>安装完成后，可以发现<code>mods-enabled/</code>目录中会多出<code>ssl.conf</code>和<code>ssl.load</code>的软连接。</li></ul></li></ul><h3 id="配置https-443端口站点">2.3 配置https 443端口站点</h3><p>接着，开始部署443端口站点配置。</p><ul><li><p>转入站点配置路径：</p><ul><li><strong><code>cd sites-available/</code></strong></li></ul></li><li><p>复制默认的SSL站点配置模板以便修改</p><ul><li><strong><code>sudo cp default-ssl.conf heary_cn-ssl.conf</code></strong></li></ul></li><li><p>修改新建SSL站点配置文件以部署本机的HTTPS加密</p><ul><li><strong><code>sudo vim heary_cn-ssl.conf</code></strong></li><li>修改以下项目：</li></ul></li><li><p>```apacheconf # SSL Engine Switch: # Enable/Disable SSL for thisvirtual host. SSLEngine on</p><h1id="a-self-signed-snakeoil-certificate-can-be-created-by-installing">Aself-signed (snakeoil) certificate can be created by installing</h1><h1 id="the-ssl-cert-package.-see">the ssl-cert package. See</h1><h1id="usrsharedocapache2readme.debian.gz-for-more-info.">/usr/share/doc/apache2/README.Debian.gzfor more info.</h1><h1id="if-both-key-and-certificate-are-stored-in-the-same-file-only-the">Ifboth key and certificate are stored in the same file, only the</h1><h1 id="sslcertificatefile-directive-is-needed.">SSLCertificateFiledirective is needed.</h1><p>SSLCertificateFile /etc/apache2/heary_cn-ssl/2_heary.cn.crtSSLCertificateKeyFile /etc/apache2/heary_cn-ssl/3_heary.cn.key</p><h1 id="server-certificate-chain">Server Certificate Chain:</h1><h1 id="point-sslcertificatechainfile-at-a-file-containing-the">PointSSLCertificateChainFile at a file containing the</h1><h1id="concatenation-of-pem-encoded-ca-certificates-which-form-the">concatenationof PEM encoded CA certificates which form the</h1><h1id="certificate-chain-for-the-server-certificate.-alternatively">certificatechain for the server certificate. Alternatively</h1><h1 id="the-referenced-file-can-be-the-same-as-sslcertificatefile">thereferenced file can be the same as SSLCertificateFile</h1><h1id="when-the-ca-certificates-are-directly-appended-to-the-server">whenthe CA certificates are directly appended to the server</h1><h1 id="certificate-for-convinience.">certificate for convinience.</h1><p>SSLCertificateChainFile /etc/apache2/heary_cn-ssl/1_root_bundle.crt<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 进入开启站点目录：</span><br><span class="line"></span><br><span class="line">  - **`cd /etc/apache2/sites-enabled/ `**</span><br><span class="line"></span><br><span class="line">- 创建软链接，链接到刚刚新建且修改好的配置文件</span><br><span class="line"></span><br><span class="line">  - **`sudo ln -s ../sites-available/heary_cn-ssl.conf 001-default.conf `**</span><br><span class="line">  - **理解**：这就是Apache2使配置项生效的方式，在 `***-available/` 中创建或修改配置文件，在`***-enabled/`中软连接到配置文件使其生效。实际上阅读apache2.conf可以看到，其主配置文件中会去扫描、包含（include）`***-enabled/` 的内容，使其生效。这种方式确实更有条理！</span><br><span class="line"></span><br><span class="line">### 2.4  重启服务, done!</span><br><span class="line"></span><br><span class="line">最后，重启Apache2服务。</span><br><span class="line"></span><br><span class="line">- **`sudo service apache2 restart`**</span><br><span class="line">- OK，完成到这一步后，站点就可以用 https 访问了！</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">## 3  测试和Debug</span><br><span class="line"></span><br><span class="line">通常，原有的站点或博客架构等都会出现https和http混合的现象，此时Chrome, Edge等浏览器是不会给你的站点打上安全，或是小锁的标记的，因为你的站点并非完全基于https，仍有安全隐患。</span><br><span class="line"></span><br><span class="line">此时，你需要检查网络流，修改你的调用链接。</span><br><span class="line"></span><br><span class="line">### 3.1  以Gravatar为例</span><br><span class="line"></span><br><span class="line">例如，我的博客中使用了**Gravatar** 服务，而原始的调用链接是使用的国内的CDN镜像链接，还未提供https服务。</span><br><span class="line"></span><br><span class="line">首先，查官方文档：</span><br><span class="line"></span><br><span class="line">&gt; [Image Requests - Gravatar - A Globally Recognized Avatar](http://en.gravatar.com/site/implement/images/)</span><br><span class="line">&gt;</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br><span class="line">&gt; **Combining Parameters**</span><br><span class="line">&gt; You may combine any and all of the above parameters to produce more complex/refined requests. For example, this URL will request a 200px by 200px Gravatar rated G or PG, defaulting to a 404 response (no image) if there is not one associated with the requested email hash:</span><br><span class="line">&gt;</span><br><span class="line">&gt; **`https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50?s=200&amp;r=pg&amp;d=404`**</span><br><span class="line">&gt;</span><br><span class="line">&gt; **Secure Requests**</span><br><span class="line">&gt; As you may have noticed, all of the above example URLs start with HTTPS. You don\&#x27;t need to do anything special to load Gravatars on a secure page, just make sure your Gravatar URLs start with \&#x27;https\&#x27; (or you can use the \&#x27;protocol-agnostic\&#x27; approach of starting the URLs with \&#x27;//\&#x27; which will automatically use \&#x27;https:\&#x27; on a secure page, or \&#x27;http:\&#x27; on an insecure one).</span><br><span class="line"></span><br><span class="line">源代码修改过程就略去了，总之，一番测试和修改后，实现了全站HTTPS安全加密。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">## 4  更进一步——http强制跳转https</span><br><span class="line"></span><br><span class="line">https功能实现，但需要手动指定https访问，显然，体验还不够完美。</span><br><span class="line"></span><br><span class="line">如果能实现http访问自动跳转到https呢？</span><br><span class="line"></span><br><span class="line">### 4.1  原理</span><br><span class="line"></span><br><span class="line">- 技术原理：Apache 强大的地址重写（rewrite）技术。</span><br><span class="line"></span><br><span class="line">### 4.2  开启Apache地址重写模块</span><br><span class="line"></span><br><span class="line">首先，开启Apache的地址重写模块：</span><br><span class="line"></span><br><span class="line">- **`sudo a2enmode rewrite`**</span><br><span class="line"></span><br><span class="line">### 4.3  配置apache2.conf文件</span><br><span class="line"></span><br><span class="line">配置主配置文件，apache2.conf</span><br><span class="line"></span><br><span class="line">- **`sudo vim /etc/apache2/apache2.conf`**</span><br><span class="line"></span><br><span class="line">准许网站目录地址重写：</span><br><span class="line"></span><br><span class="line">- ```apacheconf</span><br><span class="line">  # Sets the default security model of the Apache2 HTTPD server. It does</span><br><span class="line">  # not allow access to the root filesystem outside of /usr/share and /var/www.</span><br><span class="line">  # The former is used by web applications packaged in Debian,</span><br><span class="line">  # the latter may be used for local directories served by the web server. If</span><br><span class="line">  # your system is serving content from a sub-directory in /srv you must allow</span><br><span class="line">  # access here, or in any related virtual host.</span><br><span class="line">  &lt;Directory /&gt;</span><br><span class="line">          Options FollowSymLinks</span><br><span class="line">          AllowOverride None</span><br><span class="line">          Require all denied</span><br><span class="line">  &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">  &lt;Directory /usr/share&gt;</span><br><span class="line">          AllowOverride None</span><br><span class="line">          Require all granted</span><br><span class="line">  &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">  &lt;Directory /var/www/&gt;</span><br><span class="line">          Options Indexes FollowSymLinks</span><br><span class="line">          AllowOverride All</span><br><span class="line">          Require all granted</span><br><span class="line">  &lt;/Directory&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>将目标路径 AllowOverride设为ALL。</p></li></ul><h3 id="配置.htaccess文件">4.4 配置.htaccess文件</h3><p>然后在需要跳转的网站根目录，也就是80端口的网站根目录/var/www/html下创建一个.htaccess文件，如果目录下已经有.htaccess文件，则用vi或者其他编辑器打开，在最下面添加写入如下语句即可</p><figure class="highlight apacheconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">RewriteEngine</span> <span class="literal">on</span></span><br><span class="line"><span class="attribute">RewriteCond</span> <span class="variable">%&#123;HTTPS&#125;</span> !<span class="literal">on</span></span><br><span class="line"><span class="attribute">RewriteRule</span> ^.*$ https://<span class="variable">%&#123;SERVER_NAME&#125;</span><span class="variable">%&#123;REQUEST_URI&#125;</span><span class="meta"> [L,R]</span></span><br></pre></td></tr></table></figure><ul><li>注意：网上相关文章中，在我的服务器环境中有以下问题：<ul><li><code>RewriteCond %&#123;SERVER_PORT&#125; !^443$</code><ul><li>此项无效，不会引起页面跳转。</li></ul></li><li><code>RewriteCond %&#123;HTTPS&#125; !=on</code><ul><li>语法错误，网站被forbidden。</li></ul></li><li>可能与系统环境和Apache版本有关。</li></ul></li></ul><h3 id="重启apache2服务">4.5 重启Apache2服务</h3><p>最后，重启Apache2服务，使安装的rewritemodule及对主配置文件的修改生效。</p><ul><li><strong><code>sudo service apache2 restart</code></strong></li><li>OK，完成到这一步后，站点就会自动跳转到https了。</li></ul><hr /><h2 id="参考链接">5 参考链接</h2><h3 id="ssl证书">5.1 SSL证书</h3><blockquote><p><a href="https://letsencrypt.org/">Let's Encrypt</a></p></blockquote><h3 id="服务器部署https">5.2 服务器部署https</h3><blockquote><p><ahref="https://www.qcloud.com/document/product/400/4143">证书安装指引 -腾讯云文档</a></p></blockquote><blockquote><p><ahref="http://www.linuxidc.com/Linux/2015-01/112117.htm">Ubuntu下Apache开启rewrite模块- Linux公社</a></p></blockquote><blockquote><p><ahref="http://blog.csdn.net/luhuisicnu/article/details/50402822">Apache配置http访问转https- CSDN</a></p></blockquote><blockquote><p><ahref="http://free.yes81.net/yes81/view-13440.html">Apache2.0实现https+Apachehttp访问转到https</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Apache </tag>
            
            <tag> HTTPS </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pptpd - 搭建基于Linux的VPN服务器</title>
      <link href="/posts/pptpd-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8ELinux%E7%9A%84VPN%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/posts/pptpd-%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8ELinux%E7%9A%84VPN%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>通过pptpd搭建基于Linux的VPN服务器。2019.9.28修订1。2019.10.17修订2。</p><span id="more"></span><h2 id="pptpd基本搭建">1 pptpd基本搭建</h2><h3 id="安装">1.1 安装</h3><ul><li><strong><code>sudo apt-get install pptpd</code></strong></li></ul><h3 id="配置文件">1.2 配置文件</h3><ul><li><p><strong><code>sudo vim /etc/pptpd.conf</code></strong></p><ul><li>配置 localip 和 remoteip 选项；</li><li>pptpd默认支持最多100个连接，建议remoteip范围≤100；</li></ul></li><li><p><strong><code>sudo vim /etc/ppp/pptpd-options</code></strong></p><ul><li><p>配置该VPN使用的DNS</p></li><li><p>设置ms-dns项</p><ul><li>``` ms-dns 119.29.29.29 ms-dns 114.114.114.114 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 有关加密设置的选项也在这个配置文件中</span><br><span class="line"></span><br><span class="line">- **`sudo vim /etc/ppp/chap-secrets`**</span><br><span class="line"></span><br><span class="line">  - 配置VPN账户、密码、协议、以及可指定分配IP</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    # Secrets for authentication using CHAP</span><br><span class="line">    # client        server  secret     IP addresses </span><br><span class="line">    user1     pptpd    123456    *</span><br></pre></td></tr></table></figure></li></ul></li><li><p>注意：</p><ul><li>用户名及密码无需单/双引号；</li><li>密码至少3位；</li><li>IP 填写 * 表示在remoteip范围内自由分配；</li></ul></li></ul></li></ul><h3 id="启动服务">1.3 启动服务</h3><ul><li><strong><code>sudo service pptpd start</code></strong><ul><li>启动vsftpd 服务</li></ul></li><li><strong><code>sudo service pptpd status</code></strong><ul><li>查看vsftpd 服务</li></ul></li><li><strong><code>sudo service pptpd restart</code></strong><ul><li>重启vsftpd 服务（用于修改配置文件后）</li></ul></li></ul><h3 id="vpn局域网建成">1.4 VPN局域网建成</h3><ul><li>完成到这一步时，应当是可以连接上服务器的（终端可以和服务器处于同一个局域网内），但不具备通过VPN服务器连接外网的能力。</li><li><strong>注意：</strong>经测试，苏大网环境下无法连接，应该是苏大网屏蔽了PPTPVPN。其它网络，可以连接，且PPTP VPN认证速度很快，几乎瞬间连上。</li></ul><hr /><h2 id="iptables-nat实现外网访问">2 iptables NAT实现外网访问</h2><h3 id="开启linux的ipv4报文转发">2.1 开启Linux的IPv4报文转发</h3><ul><li>Linux出于安全性考虑，默认关闭IPv4报文转发。</li><li><strong><code>sudo vim /etc/sysctl.conf</code></strong><ul><li>设置<code>net.ipv4.ip_forward=1</code>，开启Linux的IPv4报文转发</li></ul></li><li><strong><code>sudo sysctl -p</code></strong><ul><li>重新加载 sysctl.conf 配置文件，使修改生效</li></ul></li><li><strong><code>sudo service pptpd restart</code></strong><ul><li>重新启动pptpd服务，使修改生效。</li></ul></li></ul><h3 id="配置iptables">2.2 配置iptables</h3><blockquote><p>iptables/ip6tables — administration tool for IPv4/IPv6 packetfiltering and NAT</p><p>DESCRIPTION</p><p>Iptables and ip6tables are used to set up, maintain, and inspect thetables of IPv4 and IPv6 packet filter rules in the Linux kernel. Severaldifferent tables may be defined. Each table contains a number ofbuilt-in chains and may also contain user-defined chains.</p></blockquote><ul><li><strong><code>sudo apt-get install iptables</code></strong><ul><li>若无iptables，则先安装；</li></ul></li><li><strong><code>sudo iptables -t nat -A POSTROUTING -s 192.168.0.1/24 -o eth0 -j MASQUERADE</code></strong><ul><li>开启NAT转发</li><li>IP地址是之前配置好的 localip</li><li>eth0是能访问外网的网卡，根据具体服务器网络环境而定，可通过<strong><code>ifconfig</code></strong>查看<ul><li>腾讯云eth0既是内网网卡也是外网网卡，其内外网访问转发由腾讯云的网关处理。</li></ul></li><li><code>-j</code> 表示jumptarget，即如果遇到匹配上的网络数据包，因如何处理</li></ul></li><li>或通过<code>sudo iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to-source &lt;server外网IP&gt;</code></li><li><strong><code>sudo iptables-save -c &gt; /etc/ufw/iptables.save</code></strong><ul><li>保存设置</li></ul></li><li><strong><code>sudo iptables-restore -c /etc/ufw/iptables.save</code></strong><ul><li>使用修改过的配置重置iptables，可实现开机自动加载自定义配置</li><li>可用于修复/复原iptables，如输入的是一个文件，则依据该文件中的配置信息来配置iptables</li><li><code>-c</code> 表示counters，会重置报文即字节数计数器（restore thevalues of all packet and byte counters）</li></ul></li><li><strong><code>sudo service pptpd restart</code></strong><ul><li>可能需要重启下pptpd服务使修改生效</li></ul></li><li>如果错误输入了iptables规则，可以通过：<ul><li><code>iptables -nvL --line-number</code>检查规则所处的表及表内序号；</li><li><code>iptables -D &lt;TABLE&gt; &lt;NUM&gt;</code>删除（Delete）指定表的指定序号的规则。</li></ul></li></ul><h3 id="iptables-nat转发配置完成">2.3 iptables NAT转发配置完成</h3><ul><li>完成到这一步，连接到VPN服务器的终端应该是可以访问外网的。</li></ul><hr /><h2 id="常见问题">3 常见问题</h2><h3 id="无法连接到vpn">3.1 无法连接到VPN</h3><ul><li><strong>注意：</strong>经测试，苏大网环境下无法连接，应该是苏大网屏蔽了PPTPVPN。</li><li>但其它网络，经测试可以连接，且PPTPVPN认证速度很快，几乎瞬间连上。</li></ul><h3 id="windows防火墙拦截">3.2 Windows防火墙拦截</h3><ul><li>可搜索“pptp619”，即可查找有关连接pptp时619错误的资料，通常在Windows防火墙中放通1723端口数据出站即可。</li></ul><h3 id="iptables-forward未开启">3.3 iptables FORWARD未开启</h3><p>检查iptables的FORWARD功能有没有开启。</p><p><code>sudo iptables -nvL</code>，如果FORWARD的功能是ACCEPT则正常，否则请执行：</p><p><code>sudo iptables -P FORWARD ACCEPT</code></p><h3 id="一些网站能打开一些网站无法打开mtu默认过小">3.4“一些网站能打开，一些网站无法打开”（MTU默认过小）</h3><p>我发现<a href="https://www.baidu.com">百度</a>、<ahref="https://www.bilibili.com">哔哩哔哩</a>无法打开，而<ahref="https://cn.bing.com">必应</a>、<ahref="https://www.zhihu.com">知乎</a>却可以正常访问。经查，是默认MTU不足以应对如今部分网站的需求，MTU过小会导致高于MTU值的报文被丢弃。</p><p>通过以下命令对iptables进行设置。</p><blockquote><p><ahref="https://www.cnblogs.com/gaozhengwei/p/7101363.html">Ubuntu配置PPTP 服务器端</a></p><p>H. 设置MTU来确保过大的包不会被丢弃（这个可以不做）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -I FORWARD -s 192.168.0.0/24 -p tcp --syn -i ppp+ -j TCPMSS --set-mss 1300</span><br></pre></td></tr></table></figure></blockquote><h3 id="windows10无法正常连接或登录">3.5Windows10无法正常连接或登录</h3><p>Windows10连接时，系统提示：“<strong>不能建立到远程计算机的连接。你可能需要更改此连接的网络设置。</strong>”</p><p>而其它设备，如：Android设备，连接则完全正常。</p><p>使用Windows10的重置网络也无法解决问题。</p><blockquote><p><ahref="https://www.jianshu.com/p/52764540d058">【常见问题】不能建立到远程计算机的连接。你可能需要更改此连接的网络设置。</a></p><p>选择设备管理器</p><p>选择网络适配器</p><p>网络设配器中WAN开头的右键点击卸载设备</p><p>将所有的都写在掉</p><p>然后右键网络适配器点击扫描检测硬件改动</p><p>等WAN恢复回来</p></blockquote><p>解决方法：</p><ol type="1"><li>打开Windows的设备管理器；</li><li>找到“网络适配器”；</li><li>通过右键选择“卸载设备”，把以WANMiniport开头的虚拟设备全部卸载；</li><li>选中并右键“网络适配”，点击“扫描检测硬件改动”；</li><li>等WAN Miniport系列恢复后即可正常连接。</li></ol><hr /><h2 id="参考链接">4 参考链接</h2><blockquote><p><ahref="http://bbs.qcloud.com/thread-11732-1-1.html">如何使用ubuntu搭建pptpvpn服务器 - 腾讯云论坛</a></p></blockquote><blockquote><p><ahref="http://pptpclient.sourceforge.net/howto-diagnosis.phtm"><strong>PPTPClient</strong> Diagnosis HOWTO</a></p><p>英文，PPTP问题诊断大全</p></blockquote><blockquote><p><ahref="https://www.cnblogs.com/gaozhengwei/p/7101363.html">Ubuntu配置PPTP 服务器端</a></p><p>H. 设置MTU来确保过大的包不会被丢弃（这个可以不做）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -I FORWARD -s 192.168.0.0/24 -p tcp --syn -i ppp+ -j TCPMSS --set-mss 1300`</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><ahref="http://www.7var.com/detail.php?id=129">Linux下安装配置pptpd搭建vpn服务器，组建局域网实现内网互连互通</a></p><p><strong>5、检查iptables的FORWARD功能有没有开启</strong></p><p>iptables -L -n，如果FORWARD的功能是ACCEPT则正常，否则请执行</p><p>iptables -P FORWARD ACCEPT</p></blockquote><blockquote><p><ahref="https://www.jianshu.com/p/52764540d058">【常见问题】不能建立到远程计算机的连接。你可能需要更改此连接的网络设置。</a></p><p>选择设备管理器</p><p>选择网络适配器</p><p>网络设配器中WAN开头的右键点击卸载设备</p><p>将所有的都写在掉</p><p>然后右键网络适配器点击扫描检测硬件改动</p><p>等WAN恢复回来</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Deploy </tag>
            
            <tag> Troubleshooting </tag>
            
            <tag> Linux </tag>
            
            <tag> PPTP </tag>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vsftpd - Linux FTP搭建及加密功能实现</title>
      <link href="/posts/vsftpd-Linux-FTP%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%8A%A0%E5%AF%86%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
      <url>/posts/vsftpd-Linux-FTP%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%8A%A0%E5%AF%86%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>通过vsftpd搭建基于Linux的FTP服务器，以及SSL/TLS加密功能实现</p><span id="more"></span><h1 id="vsftpd---linux-ftp搭建及加密功能实现">vsftpd - LinuxFTP搭建及加密功能实现</h1><h2 id="vsftpd基本配置">1 vsftpd基本配置</h2><h3 id="安装">1.1 安装</h3><ul><li><strong><code>sudo apt-get install vsftpd</code></strong></li></ul><h3 id="启动服务">1.2 启动服务</h3><ul><li><strong><code>sudo service vsftpd start</code></strong><ul><li>启动vsftpd 服务</li></ul></li><li><strong><code>sudo service vsftpd status</code></strong><ul><li>查看vsftpd 服务</li></ul></li><li><strong><code>sudo service vsftpd restart</code></strong><ul><li>重启vsftpd 服务（用于修改配置文件后）</li></ul></li></ul><h3 id="配置文件">1.3 配置文件</h3><ul><li><code>/etc/vsftpd.conf</code><ul><li>默认不允许写，不允许匿名用户登陆</li><li>开启write_enable即可上传文件。</li></ul></li></ul><hr /><h2 id="vsftpd的加密技术">2 vsftpd的加密技术</h2><h3 id="生成密钥">2.1 生成密钥</h3><ul><li>借助openssl命令生成密钥</li><li><strong><code>openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout /etc/vsftpd/vsftpd.pem -out /etc/vsftpd/vsftpd.pem</code></strong><ul><li>可能需要手动创建存放目录</li><li>修改<code>/etc</code>目录需要sudo权限</li><li>经测试，颁发者一项建议输入域名或IP，否则FTP连接软件（FlashFXP）会警告颁发者和域名（或IP）不符。</li></ul></li></ul><h3 id="配置vsftpd参数">2.2 配置vsftpd参数</h3><ul><li><p><strong><code>sudo vim /etc/vsftpd.conf</code></strong></p></li><li><p>一些SSL的选项及参数，供参考：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ssl_enable=yes/no             //是否启用 SSL,默认为no</span><br><span class="line"></span><br><span class="line">allow_anon_ssl=yes/no         //是否允许匿名用户使用SSL,默认为no</span><br><span class="line"></span><br><span class="line">rsa_cert_file=/path/to/file       //rsa证书的位置</span><br><span class="line">dsa_cert_file=/path/to/file      //dsa证书的位置</span><br><span class="line"></span><br><span class="line">force_local_logins_ssl=yes/no    //非匿名用户登陆时是否加密,默认为yes</span><br><span class="line">force_local_data_ssl=yes/no     //非匿名用户传输数据时是否加密,默认为yes</span><br><span class="line"></span><br><span class="line">force_anon_logins_ssl=yes/no    //匿名用户登录时是否加密,默认为no</span><br><span class="line">force_anon_data_ssl=yes/no     //匿名用户数据传输时是否加密,默认为no</span><br><span class="line"></span><br><span class="line">ssl_sslv2=yes/no               //是否激活sslv2加密,默认no</span><br><span class="line">ssl_sslv3=yes/no                //是否激活sslv3加密,默认no</span><br><span class="line">ssl_tlsv1=yes/no                //是否激活tls v1加密,默认yes</span><br><span class="line"></span><br><span class="line">ssl_ciphers=加密方法            //默认是DES-CBC3-SHA</span><br></pre></td></tr></table></figure><ul><li>若实现TLS加密，可在配置文件中添加下面这几个参数：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ssl_enable=YES</span><br><span class="line">allow_anon_ssl=NO</span><br><span class="line">force_local_data_ssl=YES</span><br><span class="line">force_local_logins_ssl=YES</span><br><span class="line">ssl_tlsv1=YES</span><br><span class="line">ssl_sslv2=NO</span><br><span class="line">ssl_sslv3=NO</span><br><span class="line">rsa_cert_file=/etc/vsftpd/vsftpd.pem</span><br></pre></td></tr></table></figure><ul><li><p>重启vsftpd</p><ul><li><strong><code>sudo service vsftpd restart</code></strong></li></ul></li></ul><h3 id="准备相关的ftp软件">2.3 准备相关的FTP软件</h3><ul><li>Windows10,Ubuntu等的文件管理器，chrome等浏览器默认均不支持加密的FTP协议；</li><li>软件如：FlashFXP 可访问加密FTP，首次连接可保存密钥。</li></ul><hr /><h2 id="参考链接">3 参考链接</h2><blockquote><p><ahref="http://ju.outofmemory.cn/entry/98014">让vsftpd支持加密传输</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Deploy </tag>
            
            <tag> Linux </tag>
            
            <tag> vsftp </tag>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Markdown</title>
      <link href="/posts/%E5%88%9D%E8%AF%86Markdown/"/>
      <url>/posts/%E5%88%9D%E8%AF%86Markdown/</url>
      
        <content type="html"><![CDATA[<p>初学Markdown，一点记录。</p><p>2019.4.1 修订：增加Markdown的表格语法</p><span id="more"></span><h1 id="初识markdown">初识Markdown</h1><h2 id="markdown基本语法">1 Markdown基本语法</h2><h3 id="标题">1.1 标题（#）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br><span class="line"></span><br><span class="line">从#到######，标题共6级。</span><br></pre></td></tr></table></figure><h3 id="列表n.或-">1.2 列表（n.，*或-）</h3><p>有序列表（n.）</p><ol type="1"><li>item1</li><li>item2</li><li>item3</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有序列表（n.）</span><br><span class="line"><span class="bullet"> 1.</span> item1</span><br><span class="line"><span class="bullet"> 2.</span> item2</span><br><span class="line"><span class="bullet"> 3.</span> item3</span><br></pre></td></tr></table></figure><p>无序列表（*或-）</p><ul><li>item1</li><li>item2</li><li>item3</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">无序列表（<span class="emphasis">*或-）</span></span><br><span class="line"><span class="emphasis"> *</span> item1</span><br><span class="line"><span class="bullet"> *</span> item2</span><br><span class="line"><span class="bullet"> *</span> item3</span><br></pre></td></tr></table></figure><h3 id="引用">1.3 引用（&gt;）</h3><blockquote><p>引用1</p></blockquote><blockquote><p>引用2 行1 引用2 行2</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 引用1</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 引用2 行1</span></span><br><span class="line"><span class="quote">&gt; 引用2 行2</span></span><br></pre></td></tr></table></figure><h3 id="链接caption">1.4 链接（<a href="url">caption</a>）</h3><p><a href="http://typecho.org/">example_link</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">example_link</span>](<span class="link">http://typecho.org/</span>)</span><br></pre></td></tr></table></figure><h3 id="图片caption">1.5 图片（<img src="url" alt="caption" /> ）</h3><figure><img src="http://typecho.org/usr/themes/bluecode/img/screenshot/st1.png"alt="example_img" /><figcaption aria-hidden="true">example_img</figcaption></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">example_img</span>](<span class="link">http://typecho.org/usr/themes/bluecode/img/screenshot/st1.png</span>)</span><br></pre></td></tr></table></figure><h3 id="代码段4个空格-或-前后包括">1.6 代码段（4个空格 或前后```包括）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br></pre></td></tr></table></figure><hr /><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># coding: utf-8</span></span><br><span class="line">import requests</span><br><span class="line">import json</span><br></pre></td></tr></table></figure><p>或 ​</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">​<span class="code">```python</span></span><br><span class="line"><span class="code"># coding: utf-8</span></span><br><span class="line"><span class="code">import requests</span></span><br><span class="line"><span class="code">import json</span></span><br><span class="line"><span class="code">​```</span></span><br></pre></td></tr></table></figure><h3 id="高亮标记反引号括起">1.7 高亮标记（反引号`括起）</h3><p><code>tag</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`tag`</span></span><br></pre></td></tr></table></figure><h3 id="字体控制">1.8 字体控制</h3><ul><li>加粗 <strong>加粗</strong></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**加粗**</span></span><br></pre></td></tr></table></figure><ul><li>斜体 <em>斜体</em></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span></span><br></pre></td></tr></table></figure><h3 id="分隔线">1.9 分隔线</h3><p>三个及以上的*或_即为分隔线</p><hr /><p>减号-亦可，但为了区分标题-，需要先换行</p><hr /><p>*或_为宜，简单无歧义</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">三个及以上的<span class="emphasis">*或_即为分隔线</span></span><br><span class="line"><span class="emphasis"><span class="strong">***</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">减号-亦可，但为了区分标题-，需要先换行</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">___</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">*或_为宜，简单无歧义</span></span></span><br></pre></td></tr></table></figure><h3 id="表格">1.10 表格</h3><table><thead><tr class="header"><th>一个普通标题</th><th>一个普通标题</th><th>一个普通标题</th></tr></thead><tbody><tr class="odd"><td>短文本</td><td>中等文本</td><td>稍微长一点的文本</td></tr><tr class="even"><td>稍微长一点的文本</td><td>短文本</td><td>中等文本</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 一个普通标题 | 一个普通标题 | 一个普通标题 |</span><br><span class="line">| ------ | ------ | ------ |</span><br><span class="line">| 短文本 | 中等文本 | 稍微长一点的文本 |</span><br><span class="line">| 稍微长一点的文本 | 短文本 | 中等文本 |</span><br></pre></td></tr></table></figure><p>调节对齐方式：</p><table><thead><tr class="header"><th style="text-align: left;">左对齐标题</th><th style="text-align: right;">右对齐标题</th><th style="text-align: center;">居中对齐标题</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">短文本</td><td style="text-align: right;">中等文本</td><td style="text-align: center;">稍微长一点的文本</td></tr><tr class="even"><td style="text-align: left;">稍微长一点的文本</td><td style="text-align: right;">短文本</td><td style="text-align: center;">中等文本</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐标题 | 右对齐标题 | 居中对齐标题 |</span><br><span class="line">| :------| ------: | :------: |</span><br><span class="line">| 短文本 | 中等文本 | 稍微长一点的文本 |</span><br><span class="line">| 稍微长一点的文本 | 短文本 | 中等文本 |</span><br></pre></td></tr></table></figure><h2 id="相关链接">2 相关链接</h2><h3 id="知识网站">2.1 知识网站</h3><ul><li><a href="http://www.appinn.com/markdown/">Markdown 语法说明(简体中文版)</a></li><li><a href="http://sspai.com/25137/">认识与入门 Markdown -少数派</a></li></ul><h3 id="支持markdown的编辑软件">2.2 支持Markdown的编辑软件</h3><ul><li><a href="http://www.markdownpad.com/">MarkdownPad</a></li><li><a href="http://code52.org/DownmarkerWPF/">MarkPad</a></li></ul><h3 id="在线web平台">2.3 在线Web平台</h3><ul><li><a href="http://mahua.jser.me/">MaHua</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu Server中文编码问题解决</title>
      <link href="/posts/Ubuntu-Server%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/posts/Ubuntu-Server%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>解决Ubuntu Server环境下，中文编码缺失、乱码等问题。</p><span id="more"></span><h2 id="ubuntu-server中文编码问题解决">UbuntuServer中文编码问题解决</h2><h3id="一安装控制台的中文字符渲染器-zhcon">一、安装控制台的中文字符渲染器zhcon</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache search zhcon</span><br></pre></td></tr></table></figure><p>zhcon - Fast console CJK system using FrameBuffer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zhcon</span><br></pre></td></tr></table></figure><h3 id="二检查系统环境配置情况">二、检查系统环境配置情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/environment</span><br></pre></td></tr></table></figure><p>确保在ubuntu中环境设置中，有以下两行</p><blockquote><p>LANG="zh_CN.UTF-8" LANGUAGE="zh_CN:zh:en_US:en"</p></blockquote><p>注：vim操作，按insert键进入插入模式；写入后，按esc键退回只读模式，输入:wq 保存并退出；（Write and Quit）</p><h3 id="三修改locale文件">三、修改locale文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /var/lib/locales/supported.d/local</span><br></pre></td></tr></table></figure><p>添加以下两行：</p><blockquote><p>zh_CN.UTF-8 UTF-8 en_US.UTF-8 UTF-8</p></blockquote><p>注：UTF-8与GBK，GB2312，ASCII均兼容，且字符集覆盖面极广，具有优秀的普适性。</p><p>保存并退出（:wq）</p><h3 id="四重置系统locale">四、重置系统locale</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><p>途中遇到设置过程直接继续即可，默认语言可设置为zh_CN.UTF-8</p><p>结束后，重启系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>完成后，即可发现，shell或console可显示中文了！</p><p>读了一篇MintLinux的解决方案，改了改也适用于Ubnutu，原参考链接如下：</p><h2 id="链接">链接：</h2><blockquote><p><a href="https://my.oschina.net/pqiankui/blog/168191">MintLinux终端中文显示乱码问题的解决 pqiankui(oschina)</a> <ahref="https://segmentfault.com/q/1010000002749347">linux -终端中文显示问号怎么解决？ segmentfault</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Troubleshooting </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> zhcon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微软牛津计划认知API调用（Python网络编程）</title>
      <link href="/posts/%E5%BE%AE%E8%BD%AF%E7%89%9B%E6%B4%A5%E8%AE%A1%E5%88%92%E8%AE%A4%E7%9F%A5API%E8%B0%83%E7%94%A8%EF%BC%88Python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%89/"/>
      <url>/posts/%E5%BE%AE%E8%BD%AF%E7%89%9B%E6%B4%A5%E8%AE%A1%E5%88%92%E8%AE%A4%E7%9F%A5API%E8%B0%83%E7%94%A8%EF%BC%88Python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>参加penta-Hackathon时，摸索了下通过Python网络编程调用微软认知服务的API（以人脸情绪识别为例）</p><span id="more"></span><p>首先，需要注册微软账户并开通API并获取认知服务密钥! <imgsrc="https://heary.cn/usr/uploads/2017/01/4003097020.png"alt="key.png" /></p><p>编程部分： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">    </span><br><span class="line">myheaders = &#123;Content-<span class="type">Type</span><span class="string">&#x27;: &#x27;</span>application/json<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">                 &#x27;</span>Host<span class="string">&#x27;: &#x27;</span>api.projectoxford.ai<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">                 &#x27;</span>Ocp-Apim-Subscription-Key<span class="string">&#x27;: &#x27;</span>********your key here********<span class="string">&#x27;&#125;</span></span><br><span class="line"><span class="string">req = &#123;&#x27;</span>url<span class="string">&#x27;: &#x27;</span>https://portalstoragewuprod2.blob.core.chinacloudapi.cn/emotion/recognition2-thumbnail.jpg<span class="string">&#x27;&#125;</span></span><br><span class="line"><span class="string">r = requests.post(&quot;https://api.projectoxford.ai/emotion/v1.0/recognize&quot;, json = req, headers = myheaders)</span></span><br><span class="line"><span class="string"># 注意：POST报文数据段必须为json=***, 其余body, data之类均不可</span></span><br></pre></td></tr></table></figure></p><p>我使用了requests包的API，如未安装，可使用pip安装：</p><pre><code>pip install requests</code></pre><p>程序运行结果如图所示：</p><figure><img src="https://heary.cn/usr/uploads/2017/01/3221880336.png&#39;"alt="result.png" /><figcaption aria-hidden="true">result.png</figcaption></figure><p>可得到面部位置以及情绪隶属度的八维度集合。</p><blockquote><p>Analysing image...https://portalstoragewuprod2.blob.core.chinacloudapi.cn/emotion/recognition2-thumbnail.jpgresponse:[{"faceRectangle":{"height":61,"left":50,"top":54,"width":61},"scores":{"anger":3.891969E-06,"contempt":4.409651E-05,"disgust":1.34714737E-05,"fear":0.00045348765,"happiness":0.107304245,"neutral":0.00419454137,"sadness":4.36249138E-06,"surprise":0.8879819}}]Judgement: surprise (relevance: 0.8879819 )</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> API </tag>
            
            <tag> Microsoft </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>运行时错误检查（RTC, Run-Time Error Checks）</title>
      <link href="/posts/%E8%BF%90%E8%A1%8C%E6%97%B6%E9%94%99%E8%AF%AF%E6%A3%80%E6%9F%A5%EF%BC%88RTC-Run-Time-Error-Checks%EF%BC%89/"/>
      <url>/posts/%E8%BF%90%E8%A1%8C%E6%97%B6%E9%94%99%E8%AF%AF%E6%A3%80%E6%9F%A5%EF%BC%88RTC-Run-Time-Error-Checks%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>RTC就是Run-Time ErrorChecks（运行时错误检查），是在调试运行时帮助发现问题的一个机制</p><span id="more"></span><h2 id="运行时错误检查rtc-run-time-error-checks">运行时错误检查（RTC,Run-Time Error Checks）</h2><blockquote><p>作者：沈家赟 链接：<ahref="https://www.zhihu.com/question/34032665/answer/105163354">https://www.zhihu.com/question/34032665/answer/105163354</a>来源：知乎 著作权归作者所有，转载请联系作者获得授权。</p></blockquote><p>RTC就是Run-Time ErrorChecks（运行时错误检查），是在调试运行时帮助发现问题的一个机制，它生成的目标文件适合调试，尚在对代码本身的查错调试阶段，当然与编译优化矛盾。它生成的是适用于debug的目标程序，相对于release版本性能会低一些（MSDN文档的说法是，最多会比禁用编译优化(/Od)慢5%）</p><blockquote><p>If you compile your program at the command line using any of the /RTCcompiler options, any pragma optimize instructions in your code willsilently fail. This is because run-time error checks are not valid in arelease (optimized) build.</p></blockquote><p>如果在命令行上使用任一 /RTC 编译器选项编译程序，代码中的任何杂注optimize指令将失败而不给出任何提示。这是因为运行时错误检查在发布(优化)版本中无效。</p><p>所以，如果你需要生成编译优化的目标代码，可以将 基本运行时检查 设为默认值。</p><figure><img src="/usr/uploads/2017/01/4015811049.png"alt="rtc_check_vs2010.png" /><figcaption aria-hidden="true">rtc_check_vs2010.png</figcaption></figure><h2 id="附">附：</h2><p>MSDN文档链接 <ahref="https://msdn.microsoft.com/zh-cn/library/8wtf2dfz(v=vs.140).aspx&#39;">/RTC（运行时错误检查）</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Visual Studio </tag>
            
            <tag> Trobuleshooting </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
